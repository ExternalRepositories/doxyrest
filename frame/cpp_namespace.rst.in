%{
local argArray = table.pack (...)
local namespace = argArray [1]

if namespace.m_name then
}
.. _doxid-$(namespace.m_id):

$(getTitle ("namespace " .. namespace.m_name, "="))

%{
end -- if
}
.. toctree::
	:titlesonly:
	:maxdepth: 1

$(getCompoundTocTree (namespace, "\t"))

%{
if #namespace.m_namespaceArray > 0 then
}
Sub-Namespaces
--------------

%{
	for i = 1, #namespace.m_namespaceArray do
		local item = namespace.m_namespaceArray [i]
		local targetFileName = getItemFileName (item, namespace)

		generateFile (targetFileName, "cpp_namespace.rst.in", item)
}
| :ref:`namespace $(item.m_name) <doxid-$(item.m_id)>`
%{
	end -- for
}

$(#namespace.m_namespaceArray) total namespaces

%{
end -- if

if #namespace.m_typedefArray > 0 then
}
Typedefs
--------

%{
	for i = 1, #namespace.m_typedefArray do
		local item = namespace.m_typedefArray [i]
}
| typedef $(getLinkedTextString (item.m_type)) $(item.m_name)
%{
	end -- for
}

$(#namespace.m_typedefArray) total typedefs

%{
end -- if

if #namespace.m_enumArray > 0 then
}
Enums
-----

%{
	for i = 1, #namespace.m_enumArray do
		local item = namespace.m_enumArray [i]
		local targetFileName = getItemFileName (item, namespace)

		generateFile (targetFileName, "cpp_enum.rst.in", item)
}
| :ref:`enum $(item.m_name) <doxid-$(item.m_id)>`
%{
	end -- for
}

$(#namespace.m_enumArray) total enums

%{
end -- if

if #namespace.m_structArray > 0 then
}
Structs
-------

%{
	for i = 1, #namespace.m_structArray do
		local item = namespace.m_structArray [i]
		local targetFileName = getItemFileName (item, namespace)

		generateFile (targetFileName, "cpp_class.rst.in", item)
}
| :ref:`struct $(getItemName (item)) <doxid-$(item.m_id)>`
%{
	end -- for
}

$(#namespace.m_structArray) total structs

%{
end -- if

if #namespace.m_unionArray > 0 then
}
Unions
------

%{
	for i = 1, #namespace.m_unionArray do
		local item = namespace.m_unionArray [i]
		local targetFileName = getItemFileName (item, namespace)

		generateFile (targetFileName, "cpp_class.rst.in", item)
}
| :ref:`union $(getItemName (item)) <doxid-$(item.m_id)>`
%{
	end -- for
}

$(#namespace.m_structArray) total unions

%{
end -- if

if #namespace.m_classArray > 0 then
}
Classes
-------

%{
	for i = 1, #namespace.m_classArray do
		local item = namespace.m_classArray [i]
		local targetFileName = getItemFileName (item, namespace)

		generateFile (targetFileName, "cpp_class.rst.in", item)
}
| :ref:`class $(getItemName (item)) <doxid-$(item.m_id)>`
%{
	end -- for
}

$(#namespace.m_classArray) total classes

%{
end -- if

if #namespace.m_variableArray > 0 then
}
Variables
---------

%{
	for i = 1, #namespace.m_variableArray do
		local item = namespace.m_variableArray [i]
}

.. code-block:: c++

	$(getLinkedTextString (item.m_type, true)) $(item.m_name)

%{
	end -- for
}

$(#namespace.m_variableArray) total variables

%{
end -- if

if #namespace.m_functionArray > 0 then
}
Functions
---------

%{
	for i = 1, #namespace.m_functionArray do
		local item = namespace.m_functionArray [i]
}

.. code-block:: c++

	$(getLinkedTextString (item.m_returnType, true))
	$(getItemName (item)) $(getFunctionParamArrayString (item.m_paramArray, true))

%{
	end -- for
}
$(#namespace.m_functionArray) total functions
%{
end -- if
}
