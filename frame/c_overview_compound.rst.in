%{
--------------------------------------------------------------------------------
--
--  This file is part of the Doxyrest toolkit.
--
--  Doxyrest is distributed under the MIT license.
--  For details see accompanying license.txt file,
--  the public copy of which is also available at:
--  http://tibbo.com/downloads/archive/doxyrest/license.txt
--
--------------------------------------------------------------------------------

local argArray = table.pack (...)
local compound = argArray [1]
local variableSectionName = string.lower (argArray [2])
local functionSectionName = string.lower (argArray [3])

local codeBlockClass

if compound.m_compoundKind == "base-compound" then
	codeBlockClass = "inherited-code-block"
else
	codeBlockClass = "overview-code-block"

	emit (getItemArrayOverviewRefTargetString (compound.m_typedefArray))
	emit (getEnumArrayOverviewRefTargetString (compound.m_enumArray))
	emit (getItemArrayOverviewRefTargetString (compound.m_variableArray))
	emit (getItemArrayOverviewRefTargetString (compound.m_propertyArray))
	emit (getItemArrayOverviewRefTargetString (compound.m_eventArray))
	emit (getItemArrayOverviewRefTargetString (compound.m_constructorArray))
	emit (getItemArrayOverviewRefTargetString (compound.m_functionArray))
	emit (getItemArrayOverviewRefTargetString (compound.m_aliasArray))
	emit (getItemArrayOverviewRefTargetString (compound.m_defineArray))

	if compound.m_destructor and not hasItemRefTarget (compound.m_destructor) then
		emit (getItemRefTargetString (compound.m_destructor))
	end
end
}
.. ref-code-block:: $g_language
	:class: $codeBlockClass

%{
if compound.m_baseTypeArray and #compound.m_baseTypeArray > 0 or
	compound.m_derivedTypeArray and #compound.m_derivedTypeArray > 0 then

	includeFile ("c_overview_inheritance.rst.in", compound)
	emit ("\n")
end -- if

if #compound.m_namespaceArray > 0 then
	includeFile ("c_overview_namespaces.rst.in", compound)
	emit ("\n")
end -- if

if #compound.m_typedefArray > 0 then
	includeFile ("c_overview_typedefs.rst.in", compound)
	emit ("\n")
end -- if

if #compound.m_enumArray > 0 then
	includeFile ("c_overview_enums.rst.in", compound)
	emit ("\n")
end -- if

if #compound.m_structArray > 0 then
	includeFile ("c_overview_classes.rst.in", compound, compound.m_structArray, "structs")
	emit ("\n")
end -- if

if #compound.m_unionArray > 0 then
	includeFile ("c_overview_classes.rst.in", compound, compound.m_unionArray, "unions")
	emit ("\n")
end -- if

if #compound.m_interfaceArray > 0 then
	includeFile ("c_overview_classes.rst.in", compound, compound.m_interfaceArray, "interfaces")
	emit ("\n")
end -- if

if #compound.m_exceptionArray > 0 then
	includeFile ("c_overview_classes.rst.in", compound, compound.m_exceptionArray, "exceptions")
	emit ("\n")
end -- if

if #compound.m_classArray > 0 then
	includeFile ("c_overview_classes.rst.in", compound, compound.m_classArray, "classes")
	emit ("\n")
end -- if

if #compound.m_singletonArray > 0 then
	includeFile ("c_overview_classes.rst.in", compound, compound.m_singletonArray, "singletons")
	emit ("\n")
end -- if

if #compound.m_serviceArray > 0 then
	includeFile ("c_overview_classes.rst.in", compound, compound.m_serviceArray, "services")
	emit ("\n")
end -- if

if #compound.m_variableArray > 0 then
	includeFile ("c_overview_variables.rst.in", compound, variableSectionName)
	emit ("\n")
end -- if

if #compound.m_propertyArray > 0 then
	includeFile ("c_overview_properties.rst.in", compound)
	emit ("\n")
end -- if

if #compound.m_eventArray > 0 then
	includeFile ("c_overview_events.rst.in", compound)
	emit ("\n")
end -- if

if #compound.m_constructorArray > 0 or (g_includeDestructors and compound.m_destructor) then
	includeFile ("c_overview_construction.rst.in", compound)
	emit ("\n")
end -- if

if #compound.m_functionArray > 0 then
	includeFile ("c_overview_functions.rst.in", compound, functionSectionName)
	emit ("\n")
end

if #compound.m_aliasArray > 0 then
	includeFile ("c_overview_aliases.rst.in", compound)
	emit ("\n")
end -- if

if #compound.m_defineArray > 0 then
	includeFile ("c_overview_defines.rst.in", compound)
	emit ("\n")
end -- if

if compound.m_baseCompound then
}
Inherited Members
-----------------

%{
	-- always link inherited members (even if no documentation)

	local prevHasItemRefTarget = hasItemRefTarget
	hasItemRefTarget = function (item)
		return true
	end

	includeFile ("c_overview_compound.rst.in", compound.m_baseCompound, variableSectionName, functionSectionName)

	hasItemRefTarget = prevHasItemRefTarget
end
}
