%{
local argArray = table.pack (...)
local compound = argArray [1]
local namespaceSectionName = argArray [2]
local variableSectionName = argArray [3]
local functionSectionName = argArray [4]
}
%{
if #compound.m_namespaceArray > 0 then
}
$(getTitle (namespaceSectionName, "-"))

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_namespaceArray) total $(string.lower (namespaceSectionName))

%{
	end -- if
}
.. ref-code-block:: none

%{
	for i = 1, #compound.m_namespaceArray do
		local item = compound.m_namespaceArray [i]
		local targetFileName = getItemFileName (item, compound)

		generateFile (targetFileName, "c_namespace.rst.in", item)
}
	namespace :ref:`$(item.m_name)<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_typedefArray > 0 then
}
Typedefs
--------

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_typedefArray) total typedefs

%{
	end -- if
}
.. ref-code-block:: none

%{
	for i = 1, #compound.m_typedefArray do
		local item = compound.m_typedefArray [i]
}
	typedef $(getLinkedTextString (item.m_type)) $(item.m_name)
%{
	end -- for
}

%{
end -- if

if #compound.m_enumArray > 0 then
}
Enums
-----

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_enumArray) total enums

%{
	end -- if
}
.. ref-code-block:: none

%{
	for i = 1, #compound.m_enumArray do
		local item = compound.m_enumArray [i]
		local targetFileName = getItemFileName (item, compound)

		generateFile (targetFileName, "c_enum.rst.in", item)
}
	enum :ref:`$(item.m_name)<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_structArray > 0 then
}
Structs
-------

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_structArray) total structs

%{
	end -- if
}
.. ref-code-block:: none

%{
	for i = 1, #compound.m_structArray do
		local item = compound.m_structArray [i]
		local targetFileName = getItemFileName (item, compound)

		generateFile (targetFileName, "c_class.rst.in", item)
}
	struct :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_unionArray > 0 then
}
Unions
------

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_structArray) total unions

%{
	end -- if
}
.. ref-code-block:: none

%{
	for i = 1, #compound.m_unionArray do
		local item = compound.m_unionArray [i]
		local targetFileName = getItemFileName (item, compound)

		generateFile (targetFileName, "c_class.rst.in", item)
}
	union :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_classArray > 0 then
}
Classes
-------

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_classArray) total classes

%{
	end -- if
}
.. ref-code-block:: none

%{
	for i = 1, #compound.m_classArray do
		local item = compound.m_classArray [i]
		local targetFileName = getItemFileName (item, compound)

		generateFile (targetFileName, "c_class.rst.in", item)
}
	class :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_variableArray > 0 then
}
$(getTitle (variableSectionName, "-"))

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_variableArray) total $(string.lower (variableSectionName))

%{
	end -- if
}
.. ref-code-block:: none

%{
	for i = 1, #compound.m_variableArray do
		local item = compound.m_variableArray [i]
}
	$(getLinkedTextString (item.m_type)) :ref:`$(item.m_name)<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_propertyArray > 0 then
}
Properties
----------

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_propertyArray) total properties

%{
	end -- if
}
.. ref-code-block:: none

%{
	for i = 1, #compound.m_propertyArray do
		local item = compound.m_propertyArray [i]
}
	$(getLinkedTextString (item.m_returnType)) property :ref:`$(item.m_name)<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_eventArray > 0 then
}
Events
------

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_eventArray) total events

%{
	end -- if
}
.. ref-code-block:: none

%{
	local prevParamCount = 0

	for i = 1, #compound.m_eventArray do
		local item = compound.m_eventArray [i]
		local paramCount = #item.m_paramArray
		local extraSep

		if paramCount > 1 or prevParamCount > 1 then
			extraSep = "\n"
		else
			extraSep = ""
		end

		prevParamCount = paramCount
}
$extraSep	$(getEventDeclString (item, true, "\t"))
%{
	end -- for
}

%{
end -- if

if #compound.m_functionArray > 0 then
}
$(getTitle (functionSectionName, "-"))

%{
	if g_isTotalCountVisible then
}
.. epigraph::

	$(#compound.m_functionArray) total $(string.lower (functionSectionName))

%{
	end -- if
}
.. ref-code-block:: none

%{
	local prevParamCount = 0

	for i = 1, #compound.m_functionArray do
		local item = compound.m_functionArray [i]
		local paramCount = #item.m_paramArray
		local extraSep

		if paramCount > 1 or prevParamCount > 1 then
			extraSep = "\n"
		else
			extraSep = ""
		end

		prevParamCount = paramCount
}
$extraSep	$(getFunctionDeclString (item, true, "\t"))
%{
	end -- for
}

%{
end -- if
}

Detailed Documentation
----------------------

%{
if #compound.m_variableArray > 0 then
}
$(getTitle (variableSectionName, "~"))

%{
	for i = 1, #compound.m_variableArray do
		local item = compound.m_variableArray [i]
}
.. _doxid-$(item.m_id):
.. ref-code-block:: none

	$(getLinkedTextString (item.m_type)) $(item.m_name)

%{
	end -- for
}

%{
end -- if

if #compound.m_propertyArray > 0 then
}
Properties
~~~~~~~~~~

%{
	for i = 1, #compound.m_propertyArray do
		local item = compound.m_propertyArray [i]
}
.. _doxid-$(item.m_id):
.. ref-code-block:: none

	$(getLinkedTextString (item.m_returnType)) property $(getItemName (item))

%{
	end -- for
}

%{
end -- if

if #compound.m_eventArray > 0 then
}
Events
~~~~~~

%{
	for i = 1, #compound.m_eventArray do
		local item = compound.m_eventArray [i]
}
.. _doxid-$(item.m_id):
.. ref-code-block:: none

	$(getEventDeclString (item, false, "\t"))

%{
	end -- for
}

%{
end -- if

if #compound.m_functionArray > 0 then
}
$(getTitle (functionSectionName, "~"))

%{
	for i = 1, #compound.m_functionArray do
		local item = compound.m_functionArray [i]
}
.. _doxid-$(item.m_id):
.. ref-code-block:: none

	$(getFunctionDeclString (item, false, "\t"))

%{
		if not item.m_detailedDescription.m_isEmpty then
			for i = 1, #item.m_detailedDescription.m_docBlockList do
				block = item.m_detailedDescription.m_docBlockList [1]

	-- block.m_docBlockKind = $(block.m_docBlockKind)
	-- block.m_title        = $(block.m_title)
	-- block.m_contents     = $(block.m_contents.m_plainText)
	-- $(block.m_contents.m_plainText)
			end -- for
		end -- if
}
%{
	end -- for
}

%{
end -- if
}
