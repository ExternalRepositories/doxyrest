%{
--------------------------------------------------------------------------------
--
--  This file is part of the Doxyrest toolkit.
--
--  Doxyrest is distributed under the MIT license.
--  For details see accompanying license.txt file,
--  the public copy of which is also available at:
--  http://tibbo.com/downloads/archive/doxyrest/license.txt
--
--------------------------------------------------------------------------------

local argArray = table.pack (...)
local compound = argArray [1]
local isGlobalNamespace = argArray [2]

local variableSectionName
local functionSectionName

if compound.m_compoundKind == "namespace" or compound.m_compoundKind == "group" then
	variableSectionName = "Global Variables"
	functionSectionName = "Global Functions"
else
	variableSectionName = "Fields"
	functionSectionName = "Methods"
end

local compoundStats = prepareCompound (compound)
}
$(getCompoundTocTree (compound))

$(getItemImportString (compound))

%{
local hasDetails =
	compoundStats.m_hasDocumentedItems or
	compoundStats.m_hasBriefDocumentation and compoundStats.m_hasDetailedDocumentation

if hasDetails then
}
Overview
~~~~~~~~

$(getItemBriefDocumentation (compound, "details-"))

%{
else
}
$(getItemDetailedDocumentation (compound))

%{
end -- if

for i = 1, #compound.m_groupArray do
	local item = compound.m_groupArray [i]
	local targetFileName = getItemFileName (item)

	generateFile (targetFileName, "c_group.rst.in", item)
}
:ref:`$(getGroupName (item))<doxid-$(item.m_id)>`

%{
end -- for

if isGlobalNamespace and #g_pageArray > 0 then
}
.. toctree::
	:hidden:

%{
	local pageList = ""
	table.sort (g_pageArray, cmpTitles)

	for i = 1, #g_pageArray do
		local page = g_pageArray [i]
		local targetFileName0 = getItemFileName (page, "")
		local targetFileName = targetFileName0 .. ".rst"

		generateFile (targetFileName, "c_page.rst.in", page)
		pageList = pageList .. ":doc:`" .. targetFileName0 .."`\n\n"
}
	$(targetFileName)
%{
	end -- for
}

.. rubric:: Related pages:

$pageList
%{
end -- if

if compoundStats.m_hasItems then
	if g_sectionedOverview then
		includeFile ("c_overview_compound_sectioned.rst.in", compound, variableSectionName, functionSectionName)
	else
		includeFile ("c_overview_compound_joint.rst.in", compound, variableSectionName, functionSectionName)
	end
end

if hasDetails then
}
.. _details-doxid-$(compound.m_id):

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

$(getItemDetailedDocumentation (compound))

%{
end -- if

if compoundStats.m_hasDocumentedUnnamedEnumValues then
	includeFile ("c_details_unnamed_enum_values.rst.in", compound)
end

if compoundStats.m_hasDocumentedTypedefs then
	includeFile ("c_details_typedefs.rst.in", compound)
end

if compoundStats.m_hasDocumentedVariables then
	includeFile ("c_details_variables.rst.in", compound, variableSectionName)
end

if compoundStats.m_hasDocumentedProperties then
	includeFile ("c_details_properties.rst.in", compound)
end

if compoundStats.m_hasDocumentedEvents then
	includeFile ("c_details_events.rst.in", compound)
end

if compoundStats.m_hasDocumentedConstruction then
	includeFile ("c_details_construction.rst.in", compound)
end

if compoundStats.m_hasDocumentedFunctions then
	includeFile ("c_details_functions.rst.in", compound, functionSectionName)
end

if compoundStats.m_hasDocumentedAliases then
	includeFile ("c_details_aliases.rst.in", compound)
end

if compoundStats.m_hasDocumentedDefines then
	includeFile ("c_details_defines.rst.in", compound)
end

if #compound.m_footnoteArray > 0 then
}
---------------------

.. rubric:: Footnotes

%{
	for i = 1, #compound.m_footnoteArray do
		local item = compound.m_footnoteArray [i]
}
.. [#$(item.m_name)] $(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if
}
