%{
--------------------------------------------------------------------------------
--
--  This file is part of the Doxyrest toolkit.
--
--  Doxyrest is distributed under the MIT license.
--  For details see accompanying license.txt file,
--  the public copy of which is also available at:
--  http://tibbo.com/downloads/archive/doxyrest/license.txt
--
--------------------------------------------------------------------------------

local argArray = table.pack (...)
local compound = argArray [1]

local variableSectionName
local functionSectionName

if compound.m_compoundKind == "namespace" or compound.m_compoundKind == "group" then
	variableSectionName = "Global Variables"
	functionSectionName = "Global Functions"
else
	variableSectionName = "Fields"
	functionSectionName = "Methods"
end

filterDefineArray (compound.m_defineArray)
filterTypedefArray (compound.m_typedefArray)
filterConstructorArray (compound.m_constructorArray)

sortCompound (compound)

compoundStats = collectCompoundStats (compound)

local hasDetails =
	compoundStats.m_hasDocumentedItems or
	compoundStats.m_hasBriefDocumentation and compoundStats.m_hasDetailedDocumentation

if hasDetails then
}
Overview
~~~~~~~~

$(getItemBriefDocumentation (compound, "details-"))

%{
else
}
$(getItemDetailedDocumentation (compound))

%{
end -- if

for i = 1, #compound.m_groupArray do
	local item = compound.m_groupArray [i]
	local targetFileName = getItemFileName (item)

	generateFile (targetFileName, "c_group.rst.in", item)
}
:ref:`$(item.m_title)<doxid-$(item.m_id)>`

%{
end -- for

if g_jointOverview then
	includeFile ("c_overview_compound_joint.rst.in", compound, variableSectionName, functionSectionName)
else
	includeFile ("c_overview_compound_sectioned.rst.in", compound, variableSectionName, functionSectionName)
end

if hasDetails then
}
.. _details-doxid-$(compound.m_id):

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

$(getItemDetailedDocumentation (compound))

%{
end -- if

if compoundStats.m_hasUnnamedEnums then
}
Enum Members
------------

%{
	for i = 1, #compound.m_enumArray do
		local item = compound.m_enumArray [i]

		if isUnnamedItem (item) then
			for j = 1, #item.m_enumValueArray do
				local subItem = item.m_enumValueArray [j]
}
.. _doxid-$(subItem.m_id):
.. _cid-$(getItemCid (subItem)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(subItem.m_name)

$(getItemDetailedDocumentation (subItem))

%{
			end -- for
		end -- if
	end -- for
end -- if

if #compound.m_typedefArray > 0 then
}
Typedefs
--------

%{
	for i = 1, #compound.m_typedefArray do
		local item = compound.m_typedefArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getTypedefDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if #compound.m_variableArray > 0 then
}
$(getTitle (variableSectionName, "-"))

%{
	for i = 1, #compound.m_variableArray do
		local item = compound.m_variableArray [i]
		local modifiers = ""
		local suffix = ""

		if item.m_modifiers ~= "" then
			modifiers = " " .. item.m_modifiers
		end

		if item.m_argString ~= "" then
			suffix = " " .. item.m_argString
		elseif item.m_bitField  ~= "" then
			suffix = " :" .. item.m_bitField
		end

		if not isUnnamedItem (item) then
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getLinkedTextString (item.m_type, true))$modifiers $(item.m_name)$suffix

$(getItemDetailedDocumentation (item))

%{
		end -- if
	end -- for
end -- if

if #compound.m_propertyArray > 0 then
}
Properties
----------

%{
	for i = 1, #compound.m_propertyArray do
		local item = compound.m_propertyArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getPropertyDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if #compound.m_eventArray > 0 then
}
Events
------

%{
	for i = 1, #compound.m_eventArray do
		local item = compound.m_eventArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getEventDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if hasConstructionSection then
}
Construction
------------

%{
	for i = 1, #compound.m_constructorArray do
		local item = compound.m_constructorArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getVoidFunctionDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for

if g_includeDestructors and compound.m_destructor then
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getVoidFunctionDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
end -- if

	emit ("\n")
end -- if

if #compound.m_functionArray > 0 then
}
$(getTitle (functionSectionName, "-"))

%{
	for i = 1, #compound.m_functionArray do
		local item = compound.m_functionArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getFunctionDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if #compound.m_aliasArray > 0 then
}
Aliases
-------

%{
	for i = 1, #compound.m_aliasArray do
		local item = compound.m_aliasArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	alias $(getItemName (item)) $(getLinkedTextString (item.m_initializer, true))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if hasDefines then
}
Macros
------

%{
	for i = 1, #compound.m_defineArray do
		local item = compound.m_defineArray [i]
		local isShown = true

		if not g_includeEmptyDefines and item.m_initializer.m_isEmpty then
			isShown = false
		elseif g_excludeDefinePattern then
			local m = string.match (item.m_name, g_excludeDefinePattern)
			if m then
				isShown = false
			end
		end

		if isShown then
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getDefineDeclString (item, false))

$(getItemDetailedDocumentation (item))

%{
		end -- if
	end -- for
end -- if

if #compound.m_footnoteArray > 0 then
}
---------------------

.. rubric:: Footnotes

%{
	for i = 1, #compound.m_footnoteArray do
		local item = compound.m_footnoteArray [i]
}
.. [#$(item.m_name)] $(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if
}
