%{
local argArray = table.pack (...)
local compound = argArray [1]

local variableSectionName
local functionSectionName

if compound.m_compoundKind == "namespace" or compound.m_compoundKind == "group" then
	variableSectionName = "Global Variables"
	functionSectionName = "Global Functions"
else
	variableSectionName = "Fields"
	functionSectionName = "Methods"
end
}
Overview
~~~~~~~~

$(getItemBriefDocumentation (compound, "details-"))

%{
for i = 1, #compound.m_groupArray do
	local item = compound.m_groupArray [i]
	local targetFileName = getItemFileName (item)

	generateFile (targetFileName, "c_group.rst.in", item)
}
:ref:`$(item.m_title)<doxid-$(item.m_id)>`

%{
end -- for

if #compound.m_namespaceArray > 0 then
}
Namespaces
----------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_namespaceArray do
		local item = compound.m_namespaceArray [i]
		local targetFileName = getItemFileName (item)

		generateFile (targetFileName, "c_namespace.rst.in", item)
}
	namespace :ref:`$(item.m_name)<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if not g_isPrimitiveTypedefVisible then
	removePrimitiveTypedefs (compound.m_typedefArray)
end

if #compound.m_typedefArray > 0 then
}
Typedefs
--------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	local prevParamCount = 0

	for i = 1, #compound.m_typedefArray do
		local item = compound.m_typedefArray [i]
		local paramCount = 0
		local extraSep = ""

		if item.m_argString ~= "" then
			if string.find (item.m_argString, ",") then
				paramCount = 2
			else
				paramCount = 0
			end

			if g_hasNewLineAfterReturnType or paramCount > 1 or prevParamCount > 1 then
				extraSep = "\n"
			end
		end

		prevParamCount = paramCount
}
$extraSep	$(getTypedefDeclString (item, true, "\t"))
%{
	end -- for
}

%{
end -- if

if #compound.m_enumArray > 0 then
}
Enums
-----

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_enumArray do
		local item = compound.m_enumArray [i]
		local targetFileName = getItemFileName (item)

		generateFile (targetFileName, "c_enum.rst.in", item)
}
	enum :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_structArray > 0 or #compound.m_unionArray > 0 then
	local sectionName = getDoubleSectionName (
		"Structs", #compound.m_structArray,
		"Unions", #compound.m_unionArray
		)
}
$(getTitle (sectionName, "-"))

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_structArray do
		local item = compound.m_structArray [i]
		local targetFileName = getItemFileName (item)

		generateFile (targetFileName, "c_class.rst.in", item)
}
	struct :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for

	for i = 1, #compound.m_unionArray do
		local item = compound.m_unionArray [i]
		local targetFileName = getItemFileName (item)

		generateFile (targetFileName, "c_class.rst.in", item)
}
	union :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_classArray > 0 then
}
Classes
-------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_classArray do
		local item = compound.m_classArray [i]
		local targetFileName = getItemFileName (item)

		generateFile (targetFileName, "c_class.rst.in", item)
}
	class :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_variableArray > 0 or #compound.m_propertyArray > 0 then
	local sectionName = getDoubleSectionName (
		variableSectionName, #compound.m_variableArray,
		"Properties", #compound.m_propertyArray
		)

}
$(getTitle (sectionName, "-"))

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_variableArray do
		local item = compound.m_variableArray [i]
		local modifiers = item.m_modifiers

		if modifiers ~= "" then
			modifiers = " " .. modifiers
		end
}
	$(getLinkedTextString (item.m_type, true))$modifiers :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for

	for i = 1, #compound.m_propertyArray do
		local item = compound.m_propertyArray [i]
}
	$(getLinkedTextString (item.m_returnType, true)) property :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for
}

%{
end -- if

if #compound.m_eventArray > 0 then
}
Events
------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	local prevParamCount = 0

	for i = 1, #compound.m_eventArray do
		local item = compound.m_eventArray [i]
		local paramCount = #item.m_paramArray
		local extraSep = ""

		if g_hasNewLineAfterReturnType or paramCount > 1 or prevParamCount > 1 then
			extraSep = "\n"
		end

		prevParamCount = paramCount
}
$extraSep	$(getEventDeclString (item, true, "\t"))
%{
	end -- for
}

%{
end -- if

if #compound.m_functionArray > 0 then
}
$(getTitle (functionSectionName, "-"))

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	local prevParamCount = 0

	for i = 1, #compound.m_functionArray do
		local item = compound.m_functionArray [i]
		local paramCount = #item.m_paramArray
		local extraSep = ""

		if g_hasNewLineAfterReturnType or paramCount > 1 or prevParamCount > 1 then
			extraSep = "\n"
		end

		prevParamCount = paramCount
}
$extraSep	$(getFunctionDeclString (item, true, "\t"))
%{
	end -- for
}

%{
end -- if
}

.. _details-doxid-$(compound.m_id):

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

$(getItemDetailedDocumentation (compound))

%{
if #compound.m_typedefArray > 0 then
}
Typedefs
--------

%{
	for i = 1, #compound.m_typedefArray do
		local item = compound.m_typedefArray [i]
}
.. _doxid-$(item.m_id):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getTypedefDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
}

%{
end -- if

if #compound.m_variableArray > 0 then
}
$(getTitle (variableSectionName, "-"))

%{
	for i = 1, #compound.m_variableArray do
		local item = compound.m_variableArray [i]
		local modifiers = item.m_modifiers

		if modifiers ~= "" then
			modifiers = " " .. modifiers
		end
}
.. _doxid-$(item.m_id):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getLinkedTextString (item.m_type, true))$modifiers $(item.m_name)

$(getItemDetailedDocumentation (item))

%{
	end -- for
}

%{
end -- if

if #compound.m_propertyArray > 0 then
}
Properties
----------

%{
	for i = 1, #compound.m_propertyArray do
		local item = compound.m_propertyArray [i]
}
.. _doxid-$(item.m_id):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getLinkedTextString (item.m_returnType, true)) property $(getItemName (item))

$(getItemDetailedDocumentation (item))

%{
	end -- for
}

%{
end -- if

if #compound.m_eventArray > 0 then
}
Events
------

%{
	for i = 1, #compound.m_eventArray do
		local item = compound.m_eventArray [i]
}
.. _doxid-$(item.m_id):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getEventDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
}

%{
end -- if

if #compound.m_functionArray > 0 then
}
$(getTitle (functionSectionName, "-"))

%{
	for i = 1, #compound.m_functionArray do
		local item = compound.m_functionArray [i]
}
.. _doxid-$(item.m_id):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getFunctionDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
}

%{
end -- if
}
