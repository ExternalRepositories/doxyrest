%{
--------------------------------------------------------------------------------
--
--  This file is part of the Doxyrest toolkit.
--
--  Doxyrest is distributed under the MIT license.
--  For details see accompanying license.txt file,
--  the public copy of which is also available at:
--  http://tibbo.com/downloads/archive/doxyrest/license.txt
--
--------------------------------------------------------------------------------

local argArray = table.pack (...)
local compound = argArray [1]

local variableSectionName
local functionSectionName

if compound.m_compoundKind == "namespace" or compound.m_compoundKind == "group" then
	variableSectionName = "Global Variables"
	functionSectionName = "Global Functions"
else
	variableSectionName = "Fields"
	functionSectionName = "Methods"
end

local hasUnnamedEnums = false
for i = 1, #compound.m_enumArray do
	local item = compound.m_enumArray [i]
	if isUnnamedItem (item) then
		hasUnnamedEnums = true
		break
	end
end

local hasDetails =
	not compound.m_detailedDescription.m_isEmpty or
	hasUnnamedEnums or
	#compound.m_typedefArray > 0 or
	#compound.m_classArray > 0 or
	#compound.m_structArray > 0 or
	#compound.m_unionArray > 0 or
	#compound.m_variableArray > 0 or
	#compound.m_eventArray > 0 or
	#compound.m_functionArray > 0 or
	#compound.m_aliasArray > 0 or
	#compound.m_defineArray > 0

if hasDetails then
}
Overview
~~~~~~~~

$(getItemBriefDocumentation (compound, "details-"))

%{
else
}
$(getItemBriefDocumentation (compound))

%{
end -- if

for i = 1, #compound.m_groupArray do
	local item = compound.m_groupArray [i]
	local targetFileName = getItemFileName (item)

	generateFile (targetFileName, "c_group.rst.in", item)
}
:ref:`$(item.m_title)<doxid-$(item.m_id)>`

%{
end -- for

if #compound.m_namespaceArray > 0 then
}
Namespaces
----------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_namespaceArray do
		local item = compound.m_namespaceArray [i]
		local targetFileName = getItemFileName (item)

		generateFile (targetFileName, "c_namespace.rst.in", item)
}
	namespace :ref:`$(item.m_name)<doxid-$(item.m_id)>`
%{
	end -- for

	emit ("\n")
end -- if

if not g_isPrimitiveTypedefVisible then
	removePrimitiveTypedefs (compound.m_typedefArray)
end

if #compound.m_typedefArray > 0 then
}
Typedefs
--------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	local prevParamCount = 0

	for i = 1, #compound.m_typedefArray do
		local item = compound.m_typedefArray [i]
		local paramCount = 0
		local extraSep = ""

		if item.m_argString ~= "" then
			if string.find (item.m_argString, ",") then
				paramCount = 2
			else
				paramCount = 0
			end

			if g_hasNewLineAfterReturnType or paramCount > 1 or prevParamCount > 1 then
				extraSep = "\n"
			end
		end

		prevParamCount = paramCount
}
$extraSep	$(getTypedefDeclString (item, true, "\t"))
%{
	end -- for

	emit ("\n")
end -- if

if #compound.m_enumArray > 0 then
}
Enums
-----

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	local isLastUnnamed = false

	for i = 1, #compound.m_enumArray do
		local item = compound.m_enumArray [i]

		if isUnnamedItem (item) then
			if i > 1 then
				emit ("\n")
			end
}
	enum
	{
%{
			for j = 1, #item.m_enumValueArray do
				local subItem = item.m_enumValueArray [j]
}
	    :ref:`$(subItem.m_name)<doxid-$(subItem.m_id)>` $(getLinkedTextString (subItem.m_initializer, true))
%{
			end -- for

			isLastUnnamed = true
}
	}
%{
		else
			local targetFileName = getItemFileName (item)
			generateFile (targetFileName, "c_enum.rst.in", item)

			if isLastUnnamed then
				emit ("\n")
				isLastUnnamed = false
			end
}
	enum :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
		end -- if
	end -- for

	emit ("\n")
end -- if

if #compound.m_structArray > 0 or #compound.m_unionArray > 0 then
	local sectionName = getDoubleSectionName (
		"Structs", #compound.m_structArray,
		"Unions", #compound.m_unionArray
		)
}
$(getTitle (sectionName, "-"))

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_structArray do
		local item = compound.m_structArray [i]
		local targetFileName = getItemFileName (item)

		generateFile (targetFileName, "c_class.rst.in", item)
}
	struct :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for

	for i = 1, #compound.m_unionArray do
		local item = compound.m_unionArray [i]
		local targetFileName = getItemFileName (item)

		generateFile (targetFileName, "c_class.rst.in", item)
}
	union :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for

	emit ("\n")
end -- if

if #compound.m_classArray > 0 then
}
Classes
-------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_classArray do
		local item = compound.m_classArray [i]
		local targetFileName = getItemFileName (item)

		generateFile (targetFileName, "c_class.rst.in", item)
}
	class :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for

	emit ("\n")
end -- if

if #compound.m_variableArray > 0 or #compound.m_propertyArray > 0 then
	local sectionName = getDoubleSectionName (
		variableSectionName, #compound.m_variableArray,
		"Properties", #compound.m_propertyArray
		)

}
$(getTitle (sectionName, "-"))

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	local indent = ""
	local unnamedStack = {}
	local unnamedStackSize = 0
	local isLastUnnamed = false

	for i = 1, #compound.m_variableArray do
		local item = compound.m_variableArray [i]

		if not isUnnamedItem (item) then
			local modifiers = ""
			local suffix = ""

			if item.m_modifiers ~= "" then
				modifiers = " " .. item.m_modifiers
			end

			if item.m_argString ~= "" then
				suffix = " " .. item.m_argString
			elseif item.m_bitField  ~= "" then
				suffix = " :" .. item.m_bitField
			end

			local unnamed = isMemberOfUnnamedType (item)
			if unnamed then
				if i > 1 then
					emit ("\n")
				end

				while unnamed ~= "" do
					local m, t, n = string.match (unnamed, "^((%a+)[/:](%d+)/*)")
					if not m then
						m, t = string.match (unnamed, "^((%a+)/*)")
						if not m then
							break
						end
					end
}
	$indent$t
	$indent{
%{
					unnamed = string.sub (unnamed, string.len (m) + 1)
					unnamedStackSize = unnamedStackSize + 1
					unnamedStack [unnamedStackSize] = n
					indent = indent .. "    "
				end -- while
			end -- if

			if isLastUnnamed then
				emit ("\n")
				isLastUnnamed = false
			end
}
	$indent$(getLinkedTextString (item.m_type, true))$modifiers :ref:`$(getItemName (item))<doxid-$(item.m_id)>`$suffix
%{
		elseif unnamedStackSize > 0 and not unnamedStack [unnamedStackSize] then
			unnamedStack [unnamedStackSize] = 0 -- terminate this stack entry
		end -- if

		while unnamedStackSize > 0 do
			if not unnamedStack [unnamedStackSize] then
				break -- wait for unnamed variable @n to terminate this stack entry
			end

			unnamedStack [unnamedStackSize] = unnamedStack [unnamedStackSize] - 1
			if unnamedStack [unnamedStackSize] > 0 then
				break
			end

			indent = string.sub (indent, 5) -- remove 4 spaces
			unnamedStackSize = unnamedStackSize - 1
			isLastUnnamed = true
}
	$indent}
%{
		end -- while
	end -- for

	for i = 1, #compound.m_propertyArray do
		local item = compound.m_propertyArray [i]
}
	$(getLinkedTextString (item.m_returnType, true)) property :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- for

	emit ("\n")
end -- if

if #compound.m_eventArray > 0 then
}
Events
------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	local prevParamCount = 0

	for i = 1, #compound.m_eventArray do
		local item = compound.m_eventArray [i]
		local paramCount = #item.m_paramArray
		local extraSep = ""

		if g_hasNewLineAfterReturnType or paramCount > 1 or prevParamCount > 1 then
			extraSep = "\n"
		end

		prevParamCount = paramCount
}
$extraSep	$(getEventDeclString (item, true, "\t"))
%{
	end -- for

	emit ("\n")
end -- if

if #compound.m_functionArray > 0 then
}
$(getTitle (functionSectionName, "-"))

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	local prevParamCount = 0

	for i = 1, #compound.m_functionArray do
		local item = compound.m_functionArray [i]
		local paramCount = #item.m_paramArray
		local extraSep = ""

		if g_hasNewLineAfterReturnType or paramCount > 1 or prevParamCount > 1 then
			extraSep = "\n"
		end

		prevParamCount = paramCount
}
$extraSep	$(getFunctionDeclString (item, true, "\t"))
%{
	end -- for

	emit ("\n")
end -- if

if #compound.m_aliasArray > 0 then
}
Aliases
-------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_aliasArray do
		local item = compound.m_aliasArray [i]
}
	alias :ref:`$(getItemName (item))<doxid-$(item.m_id)>` $(getLinkedTextString (item.m_initializer, true))
%{
	end -- for

	emit ("\n")
end -- if

if #compound.m_defineArray > 0 then
}
Macros
------

.. ref-code-block:: $g_language
	:class: overview-code-block

%{
	for i = 1, #compound.m_defineArray do
		local item = compound.m_defineArray [i]
}
	$(getDefineDeclString (item, true))
%{
	end -- for

	emit ("\n")
end -- if

if hasDetails then
}
.. _details-doxid-$(compound.m_id):

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

$(getItemDetailedDocumentation (compound))

%{
end -- if

if hasUnnamedEnums then
}
Enum Members
------------

%{
	for i = 1, #compound.m_enumArray do
		local item = compound.m_enumArray [i]

		if isUnnamedItem (item) then
			for j = 1, #item.m_enumValueArray do
				local subItem = item.m_enumValueArray [j]
}
.. _doxid-$(subItem.m_id):
.. _cid-$(getItemCid (subItem)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(subItem.m_name)

$(getItemDetailedDocumentation (subItem))

%{
			end -- for
		end -- if
	end -- for
end -- if

if #compound.m_typedefArray > 0 then
}
Typedefs
--------

%{
	for i = 1, #compound.m_typedefArray do
		local item = compound.m_typedefArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getTypedefDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if #compound.m_variableArray > 0 then
}
$(getTitle (variableSectionName, "-"))

%{
	for i = 1, #compound.m_variableArray do
		local item = compound.m_variableArray [i]
		local modifiers = ""
		local suffix = ""

		if item.m_modifiers ~= "" then
			modifiers = " " .. item.m_modifiers
		end

		if item.m_argString ~= "" then
			suffix = " " .. item.m_argString
		elseif item.m_bitField  ~= "" then
			suffix = " :" .. item.m_bitField
		end

		if not isUnnamedItem (item) then
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getLinkedTextString (item.m_type, true))$modifiers $(item.m_name)$suffix

$(getItemDetailedDocumentation (item))

%{
		end -- if
	end -- for
end -- if

if #compound.m_propertyArray > 0 then
}
Properties
----------

%{
	for i = 1, #compound.m_propertyArray do
		local item = compound.m_propertyArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getLinkedTextString (item.m_returnType, true)) property $(getItemName (item))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if #compound.m_eventArray > 0 then
}
Events
------

%{
	for i = 1, #compound.m_eventArray do
		local item = compound.m_eventArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getEventDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if #compound.m_functionArray > 0 then
}
$(getTitle (functionSectionName, "-"))

%{
	for i = 1, #compound.m_functionArray do
		local item = compound.m_functionArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getFunctionDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if #compound.m_aliasArray > 0 then
}
Aliases
-------

%{
	for i = 1, #compound.m_aliasArray do
		local item = compound.m_aliasArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	alias $(getItemName (item)) $(getLinkedTextString (item.m_initializer, true))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if #compound.m_defineArray > 0 then
}
Macros
------

%{
	for i = 1, #compound.m_defineArray do
		local item = compound.m_defineArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getDefineDeclString (item, false))

$(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if

if #compound.m_footnoteArray > 0 then
}

---------------------

.. rubric:: Footnotes

%{
	for i = 1, #compound.m_footnoteArray do
		local item = compound.m_footnoteArray [i]
}
.. [#$(item.m_name)] $(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if
}
