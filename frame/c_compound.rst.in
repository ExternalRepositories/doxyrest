%{
--------------------------------------------------------------------------------
--
--  This file is part of the Doxyrest toolkit.
--
--  Doxyrest is distributed under the MIT license.
--  For details see accompanying license.txt file,
--  the public copy of which is also available at:
--  http://tibbo.com/downloads/archive/doxyrest/license.txt
--
--------------------------------------------------------------------------------

local argArray = table.pack (...)
local compound = argArray [1]

local variableSectionName
local functionSectionName

if compound.m_compoundKind == "namespace" or compound.m_compoundKind == "group" then
	variableSectionName = "Global Variables"
	functionSectionName = "Global Functions"
else
	variableSectionName = "Fields"
	functionSectionName = "Methods"
end

local compoundStats = prepareCompound (compound)

local hasDetails =
	compoundStats.m_hasDocumentedItems or
	compoundStats.m_hasBriefDocumentation and compoundStats.m_hasDetailedDocumentation

if hasDetails then
}

Overview
~~~~~~~~

$(getItemBriefDocumentation (compound, "details-"))

%{
else
}
$(getItemDetailedDocumentation (compound))

%{
end -- if

for i = 1, #compound.m_groupArray do
	local item = compound.m_groupArray [i]
	local targetFileName = getItemFileName (item)

	generateFile (targetFileName, "c_group.rst.in", item)
}
:ref:`$(item.m_title)<doxid-$(item.m_id)>`

%{
end -- for

if g_sectionedOverview then
	includeFile ("c_overview_compound_sectioned.rst.in", compound, variableSectionName, functionSectionName)
else
	includeFile ("c_overview_compound_joint.rst.in", compound, variableSectionName, functionSectionName)
end

if hasDetails then
}
.. _details-doxid-$(compound.m_id):

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

$(getItemDetailedDocumentation (compound))

%{
end -- if

if compoundStats.m_hasDocumentedUnnamedEnumValues then
	includeFile ("c_details_enums.rst.in", compound)
end

if compoundStats.m_hasDocumentedTypedefs then
	includeFile ("c_details_typedefs.rst.in", typedefs)
end

if compoundStats.m_hasDocumentedVariables then
	includeFile ("c_details_variables.rst.in", variableSectionName)
end

if compoundStats.m_hasDocumentedProperties then
	includeFile ("c_details_properties.rst.in", compound)
end

if compoundStats.m_hasDocumentedEvents then
	includeFile ("c_details_events.rst.in", compound)
end

if compoundStats.m_hasDocumentedConstruction then
	includeFile ("c_details_construction.rst.in", compound)
end
}
Construction
------------

%{
	for i = 1, #compound.m_constructorArray do
		local item = compound.m_constructorArray [i]
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getVoidFunctionDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
	end -- for

if g_includeDestructors and compound.m_destructor and compound.m_destructor.m_hasDocumentation then
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getVoidFunctionDeclString (item, false, "\t"))

$(getItemDetailedDocumentation (item))

%{
end -- if

	emit ("\n")
end -- if

if compoundStats.m_hasDocumentedFunctions then
	includeFile ("c_details_functions.rst.in", compound, functionSectionName)
end

if compoundStats.m_hasDocumentedAliases then
	includeFile ("c_details_aliases.rst.in", compound)
end

if compoundStats.m_hasDocumentedDefines then
}
Macros
------

%{
	for i = 1, #compound.m_defineArray do
		local item = compound.m_defineArray [i]
		local isShown = true

		if not g_includeEmptyDefines and item.m_initializer.m_isEmpty then
			isShown = false
		elseif g_excludeDefinePattern then
			local m = string.match (item.m_name, g_excludeDefinePattern)
			if m then
				isShown = false
			end
		end

		if isShown then
}
.. _doxid-$(item.m_id):
.. _cid-$(getItemCid (item)):
.. ref-code-block:: $g_language
	:class: title-code-block

	$(getDefineDeclString (item, false))

$(getItemDetailedDocumentation (item))

%{
		end -- if
	end -- for
end -- if

if #compound.m_footnoteArray > 0 then
}
---------------------

.. rubric:: Footnotes

%{
	for i = 1, #compound.m_footnoteArray do
		local item = compound.m_footnoteArray [i]
}
.. [#$(item.m_name)] $(getItemDetailedDocumentation (item))

%{
	end -- for
end -- if
}
