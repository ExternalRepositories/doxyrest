<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__libusb__dev" kind="group">
    <compoundname>libusb_dev</compoundname>
    <title>Device handling and enumeration</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__libusb__dev_1ga2959abf1184f87b2ce06fe90db6ce614" prot="public" static="no">
        <name>libusb_speed</name>
        <enumvalue id="group__libusb__dev_1gga2959abf1184f87b2ce06fe90db6ce614ace31df1e97e9a66146ac83dcab1e6cfb" prot="public">
          <name>LIBUSB_SPEED_UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The OS doesn&apos;t report or know the device speed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga2959abf1184f87b2ce06fe90db6ce614a6017f9ac2509cd523b51c1b72ad6991b" prot="public">
          <name>LIBUSB_SPEED_LOW</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The device is operating at low speed (1.5MBit/s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga2959abf1184f87b2ce06fe90db6ce614a0011bead7a48b873808795d8495b4d9e" prot="public">
          <name>LIBUSB_SPEED_FULL</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>The device is operating at full speed (12MBit/s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga2959abf1184f87b2ce06fe90db6ce614a27bc0b9fe76f8ddf524f3d2ece0eefac" prot="public">
          <name>LIBUSB_SPEED_HIGH</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>The device is operating at high speed (480MBit/s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga2959abf1184f87b2ce06fe90db6ce614ab8c71e1409cd555ae05937b4db9946a2" prot="public">
          <name>LIBUSB_SPEED_SUPER</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>The device is operating at super speed (5000MBit/s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Speed codes. </para>        </briefdescription>
        <detaileddescription>
<para>Indicates the speed at which the device is operating. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="975" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="975" bodyend="990"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__dev_1ga1454797ecc0de4d084c1619c420014f6" prot="public" static="no">
        <name>libusb_supported_speed</name>
        <enumvalue id="group__libusb__dev_1gga1454797ecc0de4d084c1619c420014f6aa7707c4cef77f4be8aceef859fad2087" prot="public">
          <name>LIBUSB_LOW_SPEED_OPERATION</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Low speed operation supported (1.5MBit/s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga1454797ecc0de4d084c1619c420014f6adbebc659daf53947527259172f81b41a" prot="public">
          <name>LIBUSB_FULL_SPEED_OPERATION</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Full speed operation supported (12MBit/s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga1454797ecc0de4d084c1619c420014f6a2db8b2bb845a23ad1083521ff5b6e9a8" prot="public">
          <name>LIBUSB_HIGH_SPEED_OPERATION</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>High speed operation supported (480MBit/s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga1454797ecc0de4d084c1619c420014f6accd7b9361912b76e40348dc30e6dc7f4" prot="public">
          <name>LIBUSB_SUPER_SPEED_OPERATION</name>
          <initializer>= 8</initializer>
          <briefdescription>
<para>Superspeed operation supported (5000MBit/s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Supported speeds (wSpeedSupported) bitfield. </para>        </briefdescription>
        <detaileddescription>
<para>Indicates what speeds the device supports. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="996" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="996" bodyend="1008"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__dev_1gacb8cfa928bffdd0066a3dd2e6aba0558" prot="public" static="no">
        <name>libusb_usb_2_0_extension_attributes</name>
        <enumvalue id="group__libusb__dev_1ggacb8cfa928bffdd0066a3dd2e6aba0558a02f60b018f4bc01e8813da813779b792" prot="public">
          <name>LIBUSB_BM_LPM_SUPPORT</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Supports Link Power Management (LPM) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Masks for the bits of the <ref refid="structlibusb__usb__2__0__extension__descriptor_1ab22e1857d38c9205aaecca52b2e20ae0" kindref="member">bmAttributes</ref> field of the USB 2.0 Extension descriptor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1015" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1015" bodyend="1018"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__dev_1gaad5a5399176a35a64164dafad7fe4fcd" prot="public" static="no">
        <name>libusb_ss_usb_device_capability_attributes</name>
        <enumvalue id="group__libusb__dev_1ggaad5a5399176a35a64164dafad7fe4fcda5987a17b394338df71c1e04c5c75bc21" prot="public">
          <name>LIBUSB_BM_LTM_SUPPORT</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Supports Latency Tolerance Messages (LTM) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Masks for the bits of the <ref refid="structlibusb__ss__usb__device__capability__descriptor_1ad387790c14d8d6eefe6aa1b4a55006bf" kindref="member">bmAttributes</ref> field field of the SuperSpeed USB Device Capability descriptor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1025" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1025" bodyend="1028"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__dev_1ga6ccabbf3b3728ae69608ba83bba4e64c" prot="public" static="no">
        <name>libusb_bos_type</name>
        <enumvalue id="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64cac05dcfcd0a5c0dbaef90b1d09e4b5505" prot="public">
          <name>LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Wireless USB device capability. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64ca243b090db95a0fdf7104fbf581724b86" prot="public">
          <name>LIBUSB_BT_USB_2_0_EXTENSION</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>USB 2.0 extensions. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64ca2f1ab0d2d1e14d4942c079749b1b6c85" prot="public">
          <name>LIBUSB_BT_SS_USB_DEVICE_CAPABILITY</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>SuperSpeed USB device capability. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64cac3c00e8861b4b596ea1f53c505809e5e" prot="public">
          <name>LIBUSB_BT_CONTAINER_ID</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Container ID type. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USB capability types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1033" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1033" bodyend="1045"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" prot="public" static="no">
        <type>struct <ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref></type>
        <definition>typedef struct libusb_device libusb_device</definition>
        <argsstring></argsstring>
        <name>libusb_device</name>
        <briefdescription>
<para>Structure representing a USB device detected on the system. </para>        </briefdescription>
        <detaileddescription>
<para>This is an opaque type for which you are only ever provided with a pointer, usually originating from <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref>.</para><para>Certain operations can be performed on a device, but in order to do any I/O you will have to first obtain a device handle using <ref refid="group__libusb__dev_1ga3f184a8be4488a767b2e0ae07e76d1b0" kindref="member">libusb_open()</ref>.</para><para>Devices are reference counted with <ref refid="group__libusb__dev_1gaabaa4193adcabba1789cc1165ac41a03" kindref="member">libusb_ref_device()</ref> and <ref refid="group__libusb__dev_1ga3cc62e6a191b7a9f213e62b81ec30f4d" kindref="member">libusb_unref_device()</ref>, and are freed when the reference count reaches 0. New devices presented by <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref> have a reference count of 1, and <ref refid="group__libusb__dev_1gad3b8561d064bb3e1b8851ddeed3cd7d6" kindref="member">libusb_free_device_list()</ref> can optionally decrease the reference count on all devices in the list. <ref refid="group__libusb__dev_1ga3f184a8be4488a767b2e0ae07e76d1b0" kindref="member">libusb_open()</ref> adds another reference which is later destroyed by <ref refid="group__libusb__dev_1ga779bc4f1316bdb0ac383bddbd538620e" kindref="member">libusb_close()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="161" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" prot="public" static="no">
        <type>struct <ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref></type>
        <definition>typedef struct libusb_device_handle libusb_device_handle</definition>
        <argsstring></argsstring>
        <name>libusb_device_handle</name>
        <briefdescription>
<para>Structure representing a handle on a USB device. </para>        </briefdescription>
        <detaileddescription>
<para>This is an opaque type for which you are only ever provided with a pointer, usually originating from <ref refid="group__libusb__dev_1ga3f184a8be4488a767b2e0ae07e76d1b0" kindref="member">libusb_open()</ref>.</para><para>A device handle is used to perform I/O and other operations. When finished with a device handle, you should call <ref refid="group__libusb__dev_1ga779bc4f1316bdb0ac383bddbd538620e" kindref="member">libusb_close()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="161" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="970" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t libusb_get_device_list</definition>
        <argsstring>(libusb_context *ctx, libusb_device ***list)</argsstring>
        <name>libusb_get_device_list</name>
        <param>
          <type><ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> ***</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Returns a list of USB devices currently attached to the system. </para>        </briefdescription>
        <detaileddescription>
<para>This is your entry point into finding a USB device to operate.</para><para>You are expected to unreference all the devices when you are done with them, and then free the list with <ref refid="group__libusb__dev_1gad3b8561d064bb3e1b8851ddeed3cd7d6" kindref="member">libusb_free_device_list()</ref>. Note that <ref refid="group__libusb__dev_1gad3b8561d064bb3e1b8851ddeed3cd7d6" kindref="member">libusb_free_device_list()</ref> can unref all the devices for you. Be careful not to unreference a device you are about to open until after you have opened it.</para><para>This return value of this function indicates the number of devices in the resultant list. The list is actually one element larger, as it is NULL-terminated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for a list of devices. Must be later freed with <ref refid="group__libusb__dev_1gad3b8561d064bb3e1b8851ddeed3cd7d6" kindref="member">libusb_free_device_list()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of devices in the outputted list, or any <ref refid="group__libusb__misc_1gab2323aa0f04bc22038e7e1740b2f29ef" kindref="member">libusb_error</ref> according to errors encountered by the backend. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="810" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="810" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gad3b8561d064bb3e1b8851ddeed3cd7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_device_list</definition>
        <argsstring>(libusb_device **list, int unref_devices)</argsstring>
        <name>libusb_free_device_list</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>unref_devices</declname>
        </param>
        <briefdescription>
<para>Frees a list of devices previously discovered using <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the unref_devices parameter is set, the reference count of each device in the list is decremented by 1. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to free </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unref_devices</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to unref the devices in the list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="878" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="878" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gaf2718609d50c8ded2704e4051b3d2925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t libusb_get_bus_number</definition>
        <argsstring>(libusb_device *dev)</argsstring>
        <name>libusb_get_bus_number</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the number of the bus that a device is connected to. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the bus number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="899" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="899" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga14879a0ea7daccdcddb68852d86c00c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t libusb_get_port_number</definition>
        <argsstring>(libusb_device *dev)</argsstring>
        <name>libusb_get_port_number</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the number of the port that a device is connected to. </para>        </briefdescription>
        <detaileddescription>
<para>Unless the OS does something funky, or you are hot-plugging USB extension cards, the port number returned by this call is usually guaranteed to be uniquely tied to a physical port, meaning that different devices plugged on the same physical port should return the same port number.</para><para>But outside of this, there is no guarantee that the port number returned by this call will remain the same, or even match the order in which ports have been numbered by the HUB/HCD manufacturer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the port number (0 if not available) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="918" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="918" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gaa4b7b2b50a9ce2aa396b0af2b979544d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_port_numbers</definition>
        <argsstring>(libusb_device *dev, uint8_t *port_numbers, int port_numbers_len)</argsstring>
        <name>libusb_get_port_numbers</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>port_numbers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port_numbers_len</declname>
        </param>
        <briefdescription>
<para>Get the list of all port numbers from root for the specified device. </para>        </briefdescription>
        <detaileddescription>
<para>Since version 1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port_numbers</parametername>
</parameternamelist>
<parameterdescription>
<para>the array that should contain the port numbers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port_numbers_len</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum length of the array. As per the USB 3.0 specs, the current maximum limit for the depth is 7. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of elements filled </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_OVERFLOW if the array is too small </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="934" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="934" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga9d392b8dff7abf5e475c72fd071c3c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_port_path</definition>
        <argsstring>(libusb_context *ctx, libusb_device *dev, uint8_t *port_numbers, uint8_t port_numbers_len)</argsstring>
        <name>libusb_get_port_path</name>
        <param>
          <type><ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>port_numbers</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>port_numbers_len</declname>
        </param>
        <briefdescription>
<para>Deprecated please use libusb_get_port_numbers instead. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="960" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="960" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga97bb4dfff6bbb897ed9dfd6fa1a1deed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
        <definition>libusb_device* libusb_get_parent</definition>
        <argsstring>(libusb_device *dev)</argsstring>
        <name>libusb_get_parent</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the the parent from the specified device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the device parent or NULL if not available You should issue a <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref> before calling this function and make sure that you only access the parent before issuing <ref refid="group__libusb__dev_1gad3b8561d064bb3e1b8851ddeed3cd7d6" kindref="member">libusb_free_device_list()</ref>. The reason is that libusb currently does not maintain a permanent list of device instances, and therefore can only guarantee that parents are fully instantiated within a <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref> - <ref refid="group__libusb__dev_1gad3b8561d064bb3e1b8851ddeed3cd7d6" kindref="member">libusb_free_device_list()</ref> block. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="980" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="980" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gab6d4e39ac483ebaeb108f2954715305d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t libusb_get_device_address</definition>
        <argsstring>(libusb_device *dev)</argsstring>
        <name>libusb_get_device_address</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the address of the device on the bus it is connected to. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the device address </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="990" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="990" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga58c4e448ecd5cd4782f2b896ec40b22b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_device_speed</definition>
        <argsstring>(libusb_device *dev)</argsstring>
        <name>libusb_get_device_speed</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get the negotiated connection speed for a device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="group__libusb__dev_1ga2959abf1184f87b2ce06fe90db6ce614" kindref="member">libusb_speed</ref> code, where LIBUSB_SPEED_UNKNOWN means that the OS doesn&apos;t know or doesn&apos;t support returning the negotiated speed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1001" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1001" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gac81968047e262409e78f3fe24321b604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_max_packet_size</definition>
        <argsstring>(libusb_device *dev, unsigned char endpoint)</argsstring>
        <name>libusb_get_max_packet_size</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>endpoint</declname>
        </param>
        <briefdescription>
<para>Convenience function to retrieve the wMaxPacketSize value for a particular endpoint in the active device configuration. </para>        </briefdescription>
        <detaileddescription>
<para>This function was originally intended to be of assistance when setting up isochronous transfers, but a design mistake resulted in this function instead. It simply returns the wMaxPacketSize value without considering its contents. If you&apos;re dealing with isochronous transfers, you probably want <ref refid="group__libusb__dev_1gaec10b71c7209760db55ee0f8768bb4f0" kindref="member">libusb_get_max_iso_packet_size()</ref> instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the endpoint in question </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the wMaxPacketSize value </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the endpoint does not exist </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_OTHER on other failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1047" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1047" bodyend="1072"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gaec10b71c7209760db55ee0f8768bb4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_max_iso_packet_size</definition>
        <argsstring>(libusb_device *dev, unsigned char endpoint)</argsstring>
        <name>libusb_get_max_iso_packet_size</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>endpoint</declname>
        </param>
        <briefdescription>
<para>Calculate the maximum packet size which a specific endpoint is capable is sending or receiving in the duration of 1 microframe. </para>        </briefdescription>
        <detaileddescription>
<para>Only the active configuration is examined. The calculation is based on the wMaxPacketSize field in the endpoint descriptor as described in section 9.6.6 in the USB 2.0 specifications.</para><para>If acting on an isochronous or interrupt endpoint, this function will multiply the value found in bits 0:10 by the number of transactions per microframe (determined by bits 11:12). Otherwise, this function just returns the numeric value found in bits 0:10.</para><para>This function is useful for setting up isochronous transfers, for example you might pass the return value from this function to <ref refid="group__libusb__asyncio_1gacbdecd6f50093f0c1d0e72ee35ace274" kindref="member">libusb_set_iso_packet_lengths()</ref> in order to set the length field of every isochronous packet in a transfer.</para><para>Since v1.0.3.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the endpoint in question </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the maximum packet size which can be sent/received on this endpoint </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the endpoint does not exist </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_OTHER on other failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1100" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1100" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gaabaa4193adcabba1789cc1165ac41a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
        <definition>libusb_device* libusb_ref_device</definition>
        <argsstring>(libusb_device *dev)</argsstring>
        <name>libusb_ref_device</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Increment the reference count of a device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device to reference </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the same device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1141" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1141" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga3cc62e6a191b7a9f213e62b81ec30f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_unref_device</definition>
        <argsstring>(libusb_device *dev)</argsstring>
        <name>libusb_unref_device</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Decrement the reference count of a device. </para>        </briefdescription>
        <detaileddescription>
<para>If the decrement operation causes the reference count to reach zero, the device shall be destroyed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device to unreference </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1154" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1154" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga3f184a8be4488a767b2e0ae07e76d1b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_open</definition>
        <argsstring>(libusb_device *dev, libusb_device_handle **dev_handle)</argsstring>
        <name>libusb_open</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> **</type>
          <declname>dev_handle</declname>
        </param>
        <briefdescription>
<para>Open a device and obtain a device handle. </para>        </briefdescription>
        <detaileddescription>
<para>A handle allows you to perform I/O on the device in question.</para><para>Internally, this function adds a reference to the device and makes it available to you through <ref refid="group__libusb__dev_1gafe70b8a797893d4d16985980acec956a" kindref="member">libusb_get_device()</ref>. This reference is removed during <ref refid="group__libusb__dev_1ga779bc4f1316bdb0ac383bddbd538620e" kindref="member">libusb_close()</ref>.</para><para>This is a non-blocking function; no requests are sent over the bus.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device to open </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the returned device handle pointer. Only populated when the return code is 0. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_MEM on memory allocation failure </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_ACCESS if the user has insufficient permissions </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1240" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1240" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga11ba48adb896b1492bbd3d0bf7e0f665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
        <definition>libusb_device_handle* libusb_open_device_with_vid_pid</definition>
        <argsstring>(libusb_context *ctx, uint16_t vendor_id, uint16_t product_id)</argsstring>
        <name>libusb_open_device_with_vid_pid</name>
        <param>
          <type><ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>vendor_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>product_id</declname>
        </param>
        <briefdescription>
<para>Convenience function for finding a device with a particular <computeroutput>idVendor</computeroutput>/<computeroutput>idProduct</computeroutput> combination. </para>        </briefdescription>
        <detaileddescription>
<para>This function is intended for those scenarios where you are using libusb to knock up a quick test application - it allows you to avoid calling <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref> and worrying about traversing/freeing the list.</para><para>This function has limitations and is hence not intended for use in real applications: if multiple devices have the same IDs it will only give you the first one, etc.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vendor_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the idVendor value to search for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>product_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the idProduct value to search for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a device handle for the first found device, or NULL on error or if the device could not be found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1302" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1302" bodyend="1335"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga779bc4f1316bdb0ac383bddbd538620e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_close</definition>
        <argsstring>(libusb_device_handle *dev_handle)</argsstring>
        <name>libusb_close</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <briefdescription>
<para>Close a device handle. </para>        </briefdescription>
        <detaileddescription>
<para>Should be called on all open handles before your application exits.</para><para>Internally, this function destroys the reference that was added by <ref refid="group__libusb__dev_1ga3f184a8be4488a767b2e0ae07e76d1b0" kindref="member">libusb_open()</ref> on the given device.</para><para>This is a non-blocking function; no requests are sent over the bus.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>the device handle to close </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1402" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1402" bodyend="1453"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gafe70b8a797893d4d16985980acec956a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
        <definition>libusb_device* libusb_get_device</definition>
        <argsstring>(libusb_device_handle *dev_handle)</argsstring>
        <name>libusb_get_device</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <briefdescription>
<para>Get the underlying device for a device handle. </para>        </briefdescription>
        <detaileddescription>
<para>This function does not modify the reference count of the returned device, so do not feel compelled to unreference it when you are done. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the underlying device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1463" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1463" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gae921014b888b105471a31d54c77c1c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_configuration</definition>
        <argsstring>(libusb_device_handle *dev_handle, int *config)</argsstring>
        <name>libusb_get_configuration</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Determine the bConfigurationValue of the currently active configuration. </para>        </briefdescription>
        <detaileddescription>
<para>You could formulate your own control request to obtain this information, but this function has the advantage that it may be able to retrieve the information from operating system caches (no I/O involved).</para><para>If the OS does not cache this information, then this function will block while a control transfer is submitted to retrieve the information.</para><para>This function will return a value of 0 in the <computeroutput>config</computeroutput> output parameter if the device is in unconfigured state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the bConfigurationValue of the active configuration (only valid for return code 0) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1488" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1488" bodyend="1517"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga785ddea63a2b9bcb879a614ca4867bed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_set_configuration</definition>
        <argsstring>(libusb_device_handle *dev_handle, int configuration)</argsstring>
        <name>libusb_set_configuration</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>configuration</declname>
        </param>
        <briefdescription>
<para>Set the active configuration for a device. </para>        </briefdescription>
        <detaileddescription>
<para>The operating system may or may not have already set an active configuration on the device. It is up to your application to ensure the correct configuration is selected before you attempt to claim interfaces and perform other operations.</para><para>If you call this function on a device already configured with the selected configuration, then this function will act as a lightweight device reset: it will issue a SET_CONFIGURATION request using the current configuration, causing most USB-related device state to be reset (altsetting reset to zero, endpoint halts cleared, toggles reset).</para><para>You cannot change/reset configuration if your application has claimed interfaces. It is advised to set the desired configuration before claiming interfaces.</para><para>Alternatively you can call <ref refid="group__libusb__dev_1ga49b5cb0d894f6807cd1693ef29aecbfa" kindref="member">libusb_release_interface()</ref> first. Note if you do things this way you must ensure that auto_detach_kernel_driver for <computeroutput>dev</computeroutput> is 0, otherwise the kernel driver will be re-attached when you release the interface(s).</para><para>You cannot change/reset configuration if other applications or drivers have claimed interfaces.</para><para>A configuration value of -1 will put the device in unconfigured state. The USB specifications state that a configuration value of 0 does this, however buggy devices exist which actually have a configuration 0.</para><para>You should always use this function rather than formulating your own SET_CONFIGURATION control request. This is because the underlying operating system needs to know when such changes happen.</para><para>This is a blocking function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>the bConfigurationValue of the configuration you wish to activate, or -1 if you wish to put the device in an unconfigured state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the requested configuration does not exist </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_BUSY if interfaces are currently claimed </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__dev_1gac35b26fef01271eba65c60b2b3ce1cbf" kindref="member">libusb_set_auto_detach_kernel_driver()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1566" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1566" bodyend="1571"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gaee5076addf5de77c7962138397fd5b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_claim_interface</definition>
        <argsstring>(libusb_device_handle *dev_handle, int interface_number)</argsstring>
        <name>libusb_claim_interface</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interface_number</declname>
        </param>
        <briefdescription>
<para>Claim an interface on a given device handle. </para>        </briefdescription>
        <detaileddescription>
<para>You must claim the interface you wish to use before you can perform I/O on any of its endpoints.</para><para>It is legal to attempt to claim an already-claimed interface, in which case libusb just returns 0 without doing anything.</para><para>If auto_detach_kernel_driver is set to 1 for <computeroutput>dev</computeroutput>, the kernel driver will be detached if necessary, on failure the detach error is returned.</para><para>Claiming of interfaces is a purely logical operation; it does not cause any requests to be sent over the bus. Interface claiming is used to instruct the underlying operating system that your application wishes to take ownership of the interface.</para><para>This is a non-blocking function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>bInterfaceNumber</computeroutput> of the interface you wish to claim </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the requested interface does not exist </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_BUSY if another program or driver has claimed the interface </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>a LIBUSB_ERROR code on other failure </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__dev_1gac35b26fef01271eba65c60b2b3ce1cbf" kindref="member">libusb_set_auto_detach_kernel_driver()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1601" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1601" bodyend="1624"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga49b5cb0d894f6807cd1693ef29aecbfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_release_interface</definition>
        <argsstring>(libusb_device_handle *dev_handle, int interface_number)</argsstring>
        <name>libusb_release_interface</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interface_number</declname>
        </param>
        <briefdescription>
<para>Release an interface previously claimed with <ref refid="group__libusb__dev_1gaee5076addf5de77c7962138397fd5b1a" kindref="member">libusb_claim_interface()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>You should release all claimed interfaces before closing a device handle.</para><para>This is a blocking function. A SET_INTERFACE control request will be sent to the device, resetting interface state to the first alternate setting.</para><para>If auto_detach_kernel_driver is set to 1 for <computeroutput>dev</computeroutput>, the kernel driver will be re-attached after releasing the interface.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>bInterfaceNumber</computeroutput> of the previously-claimed interface </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the interface was not claimed </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__dev_1gac35b26fef01271eba65c60b2b3ce1cbf" kindref="member">libusb_set_auto_detach_kernel_driver()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1645" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1645" bodyend="1667"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga4858ad4f0f58fd1dc0afaead1fe6479a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_set_interface_alt_setting</definition>
        <argsstring>(libusb_device_handle *dev_handle, int interface_number, int alternate_setting)</argsstring>
        <name>libusb_set_interface_alt_setting</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interface_number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alternate_setting</declname>
        </param>
        <briefdescription>
<para>Activate an alternate setting for an interface. </para>        </briefdescription>
        <detaileddescription>
<para>The interface must have been previously claimed with <ref refid="group__libusb__dev_1gaee5076addf5de77c7962138397fd5b1a" kindref="member">libusb_claim_interface()</ref>.</para><para>You should always use this function rather than formulating your own SET_INTERFACE control request. This is because the underlying operating system needs to know when such changes happen.</para><para>This is a blocking function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>bInterfaceNumber</computeroutput> of the previously-claimed interface </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alternate_setting</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>bAlternateSetting</computeroutput> of the alternate setting to activate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the interface was not claimed, or the requested alternate setting does not exist </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1690" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1690" bodyend="1712"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gab794bbc0b055d140f186f5a4d39c0891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_clear_halt</definition>
        <argsstring>(libusb_device_handle *dev_handle, unsigned char endpoint)</argsstring>
        <name>libusb_clear_halt</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>endpoint</declname>
        </param>
        <briefdescription>
<para>Clear the halt/stall condition for an endpoint. </para>        </briefdescription>
        <detaileddescription>
<para>Endpoints with halt status are unable to receive or transmit data until the halt condition is stalled.</para><para>You should cancel all pending transfers before attempting to clear the halt condition.</para><para>This is a blocking function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>the endpoint to clear halt status </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the endpoint does not exist </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1730" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1730" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gafee9c4638f1713ca5faa867948878111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_reset_device</definition>
        <argsstring>(libusb_device_handle *dev_handle)</argsstring>
        <name>libusb_reset_device</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <briefdescription>
<para>Perform a USB port reset to reinitialize a device. </para>        </briefdescription>
        <detaileddescription>
<para>The system will attempt to restore the previous configuration and alternate settings after the reset has completed.</para><para>If the reset fails, the descriptors change, or the previous state cannot be restored, the device will appear to be disconnected and reconnected. This means that the device handle is no longer valid (you should close it) and rediscover the device. A return code of LIBUSB_ERROR_NOT_FOUND indicates when this is the case.</para><para>This is a blocking function which usually incurs a noticeable delay.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a handle of the device to reset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if re-enumeration is required, or if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1759" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1759" bodyend="1766"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga1cabd4660a274f715eeb82de112e0779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_kernel_driver_active</definition>
        <argsstring>(libusb_device_handle *dev_handle, int interface_number)</argsstring>
        <name>libusb_kernel_driver_active</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interface_number</declname>
        </param>
        <briefdescription>
<para>Determine if a kernel driver is active on an interface. </para>        </briefdescription>
        <detaileddescription>
<para>If a kernel driver is active, you cannot claim the interface, and libusb will be unable to perform I/O.</para><para>This functionality is not available on Windows.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the interface to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if no kernel driver is active </para></simplesect>
<simplesect kind="return"><para>1 if a kernel driver is active </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_SUPPORTED on platforms where the functionality is not available </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__dev_1ga5e0cc1d666097e915748593effdc634a" kindref="member">libusb_detach_kernel_driver()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1902" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1902" bodyend="1914"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1ga5e0cc1d666097e915748593effdc634a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_detach_kernel_driver</definition>
        <argsstring>(libusb_device_handle *dev_handle, int interface_number)</argsstring>
        <name>libusb_detach_kernel_driver</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interface_number</declname>
        </param>
        <briefdescription>
<para>Detach a kernel driver from an interface. </para>        </briefdescription>
        <detaileddescription>
<para>If successful, you will then be able to claim the interface and perform I/O.</para><para>This functionality is not available on Darwin or Windows.</para><para>Note that libusb itself also talks to the device through a special kernel driver, if this driver is already attached to the device, this call will not detach it and return LIBUSB_ERROR_NOT_FOUND.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the interface to detach the driver from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if no kernel driver was active </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_INVALID_PARAM if the interface does not exist </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_SUPPORTED on platforms where the functionality is not available </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__dev_1ga1cabd4660a274f715eeb82de112e0779" kindref="member">libusb_kernel_driver_active()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1937" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1937" bodyend="1949"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gadeba36e900db663c0b7cf1b164a20d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_attach_kernel_driver</definition>
        <argsstring>(libusb_device_handle *dev_handle, int interface_number)</argsstring>
        <name>libusb_attach_kernel_driver</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interface_number</declname>
        </param>
        <briefdescription>
<para>Re-attach an interface&apos;s kernel driver, which was previously detached using <ref refid="group__libusb__dev_1ga5e0cc1d666097e915748593effdc634a" kindref="member">libusb_detach_kernel_driver()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This call is only effective on Linux and returns LIBUSB_ERROR_NOT_SUPPORTED on all other platforms.</para><para>This functionality is not available on Darwin or Windows.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the interface to attach the driver from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if no kernel driver was active </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_INVALID_PARAM if the interface does not exist </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NO_DEVICE if the device has been disconnected </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_SUPPORTED on platforms where the functionality is not available </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_BUSY if the driver cannot be attached because the interface is claimed by a program or driver </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on other failure </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__dev_1ga1cabd4660a274f715eeb82de112e0779" kindref="member">libusb_kernel_driver_active()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="1971" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="1971" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__dev_1gac35b26fef01271eba65c60b2b3ce1cbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_set_auto_detach_kernel_driver</definition>
        <argsstring>(libusb_device_handle *dev_handle, int enable)</argsstring>
        <name>libusb_set_auto_detach_kernel_driver</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable/disable libusb&apos;s automatic kernel driver detachment. </para>        </briefdescription>
        <detaileddescription>
<para>When this is enabled libusb will automatically detach the kernel driver on an interface when claiming the interface, and attach it when releasing the interface.</para><para>Automatic kernel driver detachment is disabled on newly opened device handles by default.</para><para>On platforms which do not have LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER this function will return LIBUSB_ERROR_NOT_SUPPORTED, and libusb will continue as if this function was never called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to enable or disable auto kernel driver detachment</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LIBUSB_SUCCESS on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_SUPPORTED on platforms where the functionality is not available </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__dev_1gaee5076addf5de77c7962138397fd5b1a" kindref="member">libusb_claim_interface()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__dev_1ga49b5cb0d894f6807cd1693ef29aecbfa" kindref="member">libusb_release_interface()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__dev_1ga785ddea63a2b9bcb879a614ca4867bed" kindref="member">libusb_set_configuration()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" line="2007" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/core.c" bodystart="2007" bodyend="2015"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The functionality documented below is designed to help with the following operations: </para>    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>Enumerating the USB devices currently attached to the system</para></listitem><listitem><para>Choosing a device to operate from your software</para></listitem><listitem><para>Opening and closing the chosen device</para></listitem></itemizedlist>
</para><sect1 id="group__libusb__dev_1nutshell">
<title>In a nutshell...</title>
<para>The description below really makes things sound more complicated than they actually are. The following sequence of function calls will be suitable for almost all scenarios and does not require you to have such a deep understanding of the resource management issues: <programlisting><codeline><highlight class="normal">//<sp/>discover<sp/>devices</highlight></codeline>
<codeline><highlight class="normal">libusb_device<sp/>**list;</highlight></codeline>
<codeline><highlight class="normal">libusb_device<sp/>*found<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">ssize_t<sp/>cnt<sp/>=<sp/>libusb_get_device_list(NULL,<sp/>&amp;list);</highlight></codeline>
<codeline><highlight class="normal">ssize_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>err<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(cnt<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>error();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>libusb_device<sp/>*device<sp/>=<sp/>list[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(is_interesting(device))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>device;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(found)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>libusb_device_handle<sp/>*handle;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>libusb_open(found,<sp/>&amp;handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>etc</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">libusb_free_device_list(list,<sp/>1);</highlight></codeline>
</programlisting></para><para>The two important points:<itemizedlist>
<listitem><para>You asked <ref refid="group__libusb__dev_1gad3b8561d064bb3e1b8851ddeed3cd7d6" kindref="member">libusb_free_device_list()</ref> to unreference the devices (2nd parameter)</para></listitem><listitem><para>You opened the device before freeing the list and unreferencing the devices</para></listitem></itemizedlist>
</para><para>If you ended up with a handle, you can now proceed to perform I/O on the device.</para></sect1>
<sect1 id="group__libusb__dev_1devshandles">
<title>Devices and device handles</title>
<para>libusb has a concept of a USB device, represented by the <ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> opaque type. A device represents a USB device that is currently or was previously connected to the system. Using a reference to a device, you can determine certain information about the device (e.g. you can read the descriptor data).</para><para>The <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref> function can be used to obtain a list of devices currently connected to the system. This is known as device discovery.</para><para>Just because you have a reference to a device does not mean it is necessarily usable. The device may have been unplugged, you may not have permission to operate such device, or another program or driver may be using the device.</para><para>When you&apos;ve found a device that you&apos;d like to operate, you must ask libusb to open the device using the <ref refid="group__libusb__dev_1ga3f184a8be4488a767b2e0ae07e76d1b0" kindref="member">libusb_open()</ref> function. Assuming success, libusb then returns you a <emphasis>device handle</emphasis> (a <ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> pointer). All &quot;real&quot; I/O operations then operate on the handle rather than the original device pointer.</para></sect1>
<sect1 id="group__libusb__dev_1devref">
<title>Device discovery and reference counting</title>
<para>Device discovery (i.e. calling <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref>) returns a freshly-allocated list of devices. The list itself must be freed when you are done with it. libusb also needs to know when it is OK to free the contents of the list - the devices themselves.</para><para>To handle these issues, libusb provides you with two separate items:<itemizedlist>
<listitem><para>A function to free the list itself</para></listitem><listitem><para>A reference counting system for the devices inside</para></listitem></itemizedlist>
</para><para>New devices presented by the <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref> function all have a reference count of 1. You can increase and decrease reference count using <ref refid="group__libusb__dev_1gaabaa4193adcabba1789cc1165ac41a03" kindref="member">libusb_ref_device()</ref> and <ref refid="group__libusb__dev_1ga3cc62e6a191b7a9f213e62b81ec30f4d" kindref="member">libusb_unref_device()</ref>. A device is destroyed when its reference count reaches 0.</para><para>With the above information in mind, the process of opening a device can be viewed as follows:<orderedlist>
<listitem><para>Discover devices using <ref refid="group__libusb__dev_1gac0fe4b65914c5ed036e6cbec61cb0b97" kindref="member">libusb_get_device_list()</ref>.</para></listitem><listitem><para>Choose the device that you want to operate, and call <ref refid="group__libusb__dev_1ga3f184a8be4488a767b2e0ae07e76d1b0" kindref="member">libusb_open()</ref>.</para></listitem><listitem><para>Unref all devices in the discovered device list.</para></listitem><listitem><para>Free the discovered device list.</para></listitem></orderedlist>
</para><para>The order is important - you must not unreference the device before attempting to open it, because unreferencing it may destroy the device.</para><para>For convenience, the <ref refid="group__libusb__dev_1gad3b8561d064bb3e1b8851ddeed3cd7d6" kindref="member">libusb_free_device_list()</ref> function includes a parameter to optionally unreference all the devices in the list before freeing the list itself. This combines steps 3 and 4 above.</para><para>As an implementation detail, <ref refid="group__libusb__dev_1ga3f184a8be4488a767b2e0ae07e76d1b0" kindref="member">libusb_open()</ref> actually adds a reference to the device in question. This is because the device remains available through the handle via <ref refid="group__libusb__dev_1gafe70b8a797893d4d16985980acec956a" kindref="member">libusb_get_device()</ref>. The reference is deleted during <ref refid="group__libusb__dev_1ga779bc4f1316bdb0ac383bddbd538620e" kindref="member">libusb_close()</ref>. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
