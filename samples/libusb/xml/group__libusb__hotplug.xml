<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__libusb__hotplug" kind="group">
    <compoundname>libusb_hotplug</compoundname>
    <title>Device hotplug event notification</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__libusb__hotplug_1ga95ce2ec85dec177854c423cea2853c52" prot="public" static="no">
        <name>libusb_hotplug_flag</name>
        <enumvalue id="group__libusb__hotplug_1gga95ce2ec85dec177854c423cea2853c52a2522bd2268865687cbfe8e7e0d8e4c10" prot="public">
          <name>LIBUSB_HOTPLUG_NO_FLAGS</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Default value when not using any flags. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__hotplug_1gga95ce2ec85dec177854c423cea2853c52a01a1c0c9f4e6852cb6df713f2e8a7f6b" prot="public">
          <name>LIBUSB_HOTPLUG_ENUMERATE</name>
          <initializer>= 1&lt;&lt;0</initializer>
          <briefdescription>
<para>Arm the callback and fire it for all matching currently attached devices. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Since version 1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102. </para>        </briefdescription>
        <detaileddescription>
<para>Flags for hotplug events </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1893" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1893" bodyend="1899"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf" prot="public" static="no">
        <name>libusb_hotplug_event</name>
        <enumvalue id="group__libusb__hotplug_1gga556d598ca379618a41bbec3597f55dcfac012270cba6e08dafe7e3bec204dffd6" prot="public">
          <name>LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
<para>A device has been plugged in and is ready to use. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__hotplug_1gga556d598ca379618a41bbec3597f55dcfac8234e02b673893ed549329ef3180a27" prot="public">
          <name>LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
<para>A device has left and is no longer available. </para>          </briefdescription>
          <detaileddescription>
<para>It is the user&apos;s responsibility to call libusb_close on any handle associated with a disconnected device. It is safe to call libusb_get_device_descriptor on a device that has left </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Since version 1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102. </para>        </briefdescription>
        <detaileddescription>
<para>Hotplug events </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1906" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1906" bodyend="1914"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094" prot="public" static="no">
        <type>int</type>
        <definition>typedef int libusb_hotplug_callback_handle</definition>
        <argsstring></argsstring>
        <name>libusb_hotplug_callback_handle</name>
        <briefdescription>
<para>Callback handle. </para>        </briefdescription>
        <detaileddescription>
<para>Callbacks handles are generated by <ref refid="group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7" kindref="member">libusb_hotplug_register_callback()</ref> and can be used to deregister callbacks. Callback handles are unique per libusb_context and it is safe to call <ref refid="group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc" kindref="member">libusb_hotplug_deregister_callback()</ref> on an already deregisted callback.</para><para>Since version 1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102</para><para>For more information, see <ref refid="libusb_hotplug" kindref="compound">Device hotplug event notification</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1886" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libusb__hotplug_1ga3d45c3fdf4d2e47a007fe2d9463b3f7f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int( * libusb_hotplug_callback_fn) (libusb_context *ctx, libusb_device *device, libusb_hotplug_event event, void *user_data)</definition>
        <argsstring>)(libusb_context *ctx, libusb_device *device, libusb_hotplug_event event, void *user_data)</argsstring>
        <name>libusb_hotplug_callback_fn</name>
        <briefdescription>
<para>Hotplug callback function type. </para>        </briefdescription>
        <detaileddescription>
<para>When requesting hotplug event notifications, you pass a pointer to a callback function of this type.</para><para>This callback may be called by an internal event thread and as such it is recommended the callback do minimal processing before returning.</para><para>libusb will call this function later, when a matching event had happened on a matching device. See <ref refid="libusb_hotplug" kindref="compound">Device hotplug event notification</ref> for more information.</para><para>It is safe to call either <ref refid="group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7" kindref="member">libusb_hotplug_register_callback()</ref> or <ref refid="group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc" kindref="member">libusb_hotplug_deregister_callback()</ref> from within a callback function.</para><para>Since version 1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context of this notification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>libusb_device this event occurred on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>event that occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user data provided when this callback was registered </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool whether this callback is finished processing events. returning 1 will cause this callback to be deregistered </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1942" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1942" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_hotplug_register_callback</definition>
        <argsstring>(libusb_context *ctx, libusb_hotplug_event events, libusb_hotplug_flag flags, int vendor_id, int product_id, int dev_class, libusb_hotplug_callback_fn cb_fn, void *user_data, libusb_hotplug_callback_handle *callback_handle)</argsstring>
        <name>libusb_hotplug_register_callback</name>
        <param>
          <type><ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf" kindref="member">libusb_hotplug_event</ref></type>
          <declname>events</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga95ce2ec85dec177854c423cea2853c52" kindref="member">libusb_hotplug_flag</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vendor_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>product_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev_class</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga3d45c3fdf4d2e47a007fe2d9463b3f7f" kindref="member">libusb_hotplug_callback_fn</ref></type>
          <declname>cb_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094" kindref="member">libusb_hotplug_callback_handle</ref> *</type>
          <declname>callback_handle</declname>
        </param>
        <briefdescription>
<para>Register a hotplug callback function. </para>        </briefdescription>
        <detaileddescription>
<para>Register a callback with the libusb_context. The callback will fire when a matching event occurs on a matching device. The callback is armed until either it is deregistered with <ref refid="group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc" kindref="member">libusb_hotplug_deregister_callback()</ref> or the supplied callback returns 1 to indicate it is finished processing events.</para><para>If the <ref refid="group__libusb__hotplug_1gga95ce2ec85dec177854c423cea2853c52a01a1c0c9f4e6852cb6df713f2e8a7f6b" kindref="member">LIBUSB_HOTPLUG_ENUMERATE</ref> is passed the callback will be called with a <ref refid="group__libusb__hotplug_1gga556d598ca379618a41bbec3597f55dcfac012270cba6e08dafe7e3bec204dffd6" kindref="member">LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED</ref> for all devices already plugged into the machine. Note that libusb modifies its internal device list from a separate thread, while calling hotplug callbacks from <ref refid="group__libusb__poll_1ga4989086e3f0327f3886a4c474ec7c327" kindref="member">libusb_handle_events()</ref>, so it is possible for a device to already be present on, or removed from, its internal device list, while the hotplug callbacks still need to be dispatched. This means that when using <ref refid="group__libusb__hotplug_1gga95ce2ec85dec177854c423cea2853c52a01a1c0c9f4e6852cb6df713f2e8a7f6b" kindref="member">LIBUSB_HOTPLUG_ENUMERATE</ref>, your callback may be called twice for the arrival of the same device, once from <ref refid="group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7" kindref="member">libusb_hotplug_register_callback()</ref> and once from <ref refid="group__libusb__poll_1ga4989086e3f0327f3886a4c474ec7c327" kindref="member">libusb_handle_events()</ref>; and/or your callback may be called for the removal of a device for which an arrived call was never made.</para><para>Since version 1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to register this callback with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">events</parametername>
</parameternamelist>
<parameterdescription>
<para>bitwise or of events that will trigger this callback. See <ref refid="group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf" kindref="member">libusb_hotplug_event</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>hotplug callback flags. See <ref refid="group__libusb__hotplug_1ga95ce2ec85dec177854c423cea2853c52" kindref="member">libusb_hotplug_flag</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vendor_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the vendor id to match or <ref refid="group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c" kindref="member">LIBUSB_HOTPLUG_MATCH_ANY</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">product_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the product id to match or <ref refid="group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c" kindref="member">LIBUSB_HOTPLUG_MATCH_ANY</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dev_class</parametername>
</parameternamelist>
<parameterdescription>
<para>the device class to match or <ref refid="group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c" kindref="member">LIBUSB_HOTPLUG_MATCH_ANY</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to be invoked on a matching event/device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user data to pass to the callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">callback_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to store the handle of the allocated callback (can be NULL) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1981" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" bodystart="237" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_hotplug_deregister_callback</definition>
        <argsstring>(libusb_context *ctx, libusb_hotplug_callback_handle callback_handle)</argsstring>
        <name>libusb_hotplug_deregister_callback</name>
        <param>
          <type><ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094" kindref="member">libusb_hotplug_callback_handle</ref></type>
          <declname>callback_handle</declname>
        </param>
        <briefdescription>
<para>Deregisters a hotplug callback. </para>        </briefdescription>
        <detaileddescription>
<para>Deregister a callback from a libusb_context. This function is safe to call from within a hotplug callback.</para><para>Since version 1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context this callback is registered with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle of the callback to deregister </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="2001" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" bodystart="314" bodyend="337"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c" prot="public" static="no">
        <name>LIBUSB_HOTPLUG_MATCH_ANY</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>Wildcard matching for hotplug events. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1918" column="9" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1918" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This page details how to use the libusb hotplug interface, where available. </para>    </briefdescription>
    <detaileddescription>
<para>Be mindful that not all platforms currently implement hotplug notification and that you should first call on <ref refid="group__libusb__misc_1ga9b8e324d28c624cd0b8e7ba21607b8db" kindref="member">libusb_has_capability()</ref> with parameter <ref refid="group__libusb__misc_1ggaab1b3fa0728c06fafbee897795889bd5a8b1bbccc648a6677cb9030a6ba827438" kindref="member">LIBUSB_CAP_HAS_HOTPLUG</ref> to confirm that hotplug support is available. </para>    </detaileddescription>
  </compounddef>
</doxygen>
