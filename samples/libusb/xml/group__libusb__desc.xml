<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__libusb__desc" kind="group">
    <compoundname>libusb_desc</compoundname>
    <title>USB descriptors</title>
    <innerclass refid="structlibusb__device__descriptor" prot="public">libusb_device_descriptor</innerclass>
    <innerclass refid="structlibusb__endpoint__descriptor" prot="public">libusb_endpoint_descriptor</innerclass>
    <innerclass refid="structlibusb__interface__descriptor" prot="public">libusb_interface_descriptor</innerclass>
    <innerclass refid="structlibusb__interface" prot="public">libusb_interface</innerclass>
    <innerclass refid="structlibusb__config__descriptor" prot="public">libusb_config_descriptor</innerclass>
    <innerclass refid="structlibusb__ss__endpoint__companion__descriptor" prot="public">libusb_ss_endpoint_companion_descriptor</innerclass>
    <innerclass refid="structlibusb__bos__dev__capability__descriptor" prot="public">libusb_bos_dev_capability_descriptor</innerclass>
    <innerclass refid="structlibusb__bos__descriptor" prot="public">libusb_bos_descriptor</innerclass>
    <innerclass refid="structlibusb__usb__2__0__extension__descriptor" prot="public">libusb_usb_2_0_extension_descriptor</innerclass>
    <innerclass refid="structlibusb__ss__usb__device__capability__descriptor" prot="public">libusb_ss_usb_device_capability_descriptor</innerclass>
    <innerclass refid="structlibusb__container__id__descriptor" prot="public">libusb_container_id_descriptor</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__libusb__desc_1gac529888effbefef8af4f9d17ebc903a1" prot="public" static="no">
        <name>libusb_class_code</name>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1ac6d01c08f92219d625162271d9547550" prot="public">
          <name>LIBUSB_CLASS_PER_INTERFACE</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>In the context of a <ref refid="structlibusb__device__descriptor" kindref="compound">device descriptor</ref>, this bDeviceClass value indicates that each interface specifies its own class information and all interfaces operate independently. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1a1f87be5c5c32c30e1e6831abdb61461a" prot="public">
          <name>LIBUSB_CLASS_AUDIO</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Audio class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1a7db61f0ea65d1919962ac0370513183b" prot="public">
          <name>LIBUSB_CLASS_COMM</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Communications class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1ad126069ffbc9cb3cda97fe0fe8c190f3" prot="public">
          <name>LIBUSB_CLASS_HID</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Human Interface Device class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1a7abdd4f2d21f046622717f70ad0b6ea9" prot="public">
          <name>LIBUSB_CLASS_PHYSICAL</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>Physical. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1ab1592f5d41d4ee3ccfe0adef8cbf04ee" prot="public">
          <name>LIBUSB_CLASS_PRINTER</name>
          <initializer>= 7</initializer>
          <briefdescription>
<para>Printer class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1abcd1d4f42671058f70ab9ae41c5ce303" prot="public">
          <name>LIBUSB_CLASS_PTP</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>Image class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1af393b0c8f1da0b9c558f6e5c113b59b2" prot="public">
          <name>LIBUSB_CLASS_IMAGE</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1ac84d2301375aef28bf5c3f4bda35f9d1" prot="public">
          <name>LIBUSB_CLASS_MASS_STORAGE</name>
          <initializer>= 8</initializer>
          <briefdescription>
<para>Mass storage class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1a28ba55c39b90ba3f281542e4ffdb626d" prot="public">
          <name>LIBUSB_CLASS_HUB</name>
          <initializer>= 9</initializer>
          <briefdescription>
<para>Hub class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1aa18621124b0db0f8972556647ad16827" prot="public">
          <name>LIBUSB_CLASS_DATA</name>
          <initializer>= 10</initializer>
          <briefdescription>
<para>Data class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1af4ec75b9ab816c46da747c80bbf9cca0" prot="public">
          <name>LIBUSB_CLASS_SMART_CARD</name>
          <initializer>= 0x0b</initializer>
          <briefdescription>
<para>Smart Card. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1a5d306be7a6fbfb331ce25c8c804eada8" prot="public">
          <name>LIBUSB_CLASS_CONTENT_SECURITY</name>
          <initializer>= 0x0d</initializer>
          <briefdescription>
<para>Content Security. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1a7deae7d18c3d99dda5bb3bd8b6ec01da" prot="public">
          <name>LIBUSB_CLASS_VIDEO</name>
          <initializer>= 0x0e</initializer>
          <briefdescription>
<para>Video. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1ab97e8441e102707252263abcdc29b4c0" prot="public">
          <name>LIBUSB_CLASS_PERSONAL_HEALTHCARE</name>
          <initializer>= 0x0f</initializer>
          <briefdescription>
<para>Personal Healthcare. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1a5f1089ee11b766a10a27c0c0600bebfa" prot="public">
          <name>LIBUSB_CLASS_DIAGNOSTIC_DEVICE</name>
          <initializer>= 0xdc</initializer>
          <briefdescription>
<para>Diagnostic Device. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1aaeea39cf3f500f56381cd6e05132d934" prot="public">
          <name>LIBUSB_CLASS_WIRELESS</name>
          <initializer>= 0xe0</initializer>
          <briefdescription>
<para>Wireless class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1a3a95beae54453469c4862efc1606dcc9" prot="public">
          <name>LIBUSB_CLASS_APPLICATION</name>
          <initializer>= 0xfe</initializer>
          <briefdescription>
<para>Application class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggac529888effbefef8af4f9d17ebc903a1ad68e1d33a332360428f838c6ddd847f6" prot="public">
          <name>LIBUSB_CLASS_VENDOR_SPEC</name>
          <initializer>= 0xff</initializer>
          <briefdescription>
<para>Class is vendor-specific. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Device and/or Interface Class codes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="186" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="186" bodyend="244"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__desc_1ga0a2e8a25dfdebf29fdd4764dcdbc1a9c" prot="public" static="no">
        <name>libusb_descriptor_type</name>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca486e222e9f3053502ce4954a5bd89ba2" prot="public">
          <name>LIBUSB_DT_DEVICE</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
<para>Device descriptor. </para>          </briefdescription>
          <detaileddescription>
<para>See <ref refid="structlibusb__device__descriptor" kindref="compound">libusb_device_descriptor</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca2a3f906d7755932ab67f39701da0b508" prot="public">
          <name>LIBUSB_DT_CONFIG</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
<para>Configuration descriptor. </para>          </briefdescription>
          <detaileddescription>
<para>See <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca2b8ca4332dce1357767ecab20ed2f4c2" prot="public">
          <name>LIBUSB_DT_STRING</name>
          <initializer>= 0x03</initializer>
          <briefdescription>
<para>String descriptor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca797f18e35ee27434562aed0c20c46b78" prot="public">
          <name>LIBUSB_DT_INTERFACE</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
<para>Interface descriptor. </para>          </briefdescription>
          <detaileddescription>
<para>See <ref refid="structlibusb__interface__descriptor" kindref="compound">libusb_interface_descriptor</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca97df43465eec9e6db81346f521777815" prot="public">
          <name>LIBUSB_DT_ENDPOINT</name>
          <initializer>= 0x05</initializer>
          <briefdescription>
<para>Endpoint descriptor. </para>          </briefdescription>
          <detaileddescription>
<para>See <ref refid="structlibusb__endpoint__descriptor" kindref="compound">libusb_endpoint_descriptor</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9caab1245826594605de870d70bffae7f2c" prot="public">
          <name>LIBUSB_DT_BOS</name>
          <initializer>= 0x0f</initializer>
          <briefdescription>
<para>BOS descriptor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca56875fd1a3df25bdea7680fa9047743c" prot="public">
          <name>LIBUSB_DT_DEVICE_CAPABILITY</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
<para>Device Capability descriptor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca3085fb63563770bfa1ede7b27cbf4f5e" prot="public">
          <name>LIBUSB_DT_HID</name>
          <initializer>= 0x21</initializer>
          <briefdescription>
<para>HID descriptor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca3972f13fb6b6abdb0978dc43d9d24e6f" prot="public">
          <name>LIBUSB_DT_REPORT</name>
          <initializer>= 0x22</initializer>
          <briefdescription>
<para>HID report descriptor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca77c22f3dc80f2a505c22c68cc54c70d3" prot="public">
          <name>LIBUSB_DT_PHYSICAL</name>
          <initializer>= 0x23</initializer>
          <briefdescription>
<para>Physical descriptor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca2186edbc7dc05b063ac41103a5ccfa9a" prot="public">
          <name>LIBUSB_DT_HUB</name>
          <initializer>= 0x29</initializer>
          <briefdescription>
<para>Hub descriptor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca6892da187e642c8a9b7900e86bf38ba8" prot="public">
          <name>LIBUSB_DT_SUPERSPEED_HUB</name>
          <initializer>= 0x2a</initializer>
          <briefdescription>
<para>SuperSpeed Hub descriptor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga0a2e8a25dfdebf29fdd4764dcdbc1a9ca9bdd0a16eb0647330c2b7085520db533" prot="public">
          <name>LIBUSB_DT_SS_ENDPOINT_COMPANION</name>
          <initializer>= 0x30</initializer>
          <briefdescription>
<para>SuperSpeed Endpoint Companion descriptor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Descriptor types as defined by the USB specification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="248" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="248" bodyend="287"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__desc_1ga86c880af878493aa8f805c2aba654b8b" prot="public" static="no">
        <name>libusb_endpoint_direction</name>
        <enumvalue id="group__libusb__desc_1gga86c880af878493aa8f805c2aba654b8ba3829979c66e5344367f32f4a31d43613" prot="public">
          <name>LIBUSB_ENDPOINT_IN</name>
          <initializer>= 0x80</initializer>
          <briefdescription>
<para>In: device-to-host. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1gga86c880af878493aa8f805c2aba654b8ba940484c16d44bdfc6eccc2de7a9ffcb2" prot="public">
          <name>LIBUSB_ENDPOINT_OUT</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
<para>Out: host-to-device. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Endpoint direction. </para>        </briefdescription>
        <detaileddescription>
<para>Values for bit 7 of the <ref refid="structlibusb__endpoint__descriptor_1a111d087a09cbeded8e15eda9127e23d2" kindref="member">endpoint address</ref> scheme. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="318" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="318" bodyend="324"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__desc_1gacb52027036a07de6ecc6c2bf07d07c71" prot="public" static="no">
        <name>libusb_transfer_type</name>
        <enumvalue id="group__libusb__desc_1ggacb52027036a07de6ecc6c2bf07d07c71a4c89624658c783ef9b2a2f08091bc7d7" prot="public">
          <name>LIBUSB_TRANSFER_TYPE_CONTROL</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Control endpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggacb52027036a07de6ecc6c2bf07d07c71a40de9889554fc1785d784b3c31333300" prot="public">
          <name>LIBUSB_TRANSFER_TYPE_ISOCHRONOUS</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Isochronous endpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggacb52027036a07de6ecc6c2bf07d07c71a7bdfa2fc5dadbaaa0e9262e1b4a228e2" prot="public">
          <name>LIBUSB_TRANSFER_TYPE_BULK</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Bulk endpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggacb52027036a07de6ecc6c2bf07d07c71aefb0e07862c0eed894ec9c2f957a7e3c" prot="public">
          <name>LIBUSB_TRANSFER_TYPE_INTERRUPT</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Interrupt endpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggacb52027036a07de6ecc6c2bf07d07c71a3b26ee40f9c586ece75f8de822d974e3" prot="public">
          <name>LIBUSB_TRANSFER_TYPE_BULK_STREAM</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Stream endpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Endpoint transfer type. </para>        </briefdescription>
        <detaileddescription>
<para>Values for bits 0:1 of the <ref refid="structlibusb__endpoint__descriptor_1a932b84417c46467f9916ecf7b679160b" kindref="member">endpoint attributes</ref> field. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="332" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="332" bodyend="347"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__desc_1gaa2231202dfe12eddca49b1193d44a441" prot="public" static="no">
        <name>libusb_iso_sync_type</name>
        <enumvalue id="group__libusb__desc_1ggaa2231202dfe12eddca49b1193d44a441a4a74eefd565a40b4ed911baaaaea1cee" prot="public">
          <name>LIBUSB_ISO_SYNC_TYPE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No synchronization. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggaa2231202dfe12eddca49b1193d44a441ab97a868cd66bfcac50f9ccf8ff0b3a67" prot="public">
          <name>LIBUSB_ISO_SYNC_TYPE_ASYNC</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Asynchronous. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggaa2231202dfe12eddca49b1193d44a441a813f487563e5b61a8399e7512f0c303b" prot="public">
          <name>LIBUSB_ISO_SYNC_TYPE_ADAPTIVE</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Adaptive. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggaa2231202dfe12eddca49b1193d44a441a39244a977707c95c7f3ba0e978faba84" prot="public">
          <name>LIBUSB_ISO_SYNC_TYPE_SYNC</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Synchronous. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Synchronization type for isochronous endpoints. </para>        </briefdescription>
        <detaileddescription>
<para>Values for bits 2:3 of the <ref refid="structlibusb__endpoint__descriptor_1a932b84417c46467f9916ecf7b679160b" kindref="member">bmAttributes</ref> field in <ref refid="structlibusb__endpoint__descriptor" kindref="compound">libusb_endpoint_descriptor</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="440" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="440" bodyend="452"/>
      </memberdef>
      <memberdef kind="enum" id="group__libusb__desc_1gab72474551b0eb965401e6febb856007c" prot="public" static="no">
        <name>libusb_iso_usage_type</name>
        <enumvalue id="group__libusb__desc_1ggab72474551b0eb965401e6febb856007ca13edfd0d36d959bcf32d5cca341c7f38" prot="public">
          <name>LIBUSB_ISO_USAGE_TYPE_DATA</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Data endpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggab72474551b0eb965401e6febb856007ca2390aa76c4444e0b590fb65f305e4485" prot="public">
          <name>LIBUSB_ISO_USAGE_TYPE_FEEDBACK</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Feedback endpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libusb__desc_1ggab72474551b0eb965401e6febb856007ca8e48a0bad38cfaf0e87dfdc225f91e32" prot="public">
          <name>LIBUSB_ISO_USAGE_TYPE_IMPLICIT</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Implicit feedback Data endpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Usage type for isochronous endpoints. </para>        </briefdescription>
        <detaileddescription>
<para>Values for bits 4:5 of the <ref refid="structlibusb__endpoint__descriptor_1a932b84417c46467f9916ecf7b679160b" kindref="member">bmAttributes</ref> field in <ref refid="structlibusb__endpoint__descriptor" kindref="compound">libusb_endpoint_descriptor</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="461" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="461" bodyend="470"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libusb__desc_1ga5e9ab08d490a7704cf3a9b0439f16f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_device_descriptor</definition>
        <argsstring>(libusb_device *dev, struct libusb_device_descriptor *desc)</argsstring>
        <name>libusb_get_device_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__device__descriptor" kindref="compound">libusb_device_descriptor</ref> *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Get the USB device descriptor for a given device. </para>        </briefdescription>
        <detaileddescription>
<para>This is a non-blocking function; the device descriptor is cached in memory.</para><para>Note since libusb-1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102, this function always succeeds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the descriptor data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a LIBUSB_ERROR code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="543" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="543" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga425885149172b53b3975a07629c8dab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_active_config_descriptor</definition>
        <argsstring>(libusb_device *dev, struct libusb_config_descriptor **config)</argsstring>
        <name>libusb_get_active_config_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> **</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get the USB configuration descriptor for the currently active configuration. </para>        </briefdescription>
        <detaileddescription>
<para>This is a non-blocking function which does not involve any requests being sent to the device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the USB configuration descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc" kindref="member">libusb_free_config_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the device is in unconfigured state </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532" kindref="member">libusb_get_config_descriptor</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="566" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="566" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_config_descriptor</definition>
        <argsstring>(libusb_device *dev, uint8_t config_index, struct libusb_config_descriptor **config)</argsstring>
        <name>libusb_get_config_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>config_index</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> **</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get a USB configuration descriptor based on its index. </para>        </briefdescription>
        <detaileddescription>
<para>This is a non-blocking function which does not involve any requests being sent to the device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the configuration you wish to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the USB configuration descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc" kindref="member">libusb_free_config_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the configuration does not exist </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1ga425885149172b53b3975a07629c8dab3" kindref="member">libusb_get_active_config_descriptor()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1ga3e7bffc5d08404c4d6491e73b967bf67" kindref="member">libusb_get_config_descriptor_by_value()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="615" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="615" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga3e7bffc5d08404c4d6491e73b967bf67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_config_descriptor_by_value</definition>
        <argsstring>(libusb_device *dev, uint8_t bConfigurationValue, struct libusb_config_descriptor **config)</argsstring>
        <name>libusb_get_config_descriptor_by_value</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bConfigurationValue</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> **</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get a USB configuration descriptor with a specific bConfigurationValue. </para>        </briefdescription>
        <detaileddescription>
<para>This is a non-blocking function which does not involve any requests being sent to the device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bConfigurationValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the bConfigurationValue of the configuration you wish to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the USB configuration descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc" kindref="member">libusb_free_config_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the configuration does not exist </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1ga425885149172b53b3975a07629c8dab3" kindref="member">libusb_get_active_config_descriptor()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532" kindref="member">libusb_get_config_descriptor()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="699" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="699" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_config_descriptor</definition>
        <argsstring>(struct libusb_config_descriptor *config)</argsstring>
        <name>libusb_free_config_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Free a configuration descriptor obtained from <ref refid="group__libusb__desc_1ga425885149172b53b3975a07629c8dab3" kindref="member">libusb_get_active_config_descriptor()</ref> or <ref refid="group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532" kindref="member">libusb_get_config_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL config parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="730" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="730" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gade95f9708956c3d45d9969e860fc7241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_ss_endpoint_companion_descriptor</definition>
        <argsstring>(struct libusb_context *ctx, const struct libusb_endpoint_descriptor *endpoint, struct libusb_ss_endpoint_companion_descriptor **ep_comp)</argsstring>
        <name>libusb_get_ss_endpoint_companion_descriptor</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structlibusb__endpoint__descriptor" kindref="compound">libusb_endpoint_descriptor</ref> *</type>
          <declname>endpoint</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__ss__endpoint__companion__descriptor" kindref="compound">libusb_ss_endpoint_companion_descriptor</ref> **</type>
          <declname>ep_comp</declname>
        </param>
        <briefdescription>
<para>Get an endpoints superspeed endpoint companion descriptor (if any) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>endpoint descriptor from which to get the superspeed endpoint companion descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the superspeed endpoint companion descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga52738e36d2c0e6a0607405d783a2c894" kindref="member">libusb_free_ss_endpoint_companion_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the configuration does not exist </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="753" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="753" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga52738e36d2c0e6a0607405d783a2c894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_ss_endpoint_companion_descriptor</definition>
        <argsstring>(struct libusb_ss_endpoint_companion_descriptor *ep_comp)</argsstring>
        <name>libusb_free_ss_endpoint_companion_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__ss__endpoint__companion__descriptor" kindref="compound">libusb_ss_endpoint_companion_descriptor</ref> *</type>
          <declname>ep_comp</declname>
        </param>
        <briefdescription>
<para>Free a superspeed endpoint companion descriptor obtained from <ref refid="group__libusb__desc_1gade95f9708956c3d45d9969e860fc7241" kindref="member">libusb_get_ss_endpoint_companion_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL ep_comp parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the superspeed endpoint companion descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="798" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="798" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga68fd9576677c12aa397192916dc49a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_bos_descriptor</definition>
        <argsstring>(libusb_device_handle *dev_handle, struct libusb_bos_descriptor **bos)</argsstring>
        <name>libusb_get_bos_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__bos__descriptor" kindref="compound">libusb_bos_descriptor</ref> **</type>
          <declname>bos</declname>
        </param>
        <briefdescription>
<para>Get a Binary Object Store (BOS) descriptor This is a BLOCKING function, which will send requests to the device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle of an open libusb device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bos</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the BOS descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1gac9bff9809a7b8663190dda0455998767" kindref="member">libusb_free_bos_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the device doesn&apos;t have a BOS descriptor </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="894" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="894" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gac9bff9809a7b8663190dda0455998767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_bos_descriptor</definition>
        <argsstring>(struct libusb_bos_descriptor *bos)</argsstring>
        <name>libusb_free_bos_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__bos__descriptor" kindref="compound">libusb_bos_descriptor</ref> *</type>
          <declname>bos</declname>
        </param>
        <briefdescription>
<para>Free a BOS descriptor obtained from <ref refid="group__libusb__desc_1ga68fd9576677c12aa397192916dc49a0b" kindref="member">libusb_get_bos_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL bos parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bos</parametername>
</parameternamelist>
<parameterdescription>
<para>the BOS descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="943" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="943" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gac76954b54b97d90c760716fc048b6555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_usb_2_0_extension_descriptor</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_bos_dev_capability_descriptor *dev_cap, struct libusb_usb_2_0_extension_descriptor **usb_2_0_extension)</argsstring>
        <name>libusb_get_usb_2_0_extension_descriptor</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__bos__dev__capability__descriptor" kindref="compound">libusb_bos_dev_capability_descriptor</ref> *</type>
          <declname>dev_cap</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__usb__2__0__extension__descriptor" kindref="compound">libusb_usb_2_0_extension_descriptor</ref> **</type>
          <declname>usb_2_0_extension</declname>
        </param>
        <briefdescription>
<para>Get an USB 2.0 Extension descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Device Capability descriptor with a bDevCapabilityType of <ref refid="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64ca243b090db95a0fdf7104fbf581724b86" kindref="member">libusb_capability_type::LIBUSB_BT_USB_2_0_EXTENSION</ref> LIBUSB_BT_USB_2_0_EXTENSION </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usb_2_0_extension</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the USB 2.0 Extension descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga5efd69bf490c4359356f5e5bea8dd48c" kindref="member">libusb_free_usb_2_0_extension_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>a LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="968" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="968" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga5efd69bf490c4359356f5e5bea8dd48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_usb_2_0_extension_descriptor</definition>
        <argsstring>(struct libusb_usb_2_0_extension_descriptor *usb_2_0_extension)</argsstring>
        <name>libusb_free_usb_2_0_extension_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__usb__2__0__extension__descriptor" kindref="compound">libusb_usb_2_0_extension_descriptor</ref> *</type>
          <declname>usb_2_0_extension</declname>
        </param>
        <briefdescription>
<para>Free a USB 2.0 Extension descriptor obtained from <ref refid="group__libusb__desc_1gac76954b54b97d90c760716fc048b6555" kindref="member">libusb_get_usb_2_0_extension_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL usb_2_0_extension parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usb_2_0_extension</parametername>
</parameternamelist>
<parameterdescription>
<para>the USB 2.0 Extension descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1007" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1007" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga6f9118c2c4c5a42f9e4040e78af63f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_ss_usb_device_capability_descriptor</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_bos_dev_capability_descriptor *dev_cap, struct libusb_ss_usb_device_capability_descriptor **ss_usb_device_cap)</argsstring>
        <name>libusb_get_ss_usb_device_capability_descriptor</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__bos__dev__capability__descriptor" kindref="compound">libusb_bos_dev_capability_descriptor</ref> *</type>
          <declname>dev_cap</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__ss__usb__device__capability__descriptor" kindref="compound">libusb_ss_usb_device_capability_descriptor</ref> **</type>
          <declname>ss_usb_device_cap</declname>
        </param>
        <briefdescription>
<para>Get a SuperSpeed USB Device Capability descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Device Capability descriptor with a bDevCapabilityType of <ref refid="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64ca2f1ab0d2d1e14d4942c079749b1b6c85" kindref="member">libusb_capability_type::LIBUSB_BT_SS_USB_DEVICE_CAPABILITY</ref> LIBUSB_BT_SS_USB_DEVICE_CAPABILITY </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ss_usb_device_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the SuperSpeed USB Device Capability descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga8fbf4e49c3ae0c6b7bc2d540ad9a75fb" kindref="member">libusb_free_ss_usb_device_capability_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>a LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1026" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1026" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga8fbf4e49c3ae0c6b7bc2d540ad9a75fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_ss_usb_device_capability_descriptor</definition>
        <argsstring>(struct libusb_ss_usb_device_capability_descriptor *ss_usb_device_cap)</argsstring>
        <name>libusb_free_ss_usb_device_capability_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__ss__usb__device__capability__descriptor" kindref="compound">libusb_ss_usb_device_capability_descriptor</ref> *</type>
          <declname>ss_usb_device_cap</declname>
        </param>
        <briefdescription>
<para>Free a SuperSpeed USB Device Capability descriptor obtained from <ref refid="group__libusb__desc_1ga6f9118c2c4c5a42f9e4040e78af63f78" kindref="member">libusb_get_ss_usb_device_capability_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL ss_usb_device_cap parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ss_usb_device_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>the USB 2.0 Extension descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1065" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1065" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gabe419223add0c8190a940cc4fae19c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_container_id_descriptor</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_bos_dev_capability_descriptor *dev_cap, struct libusb_container_id_descriptor **container_id)</argsstring>
        <name>libusb_get_container_id_descriptor</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__bos__dev__capability__descriptor" kindref="compound">libusb_bos_dev_capability_descriptor</ref> *</type>
          <declname>dev_cap</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__container__id__descriptor" kindref="compound">libusb_container_id_descriptor</ref> **</type>
          <declname>container_id</declname>
        </param>
        <briefdescription>
<para>Get a Container ID descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Device Capability descriptor with a bDevCapabilityType of <ref refid="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64cac3c00e8861b4b596ea1f53c505809e5e" kindref="member">libusb_capability_type::LIBUSB_BT_CONTAINER_ID</ref> LIBUSB_BT_CONTAINER_ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>container_id</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the Container ID descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1gafeb7c49aa9d3a9c4964f397220d8eab4" kindref="member">libusb_free_container_id_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>a LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1084" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1084" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gafeb7c49aa9d3a9c4964f397220d8eab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_container_id_descriptor</definition>
        <argsstring>(struct libusb_container_id_descriptor *container_id)</argsstring>
        <name>libusb_free_container_id_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__container__id__descriptor" kindref="compound">libusb_container_id_descriptor</ref> *</type>
          <declname>container_id</declname>
        </param>
        <briefdescription>
<para>Free a Container ID descriptor obtained from <ref refid="group__libusb__desc_1gabe419223add0c8190a940cc4fae19c7f" kindref="member">libusb_get_container_id_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL container_id parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the USB 2.0 Extension descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1122" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1122" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga240aac96d92cb9f51e3aea79a4adbf42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_string_descriptor_ascii</definition>
        <argsstring>(libusb_device_handle *dev_handle, uint8_t desc_index, unsigned char *data, int length)</argsstring>
        <name>libusb_get_string_descriptor_ascii</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>desc_index</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Retrieve a string descriptor in C style ASCII. </para>        </briefdescription>
        <detaileddescription>
<para>Wrapper around <ref refid="group__libusb__desc_1ga09103309f98471387561bce0719d88ad" kindref="member">libusb_get_string_descriptor()</ref>. Uses the first language supported by the device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the descriptor to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for ASCII string descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes returned in data, or LIBUSB_ERROR code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1140" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1140" bodyend="1191"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga9e34f7ecf3817e9bfe77ed09238940df" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int libusb_get_descriptor</definition>
        <argsstring>(libusb_device_handle *dev_handle, uint8_t desc_type, uint8_t desc_index, unsigned char *data, int length)</argsstring>
        <name>libusb_get_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>desc_type</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>desc_index</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Retrieve a descriptor from the default control pipe. </para>        </briefdescription>
        <detaileddescription>
<para>This is a convenience function which formulates the appropriate control message to retrieve the descriptor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the descriptor type, see <ref refid="group__libusb__desc_1ga0a2e8a25dfdebf29fdd4764dcdbc1a9c" kindref="member">libusb_descriptor_type</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the descriptor to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes returned in data, or LIBUSB_ERROR code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1772" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1772" bodyend="1778"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga09103309f98471387561bce0719d88ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int libusb_get_string_descriptor</definition>
        <argsstring>(libusb_device_handle *dev_handle, uint8_t desc_index, uint16_t langid, unsigned char *data, int length)</argsstring>
        <name>libusb_get_string_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>desc_index</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>langid</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Retrieve a descriptor from a device. </para>        </briefdescription>
        <detaileddescription>
<para>This is a convenience function which formulates the appropriate control message to retrieve the descriptor. The string returned is Unicode, as detailed in the USB specifications.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the descriptor to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>langid</parametername>
</parameternamelist>
<parameterdescription>
<para>the language ID for the string descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes returned in data, or LIBUSB_ERROR code on failure </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1ga240aac96d92cb9f51e3aea79a4adbf42" kindref="member">libusb_get_string_descriptor_ascii()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" line="1794" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/libusb.h" bodystart="1794" bodyend="1800"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This page details how to examine the various standard USB descriptors for detected devices. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
