<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="hotplug_8c" kind="file" language="C++">
    <compoundname>hotplug.c</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="yes">libusbi.h</includes>
    <includes local="yes">hotplug.h</includes>
    <incdepgraph>
      <node id="30">
        <label>assert.h</label>
      </node>
      <node id="28">
        <label>stdlib.h</label>
      </node>
      <node id="26">
        <label>errno.h</label>
      </node>
      <node id="32">
        <label>hotplug.h</label>
      </node>
      <node id="29">
        <label>string.h</label>
      </node>
      <node id="24">
        <label>hotplug.c</label>
        <link refid="hotplug_8c"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>config.h</label>
      </node>
      <node id="27">
        <label>stdio.h</label>
      </node>
      <node id="31">
        <label>libusbi.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="hotplug_8c_1aa99442284bbc0ff40068c26754adc4e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int usbi_hotplug_match_cb</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_device *dev, libusb_hotplug_event event, struct libusb_hotplug_callback *hotplug_cb)</argsstring>
        <name>usbi_hotplug_match_cb</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf" kindref="member">libusb_hotplug_event</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>struct libusb_hotplug_callback *</type>
          <declname>hotplug_cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" line="157" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" bodystart="157" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="hotplug_8c_1ac5a13ed5a7f26975ff8b9284e3d204f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbi_hotplug_match</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_device *dev, libusb_hotplug_event event)</argsstring>
        <name>usbi_hotplug_match</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf" kindref="member">libusb_hotplug_event</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" line="189" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" bodystart="189" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="hotplug_8c_1ac55896f4c412800dfcbc850bac0493e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbi_hotplug_notification</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_device *dev, libusb_hotplug_event event)</argsstring>
        <name>usbi_hotplug_notification</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf" kindref="member">libusb_hotplug_event</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" line="213" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" bodystart="213" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_hotplug_register_callback</definition>
        <argsstring>(libusb_context *ctx, libusb_hotplug_event events, libusb_hotplug_flag flags, int vendor_id, int product_id, int dev_class, libusb_hotplug_callback_fn cb_fn, void *user_data, libusb_hotplug_callback_handle *callback_handle)</argsstring>
        <name>libusb_hotplug_register_callback</name>
        <param>
          <type><ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf" kindref="member">libusb_hotplug_event</ref></type>
          <declname>events</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga95ce2ec85dec177854c423cea2853c52" kindref="member">libusb_hotplug_flag</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vendor_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>product_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev_class</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga3d45c3fdf4d2e47a007fe2d9463b3f7f" kindref="member">libusb_hotplug_callback_fn</ref></type>
          <declname>cb_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094" kindref="member">libusb_hotplug_callback_handle</ref> *</type>
          <declname>callback_handle</declname>
        </param>
        <briefdescription>
<para>Register a hotplug callback function. </para>        </briefdescription>
        <detaileddescription>
<para>Register a callback with the libusb_context. The callback will fire when a matching event occurs on a matching device. The callback is armed until either it is deregistered with <ref refid="group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc" kindref="member">libusb_hotplug_deregister_callback()</ref> or the supplied callback returns 1 to indicate it is finished processing events.</para><para>If the <ref refid="group__libusb__hotplug_1gga95ce2ec85dec177854c423cea2853c52a01a1c0c9f4e6852cb6df713f2e8a7f6b" kindref="member">LIBUSB_HOTPLUG_ENUMERATE</ref> is passed the callback will be called with a <ref refid="group__libusb__hotplug_1gga556d598ca379618a41bbec3597f55dcfac012270cba6e08dafe7e3bec204dffd6" kindref="member">LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED</ref> for all devices already plugged into the machine. Note that libusb modifies its internal device list from a separate thread, while calling hotplug callbacks from <ref refid="group__libusb__poll_1ga4989086e3f0327f3886a4c474ec7c327" kindref="member">libusb_handle_events()</ref>, so it is possible for a device to already be present on, or removed from, its internal device list, while the hotplug callbacks still need to be dispatched. This means that when using <ref refid="group__libusb__hotplug_1gga95ce2ec85dec177854c423cea2853c52a01a1c0c9f4e6852cb6df713f2e8a7f6b" kindref="member">LIBUSB_HOTPLUG_ENUMERATE</ref>, your callback may be called twice for the arrival of the same device, once from <ref refid="group__libusb__hotplug_1ga00e0c69ddf1fb1b6774dc918192e8dc7" kindref="member">libusb_hotplug_register_callback()</ref> and once from <ref refid="group__libusb__poll_1ga4989086e3f0327f3886a4c474ec7c327" kindref="member">libusb_handle_events()</ref>; and/or your callback may be called for the removal of a device for which an arrived call was never made.</para><para>Since version 1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to register this callback with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">events</parametername>
</parameternamelist>
<parameterdescription>
<para>bitwise or of events that will trigger this callback. See <ref refid="group__libusb__hotplug_1ga556d598ca379618a41bbec3597f55dcf" kindref="member">libusb_hotplug_event</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>hotplug callback flags. See <ref refid="group__libusb__hotplug_1ga95ce2ec85dec177854c423cea2853c52" kindref="member">libusb_hotplug_flag</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vendor_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the vendor id to match or <ref refid="group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c" kindref="member">LIBUSB_HOTPLUG_MATCH_ANY</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">product_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the product id to match or <ref refid="group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c" kindref="member">LIBUSB_HOTPLUG_MATCH_ANY</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dev_class</parametername>
</parameternamelist>
<parameterdescription>
<para>the device class to match or <ref refid="group__libusb__hotplug_1ga6d4f5e524a3b7ab4a25b751073335d4c" kindref="member">LIBUSB_HOTPLUG_MATCH_ANY</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to be invoked on a matching event/device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user data to pass to the callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">callback_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to store the handle of the allocated callback (can be NULL) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" line="237" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" bodystart="237" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__hotplug_1ga8110f57eab2064375934f1449b2602bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_hotplug_deregister_callback</definition>
        <argsstring>(struct libusb_context *ctx, libusb_hotplug_callback_handle callback_handle)</argsstring>
        <name>libusb_hotplug_deregister_callback</name>
        <param>
          <type><ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group__libusb__hotplug_1ga4868157346bbf2c70b6af0cb0a6c0094" kindref="member">libusb_hotplug_callback_handle</ref></type>
          <declname>callback_handle</declname>
        </param>
        <briefdescription>
<para>Deregisters a hotplug callback. </para>        </briefdescription>
        <detaileddescription>
<para>Deregister a callback from a libusb_context. This function is safe to call from within a hotplug callback.</para><para>Since version 1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context this callback is registered with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle of the callback to deregister </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" line="314" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" bodystart="314" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="hotplug_8c_1ac4f6c2176752f975d0e1ac6afad45333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbi_hotplug_deregister_all</definition>
        <argsstring>(struct libusb_context *ctx)</argsstring>
        <name>usbi_hotplug_deregister_all</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" line="339" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c" bodystart="339" bodyend="350"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/hotplug.c"/>
  </compounddef>
</doxygen>
