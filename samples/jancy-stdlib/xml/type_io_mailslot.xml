<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen>
<compounddef kind='class' id='type_io_mailslot' language='Jancy'>
<compoundname>Mailslot</compoundname>

<sectiondef>
<memberdef kind='function' id='function_io_mailslot_construct'>
<functionkind>construct</functionkind>
<name>construct</name>
<type>void</type>
<argsstring>(io.Mailslot safe* this)</argsstring>
<location file='io_Mailslot.jnc' line='164' col='2'/>
</memberdef>
<memberdef kind='function' id='function_io_mailslot_destruct'>
<functionkind>destruct</functionkind>
<name>destruct</name>
<type>void</type>
<argsstring>(io.Mailslot safe* this)</argsstring>
<location file='io_Mailslot.jnc' line='165' col='2'/>
</memberdef>
</sectiondef>

<sectiondef>
<memberdef kind='variable' id='struct_member_io_mailslot_iface_m_isopen' readonly='yes'>
<name>m_isOpen</name>
<type>bool</type>
<modifiers>readonly</modifiers>
<detaileddescription>
<para>Holds the open status for the mailslot, i.e. ``true`` if opened; ``false`` otherwise.</para>
</detaileddescription>
<location file='io_Mailslot.jnc' line='156' col='16'/>
</memberdef>

<memberdef kind='variable' id='struct_member_io_mailslot_iface_m_syncid'>
<name>m_syncId</name>
<type><ref refid="typedef_uint_t">uint_t</ref></type>
<detaileddescription>
<para>Holds the synchronization ID for the mailslot [#f3]_.</para>
</detaileddescription>
<location file='io_Mailslot.jnc' line='162' col='9'/>
</memberdef>

<memberdef kind='function' id='function_io_mailslot_open'>
<functionkind>named-function</functionkind>
<name>open</name>
<type>bool errorcode</type>
<argsstring>(io.Mailslot safe* this, char const* name)</argsstring>
<param>
<declname>name</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Opens or creates a mailslot.

The function accepts a single argument, ``name``, which is used to specify the name of the mailslot.

Returns ``true`` on success. If the mailslot could not be opened, IO error supplied by operating system is set and then the function returns ``false``  [#f1]_.</para>
</detaileddescription>
<location file='io_Mailslot.jnc' line='175' col='17'/>
</memberdef>

<memberdef kind='function' id='function_io_mailslot_close'>
<functionkind>named-function</functionkind>
<name>close</name>
<type>void</type>
<argsstring>(io.Mailslot safe* this)</argsstring>
<detaileddescription>
<para>Closes a previously opened mailslot, does nothing if the mailslot is not opened. This function always succeeds.

Sometimes it may be convenient to use *disposable* pattern to ensure timely invokation of ``close`` [#f2]_.</para>
</detaileddescription>
<location file='io_Mailslot.jnc' line='183' col='7'/>
</memberdef>

<memberdef kind='alias' id='alias_io_mailslot_dispose'>
<name>dispose</name>
<initializer>= close</initializer>
<detaileddescription>
<para>Effectively makes ``io.Mailslot`` a *disposable* class [#f2]_.</para>
</detaileddescription>
<location file='io_Mailslot.jnc' line='189' col='8'/>
</memberdef>

<memberdef kind='function' id='function_io_mailslot_read'>
<functionkind>named-function</functionkind>
<name>read</name>
<type><ref refid="typedef_size_t">size_t</ref> errorcode</type>
<argsstring>(io.Mailslot safe* this, void* p, size_t size)</argsstring>
<param>
<declname>p</declname>
<type>void*</type>
<array></array>
</param>
<param>
<declname>size</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Attempts to read up to ``size`` bytes from the mailslot into the buffer pointed to by ``p``.

Returns the actual amount of bytes read or ``-1`` if error occurs  [#f1]_.

Normally you would call this function from within your event handler for ``IncomingData`` event. If this function is called when there is no incoming data, it blocks until either the data arrives, or the mailslot is closed.</para>
</detaileddescription>
<location file='io_Mailslot.jnc' line='199' col='19'/>
</memberdef>

<memberdef kind='event' id='struct_member_io_mailslot_iface_m_onmailslotevent'>
<name>m_onMailslotEvent</name>
<type>multicast</type>
<argsstring>(io.MailslotEventParams const* params)</argsstring>
<param>
<declname>params</declname>
<type><ref refid="type_io_mailsloteventparams">io.MailslotEventParams</ref> const*</type>
<array></array>
</param>
<detaileddescription>
<para>This event is fired whenever an event occurs on the file stream.

For the list of possible events, refer to `io.MailslotEventCode` enumeration.

Event handler receives a single argument of type `io.MailslotEventParams` which holds parameters of the particular event [#f3]_.</para>
</detaileddescription>
<location file='io_Mailslot.jnc' line='212' col='8'/>
</memberdef>

</sectiondef>
<sectiondef>
<memberdef kind='footnote'>
<name>f1</name>
<detaileddescription>
<para>|footnote-errorcode|</para>
</detaileddescription>
</memberdef>
<memberdef kind='footnote'>
<name>f2</name>
<detaileddescription>
<para>|footnote-disposable|</para>
</detaileddescription>
</memberdef>
<memberdef kind='footnote'>
<name>f3</name>
<detaileddescription>
<para>|footnote-sync-id|</para>
</detaileddescription>
</memberdef>
</sectiondef>
<includes>io_base.jncx</includes>
<includes>io_Mailslot.jnc</includes>
<briefdescription><para>This class provides high-level asynchronous streaming interface for the *server* side of Windows mailslots which are used, for example, in SMB (Server Message Blocks) protocol and Windows Computer Browser service.</para></briefdescription>
<detaileddescription>
<para>For working from the *client* side of a mailslot, please use `io.File` or `io.FileStream`.

A typical sequence of steps when working with a mailslot looks something like this:

* Assign your event handler using ``m_onMailslotEvent`` (you would probably also want to *schedule* your event handler to be run in particular environment, e.g. in specific thread)
* Open a mailslot with ``open`` method;
* When ``IncomingData`` event is fired, read from the mailslot using ``read`` method;
* Close the mailslot when no longer needed with ``close`` method.

.. rubric:: Sample code:

.. ref-code-block::

	class MyDialog
	{
		// ...

		io.Mailslot m_mailslot;

		construct ();
		onMailslotEvent (`io.MailslotEventParams` const* params);
	}

	MyDialog.construct ()
	{
		// ...
		m_mailslot.m_onMailslotEvent += onMailslotEvent @ g_mainThreadScheduler;
	}

	MyDialog.onMailslotEvent (`io.MailslotEventParams` const* params)
	{
		if (params.m_syncId != m_mailslot.m_syncId) // late event
			return;

		switch (params.m_code)
		{
		case `io.mailslotEventCode.IncomingData`:
			char buffer [256];
			size_t size = m_mailslot.read (buffer, sizeof (buffer));
			// ...
			break;
		}
	}</para>
<para><simplesect kind='see'><para>`io.MailslotEventParams`, `io.MailslotEventCode`, `io.File`, `io.FileStream`</para></simplesect></para>
</detaileddescription>
<location file='io_Mailslot.jnc' line='150' col='14'/>
</compounddef>
</doxygen>
