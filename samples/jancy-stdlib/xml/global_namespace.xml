<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen>
<compounddef kind='file' id='global_namespace' language='Jancy'>
<compoundname>global</compoundname>
<innernamespace refid='namespace_std'/>
<innernamespace refid='namespace_sys'/>
<innernamespace refid='namespace_io'/>
<innernamespace refid='namespace_jnc'/>
<sectiondef>
<memberdef kind='function' id='function_strlen'>
<functionkind>named-function</functionkind>
<name>strlen</name>
<type><ref refid="typedef_size_t">size_t</ref></type>
<argsstring>(char const* p)</argsstring>
<param>
<declname>p</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Calculates and returns the length of the string pointed to by ``p`` argument. The length of the string is defined as the number of bytes between the beginning of the string ``p`` and the very first ``0`` byte [#f1]_.

Returns ``0`` if ``p == null``.</para>
</detaileddescription>
<location file='std_globals.jnc' line='48' col='8'/>
</memberdef>

<memberdef kind='function' id='function_strcmp'>
<functionkind>named-function</functionkind>
<name>strcmp</name>
<type>int</type>
<argsstring>(char const* p1, char const* p2)</argsstring>
<param>
<declname>p1</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>p2</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Performs a case-sensitive lexicographic comparison of two null-terminated strings pointed to by ``p1`` and ``p2`` [#f1]_.

Returns ``0`` if null-terminated strings pointed to by ``p1`` and ``p2`` are equal.

Returns ``-1`` if ``p1`` appears before ``p2`` in lexographical order.

Returns ``1`` if ``p1`` appears after ``p2`` in lexographical order.</para>
</detaileddescription>
<location file='std_globals.jnc' line='60' col='5'/>
</memberdef>

<memberdef kind='function' id='function_stricmp'>
<functionkind>named-function</functionkind>
<name>stricmp</name>
<type>int</type>
<argsstring>(char const* p1, char const* p2)</argsstring>
<param>
<declname>p1</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>p2</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Performs a case-insensitive lexicographic comparison of two null-terminated strings pointed to by ``p1`` and ``p2`` [#f1]_.

Returns ``0`` if null-terminated strings pointed to by ``p1`` and ``p2`` are equal.

Returns ``-1`` if ``p1`` appears before ``p2`` in lexographical order.

Returns ``1`` if ``p1`` appears after ``p2`` in lexographical order.</para>
</detaileddescription>
<location file='std_globals.jnc' line='75' col='5'/>
</memberdef>

<memberdef kind='function' id='function_streq'>
<functionkind>named-function</functionkind>
<name>streq</name>
<type>bool</type>
<argsstring>(char const* p1, char const* p2)</argsstring>
<param>
<declname>p1</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>p2</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Performs a case-sensitive lexicographic comparison of two null-terminated strings pointed to by ``p1`` and ``p2`` [#f1]_.

Returns ``true`` if null-terminated strings pointed to by ``p1`` and ``p2`` are equal and ``false`` otherwise.</para>
</detaileddescription>
<location file='std_globals.jnc' line='94' col='6'/>
</memberdef>

<memberdef kind='function' id='function_strieq'>
<functionkind>named-function</functionkind>
<name>strieq</name>
<type>bool</type>
<argsstring>(char const* p1, char const* p2)</argsstring>
<param>
<declname>p1</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>p2</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Performs a case-insensitive lexicographic comparison of two null-terminated strings pointed to by ``p1`` and ``p2`` [#f1]_.

Returns ``true`` if null-terminated strings pointed to by ``p1`` and ``p2`` are equal and ``false`` otherwise.</para>
</detaileddescription>
<location file='std_globals.jnc' line='108' col='6'/>
</memberdef>

<memberdef kind='function' id='function_strchr'>
<functionkind>named-function</functionkind>
<name>strchr</name>
<type>char const*</type>
<argsstring>(char const* p, int c)</argsstring>
<param>
<declname>p</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>c</declname>
<type>int</type>
<array></array>
</param>
<location file='std_globals.jnc' line='116' col='13'/>
</memberdef>

<memberdef kind='function' id='function_strstr'>
<functionkind>named-function</functionkind>
<name>strstr</name>
<type>char const*</type>
<argsstring>(char const* p1, char const* p2)</argsstring>
<param>
<declname>p1</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>p2</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Finds the first occurance of null-terminated substring ''p2'' within null-terminated string pointed to by ``p1`` [#f1]_.

Returns a pointer to the first occurrence of substring ``p2`` in ``p1``.

Returns ``null`` if substring ``p2`` is not found.

Uses Boyer-Moore algorithm for substring search.</para>
</detaileddescription>
<location file='std_globals.jnc' line='131' col='13'/>
</memberdef>

<memberdef kind='function' id='function_strcat'>
<functionkind>named-function</functionkind>
<name>strcat</name>
<type>char const* errorcode</type>
<argsstring>(char const* p1, char const* p2)</argsstring>
<param>
<declname>p1</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>p2</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Creates a new string as a concatenation of two null-terminated strings pointed to by ``p1`` and ``p2`` [#f1]_.

Returns a pointer to the result string.

Returns ``null`` if the buffer for the new string could not be allocated.</para>
</detaileddescription>
<location file='std_globals.jnc' line='144' col='23'/>
</memberdef>

<memberdef kind='function' id='function_strdup'>
<functionkind>named-function</functionkind>
<name>strdup</name>
<type>char const* errorcode</type>
<argsstring>(char const* p, size_t length - 1)</argsstring>
<param>
<declname>p</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>length</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
<defval>- 1</defval>
</param>
<detaileddescription>
<para>Creates a duplicate of null-terminated string pointed to by ``p`` [#f1]_.

Returns a pointer to the result string.

Returns ``null`` if the buffer for the new string could not be allocated.</para>
</detaileddescription>
<location file='std_globals.jnc' line='157' col='23'/>
</memberdef>

<memberdef kind='function' id='function_strdjb2'>
<functionkind>named-function</functionkind>
<name>strdjb2</name>
<type><ref refid="typedef_size_t">size_t</ref></type>
<argsstring>(char const* p)</argsstring>
<param>
<declname>p</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Calculates a DJB2 hash of null-terminated string ``p``.</para>
</detaileddescription>
<location file='std_globals.jnc' line='166' col='8'/>
</memberdef>

<memberdef kind='function' id='function_stridjb2'>
<functionkind>named-function</functionkind>
<name>stridjb2</name>
<type><ref refid="typedef_size_t">size_t</ref></type>
<argsstring>(char const* p)</argsstring>
<param>
<declname>p</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Calculates a case-insensitive DJB2 hash of null-terminated string ``p``.

Equivalent of calling `strdjb2` on a string, each character of which was converted to lower-case via `tolower`.</para>
</detaileddescription>
<location file='std_globals.jnc' line='177' col='8'/>
</memberdef>

<memberdef kind='function' id='function_memcmp'>
<functionkind>named-function</functionkind>
<name>memcmp</name>
<type>int</type>
<argsstring>(void const* p1, void const* p2, size_t size)</argsstring>
<param>
<declname>p1</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>p2</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>size</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Performs a case-sensitive lexicographic comparison of two memory blocks ``p1:size1`` and ``p2:size2`` [#f2]_.

Returns ``0`` if null-terminated strings pointed to by ``p1`` and ``p2`` are equal.

Returns ``-1`` if ``p1:size1`` appears before ``p2:size2`` in lexographical order.

Returns ``1`` if ``p1:size1`` appears after ``p2:size2`` in lexographical order.</para>
</detaileddescription>
<location file='std_globals.jnc' line='189' col='5'/>
</memberdef>

<memberdef kind='function' id='function_memchr'>
<functionkind>named-function</functionkind>
<name>memchr</name>
<type>void const*</type>
<argsstring>(void const* p, int c, size_t size)</argsstring>
<param>
<declname>p</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>c</declname>
<type>int</type>
<array></array>
</param>
<param>
<declname>size</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Finds the first occurance of char ``c`` within memory block ``p:size`` [#f2]_.

Returns a pointer to the first occurrence of ``c`` in ``p:size``.

Returns ``null`` if ``c`` is not found.</para>
</detaileddescription>
<location file='std_globals.jnc' line='203' col='13'/>
</memberdef>

<memberdef kind='function' id='function_memmem'>
<functionkind>named-function</functionkind>
<name>memmem</name>
<type>void const*</type>
<argsstring>(void const* p1, size_t size1, void const* p2, size_t size2)</argsstring>
<param>
<declname>p1</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>size1</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<param>
<declname>p2</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>size2</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Finds the first occurance of memory block ``p2:size2`` within memory block ``p1:size1`` [#f2]_.

Returns a pointer to the first occurrence of block ``p2:size2`` in ``p1:size1``.

Returns ``null`` if block ``p2:size2`` is not found.

Uses Boyer-Moore algorithm for memory block search.</para>
</detaileddescription>
<location file='std_globals.jnc' line='219' col='13'/>
</memberdef>

<memberdef kind='function' id='function_memcpy'>
<functionkind>named-function</functionkind>
<name>memcpy</name>
<type>void</type>
<argsstring>(void* dst, void const* src, size_t size)</argsstring>
<param>
<declname>dst</declname>
<type>void*</type>
<array></array>
</param>
<param>
<declname>src</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>size</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Copies memory block ``src:size`` [#f2]_ to the buffer pointed to by ``dst``.</para>
</detaileddescription>
<location file='std_globals.jnc' line='230' col='6'/>
</memberdef>

<memberdef kind='function' id='function_memset'>
<functionkind>named-function</functionkind>
<name>memset</name>
<type>void</type>
<argsstring>(void* p, int c, size_t size)</argsstring>
<param>
<declname>p</declname>
<type>void*</type>
<array></array>
</param>
<param>
<declname>c</declname>
<type>int</type>
<array></array>
</param>
<param>
<declname>size</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Copies character ``c`` to each of the first ``size`` bytes of memory block pointed to by ``p``.</para>
</detaileddescription>
<location file='std_globals.jnc' line='240' col='6'/>
</memberdef>

<memberdef kind='function' id='function_memcat'>
<functionkind>named-function</functionkind>
<name>memcat</name>
<type>void* errorcode</type>
<argsstring>(void const* p1, size_t size1, void const* p2, size_t size2)</argsstring>
<param>
<declname>p1</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>size1</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<param>
<declname>p2</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>size2</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Creates a new memory block as a concatenation of two memory blocks ``p1:size1`` and ``p2:size2`` [#f2]_.

Returns a pointer to the result memory block.

Returns ``null`` if the buffer for the new memory block could not be allocated.</para>
</detaileddescription>
<location file='std_globals.jnc' line='254' col='17'/>
</memberdef>

<memberdef kind='function' id='function_memdup'>
<functionkind>named-function</functionkind>
<name>memdup</name>
<type>void* errorcode</type>
<argsstring>(void const* p, size_t size)</argsstring>
<param>
<declname>p</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>size</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Creates a duplicate of memory block ``p:size`` [#f2]_.

Returns a pointer to the result memory block.

Returns ``null`` if the buffer for the new memory block could not be allocated.</para>
</detaileddescription>
<location file='std_globals.jnc' line='269' col='17'/>
</memberdef>

<memberdef kind='function' id='function_memdjb2'>
<functionkind>named-function</functionkind>
<name>memdjb2</name>
<type><ref refid="typedef_size_t">size_t</ref></type>
<argsstring>(void const* p, size_t size)</argsstring>
<param>
<declname>p</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>size</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Calculates a DJB2 hash of memory block ``p:size`` [#f2]_.</para>
</detaileddescription>
<location file='std_globals.jnc' line='278' col='8'/>
</memberdef>

<memberdef kind='function' id='function_rand'>
<functionkind>named-function</functionkind>
<name>rand</name>
<type>int</type>
<argsstring>()</argsstring>
<detaileddescription>
<para>Returns a pseudo-random integral value between ``0`` and implementation-defined ``RAND_MAX`` (typically, ``32767``)

Maps directly to standard C function ``rand``.</para>
</detaileddescription>
<location file='std_globals.jnc' line='289' col='5'/>
</memberdef>

<memberdef kind='function' id='function_toupper'>
<functionkind>named-function</functionkind>
<name>toupper</name>
<type><ref refid="typedef_uint32_t">uint32_t</ref></type>
<argsstring>(uint32_t c)</argsstring>
<param>
<declname>c</declname>
<type><ref refid="typedef_uint32_t">uint32_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Converts Unicode codepoint ``c`` to upper case.

Returns the resulting Unicode codepoint.</para>
</detaileddescription>
<location file='std_globals.jnc' line='297' col='10'/>
</memberdef>

<memberdef kind='function' id='function_tolower'>
<functionkind>named-function</functionkind>
<name>tolower</name>
<type><ref refid="typedef_uint32_t">uint32_t</ref></type>
<argsstring>(uint32_t c)</argsstring>
<param>
<declname>c</declname>
<type><ref refid="typedef_uint32_t">uint32_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Converts Unicode codepoint ``c`` to lower case.

Returns the resulting Unicode codepoint.</para>
</detaileddescription>
<location file='std_globals.jnc' line='305' col='10'/>
</memberdef>

<memberdef kind='function' id='function_atoi'>
<functionkind>named-function</functionkind>
<name>atoi</name>
<type>int</type>
<argsstring>(char const* p)</argsstring>
<param>
<declname>p</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Parses a string representation of an integer.

Discards any whitespace characters until the first non-whitespace character is found, then takes as many characters as possible to form a valid integer number representation and converts them to an integer value.

Returns result integer value or ``0`` if string does not contain a valid representation of an integer.

Returns ``0`` if ``p == null``.</para>
</detaileddescription>
<location file='std_globals.jnc' line='317' col='5'/>
</memberdef>

<memberdef kind='function' id='function_strtol'>
<functionkind>named-function</functionkind>
<name>strtol</name>
<type>long</type>
<argsstring>(char const* p, char const** end null, int radix 10)</argsstring>
<param>
<declname>p</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>end</declname>
<type>char const**</type>
<array></array>
<defval>null</defval>
</param>
<param>
<declname>radix</declname>
<type>int</type>
<array></array>
<defval>10</defval>
</param>
<detaileddescription>
<para>Parses a string representation of an integer.

Discards any whitespace characters until the first non-whitespace character is found, then takes as many characters as possible to form a valid integer number representation and converts them to an integer value.

Returns result integer value or ``0`` if string does not contain a valid representation of an integer.

The functions sets the pointer pointed to by ``end`` to point to the character past the last character interpreted. If ``end`` is ``null``, it is ignored.

Returns ``0`` if ``p == null``.</para>
</detaileddescription>
<location file='std_globals.jnc' line='331' col='6'/>
</memberdef>

<memberdef kind='function' id='function_gets'>
<functionkind>named-function</functionkind>
<name>gets</name>
<type>char readonly*</type>
<argsstring>()</argsstring>
<detaileddescription>
<para>Reads a line from the standard input stream.

Returns the resulting string, or a ``null`` if an error occurs.

Length of the string can be discovered using `strlen` or, better, with ``dynamic sizeof``::

	char* s = gets ();
	size_t length = dynamic sizeof (s) - 1;</para>
</detaileddescription>
<location file='std_globals.jnc' line='348' col='7'/>
</memberdef>

<memberdef kind='function' id='function_print'>
<functionkind>named-function</functionkind>
<name>print</name>
<type><ref refid="typedef_size_t">size_t</ref></type>
<argsstring>(char const* text)</argsstring>
<param>
<declname>text</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Prints text to the standard output stream.

Returns the number of characters printed, or a ``-1`` if an error occurs.</para>
</detaileddescription>
<location file='std_globals.jnc' line='356' col='8'/>
</memberdef>

<memberdef kind='function' id='function_perror'>
<functionkind>named-function</functionkind>
<name>perror</name>
<type><ref refid="typedef_size_t">size_t</ref></type>
<argsstring>(char const* text)</argsstring>
<param>
<declname>text</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para><![CDATA[Prints error message to the standard error stream.

Unlike its standard C library counterpart, does not follow the message with ``: <errno decription>``. If you need the last error description, inject it using formatting literals and the ``$!`` placeholder.

Returns the number of characters printed, or a ``-1`` if an error occurs.]]></para>
</detaileddescription>
<location file='std_globals.jnc' line='366' col='8'/>
</memberdef>

<memberdef kind='function' id='function_printf'>
<functionkind>named-function</functionkind>
<name>printf</name>
<type><ref refid="typedef_intptr_t">intptr_t</ref> cdecl</type>
<argsstring>(char const thin* fmtSpecifier, ...)</argsstring>
<param>
<declname>fmtSpecifier</declname>
<type>char const thin*</type>
<array></array>
</param>
<param>
<type>...</type>
</param>
<detaileddescription>
<para>Prints formatted output to the standard output stream [#f3]_.

Returns the number of characters printed, or a ``-1`` if an error occurs.

For detailed description of format specifier ``fmtSpecifier`` please refer to: http://www.cplusplus.com/reference/cstdio/printf/</para>
</detaileddescription>
<location file='std_globals.jnc' line='377' col='16'/>
</memberdef>

<memberdef kind='typedef' id='typedef_intptr_t'>
<name>intptr_t</name>
<type>long</type>
<detaileddescription>
<para>Signed integer type with size equal to the size of a pointer on the given platform. On 32-bit platform ``intptr_t`` is identical to ``int32_t``; on 64-bit platforns ``intptr_t`` is identical to ``int64_t``.</para>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='32' col='16'/>
</memberdef>

<memberdef kind='typedef' id='typedef_uintptr_t'>
<name>uintptr_t</name>
<type>unsigned long</type>
<detaileddescription>
<para>Unsigned integer type with size equal to the size of a pointer on the given platform. On 32-bit platform both ``uintptr_t`` and ``size_t`` are identical to ``uint32_t``; on 64-bit platforns they are identical to ``uint64_t``.</para>
<internal><para>:subgroup:</para></internal>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='40' col='25'/>
</memberdef>

<memberdef kind='typedef' id='typedef_size_t'>
<name>size_t</name>
<type>unsigned long</type>
<location file='jnc_StdTypedefs.jnc' line='41' col='25'/>
</memberdef>

<memberdef kind='typedef' id='typedef_int8_t'>
<name>int8_t</name>
<type>char</type>
<detaileddescription>
<para>Signed integer type with width of 8 bits.</para>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='47' col='14'/>
</memberdef>

<memberdef kind='typedef' id='typedef_uint8_t'>
<name>uint8_t</name>
<type>unsigned char</type>
<detaileddescription>
<para>Unsigned integer type with width of 8 bits.</para>
<internal><para>:subgroup:</para></internal>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='55' col='23'/>
</memberdef>

<memberdef kind='typedef' id='typedef_uchar_t'>
<name>uchar_t</name>
<type>unsigned char</type>
<location file='jnc_StdTypedefs.jnc' line='56' col='23'/>
</memberdef>

<memberdef kind='typedef' id='typedef_byte_t'>
<name>byte_t</name>
<type>unsigned char</type>
<location file='jnc_StdTypedefs.jnc' line='57' col='23'/>
</memberdef>

<memberdef kind='typedef' id='typedef_int16_t'>
<name>int16_t</name>
<type>short</type>
<detaileddescription>
<para>Signed integer type with width of 16 bits.</para>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='63' col='15'/>
</memberdef>

<memberdef kind='typedef' id='typedef_uint16_t'>
<name>uint16_t</name>
<type>unsigned short</type>
<detaileddescription>
<para>Unsigned integer type with width of 16 bits.</para>
<internal><para>:subgroup:</para></internal>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='71' col='24'/>
</memberdef>

<memberdef kind='typedef' id='typedef_ushort_t'>
<name>ushort_t</name>
<type>unsigned short</type>
<location file='jnc_StdTypedefs.jnc' line='72' col='24'/>
</memberdef>

<memberdef kind='typedef' id='typedef_word_t'>
<name>word_t</name>
<type>unsigned short</type>
<location file='jnc_StdTypedefs.jnc' line='73' col='24'/>
</memberdef>

<memberdef kind='typedef' id='typedef_int32_t'>
<name>int32_t</name>
<type>int</type>
<detaileddescription>
<para>Signed integer type with width of 32 bits.</para>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='79' col='13'/>
</memberdef>

<memberdef kind='typedef' id='typedef_uint_t'>
<name>uint_t</name>
<type>unsigned int</type>
<detaileddescription>
<para>Unsigned integer type with width of 32 bits.</para>
<internal><para>:subgroup:</para></internal>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='87' col='22'/>
</memberdef>

<memberdef kind='typedef' id='typedef_uint32_t'>
<name>uint32_t</name>
<type>unsigned int</type>
<location file='jnc_StdTypedefs.jnc' line='88' col='22'/>
</memberdef>

<memberdef kind='typedef' id='typedef_dword_t'>
<name>dword_t</name>
<type>unsigned int</type>
<location file='jnc_StdTypedefs.jnc' line='89' col='22'/>
</memberdef>

<memberdef kind='typedef' id='typedef_int64_t'>
<name>int64_t</name>
<type>long</type>
<detaileddescription>
<para>Signed integer type with width of 64 bits.</para>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='95' col='14'/>
</memberdef>

<memberdef kind='typedef' id='typedef_uint64_t'>
<name>uint64_t</name>
<type>unsigned long</type>
<detaileddescription>
<para>Unsigned integer type with width of 64 bits.</para>
<internal><para>:subgroup:</para></internal>
</detaileddescription>
<location file='jnc_StdTypedefs.jnc' line='103' col='23'/>
</memberdef>

<memberdef kind='typedef' id='typedef_ulong_t'>
<name>ulong_t</name>
<type>unsigned long</type>
<location file='jnc_StdTypedefs.jnc' line='104' col='23'/>
</memberdef>

<memberdef kind='typedef' id='typedef_qword_t'>
<name>qword_t</name>
<type>unsigned long</type>
<location file='jnc_StdTypedefs.jnc' line='105' col='23'/>
</memberdef>

</sectiondef>
</compounddef>
</doxygen>
