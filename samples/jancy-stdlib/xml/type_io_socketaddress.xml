<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen>
<compounddef kind='union' id='type_io_socketaddress' language='Jancy'>
<compoundname>SocketAddress</compoundname>

<sectiondef>
<memberdef kind='variable' id='struct_member_io_socketaddress_m_family'>
<name>m_family</name>
<type><ref refid="type_io_addressfamily">io.AddressFamily</ref></type>
<detaileddescription>
<para>Holds the address family of the socket address. Depending on the value of this field, the actual address is stored in either ``m_ip4`` or in ``m_ip6`` fields.</para>
</detaileddescription>
<location file='io_SocketAddress.jnc' line='346' col='16'/>
</memberdef>

<memberdef kind='variable' id='struct_member_io_socketaddress_m_ip4'>
<name>m_ip4</name>
<type><ref refid="type_io_socketaddress_ip4">io.SocketAddress_ip4</ref></type>
<detaileddescription>
<para>Holds ``IP4`` socket address as `io.SocketAddress_ip4`.</para>
</detaileddescription>
<location file='io_SocketAddress.jnc' line='352' col='20'/>
</memberdef>

<memberdef kind='variable' id='struct_member_io_socketaddress_m_ip6'>
<name>m_ip6</name>
<type><ref refid="type_io_socketaddress_ip6">io.SocketAddress_ip6</ref></type>
<detaileddescription>
<para>Holds ``IP6`` socket address as `io.SocketAddress_ip6`.</para>
</detaileddescription>
<location file='io_SocketAddress.jnc' line='358' col='20'/>
</memberdef>

<memberdef kind='function' id='function_io_socketaddress_isequal'>
<functionkind>named-function</functionkind>
<name>isEqual</name>
<type>bool</type>
<argsstring>(io.SocketAddress safe* this, io.SocketAddress const* addr)</argsstring>
<param>
<declname>addr</declname>
<type><ref refid="type_io_socketaddress">io.SocketAddress</ref> const*</type>
<array></array>
</param>
<detaileddescription>
<para>Checks two socket addresses for *equality*; returns ``true`` if addresses are equal and ``false`` otherwise.</para>
</detaileddescription>
<location file='io_SocketAddress.jnc' line='364' col='7'/>
</memberdef>

<memberdef kind='function' id='function_io_socketaddress_ismatch'>
<functionkind>named-function</functionkind>
<name>isMatch</name>
<type>bool</type>
<argsstring>(io.SocketAddress safe* this, io.SocketAddress const* filterAddress)</argsstring>
<param>
<declname>filterAddress</declname>
<type><ref refid="type_io_socketaddress">io.SocketAddress</ref> const*</type>
<array></array>
</param>
<detaileddescription>
<para>Checks two socket addresses for *matching*. See `io.SocketAddress_ip4.isMatch` or `io.SocketAddress_ip6.isMatch` for definition of the term *match*.

Returns ``true`` if addresses *match* and ``false`` otherwise.</para>
</detaileddescription>
<location file='io_SocketAddress.jnc' line='372' col='7'/>
</memberdef>

<memberdef kind='function' id='function_io_socketaddress_parse'>
<functionkind>named-function</functionkind>
<name>parse</name>
<type>bool errorcode</type>
<argsstring>(io.SocketAddress safe* this, char const* string)</argsstring>
<param>
<declname>string</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Constructs the address from a string representation in ``string`` argument.

Returns ``true`` if address string was parsed successfully. Otherwise, sets the description of parsing error and returns ``false`` [#f1]_.</para>
</detaileddescription>
<location file='io_SocketAddress.jnc' line='380' col='17'/>
</memberdef>

<memberdef kind='function' id='function_io_socketaddress_getstring' const='yes'>
<functionkind>named-function</functionkind>
<name>getString</name>
<type>char const*</type>
<argsstring>(io.SocketAddress safe const* this)</argsstring>
<detaileddescription>
<para>Creates and returns a string representation of the address.</para>
</detaileddescription>
<location file='io_SocketAddress.jnc' line='386' col='14'/>
</memberdef>

</sectiondef>
<sectiondef>
<memberdef kind='footnote'>
<name>f1</name>
<detaileddescription>
<para>|footnote-errorcode|</para>
</detaileddescription>
</memberdef>
</sectiondef>
<includes>io_base.jncx</includes>
<includes>io_SocketAddress.jnc</includes>
<detaileddescription>
<para>This union is a container for both ``IP4`` and ``IP6`` addresses.

All methods and/or properties of `io.Socket` class which accept or return addresses, use ``io.SocketAddress`` arguments.</para>
</detaileddescription>
<location file='io_SocketAddress.jnc' line='340' col='7'/>
</compounddef>
</doxygen>
