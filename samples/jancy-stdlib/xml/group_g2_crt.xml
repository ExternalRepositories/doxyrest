<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen>
<compounddef kind='group' id='group_g2_crt' language='Jancy'>
<compoundname>g2_crt</compoundname>
<title>C Runtime Functions</title>
<sectiondef>
<memberdef id='function_strlen'/>
<memberdef id='function_strcmp'/>
<memberdef id='function_stricmp'/>
<memberdef id='function_streq'/>
<memberdef id='function_strieq'/>
<memberdef id='function_strchr'/>
<memberdef id='function_strstr'/>
<memberdef id='function_strcat'/>
<memberdef id='function_strdup'/>
<memberdef id='function_strdjb2'/>
<memberdef id='function_stridjb2'/>
<memberdef id='function_memcmp'/>
<memberdef id='function_memchr'/>
<memberdef id='function_memmem'/>
<memberdef id='function_memcpy'/>
<memberdef id='function_memset'/>
<memberdef id='function_memcat'/>
<memberdef id='function_memdup'/>
<memberdef id='function_memdjb2'/>
<memberdef id='function_rand'/>
<memberdef id='function_toupper'/>
<memberdef id='function_tolower'/>
<memberdef id='function_atoi'/>
<memberdef id='function_strtol'/>
<memberdef id='function_gets'/>
<memberdef id='function_print'/>
<memberdef id='function_perror'/>
<memberdef id='function_printf'/>
<memberdef kind='footnote'>
<name>f1</name>
<detaileddescription>
<para>If null-terminating ``0`` byte is not discovered withing the allowed range of string pointer, Jancy string functions behave just like if ``0`` was found at the very next byte after the end of allowed range. In other words, it is always assumed that ``0`` could be found at the location ``p + dynamic sizeof (p)`` -- even if the actual byte at this location isn't really ``0``.</para>
</detaileddescription>
</memberdef>
<memberdef kind='footnote'>
<name>f2</name>
<detaileddescription>
<para>The notation ``p:size`` here means: memory block pointed to by ``p`` and of ``size`` bytes long.</para>
</detaileddescription>
</memberdef>
<memberdef kind='footnote'>
<name>f3</name>
<detaileddescription>
<para>Note that this function uses ``C`` vararg calling convention (and actually maps directly to libc ``snprintf``). As such, it is **not safe**. It is recommended to use formatting literals instead.</para>
</detaileddescription>
</memberdef>
</sectiondef>
<briefdescription><para>This section contains C runtime functions available from Jancy.</para></briefdescription>
<detaileddescription>
<para>The purpose of these functions is to create a familiar environment for C/C++ programmers and make it easier to switch between Jancy and C/C++.</para>
</detaileddescription>
</compounddef>
</doxygen>
