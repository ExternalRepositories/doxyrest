<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="apr__lib_8h" kind="file" language="C++">
    <compoundname>apr_lib.h</compoundname>
    <includes refid="apr_8h" local="yes">apr.h</includes>
    <includes refid="apr__errno_8h" local="yes">apr_errno.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">stdarg.h</includes>
    <incdepgraph>
      <node id="407">
        <label>stdarg.h</label>
      </node>
      <node id="401">
        <label>stdint.h</label>
      </node>
      <node id="405">
        <label>errno.h</label>
      </node>
      <node id="403">
        <label>limits.h</label>
      </node>
      <node id="399">
        <label>sys/types.h</label>
      </node>
      <node id="404">
        <label>apr_errno.h</label>
        <link refid="apr__errno_8h"/>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
      </node>
      <node id="402">
        <label>sys/wait.h</label>
      </node>
      <node id="397">
        <label>apr_lib.h</label>
        <link refid="apr__lib_8h"/>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="404" relation="include">
        </childnode>
        <childnode refid="406" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="406">
        <label>ctype.h</label>
      </node>
      <node id="398">
        <label>apr.h</label>
        <link refid="apr_8h"/>
        <childnode refid="399" relation="include">
        </childnode>
        <childnode refid="400" relation="include">
        </childnode>
        <childnode refid="401" relation="include">
        </childnode>
        <childnode refid="402" relation="include">
        </childnode>
        <childnode refid="403" relation="include">
        </childnode>
      </node>
      <node id="400">
        <label>sys/socket.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structapr__vformatter__buff__t" prot="public">apr_vformatter_buff_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__lib_1ga0c9dd98f46b90b5bcd4cbf75e252d0da" prot="public" static="no">
        <name>HUGE_STRING_LEN</name>
        <initializer>8192</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A constant representing a &apos;large&apos; string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="52" column="9" bodyfile="include/apr_lib.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__lib_1gaa3b0264aadbd9f8d805252fb1ca1cd0e" prot="public" static="no">
        <name>apr_killpg</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(killpg ((x), (y)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>apr_killpg Small utility macros to make things easier to read. Not usually a goal, to be sure.. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="98" column="9" bodyfile="include/apr_lib.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1ga4fa78e6e7272dae64731768a17a2e003" prot="public" static="no">
        <name>apr_isalnum</name>
        <param><defname>c</defname></param>
        <initializer>(isalnum(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>isalnum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="203" column="9" bodyfile="include/apr_lib.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1ga9ecd5b94a7816591afd68040b0624327" prot="public" static="no">
        <name>apr_isalpha</name>
        <param><defname>c</defname></param>
        <initializer>(isalpha(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>isalpha </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="205" column="9" bodyfile="include/apr_lib.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1gacc8b4597be99c895ea042e8088ee94ab" prot="public" static="no">
        <name>apr_iscntrl</name>
        <param><defname>c</defname></param>
        <initializer>(iscntrl(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>iscntrl </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="207" column="9" bodyfile="include/apr_lib.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1ga8c453b1d66015b357c3d3a3ddb7d97d7" prot="public" static="no">
        <name>apr_isdigit</name>
        <param><defname>c</defname></param>
        <initializer>(isdigit(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>isdigit </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="209" column="9" bodyfile="include/apr_lib.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1gad4fbfcf508e7771ca85e85e4ac9567c2" prot="public" static="no">
        <name>apr_isgraph</name>
        <param><defname>c</defname></param>
        <initializer>(isgraph(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>isgraph </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="211" column="9" bodyfile="include/apr_lib.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1gaff5eeb2f6350095ce86cc2cd4b1d38ee" prot="public" static="no">
        <name>apr_islower</name>
        <param><defname>c</defname></param>
        <initializer>(islower(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>islower </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="213" column="9" bodyfile="include/apr_lib.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1gae7cab1b39d2e0fc14f343ec14e12565a" prot="public" static="no">
        <name>apr_isascii</name>
        <param><defname>c</defname></param>
        <initializer>(((c) &amp; ~0x7f)==0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>isascii </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="218" column="10" bodyfile="include/apr_lib.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1ga20da56fc8bbedc9f8a40d20c1cc58bac" prot="public" static="no">
        <name>apr_isprint</name>
        <param><defname>c</defname></param>
        <initializer>(isprint(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>isprint </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="221" column="9" bodyfile="include/apr_lib.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1ga1db14e8d5f9891010c8bad08aa100674" prot="public" static="no">
        <name>apr_ispunct</name>
        <param><defname>c</defname></param>
        <initializer>(ispunct(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>ispunct </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="223" column="9" bodyfile="include/apr_lib.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1ga23f4c7721923a0f0f444fd7fb196047a" prot="public" static="no">
        <name>apr_isspace</name>
        <param><defname>c</defname></param>
        <initializer>(isspace(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>isspace </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="225" column="9" bodyfile="include/apr_lib.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1ga362f53cc44aab662aaf04fa87e36035b" prot="public" static="no">
        <name>apr_isupper</name>
        <param><defname>c</defname></param>
        <initializer>(isupper(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>isupper </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="227" column="9" bodyfile="include/apr_lib.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1ga9d30f3c5d538c21c6d50565cda8654d0" prot="public" static="no">
        <name>apr_isxdigit</name>
        <param><defname>c</defname></param>
        <initializer>(isxdigit(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>isxdigit </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="229" column="9" bodyfile="include/apr_lib.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1gaa591f2a7eb578b1fb3ae9aeaab9eafaa" prot="public" static="no">
        <name>apr_tolower</name>
        <param><defname>c</defname></param>
        <initializer>(tolower(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>tolower </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="231" column="9" bodyfile="include/apr_lib.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ctype_1ga83d2a3217282784d24897658ad0717b7" prot="public" static="no">
        <name>apr_toupper</name>
        <param><defname>c</defname></param>
        <initializer>(toupper(((unsigned char)(c))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>toupper </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="233" column="9" bodyfile="include/apr_lib.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__lib_1ga5e9986deebda40f2d1cf8364fa03c3c5" prot="public" static="no">
        <type>struct <ref refid="structapr__vformatter__buff__t" kindref="compound">apr_vformatter_buff_t</ref></type>
        <definition>typedef struct apr_vformatter_buff_t apr_vformatter_buff_t</definition>
        <argsstring></argsstring>
        <name>apr_vformatter_buff_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structapr__vformatter__buff__t" kindref="compound">apr_vformatter_buff_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="274" column="1" bodyfile="include/apr_lib.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__lib_1ga241e929df23aede34eb3f2651cf56bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_filepath_name_get</definition>
        <argsstring>(const char *pathname)</argsstring>
        <name>apr_filepath_name_get</name>
        <param>
          <type>const char *</type>
          <declname>pathname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the final element of the pathname <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pathname</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to get the final element of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the final element of the path </para></simplesect>
<simplesect kind="remark"><para><preformatted>
For example:
                &quot;/foo/bar/gum&quot;    -&gt; &quot;gum&quot;
                &quot;/foo/bar/gum/&quot;   -&gt; &quot;&quot;
                &quot;gum&quot;             -&gt; &quot;gum&quot;
                &quot;bs\\path\\stuff&quot; -&gt; &quot;stuff&quot;
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__lib_1gad2cd3594aeaafd45931d1034965f48c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_vformatter</definition>
        <argsstring>(int(*flush_func)(apr_vformatter_buff_t *b), apr_vformatter_buff_t *c, const char *fmt, va_list ap)</argsstring>
        <name>apr_vformatter</name>
        <param>
          <type>int(*)(<ref refid="structapr__vformatter__buff__t" kindref="compound">apr_vformatter_buff_t</ref> *b)</type>
          <declname>flush_func</declname>
        </param>
        <param>
          <type><ref refid="structapr__vformatter__buff__t" kindref="compound">apr_vformatter_buff_t</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__apr__lib_1gad2cd3594aeaafd45931d1034965f48c1" kindref="member">apr_vformatter()</ref> is a generic printf-style formatting routine with some extensions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flush_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when the buffer is full </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to use to fill out the format string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><preformatted>
The extensions are:</preformatted></para></simplesect>
<itemizedlist>
<listitem><para><preformatted>%pA takes a struct in_addr *, and prints it as a.b.c.d</preformatted></para></listitem><listitem><para><preformatted>%pI takes an <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> * and prints it as a.b.c.d:port or
[ipv6-address]:port</preformatted></para></listitem><listitem><para><preformatted>%pT takes an apr_os_thread_t * and prints it in decimal
(&apos;0&apos; is printed if !APR_HAS_THREADS)</preformatted></para></listitem><listitem><para><preformatted>%pt takes an apr_os_thread_t * and prints it in hexadecimal
(&apos;0&apos; is printed if !APR_HAS_THREADS)</preformatted></para></listitem><listitem><para><preformatted>%pm takes an apr_status_t * and prints the appropriate error
string (from apr_strerror) corresponding to that error code.</preformatted></para></listitem><listitem><para><preformatted>%pp takes a void * and outputs it in hex</preformatted></para></listitem><listitem><para><preformatted>%pB takes a apr_uint32_t * as bytes and outputs it&apos;s apr_strfsize</preformatted></para></listitem><listitem><para><preformatted>%pF same as above, but takes a apr_off_t *</preformatted></para></listitem><listitem><para><preformatted>%pS same as above, but takes a apr_size_t *</preformatted></para></listitem></itemizedlist>
</para><para><preformatted>%pA, %pI, %pT, %pp are available from APR 1.0.0 onwards (and in 0.9.x).
%pt is only available from APR 1.2.0 onwards.
%pm, %pB, %pF and %pS are only available from APR 1.3.0 onwards.</preformatted></para><para><preformatted>The %p hacks are to force gcc&apos;s printf warning code to skip
over a pointer argument without complaining.  This does
mean that the ANSI-style %p (output a void * in hex format) won&apos;t
work as expected at all, but that seems to be a fair trade-off
for the increased robustness of having printf-warnings work.</preformatted></para><para><preformatted>Additionally, apr_vformatter allows for arbitrary output methods
using the apr_vformatter_buff and flush_func.</preformatted></para><para><preformatted>The apr_vformatter_buff has two elements curpos and endpos.
curpos is where apr_vformatter will write the next byte of output.
It proceeds writing output to curpos, and updating curpos, until
either the end of output is reached, or curpos == endpos (i.e. the
buffer is full).</preformatted></para><para><preformatted>If the end of output is reached, apr_vformatter returns the
number of bytes written.</preformatted></para><para><preformatted>When the buffer is full, the flush_func is called.  The flush_func
can return -1 to indicate that no further output should be attempted,
and apr_vformatter will return immediately with -1.  Otherwise
the flush_func should flush the buffer in whatever manner is
appropriate, re apr_pool_t nitialize curpos and endpos, and return 0.</preformatted></para><para><preformatted>Note that flush_func is only invoked as a result of attempting to
write another byte at curpos when curpos &gt;= endpos.  So for
example, it&apos;s possible when the output exactly matches the buffer
space available that curpos == endpos will be true when
apr_vformatter returns.</preformatted></para><para><preformatted>apr_vformatter does not call out to any other code, it is entirely
self-contained.  This allows the callers to do things which are
otherwise &quot;unsafe&quot;.  For example, apr_psprintf uses the &quot;scratch&quot;
space at the unallocated end of a block, and doesn&apos;t actually
complete the allocation until apr_vformatter returns.  apr_psprintf
would be completely broken if apr_vformatter were to call anything
that used this same pool.  Similarly http_bprintf() uses the &quot;scratch&quot;
space at the end of its output buffer, and doesn&apos;t actually note
that the space is in use until it either has to flush the buffer
or until apr_vformatter returns.
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__lib_1ga377e0677598745769ec6f80fecf8f859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_password_get</definition>
        <argsstring>(const char *prompt, char *pwbuf, apr_size_t *bufsize)</argsstring>
        <name>apr_password_get</name>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>pwbuf</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display a prompt and read in the password from stdin. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prompt</parametername>
</parameternamelist>
<parameterdescription>
<para>The prompt to display </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store the password </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the password buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If the password entered must be truncated to fit in the provided buffer, APR_ENAMETOOLONG will be returned. Note that the bufsize paramater is passed by reference for no reason; its value will never be modified by the <ref refid="group__apr__lib_1ga377e0677598745769ec6f80fecf8f859" kindref="member">apr_password_get()</ref> function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_lib.h" line="189" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>APR general purpose library routines. </para>    </briefdescription>
    <detaileddescription>
<para>This is collection of oddballs that didn&apos;t fit anywhere else, and might move to more appropriate headers with the release of APR 1.0. </para>    </detaileddescription>
    <location file="include/apr_lib.h"/>
  </compounddef>
</doxygen>
