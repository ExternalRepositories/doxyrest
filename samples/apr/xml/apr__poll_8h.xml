<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="apr__poll_8h" kind="file" language="C++">
    <compoundname>apr_poll.h</compoundname>
    <includes refid="apr_8h" local="yes">apr.h</includes>
    <includes refid="apr__pools_8h" local="yes">apr_pools.h</includes>
    <includes refid="apr__errno_8h" local="yes">apr_errno.h</includes>
    <includes refid="apr__inherit_8h" local="yes">apr_inherit.h</includes>
    <includes refid="apr__file__io_8h" local="yes">apr_file_io.h</includes>
    <includes refid="apr__network__io_8h" local="yes">apr_network_io.h</includes>
    <includes local="no">netinet/in.h</includes>
    <incdepgraph>
      <node id="484">
        <label>apr_file_info.h</label>
        <link refid="apr__file__info_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
      </node>
      <node id="487">
        <label>stdarg.h</label>
      </node>
      <node id="490">
        <label>netinet/in.h</label>
      </node>
      <node id="469">
        <label>stdint.h</label>
      </node>
      <node id="474">
        <label>errno.h</label>
      </node>
      <node id="483">
        <label>apr_time.h</label>
        <link refid="apr__time_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
      </node>
      <node id="482">
        <label>apr_file_io.h</label>
        <link refid="apr__file__io_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
      </node>
      <node id="475">
        <label>apr_general.h</label>
        <link refid="apr__general_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="476" relation="include">
        </childnode>
      </node>
      <node id="471">
        <label>limits.h</label>
      </node>
      <node id="485">
        <label>apr_user.h</label>
        <link refid="apr__user_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
      </node>
      <node id="467">
        <label>sys/types.h</label>
      </node>
      <node id="489">
        <label>apr_network_io.h</label>
        <link refid="apr__network__io_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
      </node>
      <node id="478">
        <label>string.h</label>
      </node>
      <node id="480">
        <label>apr_thread_mutex.h</label>
        <link refid="apr__thread__mutex_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
      </node>
      <node id="472">
        <label>apr_pools.h</label>
        <link refid="apr__pools_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="475" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
      </node>
      <node id="479">
        <label>apr_allocator.h</label>
        <link refid="apr__allocator_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="480" relation="include">
        </childnode>
      </node>
      <node id="465">
        <label>apr_poll.h</label>
        <link refid="apr__poll_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
      </node>
      <node id="488">
        <label>sys/uio.h</label>
      </node>
      <node id="476">
        <label>signal.h</label>
      </node>
      <node id="473">
        <label>apr_errno.h</label>
        <link refid="apr__errno_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="474" relation="include">
        </childnode>
      </node>
      <node id="470">
        <label>sys/wait.h</label>
      </node>
      <node id="466">
        <label>apr.h</label>
        <link refid="apr_8h"/>
        <childnode refid="467" relation="include">
        </childnode>
        <childnode refid="468" relation="include">
        </childnode>
        <childnode refid="469" relation="include">
        </childnode>
        <childnode refid="470" relation="include">
        </childnode>
        <childnode refid="471" relation="include">
        </childnode>
      </node>
      <node id="468">
        <label>sys/socket.h</label>
      </node>
      <node id="477">
        <label>apr_want.h</label>
        <link refid="apr__want_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="478" relation="include">
        </childnode>
      </node>
      <node id="486">
        <label>apr_tables.h</label>
        <link refid="apr__tables_8h"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="487" relation="include">
        </childnode>
      </node>
      <node id="481">
        <label>apr_inherit.h</label>
        <link refid="apr__inherit_8h"/>
      </node>
    </incdepgraph>
    <innerclass refid="unionapr__descriptor" prot="public">apr_descriptor</innerclass>
    <innerclass refid="structapr__pollfd__t" prot="public">apr_pollfd_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__pollopts_1ga746222e6b858bc2fc77328d59f78e788" prot="public" static="no">
        <name>APR_POLLIN</name>
        <initializer>0x001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Can read without blocking </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="49" column="9" bodyfile="include/apr_poll.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pollopts_1ga196c38e1914077c4c9a0cf3ce87f1b9c" prot="public" static="no">
        <name>APR_POLLPRI</name>
        <initializer>0x002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Priority data available </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="50" column="9" bodyfile="include/apr_poll.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pollopts_1ga6fb703db1d11e2c5f66d8c6146e56053" prot="public" static="no">
        <name>APR_POLLOUT</name>
        <initializer>0x004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Can write without blocking </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="51" column="9" bodyfile="include/apr_poll.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pollopts_1ga6f5a72fd9cf3f5dcf174acce0b4b77ee" prot="public" static="no">
        <name>APR_POLLERR</name>
        <initializer>0x010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pending error </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="52" column="9" bodyfile="include/apr_poll.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pollopts_1gace76603c4fa4b56f8b5977ff1ceb6f3b" prot="public" static="no">
        <name>APR_POLLHUP</name>
        <initializer>0x020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hangup occurred </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="53" column="9" bodyfile="include/apr_poll.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pollopts_1ga132da215e207d4685fb467cc64a73f1b" prot="public" static="no">
        <name>APR_POLLNVAL</name>
        <initializer>0x040</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Descriptor invalid </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="54" column="9" bodyfile="include/apr_poll.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pollflags_1gabdfaccfd394c847f692351dee2e5ef7f" prot="public" static="no">
        <name>APR_POLLSET_THREADSAFE</name>
        <initializer>0x001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adding or removing a descriptor is thread-safe </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="64" column="9" bodyfile="include/apr_poll.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pollflags_1ga0febaf4378d2705bf1256b22fe8dfd24" prot="public" static="no">
        <name>APR_POLLSET_NOCOPY</name>
        <initializer>0x002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Descriptors passed to <ref refid="group__apr__poll_1ga4ec50bf9a11c6b60927c51b81412f5b9" kindref="member">apr_pollset_add()</ref> are not copied </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="67" column="9" bodyfile="include/apr_poll.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pollflags_1ga552d7f28d442602e6c9bb6931f183493" prot="public" static="no">
        <name>APR_POLLSET_WAKEABLE</name>
        <initializer>0x004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Poll operations are interruptable by <ref refid="group__apr__poll_1gac5e86828143e169e18b2a6eab94be531" kindref="member">apr_pollset_wakeup()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="70" column="9" bodyfile="include/apr_poll.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pollflags_1gaa46a9cbb23b2e8e71dd3ba88e69fdf13" prot="public" static="no">
        <name>APR_POLLSET_NODEFAULT</name>
        <initializer>0x010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Do not try to use the default method if the specified non-default method cannot be used </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="74" column="9" bodyfile="include/apr_poll.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__apr__poll_1gabe6f1238ea45e9425fa052e2788e4a29" prot="public" static="no">
        <name>apr_pollset_method_e</name>
        <enumvalue id="group__apr__poll_1ggabe6f1238ea45e9425fa052e2788e4a29ae68b155914b79d4a58519675dfc24d94" prot="public">
          <name>APR_POLLSET_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Platform default poll method </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__poll_1ggabe6f1238ea45e9425fa052e2788e4a29aa6613bebee1abb348da2a153f91c738e" prot="public">
          <name>APR_POLLSET_SELECT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Poll uses select method </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__poll_1ggabe6f1238ea45e9425fa052e2788e4a29a2722387d6523f8f02cec7c31a45966d4" prot="public">
          <name>APR_POLLSET_KQUEUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Poll uses kqueue method </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__poll_1ggabe6f1238ea45e9425fa052e2788e4a29aec66f6da923595ff0a6fa20f4bc41e46" prot="public">
          <name>APR_POLLSET_PORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Poll uses Solaris event port method </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__poll_1ggabe6f1238ea45e9425fa052e2788e4a29a142ebdcab58ccfabd5d964ff3ab476ab" prot="public">
          <name>APR_POLLSET_EPOLL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Poll uses epoll method </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__poll_1ggabe6f1238ea45e9425fa052e2788e4a29aa8c0b4c036644ea4518f8d7c2fd4fe8e" prot="public">
          <name>APR_POLLSET_POLL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Poll uses poll method </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__poll_1ggabe6f1238ea45e9425fa052e2788e4a29ace0288893b2db65847536c41c0048e82" prot="public">
          <name>APR_POLLSET_AIO_MSGQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Poll uses z/OS asio method </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pollset Methods </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="89" column="1" bodyfile="include/apr_poll.h" bodystart="89" bodyend="97"/>
      </memberdef>
      <memberdef kind="enum" id="group__apr__poll_1ga0a8549d84c1721788b102a4cc8b4b0f0" prot="public" static="no">
        <name>apr_datatype_e</name>
        <enumvalue id="group__apr__poll_1gga0a8549d84c1721788b102a4cc8b4b0f0aeb85f43492052bf0788d31f6dd85a222" prot="public">
          <name>APR_NO_DESC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>nothing here </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__poll_1gga0a8549d84c1721788b102a4cc8b4b0f0a3629c5b3166fde91792f2f913fbd72f0" prot="public">
          <name>APR_POLL_SOCKET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>descriptor refers to a socket </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__poll_1gga0a8549d84c1721788b102a4cc8b4b0f0a8351d461bf66b706232962fd02e84202" prot="public">
          <name>APR_POLL_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>descriptor refers to a file </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__poll_1gga0a8549d84c1721788b102a4cc8b4b0f0a413b387c7fe1ca7b096d46dfd9942fe5" prot="public">
          <name>APR_POLL_LASTDESC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000032"><xreftitle>Deprecated</xreftitle><xrefdescription><para>descriptor is the last one in the list </para></xrefdescription></xrefsect></para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used in <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> to determine what the <ref refid="unionapr__descriptor" kindref="compound">apr_descriptor</ref> is </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="100" column="1" bodyfile="include/apr_poll.h" bodystart="100" bodyend="105"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__poll_1ga0c89b184cbe2337e44207f1ad245129b" prot="public" static="no">
        <type>struct <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref></type>
        <definition>typedef struct apr_pollfd_t apr_pollfd_t</definition>
        <argsstring></argsstring>
        <name>apr_pollfd_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="296" column="1" bodyfile="include/apr_poll.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" prot="public" static="no">
        <type>struct <ref refid="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" kindref="member">apr_pollset_t</ref></type>
        <definition>typedef struct apr_pollset_t apr_pollset_t</definition>
        <argsstring></argsstring>
        <name>apr_pollset_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque structure used for pollset API </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="296" column="1" bodyfile="include/apr_poll.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__poll_1gae382e39bdf0c5a02fca7da3944bece08" prot="public" static="no">
        <type>struct <ref refid="group__apr__poll_1gae382e39bdf0c5a02fca7da3944bece08" kindref="member">apr_pollcb_t</ref></type>
        <definition>typedef struct apr_pollcb_t apr_pollcb_t</definition>
        <argsstring></argsstring>
        <name>apr_pollcb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque structure used for pollcb API </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="323" column="1" bodyfile="include/apr_poll.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__poll_1ga1dcd8c87e233dbf105e83d50ef601f55" prot="public" static="no">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*</type>
        <definition>typedef apr_status_t(* apr_pollcb_cb_t) (void *baton, apr_pollfd_t *descriptor)</definition>
        <argsstring>)(void *baton, apr_pollfd_t *descriptor)</argsstring>
        <name>apr_pollcb_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function prototype for pollcb handlers <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baton</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque baton passed into <ref refid="group__apr__poll_1ga11765d1b27e2f621a8dcd2c40f0e259c" kindref="member">apr_pollcb_poll()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>Contains the notification for an active descriptor, the rtnevents member contains what events were triggered for this descriptor. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="398" column="1" bodyfile="include/apr_poll.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__poll_1ga4ca4056a19daee8fe94ddba100fe2326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollset_create</definition>
        <argsstring>(apr_pollset_t **pollset, apr_uint32_t size, apr_pool_t *p, apr_uint32_t flags)</argsstring>
        <name>apr_pollset_create</name>
        <param>
          <type><ref refid="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" kindref="member">apr_pollset_t</ref> **</type>
          <declname>pollset</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up a pollset object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollset</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer in which to return the newly created object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of descriptors that this pollset can hold </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate the pollset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional flags to modify the operation of the pollset.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If flags contains APR_POLLSET_THREADSAFE, then a pollset is created on which it is safe to make concurrent calls to <ref refid="group__apr__poll_1ga4ec50bf9a11c6b60927c51b81412f5b9" kindref="member">apr_pollset_add()</ref>, <ref refid="group__apr__poll_1ga3c99c06e142d6b6b789eeb6086122e3a" kindref="member">apr_pollset_remove()</ref> and <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref> from separate threads. This feature is only supported on some platforms; the <ref refid="group__apr__poll_1ga4ca4056a19daee8fe94ddba100fe2326" kindref="member">apr_pollset_create()</ref> call will fail with APR_ENOTIMPL on platforms where it is not supported. </para></simplesect>
<simplesect kind="remark"><para>If flags contains APR_POLLSET_WAKEABLE, then a pollset is created with an additional internal pipe object used for the <ref refid="group__apr__poll_1gac5e86828143e169e18b2a6eab94be531" kindref="member">apr_pollset_wakeup()</ref> call. The actual size of pollset is in that case <emphasis>size</emphasis> + 1. This feature is only supported on some platforms; the <ref refid="group__apr__poll_1ga4ca4056a19daee8fe94ddba100fe2326" kindref="member">apr_pollset_create()</ref> call will fail with APR_ENOTIMPL on platforms where it is not supported. </para></simplesect>
<simplesect kind="remark"><para>If flags contains APR_POLLSET_NOCOPY, then the <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> structures passed to <ref refid="group__apr__poll_1ga4ec50bf9a11c6b60927c51b81412f5b9" kindref="member">apr_pollset_add()</ref> are not copied and must have a lifetime at least as long as the pollset. </para></simplesect>
<simplesect kind="remark"><para>Some poll methods (including APR_POLLSET_KQUEUE, APR_POLLSET_PORT, and APR_POLLSET_EPOLL) do not have a fixed limit on the size of the pollset. For these methods, the size parameter controls the maximum number of descriptors that will be returned by a single call to <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga9448a2d756868aa1c6dbc9726a2e32b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollset_create_ex</definition>
        <argsstring>(apr_pollset_t **pollset, apr_uint32_t size, apr_pool_t *p, apr_uint32_t flags, apr_pollset_method_e method)</argsstring>
        <name>apr_pollset_create_ex</name>
        <param>
          <type><ref refid="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" kindref="member">apr_pollset_t</ref> **</type>
          <declname>pollset</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__poll_1gabe6f1238ea45e9425fa052e2788e4a29" kindref="member">apr_pollset_method_e</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up a pollset object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollset</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer in which to return the newly created object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of descriptors that this pollset can hold </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate the pollset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional flags to modify the operation of the pollset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Poll method to use. See <ref refid="group__apr__poll_1gabe6f1238ea45e9425fa052e2788e4a29" kindref="member">apr_pollset_method_e</ref>. If this method cannot be used, the default method will be used unless the APR_POLLSET_NODEFAULT flag has been specified.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If flags contains APR_POLLSET_THREADSAFE, then a pollset is created on which it is safe to make concurrent calls to <ref refid="group__apr__poll_1ga4ec50bf9a11c6b60927c51b81412f5b9" kindref="member">apr_pollset_add()</ref>, <ref refid="group__apr__poll_1ga3c99c06e142d6b6b789eeb6086122e3a" kindref="member">apr_pollset_remove()</ref> and <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref> from separate threads. This feature is only supported on some platforms; the <ref refid="group__apr__poll_1ga9448a2d756868aa1c6dbc9726a2e32b5" kindref="member">apr_pollset_create_ex()</ref> call will fail with APR_ENOTIMPL on platforms where it is not supported. </para></simplesect>
<simplesect kind="remark"><para>If flags contains APR_POLLSET_WAKEABLE, then a pollset is created with additional internal pipe object used for the <ref refid="group__apr__poll_1gac5e86828143e169e18b2a6eab94be531" kindref="member">apr_pollset_wakeup()</ref> call. The actual size of pollset is in that case size + 1. This feature is only supported on some platforms; the <ref refid="group__apr__poll_1ga9448a2d756868aa1c6dbc9726a2e32b5" kindref="member">apr_pollset_create_ex()</ref> call will fail with APR_ENOTIMPL on platforms where it is not supported. </para></simplesect>
<simplesect kind="remark"><para>If flags contains APR_POLLSET_NOCOPY, then the <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> structures passed to <ref refid="group__apr__poll_1ga4ec50bf9a11c6b60927c51b81412f5b9" kindref="member">apr_pollset_add()</ref> are not copied and must have a lifetime at least as long as the pollset. </para></simplesect>
<simplesect kind="remark"><para>Some poll methods (including APR_POLLSET_KQUEUE, APR_POLLSET_PORT, and APR_POLLSET_EPOLL) do not have a fixed limit on the size of the pollset. For these methods, the size parameter controls the maximum number of descriptors that will be returned by a single call to <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1gaa06c538d3fea9d860374043aff9450b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollset_destroy</definition>
        <argsstring>(apr_pollset_t *pollset)</argsstring>
        <name>apr_pollset_destroy</name>
        <param>
          <type><ref refid="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" kindref="member">apr_pollset_t</ref> *</type>
          <declname>pollset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a pollset object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollset</parametername>
</parameternamelist>
<parameterdescription>
<para>The pollset to destroy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga4ec50bf9a11c6b60927c51b81412f5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollset_add</definition>
        <argsstring>(apr_pollset_t *pollset, const apr_pollfd_t *descriptor)</argsstring>
        <name>apr_pollset_add</name>
        <param>
          <type><ref refid="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" kindref="member">apr_pollset_t</ref> *</type>
          <declname>pollset</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> *</type>
          <declname>descriptor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a socket or file descriptor to a pollset <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollset</parametername>
</parameternamelist>
<parameterdescription>
<para>The pollset to which to add the descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>The descriptor to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If you set client_data in the descriptor, that value will be returned in the client_data field whenever this descriptor is signalled in <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref>. </para></simplesect>
<simplesect kind="remark"><para>If the pollset has been created with APR_POLLSET_THREADSAFE and thread T1 is blocked in a call to <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref> for this same pollset that is being modified via <ref refid="group__apr__poll_1ga4ec50bf9a11c6b60927c51b81412f5b9" kindref="member">apr_pollset_add()</ref> in thread T2, the currently executing <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref> call in T1 will either: (1) automatically include the newly added descriptor in the set of descriptors it is watching or (2) return immediately with APR_EINTR. Option (1) is recommended, but option (2) is allowed for implementations where option (1) is impossible or impractical. </para></simplesect>
<simplesect kind="remark"><para>If the pollset has been created with APR_POLLSET_NOCOPY, the <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> structure referenced by descriptor will not be copied and must have a lifetime at least as long as the pollset. </para></simplesect>
<simplesect kind="remark"><para>Do not add the same socket or file descriptor to the same pollset multiple times, even if the requested events differ for the different calls to <ref refid="group__apr__poll_1ga4ec50bf9a11c6b60927c51b81412f5b9" kindref="member">apr_pollset_add()</ref>. If the events of interest for a descriptor change, you must first remove the descriptor from the pollset with <ref refid="group__apr__poll_1ga3c99c06e142d6b6b789eeb6086122e3a" kindref="member">apr_pollset_remove()</ref>, then add it again specifying all requested events. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga3c99c06e142d6b6b789eeb6086122e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollset_remove</definition>
        <argsstring>(apr_pollset_t *pollset, const apr_pollfd_t *descriptor)</argsstring>
        <name>apr_pollset_remove</name>
        <param>
          <type><ref refid="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" kindref="member">apr_pollset_t</ref> *</type>
          <declname>pollset</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> *</type>
          <declname>descriptor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a descriptor from a pollset <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollset</parametername>
</parameternamelist>
<parameterdescription>
<para>The pollset from which to remove the descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>The descriptor to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If the descriptor is not found, APR_NOTFOUND is returned. </para></simplesect>
<simplesect kind="remark"><para>If the pollset has been created with APR_POLLSET_THREADSAFE and thread T1 is blocked in a call to <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref> for this same pollset that is being modified via <ref refid="group__apr__poll_1ga3c99c06e142d6b6b789eeb6086122e3a" kindref="member">apr_pollset_remove()</ref> in thread T2, the currently executing <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref> call in T1 will either: (1) automatically exclude the newly added descriptor in the set of descriptors it is watching or (2) return immediately with APR_EINTR. Option (1) is recommended, but option (2) is allowed for implementations where option (1) is impossible or impractical. </para></simplesect>
<simplesect kind="remark"><para><ref refid="group__apr__poll_1ga3c99c06e142d6b6b789eeb6086122e3a" kindref="member">apr_pollset_remove()</ref> cannot be used to remove a subset of requested events for a descriptor. The reqevents field in the <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> parameter must contain the same value when removing as when adding. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollset_poll</definition>
        <argsstring>(apr_pollset_t *pollset, apr_interval_time_t timeout, apr_int32_t *num, const apr_pollfd_t **descriptors)</argsstring>
        <name>apr_pollset_poll</name>
        <param>
          <type><ref refid="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" kindref="member">apr_pollset_t</ref> *</type>
          <declname>pollset</declname>
        </param>
        <param>
          <type><ref refid="group__apr__time_1gaae2129185a395cc393f76fabf4f43e47" kindref="member">apr_interval_time_t</ref></type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>apr_int32_t *</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> **</type>
          <declname>descriptors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Block for activity on the descriptor(s) in a pollset <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollset</parametername>
</parameternamelist>
<parameterdescription>
<para>The pollset to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of time in microseconds to wait. This is a maximum, not a minimum. If a descriptor is signalled, the function will return before this time. If timeout is negative, the function will block until a descriptor is signalled or until <ref refid="group__apr__poll_1gac5e86828143e169e18b2a6eab94be531" kindref="member">apr_pollset_wakeup()</ref> has been called. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of signalled descriptors (output parameter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptors</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of signalled descriptors (output parameter) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>APR_EINTR will be returned if the pollset has been created with APR_POLLSET_WAKEABLE, <ref refid="group__apr__poll_1gac5e86828143e169e18b2a6eab94be531" kindref="member">apr_pollset_wakeup()</ref> has been called while waiting for activity, and there were no signalled descriptors at the time of the wakeup call. </para></simplesect>
<simplesect kind="remark"><para>Multiple signalled conditions for the same descriptor may be reported in one or more returned <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> structures, depending on the implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1gac5e86828143e169e18b2a6eab94be531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollset_wakeup</definition>
        <argsstring>(apr_pollset_t *pollset)</argsstring>
        <name>apr_pollset_wakeup</name>
        <param>
          <type><ref refid="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" kindref="member">apr_pollset_t</ref> *</type>
          <declname>pollset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interrupt the blocked <ref refid="group__apr__poll_1ga6b31d7b3a7b2d356370403dd2b79ecf3" kindref="member">apr_pollset_poll()</ref> call. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollset</parametername>
</parameternamelist>
<parameterdescription>
<para>The pollset to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If the pollset was not created with APR_POLLSET_WAKEABLE the return value is APR_EINIT. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1gad1d8a1ccd14952be6da5f272ca8dda76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_poll</definition>
        <argsstring>(apr_pollfd_t *aprset, apr_int32_t numsock, apr_int32_t *nsds, apr_interval_time_t timeout)</argsstring>
        <name>apr_poll</name>
        <param>
          <type><ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> *</type>
          <declname>aprset</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>numsock</declname>
        </param>
        <param>
          <type>apr_int32_t *</type>
          <declname>nsds</declname>
        </param>
        <param>
          <type><ref refid="group__apr__time_1gaae2129185a395cc393f76fabf4f43e47" kindref="member">apr_interval_time_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Poll the descriptors in the poll structure <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aprset</parametername>
</parameternamelist>
<parameterdescription>
<para>The poll structure we will be using. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numsock</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of descriptors we are polling </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsds</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of descriptors signalled (output parameter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of time in microseconds to wait. This is a maximum, not a minimum. If a descriptor is signalled, the function will return before this time. If timeout is negative, the function will block until a descriptor is signalled or until <ref refid="group__apr__poll_1gac5e86828143e169e18b2a6eab94be531" kindref="member">apr_pollset_wakeup()</ref> has been called. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The number of descriptors signalled is returned in the third argument. This is a blocking call, and it will not return until either a descriptor has been signalled or the timeout has expired. </para></simplesect>
<simplesect kind="remark"><para>The rtnevents field in the <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> array will only be filled- in if the return value is APR_SUCCESS. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga942ebbcc17d27911da86e1bd5c7a592e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_pollset_method_name</definition>
        <argsstring>(apr_pollset_t *pollset)</argsstring>
        <name>apr_pollset_method_name</name>
        <param>
          <type><ref refid="group__apr__poll_1ga680da1f10ac5ef75efc503a9d15b8906" kindref="member">apr_pollset_t</ref> *</type>
          <declname>pollset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a printable representation of the pollset method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollset</parametername>
</parameternamelist>
<parameterdescription>
<para>The pollset to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga5d64867d7a3abd53d3765b4b47cf774f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_poll_method_defname</definition>
        <argsstring>(void)</argsstring>
        <name>apr_poll_method_defname</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a printable representation of the default pollset method (APR_POLLSET_DEFAULT). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga76c33736268d57fca503790711d6d04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollcb_create</definition>
        <argsstring>(apr_pollcb_t **pollcb, apr_uint32_t size, apr_pool_t *p, apr_uint32_t flags)</argsstring>
        <name>apr_pollcb_create</name>
        <param>
          <type><ref refid="group__apr__poll_1gae382e39bdf0c5a02fca7da3944bece08" kindref="member">apr_pollcb_t</ref> **</type>
          <declname>pollcb</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up a pollcb object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollcb</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer in which to return the newly created object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of descriptors that a single _poll can return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate the pollcb </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional flags to modify the operation of the pollcb.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Pollcb is only supported on some platforms; the <ref refid="group__apr__poll_1ga76c33736268d57fca503790711d6d04e" kindref="member">apr_pollcb_create()</ref> call will fail with APR_ENOTIMPL on platforms where it is not supported. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga2ebdd0cba2d3b8333c46ee48170f8e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollcb_create_ex</definition>
        <argsstring>(apr_pollcb_t **pollcb, apr_uint32_t size, apr_pool_t *p, apr_uint32_t flags, apr_pollset_method_e method)</argsstring>
        <name>apr_pollcb_create_ex</name>
        <param>
          <type><ref refid="group__apr__poll_1gae382e39bdf0c5a02fca7da3944bece08" kindref="member">apr_pollcb_t</ref> **</type>
          <declname>pollcb</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__poll_1gabe6f1238ea45e9425fa052e2788e4a29" kindref="member">apr_pollset_method_e</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up a pollcb object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollcb</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer in which to return the newly created object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of descriptors that a single _poll can return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate the pollcb </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional flags to modify the operation of the pollcb. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Poll method to use. See <ref refid="group__apr__poll_1gabe6f1238ea45e9425fa052e2788e4a29" kindref="member">apr_pollset_method_e</ref>. If this method cannot be used, the default method will be used unless the APR_POLLSET_NODEFAULT flag has been specified.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Pollcb is only supported on some platforms; the <ref refid="group__apr__poll_1ga2ebdd0cba2d3b8333c46ee48170f8e90" kindref="member">apr_pollcb_create_ex()</ref> call will fail with APR_ENOTIMPL on platforms where it is not supported. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga8fab02dfa803d911dae98656fac7a2c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollcb_add</definition>
        <argsstring>(apr_pollcb_t *pollcb, apr_pollfd_t *descriptor)</argsstring>
        <name>apr_pollcb_add</name>
        <param>
          <type><ref refid="group__apr__poll_1gae382e39bdf0c5a02fca7da3944bece08" kindref="member">apr_pollcb_t</ref> *</type>
          <declname>pollcb</declname>
        </param>
        <param>
          <type><ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> *</type>
          <declname>descriptor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a socket or file descriptor to a pollcb <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollcb</parametername>
</parameternamelist>
<parameterdescription>
<para>The pollcb to which to add the descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>The descriptor to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If you set client_data in the descriptor, that value will be returned in the client_data field whenever this descriptor is signalled in <ref refid="group__apr__poll_1ga11765d1b27e2f621a8dcd2c40f0e259c" kindref="member">apr_pollcb_poll()</ref>. </para></simplesect>
<simplesect kind="remark"><para>Unlike the apr_pollset API, the descriptor is not copied, and users must retain the memory used by descriptor, as the same pointer will be returned to them from apr_pollcb_poll. </para></simplesect>
<simplesect kind="remark"><para>Do not add the same socket or file descriptor to the same pollcb multiple times, even if the requested events differ for the different calls to <ref refid="group__apr__poll_1ga8fab02dfa803d911dae98656fac7a2c8" kindref="member">apr_pollcb_add()</ref>. If the events of interest for a descriptor change, you must first remove the descriptor from the pollcb with <ref refid="group__apr__poll_1gad004b778a14d6bcc4e48a10e5af729d8" kindref="member">apr_pollcb_remove()</ref>, then add it again specifying all requested events. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1gad004b778a14d6bcc4e48a10e5af729d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollcb_remove</definition>
        <argsstring>(apr_pollcb_t *pollcb, apr_pollfd_t *descriptor)</argsstring>
        <name>apr_pollcb_remove</name>
        <param>
          <type><ref refid="group__apr__poll_1gae382e39bdf0c5a02fca7da3944bece08" kindref="member">apr_pollcb_t</ref> *</type>
          <declname>pollcb</declname>
        </param>
        <param>
          <type><ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> *</type>
          <declname>descriptor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a descriptor from a pollcb <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollcb</parametername>
</parameternamelist>
<parameterdescription>
<para>The pollcb from which to remove the descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>The descriptor to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><ref refid="group__apr__poll_1gad004b778a14d6bcc4e48a10e5af729d8" kindref="member">apr_pollcb_remove()</ref> cannot be used to remove a subset of requested events for a descriptor. The reqevents field in the <ref refid="structapr__pollfd__t" kindref="compound">apr_pollfd_t</ref> parameter must contain the same value when removing as when adding. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__poll_1ga11765d1b27e2f621a8dcd2c40f0e259c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pollcb_poll</definition>
        <argsstring>(apr_pollcb_t *pollcb, apr_interval_time_t timeout, apr_pollcb_cb_t func, void *baton)</argsstring>
        <name>apr_pollcb_poll</name>
        <param>
          <type><ref refid="group__apr__poll_1gae382e39bdf0c5a02fca7da3944bece08" kindref="member">apr_pollcb_t</ref> *</type>
          <declname>pollcb</declname>
        </param>
        <param>
          <type><ref refid="group__apr__time_1gaae2129185a395cc393f76fabf4f43e47" kindref="member">apr_interval_time_t</ref></type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__apr__poll_1ga1dcd8c87e233dbf105e83d50ef601f55" kindref="member">apr_pollcb_cb_t</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>baton</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Block for activity on the descriptor(s) in a pollcb <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pollcb</parametername>
</parameternamelist>
<parameterdescription>
<para>The pollcb to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of time in microseconds to wait. This is a maximum, not a minimum. If a descriptor is signalled, the function will return before this time. If timeout is negative, the function will block until a descriptor is signalled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call for each active descriptor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baton</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque baton passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Multiple signalled conditions for the same descriptor may be reported in one or more calls to the callback function, depending on the implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_poll.h" line="414" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>APR Poll interface. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/apr_poll.h"/>
  </compounddef>
</doxygen>
