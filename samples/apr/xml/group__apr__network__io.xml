<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__network__io" kind="group">
    <compoundname>apr_network_io</compoundname>
    <title>Network Routines</title>
    <innerclass refid="structapr__sockaddr__t" prot="public">apr_sockaddr_t</innerclass>
    <innerclass refid="structapr__hdtr__t" prot="public">apr_hdtr_t</innerclass>
    <innergroup refid="group__apr__sockopt">Socket option definitions</innergroup>
    <innergroup refid="group___i_p___proto">IP Protocol Definitions for use when creating sockets</innergroup>
    <innergroup refid="group__apr__mcast">IP Multicast</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__apr__network__io_1gae2130f1fa2d0db58c5c3c9c73d9b4009" prot="public" static="no">
        <name>apr_shutdown_how_e</name>
        <enumvalue id="group__apr__network__io_1ggae2130f1fa2d0db58c5c3c9c73d9b4009a88d0661d35eea5319715d6ca69265b01" prot="public">
          <name>APR_SHUTDOWN_READ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>no longer allow read request </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__network__io_1ggae2130f1fa2d0db58c5c3c9c73d9b4009a5e335b392088e14df65d1bd5e0db7c46" prot="public">
          <name>APR_SHUTDOWN_WRITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>no longer allow write requests </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__network__io_1ggae2130f1fa2d0db58c5c3c9c73d9b4009add172f55ff5ee7b930683a3903c99768" prot="public">
          <name>APR_SHUTDOWN_READWRITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>no longer allow read or write requests </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define what type of socket shutdown should occur. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="133" column="1" bodyfile="include/apr_network_io.h" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="enum" id="group__apr__network__io_1ga1982f44f48fdf00a8bd754bc7b773edc" prot="public" static="no">
        <name>apr_interface_e</name>
        <enumvalue id="group__apr__network__io_1gga1982f44f48fdf00a8bd754bc7b773edca6c23a4bf48b8f93dff08adf827382616" prot="public">
          <name>APR_LOCAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Socket information for local end of connection </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__network__io_1gga1982f44f48fdf00a8bd754bc7b773edcaeb8be70b031f06a513ac0ebcaa5bac8a" prot="public">
          <name>APR_REMOTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Socket information for remote end of connection </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enum used to denote either the local and remote endpoint of a connection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="197" column="1" bodyfile="include/apr_network_io.h" bodystart="197" bodyend="200"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" prot="public" static="no">
        <type>struct <ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref></type>
        <definition>typedef struct apr_socket_t apr_socket_t</definition>
        <argsstring></argsstring>
        <name>apr_socket_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to represent sockets </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="85" column="1" bodyfile="include/apr_network_io.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__network__io_1ga97887d5358a9c79c241ccafab61d8ff5" prot="public" static="no">
        <type>struct <ref refid="structapr__hdtr__t" kindref="compound">apr_hdtr_t</ref></type>
        <definition>typedef struct apr_hdtr_t apr_hdtr_t</definition>
        <argsstring></argsstring>
        <name>apr_hdtr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to encapsulate headers and trailers for apr_socket_sendfile </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="85" column="1" bodyfile="include/apr_network_io.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__network__io_1gad30d6c55a354a9a2e0a8747abb0c8176" prot="public" static="no">
        <type>struct in_addr</type>
        <definition>typedef struct in_addr apr_in_addr_t</definition>
        <argsstring></argsstring>
        <name>apr_in_addr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to represent in_addr </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="85" column="1" bodyfile="include/apr_network_io.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__network__io_1gac86ee04eb80f938902095d1d0a67c324" prot="public" static="no">
        <type>struct <ref refid="group__apr__network__io_1gac86ee04eb80f938902095d1d0a67c324" kindref="member">apr_ipsubnet_t</ref></type>
        <definition>typedef struct apr_ipsubnet_t apr_ipsubnet_t</definition>
        <argsstring></argsstring>
        <name>apr_ipsubnet_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to represent an IP subnet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="85" column="1" bodyfile="include/apr_network_io.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__network__io_1gaa670a71960f6eb4fe0d0de2a1e7aba03" prot="public" static="no">
        <type>apr_uint16_t</type>
        <definition>typedef apr_uint16_t apr_port_t</definition>
        <argsstring></argsstring>
        <name>apr_port_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>use apr_uint16_t just in case some system has a short that isn&apos;t 16 bits... </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="229" column="1" bodyfile="include/apr_network_io.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__network__io_1ga373fb6f32d0875c5deb648b779c8a709" prot="public" static="no">
        <type>struct <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref></type>
        <definition>typedef struct apr_sockaddr_t apr_sockaddr_t</definition>
        <argsstring></argsstring>
        <name>apr_sockaddr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>It&apos;s defined here as I think it should all be platform safe... </para></simplesect>
<simplesect kind="see"><para><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="229" column="1" bodyfile="include/apr_network_io.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__network__io_1ga46b81e267ef80e64510d4e83880a91bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_create</definition>
        <argsstring>(apr_socket_t **new_sock, int family, int type, int protocol, apr_pool_t *cont)</argsstring>
        <name>apr_socket_create</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> **</type>
          <declname>new_sock</declname>
        </param>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a socket. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The new socket that has been set up. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>The address family of the socket (e.g., APR_INET). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the socket (e.g., SOCK_STREAM). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>The protocol of the socket (e.g., APR_PROTO_TCP). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cont</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for the apr_socket_t and associated storage. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The pool will be used by various functions that operate on the socket. The caller must ensure that it is not used by other threads at the same time. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gac5aea857a50c493f840c48b930abc48e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_shutdown</definition>
        <argsstring>(apr_socket_t *thesocket, apr_shutdown_how_e how)</argsstring>
        <name>apr_socket_shutdown</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>thesocket</declname>
        </param>
        <param>
          <type><ref refid="group__apr__network__io_1gae2130f1fa2d0db58c5c3c9c73d9b4009" kindref="member">apr_shutdown_how_e</ref></type>
          <declname>how</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shutdown either reading, writing, or both sides of a socket. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thesocket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to close </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>how</parametername>
</parameternamelist>
<parameterdescription>
<para>How to shutdown the socket. One of: <preformatted>
           APR_SHUTDOWN_READ         no longer allow read requests
           APR_SHUTDOWN_WRITE        no longer allow write requests
           APR_SHUTDOWN_READWRITE    no longer allow read or write requests 
</preformatted> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__apr__network__io_1gae2130f1fa2d0db58c5c3c9c73d9b4009" kindref="member">apr_shutdown_how_e</ref> </para></simplesect>
<simplesect kind="remark"><para>This does not actually close the socket descriptor, it just controls which calls are still valid on the socket. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga88779f243ce19a2563544aee81894e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_close</definition>
        <argsstring>(apr_socket_t *thesocket)</argsstring>
        <name>apr_socket_close</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>thesocket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close a socket. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thesocket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to close </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga512882c9979c2b9cad7cbc2508516d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_bind</definition>
        <argsstring>(apr_socket_t *sock, apr_sockaddr_t *sa)</argsstring>
        <name>apr_socket_bind</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bind the socket to its associated port <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to bind </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sa</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket address to bind to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This may be where we will find out if there is any other process using the selected port. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga154bcee918f6f01fe0373359dd74b0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_listen</definition>
        <argsstring>(apr_socket_t *sock, apr_int32_t backlog)</argsstring>
        <name>apr_socket_listen</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>backlog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Listen to a bound socket for connections. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to listen on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>backlog</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of outstanding connections allowed in the sockets listen queue. If this value is less than zero, the listen queue size is set to zero. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga1d62711ca77ccc0f6413a298a47876da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_accept</definition>
        <argsstring>(apr_socket_t **new_sock, apr_socket_t *sock, apr_pool_t *connection_pool)</argsstring>
        <name>apr_socket_accept</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> **</type>
          <declname>new_sock</declname>
        </param>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>connection_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accept a new connection request <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_sock</parametername>
</parameternamelist>
<parameterdescription>
<para>A copy of the socket that is connected to the socket that made the connection request. This is the socket which should be used for all future communication. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket we are listening on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connection_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for the new socket. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The pool will be used by various functions that operate on the socket. The caller must ensure that it is not used by other threads at the same time. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga8e58bd8112ed2ce5004487918cd9275e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_connect</definition>
        <argsstring>(apr_socket_t *sock, apr_sockaddr_t *sa)</argsstring>
        <name>apr_socket_connect</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Issue a connection request to a socket either on the same machine or a different one. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket we wish to use for our side of the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sa</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the machine we wish to connect to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gabfcb1fe4447921e5b86d395126b5d6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_atreadeof</definition>
        <argsstring>(apr_socket_t *sock, int *atreadeof)</argsstring>
        <name>apr_socket_atreadeof</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>atreadeof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the receive part of the socket has been closed by the peer (such that a subsequent call to apr_socket_read would return APR_EOF), if the socket&apos;s receive buffer is empty. This function does not block waiting for I/O.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atreadeof</parametername>
</parameternamelist>
<parameterdescription>
<para>If APR_SUCCESS is returned, *atreadeof is set to non-zero if a subsequent read would return APR_EOF </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error is returned if it was not possible to determine the status, in which case *atreadeof is not changed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gaa2f399ca2b60b35c0abf7630298c6c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_sockaddr_info_get</definition>
        <argsstring>(apr_sockaddr_t **sa, const char *hostname, apr_int32_t family, apr_port_t port, apr_int32_t flags, apr_pool_t *p)</argsstring>
        <name>apr_sockaddr_info_get</name>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> **</type>
          <declname>sa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>family</declname>
        </param>
        <param>
          <type><ref refid="group__apr__network__io_1gaa670a71960f6eb4fe0d0de2a1e7aba03" kindref="member">apr_port_t</ref></type>
          <declname>port</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> from hostname, address family, and port. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sa</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>The hostname or numeric address string to resolve/parse, or NULL to build an address that corresponds to 0.0.0.0 or :: </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>The address family to use, or APR_UNSPEC if the system should decide. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Special processing flags: <preformatted>
      APR_IPV4_ADDR_OK          first query for IPv4 addresses; only look
                                for IPv6 addresses if the first query failed;
                                only valid if family is APR_UNSPEC and hostname
                                isn&apos;t NULL; mutually exclusive with
                                APR_IPV6_ADDR_OK
      APR_IPV6_ADDR_OK          first query for IPv6 addresses; only look
                                for IPv4 addresses if the first query failed;
                                only valid if family is APR_UNSPEC and hostname
                                isn&apos;t NULL and APR_HAVE_IPV6; mutually exclusive
                                with APR_IPV4_ADDR_OK
</preformatted> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for the <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> and associated storage. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga7a56fd9573b942753738ec30b887c9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_getnameinfo</definition>
        <argsstring>(char **hostname, apr_sockaddr_t *sa, apr_int32_t flags)</argsstring>
        <name>apr_getnameinfo</name>
        <param>
          <type>char **</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>sa</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look up the host name from an <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>The hostname. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sa</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Special processing flags. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Results can vary significantly between platforms when processing wildcard socket addresses. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga90c31b2f012c6b1e2d842a96c4431de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_parse_addr_port</definition>
        <argsstring>(char **addr, char **scope_id, apr_port_t *port, const char *str, apr_pool_t *p)</argsstring>
        <name>apr_parse_addr_port</name>
        <param>
          <type>char **</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>scope_id</declname>
        </param>
        <param>
          <type><ref refid="group__apr__network__io_1gaa670a71960f6eb4fe0d0de2a1e7aba03" kindref="member">apr_port_t</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse hostname/IP address with scope id and port.</para><para>Any of the following strings are accepted: 8080 (just the port number) www.apache.org (just the hostname) www.apache.org:8080 (hostname and port number)</para><para>[fe80::1eth0] (IPv6 numeric address string and scope id)</para><para>Invalid strings: (empty string) [abc] (not valid IPv6 numeric address string) abc:65536 (invalid port number)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The new buffer containing just the hostname. On output, *addr will be NULL if no hostname/IP address was specfied. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The new buffer containing just the scope id. On output, *scope_id will be NULL if no scope id was specified. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port number. On output, *port will be 0 if no port was specified. <heading level="3">FIXME: 0 is a legal port (per RFC 1700). this should</heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="3">return something besides zero if the port is missing.</heading>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string to be parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which *addr and *scope_id are allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If scope id shouldn&apos;t be allowed, check for scope_id != NULL in addition to checking the return code. If addr/hostname should be required, check for addr == NULL in addition to checking the return code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga6bd3d656ba935ca428075f477b8a6f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_gethostname</definition>
        <argsstring>(char *buf, int len, apr_pool_t *cont)</argsstring>
        <name>apr_gethostname</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get name of the current machine <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to store the hostname in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum length of the hostname that can be stored in the buffer provided. The suggested length is APRMAXHOSTLEN + 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cont</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If the buffer was not large enough, an error will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gae76b48d0224a608b4ddb8bd00582eaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_data_get</definition>
        <argsstring>(void **data, const char *key, apr_socket_t *sock)</argsstring>
        <name>apr_socket_data_get</name>
        <param>
          <type>void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the data associated with the current socket <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data associated with the socket. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to associate with the user data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The currently open socket. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gafec197f3aa9a495801cdf7892ff8dcb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_data_set</definition>
        <argsstring>(apr_socket_t *sock, void *data, const char *key, apr_status_t(*cleanup)(void *))</argsstring>
        <name>apr_socket_data_set</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the data associated with the current socket. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The currently open socket. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data to associate with the socket. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to associate with the data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The cleanup to call when the socket is destroyed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga943268245cf59f6ff8cf1458c9a9ba8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_send</definition>
        <argsstring>(apr_socket_t *sock, const char *buf, apr_size_t *len)</argsstring>
        <name>apr_socket_send</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send data over a network. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to send the data over. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer which contains the data to be sent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, the number of bytes to send; on exit, the number of bytes sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><preformatted>
This functions acts like a blocking write by default.  To change 
this behavior, use <ref refid="group__apr__network__io_1ga945bdbe807ec5635d65a6fd9ddb78c29" kindref="member">apr_socket_timeout_set()</ref> or the APR_SO_NONBLOCK
socket option.</preformatted></para></simplesect>
It is possible for both bytes to be sent and an error to be returned.</para><para><preformatted>APR_EINTR is never returned.
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga99ece70c34a7a332daa3941de3950c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_sendv</definition>
        <argsstring>(apr_socket_t *sock, const struct iovec *vec, apr_int32_t nvec, apr_size_t *len)</argsstring>
        <name>apr_socket_sendv</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>nvec</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send multiple buffers over a network. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to send the data over. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of iovec structs containing the data to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvec</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of iovec structs in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the number of bytes actually written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><preformatted>
This functions acts like a blocking write by default.  To change 
this behavior, use <ref refid="group__apr__network__io_1ga945bdbe807ec5635d65a6fd9ddb78c29" kindref="member">apr_socket_timeout_set()</ref> or the APR_SO_NONBLOCK
socket option.
The number of bytes actually sent is stored in argument 4.</preformatted></para></simplesect>
It is possible for both bytes to be sent and an error to be returned.</para><para><preformatted>APR_EINTR is never returned.
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga03ae34bc5712dac2b3fdee39e5f87be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_sendto</definition>
        <argsstring>(apr_socket_t *sock, apr_sockaddr_t *where, apr_int32_t flags, const char *buf, apr_size_t *len)</argsstring>
        <name>apr_socket_sendto</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>where</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to send from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> describing where to send the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the data to send </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga80880312b41e86c9c266ede1a504e2ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_recvfrom</definition>
        <argsstring>(apr_sockaddr_t *from, apr_socket_t *sock, apr_int32_t flags, char *buf, apr_size_t *len)</argsstring>
        <name>apr_socket_recvfrom</name>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data from a socket. On success, the address of the peer from which the data was sent is copied into the <emphasis>from</emphasis> parameter, and the <emphasis>len</emphasis> parameter is updated to give the number of bytes written to <emphasis>buf</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>Updated with the address from which the data was received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the available buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga3d93e6212c4c27f2390b0057f8f4a8be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_sendfile</definition>
        <argsstring>(apr_socket_t *sock, apr_file_t *file, apr_hdtr_t *hdtr, apr_off_t *offset, apr_size_t *len, apr_int32_t flags)</argsstring>
        <name>apr_socket_sendfile</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="structapr__hdtr__t" kindref="compound">apr_hdtr_t</ref> *</type>
          <declname>hdtr</declname>
        </param>
        <param>
          <type>apr_off_t *</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a file from an open file descriptor to a socket, along with optional headers and trailers <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to which we&apos;re writing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The open file from which to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hdtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A structure containing the headers and trailers to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset into the file where we should begin writing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) - Number of bytes to send from the file (output) - Number of bytes actually sent, including headers, file, and trailers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>APR flags that are mapped to OS specific flags </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This functions acts like a blocking write by default. To change this behavior, use <ref refid="group__apr__network__io_1ga945bdbe807ec5635d65a6fd9ddb78c29" kindref="member">apr_socket_timeout_set()</ref> or the APR_SO_NONBLOCK socket option. The number of bytes actually sent is stored in the len parameter. The offset parameter is passed by reference for no reason; its value will never be modified by the <ref refid="group__apr__network__io_1ga3d93e6212c4c27f2390b0057f8f4a8be" kindref="member">apr_socket_sendfile()</ref> function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gaa6ee00191f197f64b5a5409f4aff53d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_recv</definition>
        <argsstring>(apr_socket_t *sock, char *buf, apr_size_t *len)</argsstring>
        <name>apr_socket_recv</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data from a network. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to read the data from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to store the data in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, the number of bytes to receive; on exit, the number of bytes received. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><preformatted>
This functions acts like a blocking read by default.  To change 
this behavior, use <ref refid="group__apr__network__io_1ga945bdbe807ec5635d65a6fd9ddb78c29" kindref="member">apr_socket_timeout_set()</ref> or the APR_SO_NONBLOCK
socket option.
The number of bytes actually received is stored in argument 3.</preformatted></para></simplesect>
It is possible for both bytes to be received and an APR_EOF or other error to be returned.</para><para><preformatted>APR_EINTR is never returned.
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga08f5e505fa611005f56c12783269ffa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_opt_set</definition>
        <argsstring>(apr_socket_t *sock, apr_int32_t opt, apr_int32_t on)</argsstring>
        <name>apr_socket_opt_set</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>on</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup socket options for the specified socket <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to set up. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>The option we would like to configure. One of: <preformatted>
           APR_SO_DEBUG      --  turn on debugging information 
           APR_SO_KEEPALIVE  --  keep connections active
           APR_SO_LINGER     --  lingers on close if data is present
           APR_SO_NONBLOCK   --  Turns blocking on/off for socket
                                 When this option is enabled, use
                                 the <ref refid="group___a_p_r___s_t_a_t_u_s___i_s_1ga9dd578bfcd76a2d997395608ae5b3a4e" kindref="member">APR_STATUS_IS_EAGAIN()</ref> macro to
                                 see if a send or receive function
                                 could not transfer data without
                                 blocking.
           APR_SO_REUSEADDR  --  The rules used in validating addresses
                                 supplied to bind should allow reuse
                                 of local addresses.
           APR_SO_SNDBUF     --  Set the SendBufferSize
           APR_SO_RCVBUF     --  Set the ReceiveBufferSize
</preformatted> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the option. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="651" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga945bdbe807ec5635d65a6fd9ddb78c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_timeout_set</definition>
        <argsstring>(apr_socket_t *sock, apr_interval_time_t t)</argsstring>
        <name>apr_socket_timeout_set</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="group__apr__time_1gaae2129185a395cc393f76fabf4f43e47" kindref="member">apr_interval_time_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup socket timeout for the specified socket <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to set up. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the timeout. <preformatted>
  t &gt; 0  <ndash/> read and write calls return APR_TIMEUP if specified time
            elapsess with no data read or written
  t == 0 <ndash/> read and write calls never block
  t &lt; 0  <ndash/> read and write calls block
</preformatted> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="665" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga1934c2d5943efc8ce925f376f3c2e17e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_opt_get</definition>
        <argsstring>(apr_socket_t *sock, apr_int32_t opt, apr_int32_t *on)</argsstring>
        <name>apr_socket_opt_get</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>apr_int32_t *</type>
          <declname>on</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query socket options for the specified socket <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to query </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>The option we would like to query. One of: <preformatted>
           APR_SO_DEBUG      --  turn on debugging information 
           APR_SO_KEEPALIVE  --  keep connections active
           APR_SO_LINGER     --  lingers on close if data is present
           APR_SO_NONBLOCK   --  Turns blocking on/off for socket
           APR_SO_REUSEADDR  --  The rules used in validating addresses
                                 supplied to bind should allow reuse
                                 of local addresses.
           APR_SO_SNDBUF     --  Set the SendBufferSize
           APR_SO_RCVBUF     --  Set the ReceiveBufferSize
           APR_SO_DISCONNECTED -- Query the disconnected state of the socket.
                                 (Currently only used on Windows)
</preformatted> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket option returned on the call. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gaa32313b54afed590367c8571075d2bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_timeout_get</definition>
        <argsstring>(apr_socket_t *sock, apr_interval_time_t *t)</argsstring>
        <name>apr_socket_timeout_get</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="group__apr__time_1gaae2129185a395cc393f76fabf4f43e47" kindref="member">apr_interval_time_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query socket timeout for the specified socket <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to query </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket timeout returned from the query. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="695" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga2389de257444870974b5ded91cf7a10c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_atmark</definition>
        <argsstring>(apr_socket_t *sock, int *atmark)</argsstring>
        <name>apr_socket_atmark</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>atmark</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query the specified socket if at the OOB/Urgent data mark <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to query </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atmark</parametername>
</parameternamelist>
<parameterdescription>
<para>Is set to true if socket is at the OOB/urgent mark, otherwise is set to false. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="704" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gacad56b59eafc6ad2459bf6493c992515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_addr_get</definition>
        <argsstring>(apr_sockaddr_t **sa, apr_interface_e which, apr_socket_t *sock)</argsstring>
        <name>apr_socket_addr_get</name>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> **</type>
          <declname>sa</declname>
        </param>
        <param>
          <type><ref refid="group__apr__network__io_1ga1982f44f48fdf00a8bd754bc7b773edc" kindref="member">apr_interface_e</ref></type>
          <declname>which</declname>
        </param>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an address associated with a socket; either the address to which the socket is bound locally or the address of the peer to which the socket is connected. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sa</parametername>
</parameternamelist>
<parameterdescription>
<para>The returned <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to retrieve the local or remote address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="715" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gab78fc9b9799c119f4a5517411458a660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_sockaddr_ip_get</definition>
        <argsstring>(char **addr, apr_sockaddr_t *sockaddr)</argsstring>
        <name>apr_sockaddr_ip_get</name>
        <param>
          <type>char **</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>sockaddr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the IP address (in numeric address string format) in an APR socket address. APR will allocate storage for the IP address string from the pool of the <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP address. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sockaddr</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket address to reference. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="726" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga8c88ae154304e30d47c2696f4370dc6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_sockaddr_ip_getbuf</definition>
        <argsstring>(char *buf, apr_size_t buflen, apr_sockaddr_t *sockaddr)</argsstring>
        <name>apr_sockaddr_ip_getbuf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>buflen</declname>
        </param>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>sockaddr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the IP address (in numeric address string format) of the APR socket address <emphasis>sockaddr</emphasis> into the buffer <emphasis>buf</emphasis> (of size <emphasis>buflen</emphasis>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sockaddr</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket address to reference. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="734" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga1bf65369305ae352f3280af2acc684f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_sockaddr_equal</definition>
        <argsstring>(const apr_sockaddr_t *addr1, const apr_sockaddr_t *addr2)</argsstring>
        <name>apr_sockaddr_equal</name>
        <param>
          <type>const <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>See if the IP addresses in two APR socket addresses are equivalent. Appropriate logic is present for comparing IPv4-mapped IPv6 addresses with IPv4 addresses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the APR socket addresses. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>The other APR socket address. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The return value will be non-zero if the addresses are equivalent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gab9e53832f95e39cb780345c2b7783830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_sockaddr_is_wildcard</definition>
        <argsstring>(const apr_sockaddr_t *addr)</argsstring>
        <name>apr_sockaddr_is_wildcard</name>
        <param>
          <type>const <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>See if the IP address in an APR socket address refers to the wildcard address for the protocol family (e.g., INADDR_ANY for IPv4).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The APR socket address to examine. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The return value will be non-zero if the address is initialized and is the wildcard address. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="758" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga8d23ee2db9a84af2e6408ef460613514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_type_get</definition>
        <argsstring>(apr_socket_t *sock, int *type)</argsstring>
        <name>apr_socket_type_get</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the type of the socket. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The returned type (e.g., SOCK_STREAM). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="765" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gad5b504c0fe4d578e72531e3ca0263654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_getservbyname</definition>
        <argsstring>(apr_sockaddr_t *sockaddr, const char *servname)</argsstring>
        <name>apr_getservbyname</name>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>sockaddr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>servname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given an <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> and a service name, set the port for the service <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sockaddr</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> that will have its port set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>servname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the service you wish to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="773" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga34a3c7f1666427f4e381e857b9e9c298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_ipsubnet_create</definition>
        <argsstring>(apr_ipsubnet_t **ipsub, const char *ipstr, const char *mask_or_numbits, apr_pool_t *p)</argsstring>
        <name>apr_ipsubnet_create</name>
        <param>
          <type><ref refid="group__apr__network__io_1gac86ee04eb80f938902095d1d0a67c324" kindref="member">apr_ipsubnet_t</ref> **</type>
          <declname>ipsub</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ipstr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mask_or_numbits</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build an ip-subnet representation from an IP address and optional netmask or number-of-bits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipsub</parametername>
</parameternamelist>
<parameterdescription>
<para>The new ip-subnet representation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipstr</parametername>
</parameternamelist>
<parameterdescription>
<para>The input IP address string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask_or_numbits</parametername>
</parameternamelist>
<parameterdescription>
<para>The input netmask or number-of-bits string, or NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="783" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gab74d21b8898b7c40bf7fd07ad3eb993d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_ipsubnet_test</definition>
        <argsstring>(apr_ipsubnet_t *ipsub, apr_sockaddr_t *sa)</argsstring>
        <name>apr_ipsubnet_test</name>
        <param>
          <type><ref refid="group__apr__network__io_1gac86ee04eb80f938902095d1d0a67c324" kindref="member">apr_ipsubnet_t</ref> *</type>
          <declname>ipsub</declname>
        </param>
        <param>
          <type><ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> *</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test the IP address in an <ref refid="structapr__sockaddr__t" kindref="compound">apr_sockaddr_t</ref> against a pre-built ip-subnet representation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipsub</parametername>
</parameternamelist>
<parameterdescription>
<para>The ip-subnet representation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sa</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket address to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-zero if the socket address is within the subnet, 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga270b7c0835283fa2b85a05d295dd7ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_accept_filter</definition>
        <argsstring>(apr_socket_t *sock, char *name, char *args)</argsstring>
        <name>apr_socket_accept_filter</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an OS level accept filter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to put the accept filter on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The accept filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Any extra args to the accept filter. Passing NULL here removes the accept filter. </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="bug_1_bug000004"><xreftitle>Bug</xreftitle><xrefdescription><para>name and args should have been declared as const char *, as they are in APR 2.0 </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="807" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1gac402d9426de37b6cede18fa157020bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_protocol_get</definition>
        <argsstring>(apr_socket_t *sock, int *protocol)</argsstring>
        <name>apr_socket_protocol_get</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the protocol of the socket. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>The returned protocol (e.g., APR_PROTO_TCP). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="816" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga4f109ecf176aee8fca8ecfa7f8b07d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_socket_pool_get</definition>
        <argsstring>(const apr_socket_t *thesocket)</argsstring>
        <name>apr_socket_pool_get</name>
        <param>
          <type>const <ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>thesocket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the pool used by the socket. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="822" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga8ae81c6a7acf90112ebcfb9221ccc649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_inherit_set</definition>
        <argsstring>(apr_socket_t *thesocket)</argsstring>
        <name>apr_socket_inherit_set</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>thesocket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a socket to be inherited by child processes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="827" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__network__io_1ga5afabb2cee38c141d076b9c52a3f2ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_socket_inherit_unset</definition>
        <argsstring>(apr_socket_t *thesocket)</argsstring>
        <name>apr_socket_inherit_unset</name>
        <param>
          <type><ref refid="group__apr__network__io_1ga49262b223e7434746e1f1737659aa2c3" kindref="member">apr_socket_t</ref> *</type>
          <declname>thesocket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset a socket from being inherited by child processes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="832" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__network__io_1ga8311c84f6946742188a6b9a45e92ea8e" prot="public" static="no">
        <name>APR_MAX_SECS_TO_LINGER</name>
        <initializer>30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum seconds to linger </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="46" column="9" bodyfile="include/apr_network_io.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1ga7f5b3882209106bb407b1d518d6ad59d" prot="public" static="no">
        <name>APRMAXHOSTLEN</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum hostname length </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="51" column="9" bodyfile="include/apr_network_io.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1gadce1131c46b897ec63e9e4316a4631dd" prot="public" static="no">
        <name>APR_ANYADDR</name>
        <initializer>&quot;0.0.0.0&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default &apos;any&apos; address </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="56" column="9" bodyfile="include/apr_network_io.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1ga58aa30a94127b4a80f27fbf2e03fdfd8" prot="public" static="no">
        <name>APR_IPV4_ADDR_OK</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__network__io_1gaa2f399ca2b60b35c0abf7630298c6c9f" kindref="member">apr_sockaddr_info_get()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="114" column="9" bodyfile="include/apr_network_io.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1gaef1f70f9b969d25832a230f429837207" prot="public" static="no">
        <name>APR_IPV6_ADDR_OK</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__network__io_1gaa2f399ca2b60b35c0abf7630298c6c9f" kindref="member">apr_sockaddr_info_get()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="115" column="9" bodyfile="include/apr_network_io.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1ga16eb7ee55ff87a5093f2114ea5351217" prot="public" static="no">
        <name>APR_INADDR_NONE</name>
        <initializer>((unsigned int) 0xffffffff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Not all platforms have a real INADDR_NONE. This macro replaces INADDR_NONE on all platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="134" column="10" bodyfile="include/apr_network_io.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1gaa96e8e8dbf92bc77643a4032017b3d67" prot="public" static="no">
        <name>APR_INET</name>
        <initializer>AF_INET</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Not all platforms have these defined, so we&apos;ll define them here The default values come from FreeBSD 4.1.1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="142" column="9" bodyfile="include/apr_network_io.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1gaa7a33b17a7d0820b09ef489bd3328f85" prot="public" static="no">
        <name>APR_UNSPEC</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Let the system decide which address family to use </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="149" column="10" bodyfile="include/apr_network_io.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1gad09d9ea8995f50f35073ae0c77efb44f" prot="public" static="no">
        <name>APR_INET6</name>
        <initializer>AF_INET6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IPv6 Address Family. Not all platforms may have this defined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="156" column="9" bodyfile="include/apr_network_io.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1ga46a8b06887871cfd60a3e37385775e22" prot="public" static="no">
        <name>apr_inet_addr</name>
        <initializer>inet_addr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The specific declaration of inet_addr&apos;s ... some platforms fall back inet_network (this is not good, but necessary) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="183" column="9" bodyfile="include/apr_network_io.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__network__io_1gaca378d0e24b1588e3fdb143e4ea9090d" prot="public" static="no">
        <name>APR_SENDFILE_DISCONNECT_SOCKET</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Support reusing the socket on platforms which support it (from disconnect, specifically Win32. <simplesect kind="remark"><para>Optional flag passed into <ref refid="group__apr__network__io_1ga3d93e6212c4c27f2390b0057f8f4a8be" kindref="member">apr_socket_sendfile()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_network_io.h" line="259" column="9" bodyfile="include/apr_network_io.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
