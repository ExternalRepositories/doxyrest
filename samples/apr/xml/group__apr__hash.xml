<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__hash" kind="group">
    <compoundname>apr_hash</compoundname>
    <title>Hash Tables</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" prot="public" static="no">
        <type>struct <ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref></type>
        <definition>typedef struct apr_hash_t apr_hash_t</definition>
        <argsstring></argsstring>
        <name>apr_hash_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Abstract type for hash tables. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="141" column="1" bodyfile="include/apr_hash.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__hash_1ga3b3d353989f6cea4535630634be147f7" prot="public" static="no">
        <type>struct <ref refid="group__apr__hash_1ga3b3d353989f6cea4535630634be147f7" kindref="member">apr_hash_index_t</ref></type>
        <definition>typedef struct apr_hash_index_t apr_hash_index_t</definition>
        <argsstring></argsstring>
        <name>apr_hash_index_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Abstract type for scanning hash tables. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="141" column="1" bodyfile="include/apr_hash.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__hash_1ga0bf5622266af13a2489c907a101cb156" prot="public" static="no">
        <type>unsigned int(*</type>
        <definition>typedef unsigned int(* apr_hashfunc_t) (const char *key, apr_ssize_t *klen)</definition>
        <argsstring>)(const char *key, apr_ssize_t *klen)</argsstring>
        <name>apr_hashfunc_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback functions for calculating hash values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>klen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the key, or APR_HASH_KEY_STRING to use the string length. If APR_HASH_KEY_STRING then returns the actual key length. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="65" column="1" bodyfile="include/apr_hash.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__hash_1gafaf9b4435ab207b7708533cb8544face" prot="public" static="no">
        <type>int()</type>
        <definition>typedef int() apr_hash_do_callback_fn_t(void *rec, const void *key, apr_ssize_t klen, const void *value)</definition>
        <argsstring>(void *rec, const void *key, apr_ssize_t klen, const void *value)</argsstring>
        <name>apr_hash_do_callback_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declaration prototype for the iterator callback function of <ref refid="group__apr__hash_1ga3f3bac64e281d9e7eb9fed6101031394" kindref="member">apr_hash_do()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para>The data passed as the first argument to apr_hash_[v]do() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key from this iteration of the hash table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>klen</parametername>
</parameternamelist>
<parameterdescription>
<para>The key length from this iteration of the hash table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value from this iteration of the hash table </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Iteration continues while this callback function returns non-zero. To export the callback function for <ref refid="group__apr__hash_1ga3f3bac64e281d9e7eb9fed6101031394" kindref="member">apr_hash_do()</ref> it must be declared in the _NONSTD convention. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="252" column="1" bodyfile="include/apr_hash.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__hash_1ga8baa6e9d9d6c2c496d2a0ff1a5c53abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int apr_hashfunc_default</definition>
        <argsstring>(const char *key, apr_ssize_t *klen)</argsstring>
        <name>apr_hashfunc_default</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>apr_ssize_t *</type>
          <declname>klen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default hash function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga5f4b424d6761de4d32aa16ff6803bac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
        <definition>apr_hash_t* apr_hash_make</definition>
        <argsstring>(apr_pool_t *pool)</argsstring>
        <name>apr_hash_make</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a hash table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the hash table out of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash table just created </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga27f40acb206f1821a783ddcb71bc8971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
        <definition>apr_hash_t* apr_hash_make_custom</definition>
        <argsstring>(apr_pool_t *pool, apr_hashfunc_t hash_func)</argsstring>
        <name>apr_hash_make_custom</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="group__apr__hash_1ga0bf5622266af13a2489c907a101cb156" kindref="member">apr_hashfunc_t</ref></type>
          <declname>hash_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a hash table with a custom hash function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the hash table out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_func</parametername>
</parameternamelist>
<parameterdescription>
<para>A custom hash function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash table just created </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1gafa0b1b9fb91b2249ee3bcb645d93e148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
        <definition>apr_hash_t* apr_hash_copy</definition>
        <argsstring>(apr_pool_t *pool, const apr_hash_t *h)</argsstring>
        <name>apr_hash_copy</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a copy of a hash table <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate the new hash table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table to clone </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash table just created </para></simplesect>
<simplesect kind="remark"><para>Makes a shallow copy </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga456beb139bc548728b49c09c2f89b93c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_hash_set</definition>
        <argsstring>(apr_hash_t *ht, const void *key, apr_ssize_t klen, const void *val)</argsstring>
        <name>apr_hash_set</name>
        <param>
          <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>klen</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Associate a value with a key in a hash table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>klen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the key. Can be APR_HASH_KEY_STRING to use the string length. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to associate with the key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If the value is NULL the hash entry is deleted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga05e526dad8afaebe14caea90d906d6ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_hash_get</definition>
        <argsstring>(apr_hash_t *ht, const void *key, apr_ssize_t klen)</argsstring>
        <name>apr_hash_get</name>
        <param>
          <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>klen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look up the value associated with a key in a hash table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>klen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the key. Can be APR_HASH_KEY_STRING to use the string length. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns NULL if the key is not present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga640005a4ba64a5db039b0b43a8ad4898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__hash_1ga3b3d353989f6cea4535630634be147f7" kindref="member">apr_hash_index_t</ref> *</type>
        <definition>apr_hash_index_t* apr_hash_first</definition>
        <argsstring>(apr_pool_t *p, apr_hash_t *ht)</argsstring>
        <name>apr_hash_first</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start iterating over the entries in a hash table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the apr_hash_index_t iterator. If this pool is NULL, then an internal, non-thread-safe iterator is used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The iteration state </para></simplesect>
<simplesect kind="remark"><para>There is no restriction on adding or deleting hash entries during an iteration (although the results may be unpredictable unless all you do is delete the current entry) and multiple iterations can be in progress at the same time.</para></simplesect>
<simplesect kind="par"><title>Example:</title><para></para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>sum_values(apr_pool_t<sp/>*p,<sp/>apr_hash_t<sp/>*ht)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>apr_hash_index_t<sp/>*hi;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>*val;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(hi<sp/>=<sp/>apr_hash_first(p,<sp/>ht);<sp/>hi;<sp/>hi<sp/>=<sp/>apr_hash_next(hi))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_hash_this(hi,<sp/>NULL,<sp/>NULL,<sp/>&amp;val);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>*(int<sp/>*)val;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>sum;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga9d7b9198555659e9abac4e3028ccce00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__hash_1ga3b3d353989f6cea4535630634be147f7" kindref="member">apr_hash_index_t</ref> *</type>
        <definition>apr_hash_index_t* apr_hash_next</definition>
        <argsstring>(apr_hash_index_t *hi)</argsstring>
        <name>apr_hash_next</name>
        <param>
          <type><ref refid="group__apr__hash_1ga3b3d353989f6cea4535630634be147f7" kindref="member">apr_hash_index_t</ref> *</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Continue iterating over the entries in a hash table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para>The iteration state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the updated iteration state. NULL if there are no more entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1gad90e5b895397c2c535e32b3e44a75b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_hash_this</definition>
        <argsstring>(apr_hash_index_t *hi, const void **key, apr_ssize_t *klen, void **val)</argsstring>
        <name>apr_hash_this</name>
        <param>
          <type><ref refid="group__apr__hash_1ga3b3d353989f6cea4535630634be147f7" kindref="member">apr_hash_index_t</ref> *</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>apr_ssize_t *</type>
          <declname>klen</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current entry&apos;s details from the iteration state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para>The iteration state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Return pointer for the pointer to the key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>klen</parametername>
</parameternamelist>
<parameterdescription>
<para>Return pointer for the key length. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Return pointer for the associated value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The return pointers should point to a variable that will be set to the corresponding data, or they may be NULL if the data isn&apos;t interesting. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga835bd602131de7d40cbf8abd4e0f9f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* apr_hash_this_key</definition>
        <argsstring>(apr_hash_index_t *hi)</argsstring>
        <name>apr_hash_this_key</name>
        <param>
          <type><ref refid="group__apr__hash_1ga3b3d353989f6cea4535630634be147f7" kindref="member">apr_hash_index_t</ref> *</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current entry&apos;s key from the iteration state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para>The iteration state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1gae49a862095e9a3ca96603faa69493736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_ssize_t</type>
        <definition>apr_ssize_t apr_hash_this_key_len</definition>
        <argsstring>(apr_hash_index_t *hi)</argsstring>
        <name>apr_hash_this_key_len</name>
        <param>
          <type><ref refid="group__apr__hash_1ga3b3d353989f6cea4535630634be147f7" kindref="member">apr_hash_index_t</ref> *</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current entry&apos;s key length from the iteration state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para>The iteration state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1gaebf56aa7585e6fa18b6ff9563c71914b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_hash_this_val</definition>
        <argsstring>(apr_hash_index_t *hi)</argsstring>
        <name>apr_hash_this_val</name>
        <param>
          <type><ref refid="group__apr__hash_1ga3b3d353989f6cea4535630634be147f7" kindref="member">apr_hash_index_t</ref> *</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current entry&apos;s value from the iteration state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para>The iteration state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga4e44efa9ef043c1bb8a4abc5edcfda2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int apr_hash_count</definition>
        <argsstring>(apr_hash_t *ht)</argsstring>
        <name>apr_hash_count</name>
        <param>
          <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of key/value pairs in the hash table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of key/value pairs in the hash table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga06fb1b9ecff1a15ee41ff02db74264e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_hash_clear</definition>
        <argsstring>(apr_hash_t *ht)</argsstring>
        <name>apr_hash_clear</name>
        <param>
          <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear any key/value pairs in the hash table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga2f68646a64bad44efcbf3457af581fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
        <definition>apr_hash_t* apr_hash_overlay</definition>
        <argsstring>(apr_pool_t *p, const apr_hash_t *overlay, const apr_hash_t *base)</argsstring>
        <name>apr_hash_overlay</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>overlay</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge two hash tables into one new hash table. The values of the overlay hash override the values of the base if both have the same key. Both hash tables must use the same hash function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use for the new hash table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlay</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to add to the initial table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>The table that represents the initial values of the new table </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new hash table containing all of the data from the two passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1gaa954266cd16a55f7f384ab0a9c4ff9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
        <definition>apr_hash_t* apr_hash_merge</definition>
        <argsstring>(apr_pool_t *p, const apr_hash_t *h1, const apr_hash_t *h2, void *(*merger)(apr_pool_t *p, const void *key, apr_ssize_t klen, const void *h1_val, const void *h2_val, const void *data), const void *data)</argsstring>
        <name>apr_hash_merge</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>h2</declname>
        </param>
        <param>
          <type>void *(*)(<ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *p, const void *key, apr_ssize_t klen, const void *h1_val, const void *h2_val, const void *data)</type>
          <declname>merger</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge two hash tables into one new hash table. If the same key is present in both tables, call the supplied merge function to produce a merged value for the key in the new table. Both hash tables must use the same hash function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use for the new hash table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first of the tables to merge </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second of the tables to merge </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>merger</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function to merge values, or NULL to make values from h1 override values from h2 (same semantics as <ref refid="group__apr__hash_1ga2f68646a64bad44efcbf3457af581fdb" kindref="member">apr_hash_overlay()</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Client data to pass to the merger function </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new hash table containing all of the data from the two passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga3f3bac64e281d9e7eb9fed6101031394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_hash_do</definition>
        <argsstring>(apr_hash_do_callback_fn_t *comp, void *rec, const apr_hash_t *ht)</argsstring>
        <name>apr_hash_do</name>
        <param>
          <type><ref refid="group__apr__hash_1gafaf9b4435ab207b7708533cb8544face" kindref="member">apr_hash_do_callback_fn_t</ref> *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>rec</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>ht</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over a hash table running the provided function once for every element in the hash table. The <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>function will be invoked for every element in the hash table.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to run </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to pass as the first argument to the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table to iterate over </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FALSE if one of the comp() iterations returned zero; TRUE if all iterations returned non-zero </para></simplesect>
<simplesect kind="see"><para><ref refid="group__apr__hash_1gafaf9b4435ab207b7708533cb8544face" kindref="member">apr_hash_do_callback_fn_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__hash_1ga6c170fee4d679928d381cd61c559c105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_hash_pool_get</definition>
        <argsstring>(const apr_hash_t *thehash)</argsstring>
        <name>apr_hash_pool_get</name>
        <param>
          <type>const <ref refid="group__apr__hash_1ga72ec09b8bde6d874c36bd49df915fff6" kindref="member">apr_hash_t</ref> *</type>
          <declname>thehash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a pointer to the pool which the hash table was created in </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="274" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__hash_1ga3ba32541f2717b394000f87f38c7e12d" prot="public" static="no">
        <name>APR_HASH_KEY_STRING</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When passing a key to apr_hash_set or apr_hash_get, this value can be passed to indicate a string-valued key, and have apr_hash compute the length automatically.</para><para><simplesect kind="remark"><para>apr_hash will use strlen(key) for the length. The NUL terminator is not included in the hash value (why throw a constant in?). Since the hash table merely references the provided key (rather than copying it), <ref refid="group__apr__hash_1gad90e5b895397c2c535e32b3e44a75b3f" kindref="member">apr_hash_this()</ref> will return the NUL-term&apos;d key. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_hash.h" line="47" column="9" bodyfile="include/apr_hash.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
