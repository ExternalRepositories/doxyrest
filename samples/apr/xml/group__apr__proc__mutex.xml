<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__proc__mutex" kind="group">
    <compoundname>apr_proc_mutex</compoundname>
    <title>Process Locking Routines</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__apr__proc__mutex_1ga75dd95a48a1e855a87b509b522746ed4" prot="public" static="no">
        <name>apr_lockmech_e</name>
        <enumvalue id="group__apr__proc__mutex_1gga75dd95a48a1e855a87b509b522746ed4ad9dad69d83d1e112054ad21a7e4e16b3" prot="public">
          <name>APR_LOCK_FCNTL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fcntl() </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__proc__mutex_1gga75dd95a48a1e855a87b509b522746ed4a1d06f73a37dae31233299401c9594b41" prot="public">
          <name>APR_LOCK_FLOCK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>flock() </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__proc__mutex_1gga75dd95a48a1e855a87b509b522746ed4a642536695bd4c233761a15d48b1d6487" prot="public">
          <name>APR_LOCK_SYSVSEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>System V Semaphores </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__proc__mutex_1gga75dd95a48a1e855a87b509b522746ed4abd5e7cca2c9f6023b541131f3841057a" prot="public">
          <name>APR_LOCK_PROC_PTHREAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>POSIX pthread process-based locking </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__proc__mutex_1gga75dd95a48a1e855a87b509b522746ed4a6d65d9d745e13d8759bd8f1057f27041" prot="public">
          <name>APR_LOCK_POSIXSEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>POSIX semaphore process-based locking </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__proc__mutex_1gga75dd95a48a1e855a87b509b522746ed4ae91fb435c45216bcf84f506db99d0f19" prot="public">
          <name>APR_LOCK_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use the default process lock </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerated potential types for APR process locking methods <simplesect kind="warning"><para>Check APR_HAS_foo_SERIALIZE defines to see if the platform supports APR_LOCK_foo. Only APR_LOCK_DEFAULT is portable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="44" column="1" bodyfile="include/apr_proc_mutex.h" bodystart="44" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" prot="public" static="no">
        <type>struct <ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref></type>
        <definition>typedef struct apr_proc_mutex_t apr_proc_mutex_t</definition>
        <argsstring></argsstring>
        <name>apr_proc_mutex_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque structure representing a process mutex. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="189" column="1" bodyfile="include/apr_proc_mutex.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__proc__mutex_1ga57a0ad8cc6209dcbc8cf7c4bdf4a2c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_mutex_create</definition>
        <argsstring>(apr_proc_mutex_t **mutex, const char *fname, apr_lockmech_e mech, apr_pool_t *pool)</argsstring>
        <name>apr_proc_mutex_create</name>
        <param>
          <type><ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref> **</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="group__apr__proc__mutex_1ga75dd95a48a1e855a87b509b522746ed4" kindref="member">apr_lockmech_e</ref></type>
          <declname>mech</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create and initialize a mutex that can be used to synchronize processes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory address where the newly created mutex will be stored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>A file name to use if the lock mechanism requires one. This argument should always be provided. The lock code itself will determine if it should be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mech</parametername>
</parameternamelist>
<parameterdescription>
<para>The mechanism to use for the interprocess lock, if any; one of <preformatted>
           APR_LOCK_FCNTL
           APR_LOCK_FLOCK
           APR_LOCK_SYSVSEM
           APR_LOCK_POSIXSEM
           APR_LOCK_PROC_PTHREAD
           APR_LOCK_DEFAULT     pick the default mechanism for the platform
</preformatted> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool from which to allocate the mutex. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__apr__proc__mutex_1ga75dd95a48a1e855a87b509b522746ed4" kindref="member">apr_lockmech_e</ref> </para></simplesect>
<simplesect kind="warning"><para>Check APR_HAS_foo_SERIALIZE defines to see if the platform supports APR_LOCK_foo. Only APR_LOCK_DEFAULT is portable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1ga52c440b92eda07dc9c851a4e98f2ac83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_mutex_child_init</definition>
        <argsstring>(apr_proc_mutex_t **mutex, const char *fname, apr_pool_t *pool)</argsstring>
        <name>apr_proc_mutex_child_init</name>
        <param>
          <type><ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref> **</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Re-open a mutex in a child process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>The newly re-opened mutex structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>A file name to use if the mutex mechanism requires one. This argument should always be provided. The mutex code itself will determine if it should be used. This filename should be the same one that was passed to <ref refid="group__apr__proc__mutex_1ga57a0ad8cc6209dcbc8cf7c4bdf4a2c22" kindref="member">apr_proc_mutex_create()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to operate on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function must be called to maintain portability, even if the underlying lock mechanism does not require it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1ga9af7c9eabf4f99a5a33b41dc322af06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_mutex_lock</definition>
        <argsstring>(apr_proc_mutex_t *mutex)</argsstring>
        <name>apr_proc_mutex_lock</name>
        <param>
          <type><ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Acquire the lock for the given mutex. If the mutex is already locked, the current thread will be put to sleep until the lock becomes available. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex on which to acquire the lock. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1ga7c41927ce5014374eb4fc66d410f9513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_mutex_trylock</definition>
        <argsstring>(apr_proc_mutex_t *mutex)</argsstring>
        <name>apr_proc_mutex_trylock</name>
        <param>
          <type><ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempt to acquire the lock for the given mutex. If the mutex has already been acquired, the call returns immediately with APR_EBUSY. Note: it is important that the <ref refid="group___a_p_r___s_t_a_t_u_s___i_s_1gabb92ad7b6ef304132de70e9e5cbaa896" kindref="member">APR_STATUS_IS_EBUSY(s)</ref> macro be used to determine if the return value was APR_EBUSY, for portability reasons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex on which to attempt the lock acquiring. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1ga4ecd9a73fbb0e6e6853e5d0769bbb183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_mutex_unlock</definition>
        <argsstring>(apr_proc_mutex_t *mutex)</argsstring>
        <name>apr_proc_mutex_unlock</name>
        <param>
          <type><ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release the lock for the given mutex. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex from which to release the lock. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1gaa692ccd799305e0166fb81f258870830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_mutex_destroy</definition>
        <argsstring>(apr_proc_mutex_t *mutex)</argsstring>
        <name>apr_proc_mutex_destroy</name>
        <param>
          <type><ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the mutex and free the memory associated with the lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex to destroy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1ga71ec4d283f58e893322f44116e6f8ea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_mutex_cleanup</definition>
        <argsstring>(void *mutex)</argsstring>
        <name>apr_proc_mutex_cleanup</name>
        <param>
          <type>void *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the mutex and free the memory associated with the lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex to destroy. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function is generally used to kill a cleanup on an already created mutex </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1gad4dcc5ec2a5a6ede7be178e13f56377a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_proc_mutex_lockfile</definition>
        <argsstring>(apr_proc_mutex_t *mutex)</argsstring>
        <name>apr_proc_mutex_lockfile</name>
        <param>
          <type><ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the name of the lockfile for the mutex, or NULL if the mutex doesn&apos;t use a lock file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1ga3e5cf6b6fd0736502efd91312d50881c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_proc_mutex_name</definition>
        <argsstring>(apr_proc_mutex_t *mutex)</argsstring>
        <name>apr_proc_mutex_name</name>
        <param>
          <type><ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display the name of the mutex, as it relates to the actual method used. This matches the valid options for Apache&apos;s AcceptMutex directive <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the mutex </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1gaf4425adc130f83784c552b6bc1563036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_proc_mutex_defname</definition>
        <argsstring>(void)</argsstring>
        <name>apr_proc_mutex_defname</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display the name of the default mutex: APR_LOCK_DEFAULT </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__proc__mutex_1ga9d7eda31ec4ad2183ddfcbff2f07daf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_proc_mutex_pool_get</definition>
        <argsstring>(const apr_proc_mutex_t *theproc_mutex)</argsstring>
        <name>apr_proc_mutex_pool_get</name>
        <param>
          <type>const <ref refid="group__apr__proc__mutex_1ga0fae3a1ab686cd1f252c6062e4c97bd2" kindref="member">apr_proc_mutex_t</ref> *</type>
          <declname>theproc_mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the pool used by this proc_mutex. <simplesect kind="return"><para>apr_pool_t the pool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_proc_mutex.h" line="158" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
