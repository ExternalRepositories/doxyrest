<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__user" kind="group">
    <compoundname>apr_user</compoundname>
    <title>User and Group ID Services</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__user_1gad1aa508f584bc230acf4f68ba4fc4de7" prot="public" static="no">
        <type>uid_t</type>
        <definition>typedef uid_t apr_uid_t</definition>
        <argsstring></argsstring>
        <name>apr_uid_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Structure for determining user ownership. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="45" column="1" bodyfile="include/apr_user.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__user_1ga22e9e224e984f837f3e276833e2f3a55" prot="public" static="no">
        <type>gid_t</type>
        <definition>typedef gid_t apr_gid_t</definition>
        <argsstring></argsstring>
        <name>apr_gid_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Structure for determining group ownership. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="54" column="1" bodyfile="include/apr_user.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__user_1ga6583c5814fcf3924a2e391dac126f8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_uid_current</definition>
        <argsstring>(apr_uid_t *userid, apr_gid_t *groupid, apr_pool_t *p)</argsstring>
        <name>apr_uid_current</name>
        <param>
          <type><ref refid="group__apr__user_1gad1aa508f584bc230acf4f68ba4fc4de7" kindref="member">apr_uid_t</ref> *</type>
          <declname>userid</declname>
        </param>
        <param>
          <type><ref refid="group__apr__user_1ga22e9e224e984f837f3e276833e2f3a55" kindref="member">apr_gid_t</ref> *</type>
          <declname>groupid</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the userid (and groupid) of the calling process <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>userid</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the user id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupid</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the user&apos;s group id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate working space </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is available only if APR_HAS_USER is defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__user_1gad56be7519e060a3c6698657f51ab6bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_uid_name_get</definition>
        <argsstring>(char **username, apr_uid_t userid, apr_pool_t *p)</argsstring>
        <name>apr_uid_name_get</name>
        <param>
          <type>char **</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="group__apr__user_1gad1aa508f584bc230acf4f68ba4fc4de7" kindref="member">apr_uid_t</ref></type>
          <declname>userid</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the user name for a specified userid <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to new string containing user name (on output) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userid</parametername>
</parameternamelist>
<parameterdescription>
<para>The userid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is available only if APR_HAS_USER is defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__user_1ga4b82187f32db9350f2e02165bbce965b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_uid_get</definition>
        <argsstring>(apr_uid_t *userid, apr_gid_t *groupid, const char *username, apr_pool_t *p)</argsstring>
        <name>apr_uid_get</name>
        <param>
          <type><ref refid="group__apr__user_1gad1aa508f584bc230acf4f68ba4fc4de7" kindref="member">apr_uid_t</ref> *</type>
          <declname>userid</declname>
        </param>
        <param>
          <type><ref refid="group__apr__user_1ga22e9e224e984f837f3e276833e2f3a55" kindref="member">apr_gid_t</ref> *</type>
          <declname>groupid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the userid (and groupid) for the specified username <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>userid</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the user id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupid</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the user&apos;s group id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username to look up </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate working space </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is available only if APR_HAS_USER is defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__user_1ga0ad8087cf1c6257a286cf5215da8107e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_uid_homepath_get</definition>
        <argsstring>(char **dirname, const char *username, apr_pool_t *p)</argsstring>
        <name>apr_uid_homepath_get</name>
        <param>
          <type>char **</type>
          <declname>dirname</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the home directory for the named user <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirname</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to new string containing directory name (on output) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>The named user </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is available only if APR_HAS_USER is defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__user_1gadda2c777f2e8d61c02be34305720e316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_gid_name_get</definition>
        <argsstring>(char **groupname, apr_gid_t groupid, apr_pool_t *p)</argsstring>
        <name>apr_gid_name_get</name>
        <param>
          <type>char **</type>
          <declname>groupname</declname>
        </param>
        <param>
          <type><ref refid="group__apr__user_1ga22e9e224e984f837f3e276833e2f3a55" kindref="member">apr_gid_t</ref></type>
          <declname>groupid</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the group name for a specified groupid <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupname</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to new string containing group name (on output) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupid</parametername>
</parameternamelist>
<parameterdescription>
<para>The groupid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is available only if APR_HAS_USER is defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__user_1gac65178a647d34387781dc8d7ade3cefc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_gid_get</definition>
        <argsstring>(apr_gid_t *groupid, const char *groupname, apr_pool_t *p)</argsstring>
        <name>apr_gid_get</name>
        <param>
          <type><ref refid="group__apr__user_1ga22e9e224e984f837f3e276833e2f3a55" kindref="member">apr_gid_t</ref> *</type>
          <declname>groupid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>groupname</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the groupid for a specified group name <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupid</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the group id (on output) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupname</parametername>
</parameternamelist>
<parameterdescription>
<para>The group name to look up </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is available only if APR_HAS_USER is defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="133" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__user_1gafc0e18b67f8e3471848893cc4a052809" prot="public" static="no">
        <name>apr_uid_compare</name>
        <param><defname>left</defname></param>
        <param><defname>right</defname></param>
        <initializer>(((left) == (right)) ? <ref refid="group__apr__errno_1ga9ee311b7bf1c691dc521d721339ee2a6" kindref="member">APR_SUCCESS</ref> : <ref refid="group___a_p_r___error_1ga31e65a44daba96aa6d943529e94498e7" kindref="member">APR_EMISMATCH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two user identifiers for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>One uid to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another uid to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS if the apr_uid_t structures identify the same user, APR_EMISMATCH if not, APR_BADARG if an apr_uid_t is invalid. </para></simplesect>
<simplesect kind="remark"><para>This function is available only if APR_HAS_USER is defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="113" column="10" bodyfile="include/apr_user.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__user_1gaa87aee2f533bed9dac33613fcf398713" prot="public" static="no">
        <name>apr_gid_compare</name>
        <param><defname>left</defname></param>
        <param><defname>right</defname></param>
        <initializer>(((left) == (right)) ? <ref refid="group__apr__errno_1ga9ee311b7bf1c691dc521d721339ee2a6" kindref="member">APR_SUCCESS</ref> : <ref refid="group___a_p_r___error_1ga31e65a44daba96aa6d943529e94498e7" kindref="member">APR_EMISMATCH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two group identifiers for equality. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>One gid to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another gid to test </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS if the apr_gid_t structures identify the same group, APR_EMISMATCH if not, APR_BADARG if an apr_gid_t is invalid. </para></simplesect>
<simplesect kind="remark"><para>This function is available only if APR_HAS_USER is defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_user.h" line="147" column="10" bodyfile="include/apr_user.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
