<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__thread__proc" kind="group">
    <compoundname>apr_thread_proc</compoundname>
    <title>Threads and Process Functions</title>
    <innerclass refid="structapr__proc__t" prot="public">apr_proc_t</innerclass>
    <innergroup refid="group___a_p_r___o_c">Other Child Flags</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__apr__thread__proc_1gadcb981d7748c580eb69ac11dbf709060" prot="public" static="no">
        <name>apr_cmdtype_e</name>
        <enumvalue id="group__apr__thread__proc_1ggadcb981d7748c580eb69ac11dbf709060a02f5d83f79e2c12bfca5a86d7f14caa6" prot="public">
          <name>APR_SHELLCMD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>use the shell to invoke the program </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1ggadcb981d7748c580eb69ac11dbf709060ac128c1239a524cf21300b8ed6248ac99" prot="public">
          <name>APR_PROGRAM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>invoke the program directly, no copied env </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1ggadcb981d7748c580eb69ac11dbf709060a6a3f9694aced0e449f6bb4b3e437233a" prot="public">
          <name>APR_PROGRAM_ENV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>invoke the program, replicating our environment </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1ggadcb981d7748c580eb69ac11dbf709060aa424b51bdc16e4d18bb757a32c6a346a" prot="public">
          <name>APR_PROGRAM_PATH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>find program on PATH, use our environment </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1ggadcb981d7748c580eb69ac11dbf709060afcefc45317b67fad6dc5459772ce9409" prot="public">
          <name>APR_SHELLCMD_ENV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>use the shell to invoke the program, replicating our environment </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="45" column="1" bodyfile="include/apr_thread_proc.h" bodystart="45" bodyend="53"/>
      </memberdef>
      <memberdef kind="enum" id="group__apr__thread__proc_1ga5e52d786644f3b66d6180571e68c7260" prot="public" static="no">
        <name>apr_wait_how_e</name>
        <enumvalue id="group__apr__thread__proc_1gga5e52d786644f3b66d6180571e68c7260a057885ccf4b8b707e0d115c691037de4" prot="public">
          <name>APR_WAIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>wait for the specified process to finish </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1gga5e52d786644f3b66d6180571e68c7260a0163031f6b72b0c4add9108052a672d5" prot="public">
          <name>APR_NOWAIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>do not wait <ndash/> just see if it has finished </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="55" column="1" bodyfile="include/apr_thread_proc.h" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="enum" id="group__apr__thread__proc_1gac097b4fa41e67024711c5983446d0951" prot="public" static="no">
        <name>apr_exit_why_e</name>
        <enumvalue id="group__apr__thread__proc_1ggac097b4fa41e67024711c5983446d0951a977f140c82333af62aa4bed8c99a3ee2" prot="public">
          <name>APR_PROC_EXIT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>process exited normally </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1ggac097b4fa41e67024711c5983446d0951a7e3421d18abe458ca27822d19424225b" prot="public">
          <name>APR_PROC_SIGNAL</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>process exited due to a signal </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1ggac097b4fa41e67024711c5983446d0951a6b667be4983cb59e9bed37ee05a0dcce" prot="public">
          <name>APR_PROC_SIGNAL_CORE</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>process exited and dumped a core file </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="65" column="1" bodyfile="include/apr_thread_proc.h" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="enum" id="group__apr__thread__proc_1ga3eaec78633742e7e0cb9480a21477aff" prot="public" static="no">
        <name>apr_kill_conditions_e</name>
        <enumvalue id="group__apr__thread__proc_1gga3eaec78633742e7e0cb9480a21477affa33580ab0809e9498855fbdde8a1714ef" prot="public">
          <name>APR_KILL_NEVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>process is never killed (i.e., never sent any signals), but it will be reaped if it exits before the pool is cleaned up </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1gga3eaec78633742e7e0cb9480a21477affaf45d0f72811399b394d1311384e2dfe4" prot="public">
          <name>APR_KILL_ALWAYS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>process is sent SIGKILL on apr_pool_t cleanup </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1gga3eaec78633742e7e0cb9480a21477affa16a47aa786b1c1f31ef02353bcae9a1a" prot="public">
          <name>APR_KILL_AFTER_TIMEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SIGTERM, wait 3 seconds, SIGKILL </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1gga3eaec78633742e7e0cb9480a21477affa6ada2605856ac94826edbe824e64e503" prot="public">
          <name>APR_JUST_WAIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>wait forever for the process to complete </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__apr__thread__proc_1gga3eaec78633742e7e0cb9480a21477affa24d6f47785093be4cea2a922eeaed098" prot="public">
          <name>APR_KILL_ONLY_ONCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>send SIGTERM and then wait </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="209" column="1" bodyfile="include/apr_thread_proc.h" bodystart="209" bodyend="217"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__thread__proc_1gada60ec0f833048291d98e66f21f4c4c4" prot="public" static="no">
        <type>struct <ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref></type>
        <definition>typedef struct apr_proc_t  apr_proc_t</definition>
        <argsstring></argsstring>
        <name>apr_proc_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The APR process type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__thread__proc_1ga1feae4cf7ed6f156a0db10172e228e2d" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() apr_child_errfn_t(apr_pool_t *proc, apr_status_t err, const char *description)</definition>
        <argsstring>(apr_pool_t *proc, apr_status_t err, const char *description)</argsstring>
        <name>apr_child_errfn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The prototype for APR child errfn functions. (See the description of <ref refid="group__apr__thread__proc_1gaa39deba0837e0772754ad41589b733cf" kindref="member">apr_procattr_child_errfn_set()</ref> for more information.) It is passed the following parameters: <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool associated with the <ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref>. If your child error function needs user data, associate it with this pool. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>APR error code describing the error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Text description of type of processing which failed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="183" column="1" bodyfile="include/apr_thread_proc.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__thread__proc_1ga646c71351e723d84f8cc8c8d1d5937be" prot="public" static="no">
        <type>struct <ref refid="group__apr__thread__proc_1ga646c71351e723d84f8cc8c8d1d5937be" kindref="member">apr_thread_t</ref></type>
        <definition>typedef struct apr_thread_t apr_thread_t</definition>
        <argsstring></argsstring>
        <name>apr_thread_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque Thread structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="183" column="1" bodyfile="include/apr_thread_proc.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__thread__proc_1ga35de571e9944871c10b38d8feef885ac" prot="public" static="no">
        <type>struct <ref refid="group__apr__thread__proc_1ga35de571e9944871c10b38d8feef885ac" kindref="member">apr_threadattr_t</ref></type>
        <definition>typedef struct apr_threadattr_t apr_threadattr_t</definition>
        <argsstring></argsstring>
        <name>apr_threadattr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque Thread attributes structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="183" column="1" bodyfile="include/apr_thread_proc.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" prot="public" static="no">
        <type>struct <ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref></type>
        <definition>typedef struct apr_procattr_t apr_procattr_t</definition>
        <argsstring></argsstring>
        <name>apr_procattr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque Process attributes structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="183" column="1" bodyfile="include/apr_thread_proc.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__thread__proc_1ga91841bcf20d0579e8e6acc6d3c220ac1" prot="public" static="no">
        <type>struct <ref refid="group__apr__thread__proc_1ga91841bcf20d0579e8e6acc6d3c220ac1" kindref="member">apr_thread_once_t</ref></type>
        <definition>typedef struct apr_thread_once_t apr_thread_once_t</definition>
        <argsstring></argsstring>
        <name>apr_thread_once_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque control variable for one-time atomic variables. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="183" column="1" bodyfile="include/apr_thread_proc.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__thread__proc_1ga337c9c1bd2d47740022071a5c41f2edb" prot="public" static="no">
        <type>struct <ref refid="group__apr__thread__proc_1ga337c9c1bd2d47740022071a5c41f2edb" kindref="member">apr_threadkey_t</ref></type>
        <definition>typedef struct apr_threadkey_t apr_threadkey_t</definition>
        <argsstring></argsstring>
        <name>apr_threadkey_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque thread private address space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="183" column="1" bodyfile="include/apr_thread_proc.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__thread__proc_1gafc52ee8b19a7b222278d31ebb3f11a71" prot="public" static="no">
        <type>struct <ref refid="group__apr__thread__proc_1gafc52ee8b19a7b222278d31ebb3f11a71" kindref="member">apr_other_child_rec_t</ref></type>
        <definition>typedef struct apr_other_child_rec_t apr_other_child_rec_t</definition>
        <argsstring></argsstring>
        <name>apr_other_child_rec_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque record of child process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="183" column="1" bodyfile="include/apr_thread_proc.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__thread__proc_1gaa1f88d2a6fe971ac200e466cae5f63e0" prot="public" static="no">
        <type>void *(<ref refid="group__apr__platform_1gade8f829f9bd98fd4386894acf72edd7c" kindref="member">APR_THREAD_FUNC</ref> *</type>
        <definition>typedef void*(APR_THREAD_FUNC * apr_thread_start_t) (apr_thread_t *, void *)</definition>
        <argsstring>)(apr_thread_t *, void *)</argsstring>
        <name>apr_thread_start_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The prototype for any APR thread worker functions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="207" column="1" bodyfile="include/apr_thread_proc.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__thread__proc_1ga66c2f55e5dff9ac37bd32e9febd38da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadattr_create</definition>
        <argsstring>(apr_threadattr_t **new_attr, apr_pool_t *cont)</argsstring>
        <name>apr_threadattr_create</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga35de571e9944871c10b38d8feef885ac" kindref="member">apr_threadattr_t</ref> **</type>
          <declname>new_attr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create and initialize a new threadattr variable <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The newly created threadattr. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cont</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga85d44b3b021f28116122d5e40e024648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadattr_detach_set</definition>
        <argsstring>(apr_threadattr_t *attr, apr_int32_t on)</argsstring>
        <name>apr_threadattr_detach_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga35de571e9944871c10b38d8feef885ac" kindref="member">apr_threadattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>on</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set if newly created threads should be created in detached state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The threadattr to affect </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-zero if detached threads should be created. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gae5b7cdb3de542d1b7b52fe5d9d8cb00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadattr_detach_get</definition>
        <argsstring>(apr_threadattr_t *attr)</argsstring>
        <name>apr_threadattr_detach_get</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga35de571e9944871c10b38d8feef885ac" kindref="member">apr_threadattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the detach state for this threadattr. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The threadattr to reference </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_DETACH if threads are to be detached, or APR_NOTDETACH if threads are to be joinable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga7849e0d637338a18cb44f66f11f28ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadattr_stacksize_set</definition>
        <argsstring>(apr_threadattr_t *attr, apr_size_t stacksize)</argsstring>
        <name>apr_threadattr_stacksize_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga35de571e9944871c10b38d8feef885ac" kindref="member">apr_threadattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>stacksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the stack size of newly created threads. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The threadattr to affect </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stacksize</parametername>
</parameternamelist>
<parameterdescription>
<para>The stack size in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga2e732f2913291180c0c484f57d727140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadattr_guardsize_set</definition>
        <argsstring>(apr_threadattr_t *attr, apr_size_t guardsize)</argsstring>
        <name>apr_threadattr_guardsize_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga35de571e9944871c10b38d8feef885ac" kindref="member">apr_threadattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>guardsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the stack guard area size of newly created threads. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The threadattr to affect </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guardsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The stack guard area size in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Thread library implementations commonly use a &quot;guard area&quot; after each thread&apos;s stack which is not readable or writable such that stack overflows cause a segfault; this consumes e.g. 4K of memory and increases memory management overhead. Setting the guard area size to zero hence trades off reliable behaviour on stack overflow for performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gaeba6593f43f1de94c2b4495dd72b0e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_create</definition>
        <argsstring>(apr_thread_t **new_thread, apr_threadattr_t *attr, apr_thread_start_t func, void *data, apr_pool_t *cont)</argsstring>
        <name>apr_thread_create</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga646c71351e723d84f8cc8c8d1d5937be" kindref="member">apr_thread_t</ref> **</type>
          <declname>new_thread</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga35de571e9944871c10b38d8feef885ac" kindref="member">apr_threadattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1gaa1f88d2a6fe971ac200e466cae5f63e0" kindref="member">apr_thread_start_t</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new thread of execution <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_thread</parametername>
</parameternamelist>
<parameterdescription>
<para>The newly created thread handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The threadattr to use to determine how to create the thread </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to start the new thread in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Any data to be passed to the starting function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cont</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga0e35365e530578bca1b4bea522ac8c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_exit</definition>
        <argsstring>(apr_thread_t *thd, apr_status_t retval)</argsstring>
        <name>apr_thread_exit</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga646c71351e723d84f8cc8c8d1d5937be" kindref="member">apr_thread_t</ref> *</type>
          <declname>thd</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
          <declname>retval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stop the current thread <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thd</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread to stop </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retval</parametername>
</parameternamelist>
<parameterdescription>
<para>The return value to pass back to any thread that cares </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga1b950f36fa5bcd5a64887073f46f6d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_join</definition>
        <argsstring>(apr_status_t *retval, apr_thread_t *thd)</argsstring>
        <name>apr_thread_join</name>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref> *</type>
          <declname>retval</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga646c71351e723d84f8cc8c8d1d5937be" kindref="member">apr_thread_t</ref> *</type>
          <declname>thd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>block until the desired thread stops executing. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>retval</parametername>
</parameternamelist>
<parameterdescription>
<para>The return value from the dead thread. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thd</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread to join </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gacd69fb862c069cb6f297f65d64b5c102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_thread_yield</definition>
        <argsstring>(void)</argsstring>
        <name>apr_thread_yield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>force the current thread to yield the processor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga63f3bf667151053e45d5a2029daeda0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_once_init</definition>
        <argsstring>(apr_thread_once_t **control, apr_pool_t *p)</argsstring>
        <name>apr_thread_once_init</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga91841bcf20d0579e8e6acc6d3c220ac1" kindref="member">apr_thread_once_t</ref> **</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the control variable for apr_thread_once. If this isn&apos;t called, apr_initialize won&apos;t work. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>control</parametername>
</parameternamelist>
<parameterdescription>
<para>The control variable to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate data from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga8f3645ee52ff07566c92181b4ce732d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_once</definition>
        <argsstring>(apr_thread_once_t *control, void(*func)(void))</argsstring>
        <name>apr_thread_once</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga91841bcf20d0579e8e6acc6d3c220ac1" kindref="member">apr_thread_once_t</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type>void(*)(void)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run the specified function one time, regardless of how many threads call it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>control</parametername>
</parameternamelist>
<parameterdescription>
<para>The control variable. The same variable should be passed in each time the function is tried to be called. This is how the underlying functions determine if the function has ever been called before. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gadbd186912d5f6f2a19a175e1e02ba10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_detach</definition>
        <argsstring>(apr_thread_t *thd)</argsstring>
        <name>apr_thread_detach</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga646c71351e723d84f8cc8c8d1d5937be" kindref="member">apr_thread_t</ref> *</type>
          <declname>thd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>detach a thread <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thd</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread to detach </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gad799c8140ed068a12f1dbe134423eae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_data_get</definition>
        <argsstring>(void **data, const char *key, apr_thread_t *thread)</argsstring>
        <name>apr_thread_data_get</name>
        <param>
          <type>void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga646c71351e723d84f8cc8c8d1d5937be" kindref="member">apr_thread_t</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return user data associated with the current thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data associated with the thread. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to associate with the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>The currently open thread. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gaa90d79c9935692db4f27a6573f437221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_data_set</definition>
        <argsstring>(void *data, const char *key, apr_status_t(*cleanup)(void *), apr_thread_t *thread)</argsstring>
        <name>apr_thread_data_set</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga646c71351e723d84f8cc8c8d1d5937be" kindref="member">apr_thread_t</ref> *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set user data associated with the current thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data to associate with the thread. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use for associating the data with the thread </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The cleanup routine to use when the thread is destroyed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>The currently open thread. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gacb9553b2b3165388bfc0a54b1148804a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadkey_private_create</definition>
        <argsstring>(apr_threadkey_t **key, void(*dest)(void *), apr_pool_t *cont)</argsstring>
        <name>apr_threadkey_private_create</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga337c9c1bd2d47740022071a5c41f2edb" kindref="member">apr_threadkey_t</ref> **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create and initialize a new thread private address space <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread private handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The destructor to use when freeing the private memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cont</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga371c87c122cc3df0b7ad0031f6e11167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadkey_private_get</definition>
        <argsstring>(void **new_mem, apr_threadkey_t *key)</argsstring>
        <name>apr_threadkey_private_get</name>
        <param>
          <type>void **</type>
          <declname>new_mem</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga337c9c1bd2d47740022071a5c41f2edb" kindref="member">apr_threadkey_t</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a pointer to the thread private memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_mem</parametername>
</parameternamelist>
<parameterdescription>
<para>The data stored in private memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle for the desired thread private memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga63501a064ca7f1818aa056b40146aa0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadkey_private_set</definition>
        <argsstring>(void *priv, apr_threadkey_t *key)</argsstring>
        <name>apr_threadkey_private_set</name>
        <param>
          <type>void *</type>
          <declname>priv</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga337c9c1bd2d47740022071a5c41f2edb" kindref="member">apr_threadkey_t</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the data to be stored in thread private memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priv</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to be stored in private memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle for the desired thread private memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga20b9b79892a6532784fff023a4ebd8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadkey_private_delete</definition>
        <argsstring>(apr_threadkey_t *key)</argsstring>
        <name>apr_threadkey_private_delete</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga337c9c1bd2d47740022071a5c41f2edb" kindref="member">apr_threadkey_t</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free the thread private memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle for the desired thread private memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gae203664972dfc5c555620ae1788f5b48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadkey_data_get</definition>
        <argsstring>(void **data, const char *key, apr_threadkey_t *threadkey)</argsstring>
        <name>apr_threadkey_data_get</name>
        <param>
          <type>void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga337c9c1bd2d47740022071a5c41f2edb" kindref="member">apr_threadkey_t</ref> *</type>
          <declname>threadkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the pool associated with the current threadkey. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data associated with the threadkey. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key associated with the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threadkey</parametername>
</parameternamelist>
<parameterdescription>
<para>The currently open threadkey. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga1059158f34dded87f21ba82af1211951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_threadkey_data_set</definition>
        <argsstring>(void *data, const char *key, apr_status_t(*cleanup)(void *), apr_threadkey_t *threadkey)</argsstring>
        <name>apr_threadkey_data_set</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga337c9c1bd2d47740022071a5c41f2edb" kindref="member">apr_threadkey_t</ref> *</type>
          <declname>threadkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the pool associated with the current threadkey. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to associate with the data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The cleanup routine to use when the file is destroyed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threadkey</parametername>
</parameternamelist>
<parameterdescription>
<para>The currently open threadkey. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga90f8ef684e601c110daad9b63da53cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_create</definition>
        <argsstring>(apr_procattr_t **new_attr, apr_pool_t *cont)</argsstring>
        <name>apr_procattr_create</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> **</type>
          <declname>new_attr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create and initialize a new procattr variable <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The newly created procattr. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cont</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_io_set</definition>
        <argsstring>(apr_procattr_t *attr, apr_int32_t in, apr_int32_t out, apr_int32_t err)</argsstring>
        <name>apr_procattr_io_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>in</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>out</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if any of stdin, stdout, or stderr should be linked to pipes when starting a child process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Should stdin be a pipe back to the parent? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Should stdout be a pipe back to the parent? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Should stderr be a pipe back to the parent? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If APR_NO_PIPE, there will be no special channel, the child inherits the parent&apos;s corresponding stdio stream. If APR_NO_FILE is specified, that corresponding stream is closed in the child (and will be INVALID_HANDLE_VALUE when inspected on Win32). This can have ugly side effects, as the next file opened in the child on Unix will fall into the stdio stream fd slot! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga24f40119b1aa07dd45a681a44915cb1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_child_in_set</definition>
        <argsstring>(struct apr_procattr_t *attr, apr_file_t *child_in, apr_file_t *parent_in)</argsstring>
        <name>apr_procattr_child_in_set</name>
        <param>
          <type>struct <ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>child_in</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>parent_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the child_in and/or parent_in values to existing apr_file_t values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_in</parametername>
</parameternamelist>
<parameterdescription>
<para>apr_file_t value to use as child_in. Must be a valid file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent_in</parametername>
</parameternamelist>
<parameterdescription>
<para>apr_file_t value to use as parent_in. Must be a valid file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This is NOT a required initializer function. This is useful if you have already opened a pipe (or multiple files) that you wish to use, perhaps persistently across multiple process invocations - such as a log file. You can save some extra function calls by not creating your own pipe since this creates one in the process space for you. </para></simplesect>
<xrefsect id="bug_1_bug000006"><xreftitle>Bug</xreftitle><xrefdescription><para>Note that calling this function with two NULL files on some platforms creates an APR_FULL_BLOCK pipe, but this behavior is neither portable nor is it supported.</para></xrefdescription></xrefsect><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> instead for simple pipes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gabb97e9a49021ab4452ae3f1a281c977f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_child_out_set</definition>
        <argsstring>(struct apr_procattr_t *attr, apr_file_t *child_out, apr_file_t *parent_out)</argsstring>
        <name>apr_procattr_child_out_set</name>
        <param>
          <type>struct <ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>child_out</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>parent_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the child_out and parent_out values to existing apr_file_t values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_out</parametername>
</parameternamelist>
<parameterdescription>
<para>apr_file_t value to use as child_out. Must be a valid file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent_out</parametername>
</parameternamelist>
<parameterdescription>
<para>apr_file_t value to use as parent_out. Must be a valid file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This is NOT a required initializer function. This is useful if you have already opened a pipe (or multiple files) that you wish to use, perhaps persistently across multiple process invocations - such as a log file. </para></simplesect>
<xrefsect id="bug_1_bug000007"><xreftitle>Bug</xreftitle><xrefdescription><para>Note that calling this function with two NULL files on some platforms creates an APR_FULL_BLOCK pipe, but this behavior is neither portable nor is it supported.</para></xrefdescription></xrefsect><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> instead for simple pipes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga6fad364c6c820e37c0915435cfb3921f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_child_err_set</definition>
        <argsstring>(struct apr_procattr_t *attr, apr_file_t *child_err, apr_file_t *parent_err)</argsstring>
        <name>apr_procattr_child_err_set</name>
        <param>
          <type>struct <ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>child_err</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>parent_err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the child_err and parent_err values to existing apr_file_t values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_err</parametername>
</parameternamelist>
<parameterdescription>
<para>apr_file_t value to use as child_err. Must be a valid file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent_err</parametername>
</parameternamelist>
<parameterdescription>
<para>apr_file_t value to use as parent_err. Must be a valid file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This is NOT a required initializer function. This is useful if you have already opened a pipe (or multiple files) that you wish to use, perhaps persistently across multiple process invocations - such as a log file. </para></simplesect>
<xrefsect id="bug_1_bug000008"><xreftitle>Bug</xreftitle><xrefdescription><para>Note that calling this function with two NULL files on some platforms creates an APR_FULL_BLOCK pipe, but this behavior is neither portable nor is it supported.</para></xrefdescription></xrefsect><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> instead for simple pipes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga97766f50b0ae083a2f8a28e698a59baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_dir_set</definition>
        <argsstring>(apr_procattr_t *attr, const char *dir)</argsstring>
        <name>apr_procattr_dir_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set which directory the child process should start executing in. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Which dir to start in. By default, this is the same dir as the parent currently resides in, when the createprocess call is made. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga1426acc5bdd96385769e7b42bfa6ebbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_cmdtype_set</definition>
        <argsstring>(apr_procattr_t *attr, apr_cmdtype_e cmd)</argsstring>
        <name>apr_procattr_cmdtype_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1gadcb981d7748c580eb69ac11dbf709060" kindref="member">apr_cmdtype_e</ref></type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set what type of command the child process will call. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of command. One of: <preformatted>
           APR_SHELLCMD     <ndash/>  Anything that the shell can handle
           APR_PROGRAM      <ndash/>  Executable program   (default) 
           APR_PROGRAM_ENV  <ndash/>  Executable program, copy environment
           APR_PROGRAM_PATH <ndash/>  Executable program on PATH, copy env
</preformatted> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga3ccca55041f648f00f0605673d4e0fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_detach_set</definition>
        <argsstring>(apr_procattr_t *attr, apr_int32_t detach)</argsstring>
        <name>apr_procattr_detach_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>detach</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if the child should start in detached state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detach</parametername>
</parameternamelist>
<parameterdescription>
<para>Should the child start in detached state? Default is no. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga4de85cfd54d27476dbb943955c1b0a2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_limit_set</definition>
        <argsstring>(apr_procattr_t *attr, apr_int32_t what, struct rlimit *limit)</argsstring>
        <name>apr_procattr_limit_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>what</declname>
        </param>
        <param>
          <type>struct rlimit *</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the Resource Utilization limits when starting a new process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>Which limit to set, one of: <preformatted>
                APR_LIMIT_CPU
                APR_LIMIT_MEM
                APR_LIMIT_NPROC
                APR_LIMIT_NOFILE
</preformatted> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set the limit to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gaa39deba0837e0772754ad41589b733cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_child_errfn_set</definition>
        <argsstring>(apr_procattr_t *attr, apr_child_errfn_t *errfn)</argsstring>
        <name>apr_procattr_child_errfn_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga1feae4cf7ed6f156a0db10172e228e2d" kindref="member">apr_child_errfn_t</ref> *</type>
          <declname>errfn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify an error function to be called in the child process if APR encounters an error in the child prior to running the specified program. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr describing the child process to be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call in the child process. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>At the present time, it will only be called from <ref refid="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" kindref="member">apr_proc_create()</ref> on platforms where fork() is used. It will never be called on other platforms, on those platforms <ref refid="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" kindref="member">apr_proc_create()</ref> will return the error in the parent process rather than invoke the callback in the now-forked child process. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="543" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga24076f050e9385af09ad8c3931d8dc43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_error_check_set</definition>
        <argsstring>(apr_procattr_t *attr, apr_int32_t chk)</argsstring>
        <name>apr_procattr_error_check_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>chk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify that <ref refid="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" kindref="member">apr_proc_create()</ref> should do whatever it can to report failures to the caller of <ref refid="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" kindref="member">apr_proc_create()</ref>, rather than find out in the child. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr describing the child process to be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chk</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to indicate whether or not extra work should be done to try to report failures to the caller. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This flag only affects <ref refid="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" kindref="member">apr_proc_create()</ref> on platforms where fork() is used. This leads to extra overhead in the calling process, but that may help the application handle such errors more gracefully. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga0f1dd02408995767efcb9c0d9c775620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_addrspace_set</definition>
        <argsstring>(apr_procattr_t *attr, apr_int32_t addrspace)</argsstring>
        <name>apr_procattr_addrspace_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>addrspace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if the child should start in its own address space or using the current one from its parent <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrspace</parametername>
</parameternamelist>
<parameterdescription>
<para>Should the child start in its own address space? Default is no on NetWare and yes on other platforms. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga741ed3dc047b935b091a21528c49bb19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_user_set</definition>
        <argsstring>(apr_procattr_t *attr, const char *username, const char *password)</argsstring>
        <name>apr_procattr_user_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the username used for running process <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>User password if needed. Password is needed on WIN32 or any other platform having APR_PROCATTR_USER_SET_REQUIRES_PASSWORD set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="579" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga391f0d3831a5894ea2118762789a395d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_procattr_group_set</definition>
        <argsstring>(apr_procattr_t *attr, const char *groupname)</argsstring>
        <name>apr_procattr_group_set</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>groupname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the group used for running process <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>The procattr we care about. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupname</parametername>
</parameternamelist>
<parameterdescription>
<para>The group name used </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="588" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga3d0415bf69b0a629a929833e82758b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_fork</definition>
        <argsstring>(apr_proc_t *proc, apr_pool_t *cont)</argsstring>
        <name>apr_proc_fork</name>
        <param>
          <type><ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is currently the only non-portable call in APR. This executes a standard unix fork. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>The resulting process handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cont</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>returns APR_INCHILD for the child, and APR_INPARENT for the parent or an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_create</definition>
        <argsstring>(apr_proc_t *new_proc, const char *progname, const char *const *args, const char *const *env, apr_procattr_t *attr, apr_pool_t *pool)</argsstring>
        <name>apr_proc_create</name>
        <param>
          <type><ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref> *</type>
          <declname>new_proc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>progname</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga0d83919a6a0dd609598a864917f8b339" kindref="member">apr_procattr_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new process and execute a new program within that process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_proc</parametername>
</parameternamelist>
<parameterdescription>
<para>The resulting process handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>progname</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to run </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the arguments to pass to the new program. The first one should be the program name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>The new environment table for the new process. This should be a list of NULL-terminated strings. This argument is ignored for APR_PROGRAM_ENV, APR_PROGRAM_PATH, and APR_SHELLCMD_ENV types of commands. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>the procattr we should use to determine how to create the new process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function returns without waiting for the new process to terminate; use apr_proc_wait for that. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga0936f7a7fe7e2d5e08979c9f343a5a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_wait</definition>
        <argsstring>(apr_proc_t *proc, int *exitcode, apr_exit_why_e *exitwhy, apr_wait_how_e waithow)</argsstring>
        <name>apr_proc_wait</name>
        <param>
          <type><ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exitcode</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1gac097b4fa41e67024711c5983446d0951" kindref="member">apr_exit_why_e</ref> *</type>
          <declname>exitwhy</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga5e52d786644f3b66d6180571e68c7260" kindref="member">apr_wait_how_e</ref></type>
          <declname>waithow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for a child process to die <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>The process handle that corresponds to the desired child process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exitcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The returned exit status of the child, if a child process dies, or the signal that caused the child to die. On platforms that don&apos;t support obtaining this information, the status parameter will be returned as APR_ENOTIMPL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exitwhy</parametername>
</parameternamelist>
<parameterdescription>
<para>Why the child died, the bitwise or of: <preformatted>
           APR_PROC_EXIT         -- process terminated normally
           APR_PROC_SIGNAL       -- process was killed by a signal
           APR_PROC_SIGNAL_CORE  -- process was killed by a signal, and
                                    generated a core dump.
</preformatted> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>waithow</parametername>
</parameternamelist>
<parameterdescription>
<para>How should we wait. One of: <preformatted>
           APR_WAIT   -- block until the child process dies.
           APR_NOWAIT -- return immediately regardless of if the 
                         child is dead or not.
</preformatted> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The child&apos;s status is in the return code to this process. It is one of: <preformatted>
           APR_CHILD_DONE     <ndash/> child is no longer running.
           APR_CHILD_NOTDONE  <ndash/> child is still running.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga506183074e8413c3ff597539e4768ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_wait_all_procs</definition>
        <argsstring>(apr_proc_t *proc, int *exitcode, apr_exit_why_e *exitwhy, apr_wait_how_e waithow, apr_pool_t *p)</argsstring>
        <name>apr_proc_wait_all_procs</name>
        <param>
          <type><ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exitcode</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1gac097b4fa41e67024711c5983446d0951" kindref="member">apr_exit_why_e</ref> *</type>
          <declname>exitwhy</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga5e52d786644f3b66d6180571e68c7260" kindref="member">apr_wait_how_e</ref></type>
          <declname>waithow</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for any current child process to die and return information about that child. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to NULL on entry, will be filled out with child&apos;s information </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exitcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The returned exit status of the child, if a child process dies, or the signal that caused the child to die. On platforms that don&apos;t support obtaining this information, the status parameter will be returned as APR_ENOTIMPL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exitwhy</parametername>
</parameternamelist>
<parameterdescription>
<para>Why the child died, the bitwise or of: <preformatted>
           APR_PROC_EXIT         -- process terminated normally
           APR_PROC_SIGNAL       -- process was killed by a signal
           APR_PROC_SIGNAL_CORE  -- process was killed by a signal, and
                                    generated a core dump.
</preformatted> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>waithow</parametername>
</parameternamelist>
<parameterdescription>
<para>How should we wait. One of: <preformatted>
           APR_WAIT   -- block until the child process dies.
           APR_NOWAIT -- return immediately regardless of if the 
                         child is dead or not.
</preformatted> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate child information out of. </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="bug_1_bug000009"><xreftitle>Bug</xreftitle><xrefdescription><para>Passing proc as a *proc rather than **proc was an odd choice for some platforms... this should be revisited in 1.0 </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga56c2b005792752b63d804f2021596406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_detach</definition>
        <argsstring>(int daemonize)</argsstring>
        <name>apr_proc_detach</name>
        <param>
          <type>int</type>
          <declname>daemonize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detach the process from the controlling terminal. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>daemonize</parametername>
</parameternamelist>
<parameterdescription>
<para>set to non-zero if the process should daemonize and become a background process, else it will stay in the foreground. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="698" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gaf8d2be452a819161aa4cd6205a17761e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_proc_other_child_register</definition>
        <argsstring>(apr_proc_t *proc, void(*maintenance)(int reason, void *, int status), void *data, apr_file_t *write_fd, apr_pool_t *p)</argsstring>
        <name>apr_proc_other_child_register</name>
        <param>
          <type><ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void(*)(int reason, void *, int status)</type>
          <declname>maintenance</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>write_fd</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register an other_child <ndash/> a child associated to its registered maintence callback. This callback is invoked when the process dies, is disconnected or disappears. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>The child process to register. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maintenance</parametername>
</parameternamelist>
<parameterdescription>
<para>maintenance is a function that is invoked with a reason and the data pointer passed here. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque context data passed to the maintenance function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>An fd that is probed for writing. If it is ever unwritable then the maintenance is invoked with reason OC_REASON_UNWRITABLE. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use for allocating memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="bug_1_bug000010"><xreftitle>Bug</xreftitle><xrefdescription><para>write_fd duplicates the proc-&gt;out stream, it&apos;s really redundant and should be replaced in the APR 1.0 API with a bitflag of which proc-&gt;in/out/err handles should be health checked. </para><para>no platform currently tests the pipes health. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="717" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga10b1a4b224566c03c97f100ac8a2c830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_proc_other_child_unregister</definition>
        <argsstring>(void *data)</argsstring>
        <name>apr_proc_other_child_unregister</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop watching the specified other child. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to pass to the maintenance function. This is used to find the process to unregister. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Since this can be called by a maintenance function while we&apos;re scanning the other_children list, all scanners should protect themself by loading ocr-&gt;next before calling any maintenance function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="733" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga88701979c4e5ac4b94966c73e0159efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_other_child_alert</definition>
        <argsstring>(apr_proc_t *proc, int reason, int status)</argsstring>
        <name>apr_proc_other_child_alert</name>
        <param>
          <type><ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify the maintenance callback of a registered other child process that application has detected an event, such as death. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>The process to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The reason code to pass to the maintenance function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status to pass to the maintenance function </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>An example of code using this behavior; <preformatted>
rv = apr_proc_wait_all_procs(&amp;proc, &amp;exitcode, &amp;status, APR_WAIT, p);
if (<ref refid="group___a_p_r___s_t_a_t_u_s___i_s_1ga1e6539dfa172cef4026105ca33b2b208" kindref="member">APR_STATUS_IS_CHILD_DONE(rv)</ref>) {
#if APR_HAS_OTHER_CHILD
    if (apr_proc_other_child_alert(&amp;proc, APR_OC_REASON_DEATH, status)
            == APR_SUCCESS) {
        ;  (already handled)
    }
    else
#endif
        [... handling non-otherchild processes death ...]
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="755" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga74a905d90a3476a611adeeb304931a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_proc_other_child_refresh</definition>
        <argsstring>(apr_other_child_rec_t *ocr, int reason)</argsstring>
        <name>apr_proc_other_child_refresh</name>
        <param>
          <type><ref refid="group__apr__thread__proc_1gafc52ee8b19a7b222278d31ebb3f11a71" kindref="member">apr_other_child_rec_t</ref> *</type>
          <declname>ocr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test one specific other child processes and invoke the maintenance callback with the appropriate reason code, if still running, or the appropriate reason code if the process is no longer healthy. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ocr</parametername>
</parameternamelist>
<parameterdescription>
<para>The registered other child </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The reason code (e.g. APR_OC_REASON_RESTART) if still running </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="766" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gacff5e867a92619d30c4e78f9ad2a58e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_proc_other_child_refresh_all</definition>
        <argsstring>(int reason)</argsstring>
        <name>apr_proc_other_child_refresh_all</name>
        <param>
          <type>int</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test all registered other child processes and invoke the maintenance callback with the appropriate reason code, if still running, or the appropriate reason code if the process is no longer healthy. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The reason code (e.g. APR_OC_REASON_RESTART) to running processes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga4a5ff2fce2c68460281b0cb3ee0365d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_proc_kill</definition>
        <argsstring>(apr_proc_t *proc, int sig)</argsstring>
        <name>apr_proc_kill</name>
        <param>
          <type><ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Terminate a process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>The process to terminate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>How to kill the process. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="782" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1gacbe3fd9491fa35149de28cebcae22f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_note_subprocess</definition>
        <argsstring>(apr_pool_t *a, apr_proc_t *proc, apr_kill_conditions_e how)</argsstring>
        <name>apr_pool_note_subprocess</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__proc_1ga3eaec78633742e7e0cb9480a21477aff" kindref="member">apr_kill_conditions_e</ref></type>
          <declname>how</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a process to be killed when a pool dies. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use to define the processes lifetime </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>The process to register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>how</parametername>
</parameternamelist>
<parameterdescription>
<para>How to kill the process, one of: <preformatted>
        APR_KILL_NEVER         <ndash/> process is never sent any signals
        APR_KILL_ALWAYS        <ndash/> process is sent SIGKILL on apr_pool_t cleanup
        APR_KILL_AFTER_TIMEOUT <ndash/> SIGTERM, wait 3 seconds, SIGKILL
        APR_JUST_WAIT          <ndash/> wait forever for the process to complete
        APR_KILL_ONLY_ONCE     <ndash/> send SIGTERM and then wait
</preformatted> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="797" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga7adc09cd24568666266edce81cfffbed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_setup_signal_thread</definition>
        <argsstring>(void)</argsstring>
        <name>apr_setup_signal_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup the process for a single thread to be used for all signal handling. <simplesect kind="warning"><para>This must be called before any threads are created </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="808" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga2e53fa76ff725749c7affe6c81faa9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_signal_thread</definition>
        <argsstring>(int(*signal_handler)(int signum))</argsstring>
        <name>apr_signal_thread</name>
        <param>
          <type>int(*)(int signum)</type>
          <declname>signal_handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make the current thread listen for signals. This thread will loop forever, calling a provided function whenever it receives a signal. That functions should return 1 if the signal has been handled, 0 otherwise. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signal_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when a signal is received apr_status_t apr_signal_thread((int)(*signal_handler)(int signum)) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__proc_1ga089b70ae9d6c64d2675a1fd1e9cd0d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_thread_pool_get</definition>
        <argsstring>(const apr_thread_t *thethread)</argsstring>
        <name>apr_thread_pool_get</name>
        <param>
          <type>const <ref refid="group__apr__thread__proc_1ga646c71351e723d84f8cc8c8d1d5937be" kindref="member">apr_thread_t</ref> *</type>
          <declname>thethread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the child-pool used by the thread from the thread info. <simplesect kind="return"><para>apr_pool_t the pool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="825" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__thread__proc_1ga689b0f3953cde83a4092931bad8b7183" prot="public" static="no">
        <name>APR_PROC_CHECK_EXIT</name>
        <param><defname>x</defname></param>
        <initializer>(x &amp; <ref refid="group__apr__thread__proc_1ggac097b4fa41e67024711c5983446d0951a977f140c82333af62aa4bed8c99a3ee2" kindref="member">APR_PROC_EXIT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>did we exit the process </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="72" column="9" bodyfile="include/apr_thread_proc.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1gaa0a8a0b8785cc9392059c7accd71f5f6" prot="public" static="no">
        <name>APR_PROC_CHECK_SIGNALED</name>
        <param><defname>x</defname></param>
        <initializer>(x &amp; <ref refid="group__apr__thread__proc_1ggac097b4fa41e67024711c5983446d0951a7e3421d18abe458ca27822d19424225b" kindref="member">APR_PROC_SIGNAL</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>did we get a signal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="74" column="9" bodyfile="include/apr_thread_proc.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1ga2249e96191b5d98d33fb7875bce49410" prot="public" static="no">
        <name>APR_PROC_CHECK_CORE_DUMP</name>
        <param><defname>x</defname></param>
        <initializer>(x &amp; <ref refid="group__apr__thread__proc_1ggac097b4fa41e67024711c5983446d0951a6b667be4983cb59e9bed37ee05a0dcce" kindref="member">APR_PROC_SIGNAL_CORE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>did we get core </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="76" column="9" bodyfile="include/apr_thread_proc.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1gab7cfcb8ed24e6c0a76cd41b5b113ae95" prot="public" static="no">
        <name>APR_NO_PIPE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="79" column="9" bodyfile="include/apr_thread_proc.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1ga646af57314e71f4647243f36dd03e5ea" prot="public" static="no">
        <name>APR_FULL_BLOCK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> and <ref refid="group__apr__file__io_1ga2fbbae715bee0e0ca9adadd66ac65e96" kindref="member">apr_file_pipe_create_ex</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="81" column="9" bodyfile="include/apr_thread_proc.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1gae0707f76da785490830fc3491093767c" prot="public" static="no">
        <name>APR_FULL_NONBLOCK</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> and <ref refid="group__apr__file__io_1ga2fbbae715bee0e0ca9adadd66ac65e96" kindref="member">apr_file_pipe_create_ex</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="83" column="9" bodyfile="include/apr_thread_proc.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1ga8653bab028b1c2b98754babc2547f988" prot="public" static="no">
        <name>APR_PARENT_BLOCK</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="85" column="9" bodyfile="include/apr_thread_proc.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1gacad9da4db7a22f46715e50fb8ec1c939" prot="public" static="no">
        <name>APR_CHILD_BLOCK</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="87" column="9" bodyfile="include/apr_thread_proc.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1ga597fb6a501c20cc3a597fe6c613f4310" prot="public" static="no">
        <name>APR_NO_FILE</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref></para></simplesect>
<simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> </para></simplesect>
<simplesect kind="note"><para>Win32 only effective with version 1.2.12, portably introduced in 1.3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="89" column="9" bodyfile="include/apr_thread_proc.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1ga597fb6a501c20cc3a597fe6c613f4310" prot="public" static="no">
        <name>APR_NO_FILE</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref></para></simplesect>
<simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga2b1598bc6f5ab0bfcf2e55096d563c98" kindref="member">apr_procattr_io_set</ref> </para></simplesect>
<simplesect kind="note"><para>Win32 only effective with version 1.2.12, portably introduced in 1.3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="99" column="9" bodyfile="include/apr_thread_proc.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1gaf8295548cb0821ee02249d6de8336bcb" prot="public" static="no">
        <name>APR_READ_BLOCK</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__file__io_1ga2fbbae715bee0e0ca9adadd66ac65e96" kindref="member">apr_file_pipe_create_ex</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="92" column="9" bodyfile="include/apr_thread_proc.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1ga36ff2de9664ad6995bd488b4ac715c9c" prot="public" static="no">
        <name>APR_WRITE_BLOCK</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__file__io_1ga2fbbae715bee0e0ca9adadd66ac65e96" kindref="member">apr_file_pipe_create_ex</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="94" column="9" bodyfile="include/apr_thread_proc.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1gaad8a94c7ac2be58fe035b2fd6efec84f" prot="public" static="no">
        <name>APR_LIMIT_CPU</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga4de85cfd54d27476dbb943955c1b0a2a" kindref="member">apr_procattr_limit_set</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="102" column="9" bodyfile="include/apr_thread_proc.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1ga6dbb01bb357b078acff8fd87e9c494e8" prot="public" static="no">
        <name>APR_LIMIT_MEM</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga4de85cfd54d27476dbb943955c1b0a2a" kindref="member">apr_procattr_limit_set</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="104" column="9" bodyfile="include/apr_thread_proc.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1ga72e9be453a20f4e78bc6d7bd95d7c333" prot="public" static="no">
        <name>APR_LIMIT_NPROC</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga4de85cfd54d27476dbb943955c1b0a2a" kindref="member">apr_procattr_limit_set</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="106" column="9" bodyfile="include/apr_thread_proc.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1ga18d73099d66988698a9ad2aebdce2c9f" prot="public" static="no">
        <name>APR_LIMIT_NOFILE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__apr__thread__proc_1ga4de85cfd54d27476dbb943955c1b0a2a" kindref="member">apr_procattr_limit_set</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="108" column="9" bodyfile="include/apr_thread_proc.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1gab57b448a464ac299c03d6127781df152" prot="public" static="no">
        <name>APR_PROC_DETACH_FOREGROUND</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Do not detach </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="679" column="9" bodyfile="include/apr_thread_proc.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__thread__proc_1gab4de7134fcc66c4127ae65b68631f846" prot="public" static="no">
        <name>APR_PROC_DETACH_DAEMONIZE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detach </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_proc.h" line="680" column="9" bodyfile="include/apr_thread_proc.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
