<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__filepath" kind="group">
    <compoundname>apr_filepath</compoundname>
    <title>Filepath Manipulation Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__filepath_1ga1eacdd5ed069faa137bde014fa50494d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_filepath_root</definition>
        <argsstring>(const char **rootpath, const char **filepath, apr_int32_t flags, apr_pool_t *p)</argsstring>
        <name>apr_filepath_root</name>
        <param>
          <type>const char **</type>
          <declname>rootpath</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract the rootpath from the given filepath <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rootpath</parametername>
</parameternamelist>
<parameterdescription>
<para>the root file path returned with APR_SUCCESS or APR_EINCOMPLETE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filepath</parametername>
</parameternamelist>
<parameterdescription>
<para>the pathname to parse for its root component </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired rules to apply, from <preformatted>
     APR_FILEPATH_NATIVE    Use native path separators (e.g. &apos;\&apos; on Win32)
     APR_FILEPATH_TRUENAME  Tests that the root exists, and makes it proper
</preformatted> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to allocate the new path string from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>on return, filepath points to the first non-root character in the given filepath. In the simplest example, given a filepath of &quot;/foo&quot;, returns the rootpath of &quot;/&quot; and filepath points at &quot;foo&quot;. This is far more complex on other platforms, which will canonicalize the root form to a consistant format, given the APR_FILEPATH_TRUENAME flag, and also test for the validity of that root (e.g., that a drive d:/ or network share //machine/foovol/). The function returns APR_ERELATIVE if filepath isn&apos;t rooted (an error), APR_EINCOMPLETE if the root path is ambiguous (but potentially legitimate, e.g. &quot;/&quot; on Windows is incomplete because it doesn&apos;t specify the drive letter), or APR_EBADPATH if the root is simply invalid. APR_SUCCESS is returned if filepath is an absolute path. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__filepath_1gae89fd67108f10dc5044b6d062dde0138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_filepath_merge</definition>
        <argsstring>(char **newpath, const char *rootpath, const char *addpath, apr_int32_t flags, apr_pool_t *p)</argsstring>
        <name>apr_filepath_merge</name>
        <param>
          <type>char **</type>
          <declname>newpath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rootpath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>addpath</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge additional file path onto the previously processed rootpath <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newpath</parametername>
</parameternamelist>
<parameterdescription>
<para>the merged paths returned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rootpath</parametername>
</parameternamelist>
<parameterdescription>
<para>the root file path (NULL uses the current working path) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addpath</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to add to the root path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired APR_FILEPATH_ rules to apply when merging </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to allocate the new path string from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>if the flag APR_FILEPATH_TRUENAME is given, and the addpath contains wildcard characters (&apos;*&apos;, &apos;?&apos;) on platforms that don&apos;t support such characters within filenames, the paths will be merged, but the result code will be APR_EPATHWILD, and all further segments will not reflect the true filenames including the wildcard and following segments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__filepath_1gaf259849de62ac172dde7dcbe73421500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_filepath_list_split</definition>
        <argsstring>(apr_array_header_t **pathelts, const char *liststr, apr_pool_t *p)</argsstring>
        <name>apr_filepath_list_split</name>
        <param>
          <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> **</type>
          <declname>pathelts</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>liststr</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Split a search path into separate components <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pathelts</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned components of the search path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>liststr</parametername>
</parameternamelist>
<parameterdescription>
<para>the search path (e.g., <computeroutput>getenv(&quot;PATH&quot;)</computeroutput>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to allocate the array and path components from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>empty path components do not become part of <emphasis>pathelts</emphasis>. </para></simplesect>
<simplesect kind="remark"><para>the path separator in <emphasis>liststr</emphasis> is system specific; e.g., &apos;:&apos; on Unix, &apos;;&apos; on Windows, etc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__filepath_1ga8316896ab8e3901f9711d9d4cc89b373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_filepath_list_merge</definition>
        <argsstring>(char **liststr, apr_array_header_t *pathelts, apr_pool_t *p)</argsstring>
        <name>apr_filepath_list_merge</name>
        <param>
          <type>char **</type>
          <declname>liststr</declname>
        </param>
        <param>
          <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>pathelts</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge a list of search path components into a single search path <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>liststr</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned search path; may be NULL if <emphasis>pathelts</emphasis> is empty </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pathelts</parametername>
</parameternamelist>
<parameterdescription>
<para>the components of the search path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to allocate the search path from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>emtpy strings in the source array are ignored. </para></simplesect>
<simplesect kind="remark"><para>the path separator in <emphasis>liststr</emphasis> is system specific; e.g., &apos;:&apos; on Unix, &apos;;&apos; on Windows, etc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__filepath_1gaac7c26321fd60d7304326fe531639507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_filepath_get</definition>
        <argsstring>(char **path, apr_int32_t flags, apr_pool_t *p)</argsstring>
        <name>apr_filepath_get</name>
        <param>
          <type>char **</type>
          <declname>path</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the default file path (for relative file names) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the default path string returned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>optional flag APR_FILEPATH_NATIVE to retrieve the default file path in os-native format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to allocate the default path string from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__filepath_1ga9773589b65b7f0b7d5b59d427fd0eb93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_filepath_set</definition>
        <argsstring>(const char *path, apr_pool_t *p)</argsstring>
        <name>apr_filepath_set</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default file path (for relative file names) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the default path returned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to allocate any working storage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__filepath_1gad4d3a5888a54a52b3552911e448a3eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_filepath_encoding</definition>
        <argsstring>(int *style, apr_pool_t *p)</argsstring>
        <name>apr_filepath_encoding</name>
        <param>
          <type>int *</type>
          <declname>style</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the encoding used internally by the FilePath functions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a variable which receives the encoding style flag </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to allocate any working storage </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use <computeroutput>apr_os_locale_encoding</computeroutput> and/or <computeroutput>apr_os_default_encoding</computeroutput> to get the name of the path encoding if it&apos;s not UTF-8. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="419" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__filepath_1gabb57ce7b23caf512d7f64b92a662ab3d" prot="public" static="no">
        <name>APR_FILEPATH_NOTABOVEROOT</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cause apr_filepath_merge to fail if addpath is above rootpath <xrefsect id="bug_1_bug000002"><xreftitle>Bug</xreftitle><xrefdescription><para>in APR 0.9 and 1.x, this flag&apos;s behavior is undefined if the rootpath is NULL or empty. In APR 2.0 this should be changed to imply NOTABSOLUTE if the rootpath is NULL or empty. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="287" column="9" bodyfile="include/apr_file_info.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__filepath_1ga48b6cabfa91e6070c45977ba7035f328" prot="public" static="no">
        <name>APR_FILEPATH_SECUREROOTTEST</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>internal: Only meaningful with APR_FILEPATH_NOTABOVEROOT </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="290" column="9" bodyfile="include/apr_file_info.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__filepath_1ga6a518889311b81e1d2fc434e7d3acecd" prot="public" static="no">
        <name>APR_FILEPATH_SECUREROOT</name>
        <initializer>0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cause apr_filepath_merge to fail if addpath is above rootpath, even given a rootpath /foo/bar and an addpath ../bar/bash </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="295" column="9" bodyfile="include/apr_file_info.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__filepath_1ga487344eb474ea4033b19c386db9aa03a" prot="public" static="no">
        <name>APR_FILEPATH_NOTRELATIVE</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fail apr_filepath_merge if the merged path is relative </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="298" column="9" bodyfile="include/apr_file_info.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__filepath_1gaac75b8e9fd5c248b52ac36a1fd6b7f98" prot="public" static="no">
        <name>APR_FILEPATH_NOTABSOLUTE</name>
        <initializer>0x08</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fail apr_filepath_merge if the merged path is absolute </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="301" column="9" bodyfile="include/apr_file_info.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__filepath_1ga2d72ade2cada76d2fa8af3fe4d8fb1de" prot="public" static="no">
        <name>APR_FILEPATH_NATIVE</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the file system&apos;s native path format (e.g. path delimiters of &apos;:&apos; on MacOS9, &apos;\&apos; on Win32, etc.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="305" column="9" bodyfile="include/apr_file_info.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__filepath_1gafb7dd411e9ef212a03051806cb60c9d8" prot="public" static="no">
        <name>APR_FILEPATH_TRUENAME</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resolve the true case of existing directories and file elements of addpath, (resolving any aliases on Win32) and append a proper trailing slash if a directory </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="311" column="9" bodyfile="include/apr_file_info.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__filepath_1ga26cd6345ccc38ae3ad001fd2fa885634" prot="public" static="no">
        <name>APR_FILEPATH_ENCODING_UNKNOWN</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The FilePath character encoding is unknown </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="404" column="9" bodyfile="include/apr_file_info.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__filepath_1gaecb3193c8e36fbf58564f94b8c38b6d9" prot="public" static="no">
        <name>APR_FILEPATH_ENCODING_LOCALE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The FilePath character encoding is locale-dependent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="407" column="9" bodyfile="include/apr_file_info.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__filepath_1ga1c99d1644a8b49dc0be166bdc352819a" prot="public" static="no">
        <name>APR_FILEPATH_ENCODING_UTF8</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The FilePath character encoding is UTF-8 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_info.h" line="410" column="9" bodyfile="include/apr_file_info.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
