<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___pool_cleanup" kind="group">
    <compoundname>PoolCleanup</compoundname>
    <title>Pool Cleanup Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___pool_cleanup_1ga6bdb28224dfe08160cbe3ba6b22dcbd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_cleanup_register</definition>
        <argsstring>(apr_pool_t *p, const void *data, apr_status_t(*plain_cleanup)(void *), apr_status_t(*child_cleanup)(void *))</argsstring>
        <name>apr_pool_cleanup_register</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>plain_cleanup</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>child_cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a function to be called when a pool is cleared or destroyed <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to register the cleanup with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to pass to the cleanup function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plain_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when the pool is cleared or destroyed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when a child process is about to exec - this function is called in the child, obviously! </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1ga64114542989d8872c7fd3c62f2a68678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_pre_cleanup_register</definition>
        <argsstring>(apr_pool_t *p, const void *data, apr_status_t(*plain_cleanup)(void *))</argsstring>
        <name>apr_pool_pre_cleanup_register</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>plain_cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a function to be called when a pool is cleared or destroyed.</para><para>Unlike apr_pool_cleanup_register which registers a cleanup that is called AFTER all subpools are destroyed, this function registers a function that will be called before any of the subpools are destroyed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to register the cleanup with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to pass to the cleanup function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plain_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when the pool is cleared or destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1gadc59bf32a0302e34fa0a2663f6e48a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_cleanup_kill</definition>
        <argsstring>(apr_pool_t *p, const void *data, apr_status_t(*cleanup)(void *))</argsstring>
        <name>apr_pool_cleanup_kill</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a previously registered cleanup function.</para><para>The cleanup most recently registered with <emphasis>p</emphasis> having the same values of <emphasis>data</emphasis> and <emphasis>cleanup</emphasis> will be removed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to remove the cleanup from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data of the registered cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to remove from cleanup </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>For some strange reason only the plain_cleanup is handled by this function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="663" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1ga7197fa6b43d9c5e99de17e0e900989ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_child_cleanup_set</definition>
        <argsstring>(apr_pool_t *p, const void *data, apr_status_t(*plain_cleanup)(void *), apr_status_t(*child_cleanup)(void *))</argsstring>
        <name>apr_pool_child_cleanup_set</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>plain_cleanup</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>child_cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the child cleanup function of a previously registered cleanup.</para><para>The cleanup most recently registered with <emphasis>p</emphasis> having the same values of <emphasis>data</emphasis> and <emphasis>plain_cleanup</emphasis> will have the registered child cleanup function replaced with <emphasis>child_cleanup</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool of the registered cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data of the registered cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plain_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The plain cleanup function of the registered cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to register as the child cleanup </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="679" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1gabf3913823af6015895a726ab738eaac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_cleanup_run</definition>
        <argsstring>(apr_pool_t *p, void *data, apr_status_t(*cleanup)(void *))</argsstring>
        <name>apr_pool_cleanup_run</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run the specified cleanup function immediately and unregister it.</para><para>The cleanup most recently registered with <emphasis>p</emphasis> having the same values of <emphasis>data</emphasis> and <emphasis>cleanup</emphasis> will be removed and <emphasis>cleanup</emphasis> will be called with <emphasis>data</emphasis> as the argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to remove the cleanup from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to remove from cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to remove from cleanup </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="696" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1gaa211acee585df08f396a50b0ea489b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_cleanup_null</definition>
        <argsstring>(void *data)</argsstring>
        <name>apr_pool_cleanup_null</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An empty cleanup function.</para><para>Passed to <ref refid="group___pool_cleanup_1ga6bdb28224dfe08160cbe3ba6b22dcbd7" kindref="member">apr_pool_cleanup_register()</ref> when no cleanup is required.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to cleanup, will not be used by this function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="707" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1ga1726cc585bda8997fcb0828f884be55b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_cleanup_for_exec</definition>
        <argsstring>(void)</argsstring>
        <name>apr_pool_cleanup_for_exec</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run all registered child cleanups, in preparation for an exec() call in a forked child <ndash/> close files, etc., but <emphasis>don&apos;t</emphasis> flush I/O buffers, <emphasis>don&apos;t</emphasis> wait for subprocesses, and <emphasis>don&apos;t</emphasis> free any memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="715" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Cleanups are performed in the reverse order they were registered. That is: Last In, First Out. A cleanup function can safely allocate memory from the pool that is being cleaned up. It can also safely register additional cleanups which will be run LIFO, directly after the current cleanup terminates. Cleanups have to take caution in calling functions that create subpools. Subpools, created during cleanup will NOT automatically be cleaned up. In other words, cleanups are to clean up after themselves. </para>    </detaileddescription>
  </compounddef>
</doxygen>
