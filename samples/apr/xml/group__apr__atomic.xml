<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__atomic" kind="group">
    <compoundname>apr_atomic</compoundname>
    <title>Atomic Operations</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__atomic_1gaa89b4022de39ca4d1c2ae6715e888e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_atomic_init</definition>
        <argsstring>(apr_pool_t *p)</argsstring>
        <name>apr_atomic_init</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this function is required on some platforms to initialize the atomic operation&apos;s internal structures <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>pool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS on successful completion </para></simplesect>
<simplesect kind="remark"><para>Programs do NOT need to call this directly. APR will call this automatically from apr_initialize. </para></simplesect>
</para><internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1gafba4de90e113d26536cff48418689771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_uint32_t</type>
        <definition>apr_uint32_t apr_atomic_read32</definition>
        <argsstring>(volatile apr_uint32_t *mem)</argsstring>
        <name>apr_atomic_read32</name>
        <param>
          <type>volatile apr_uint32_t *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>atomically read an apr_uint32_t from memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1gac689de9df18c093f66959227359328bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_atomic_set32</definition>
        <argsstring>(volatile apr_uint32_t *mem, apr_uint32_t val)</argsstring>
        <name>apr_atomic_set32</name>
        <param>
          <type>volatile apr_uint32_t *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>atomically set an apr_uint32_t in memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value that the object will assume </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1ga3ef16e13b679710fafd5196713e17433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_uint32_t</type>
        <definition>apr_uint32_t apr_atomic_add32</definition>
        <argsstring>(volatile apr_uint32_t *mem, apr_uint32_t val)</argsstring>
        <name>apr_atomic_add32</name>
        <param>
          <type>volatile apr_uint32_t *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>atomically add &apos;val&apos; to an apr_uint32_t <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>amount to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>old value pointed to by mem </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1ga4603396650e844bd987f01358ccb4df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_atomic_sub32</definition>
        <argsstring>(volatile apr_uint32_t *mem, apr_uint32_t val)</argsstring>
        <name>apr_atomic_sub32</name>
        <param>
          <type>volatile apr_uint32_t *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>atomically subtract &apos;val&apos; from an apr_uint32_t <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>amount to subtract </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1ga4af33da5aa6493ec321af14bedfc47a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_uint32_t</type>
        <definition>apr_uint32_t apr_atomic_inc32</definition>
        <argsstring>(volatile apr_uint32_t *mem)</argsstring>
        <name>apr_atomic_inc32</name>
        <param>
          <type>volatile apr_uint32_t *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>atomically increment an apr_uint32_t by 1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>old value pointed to by mem </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1ga7a8d16335fdcd27f2baca90df35ad300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_atomic_dec32</definition>
        <argsstring>(volatile apr_uint32_t *mem)</argsstring>
        <name>apr_atomic_dec32</name>
        <param>
          <type>volatile apr_uint32_t *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>atomically decrement an apr_uint32_t by 1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the atomic value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if the value becomes zero on decrement, otherwise non-zero </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1gae45c529f14f8489102382bd3fd4cce22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_uint32_t</type>
        <definition>apr_uint32_t apr_atomic_cas32</definition>
        <argsstring>(volatile apr_uint32_t *mem, apr_uint32_t with, apr_uint32_t cmp)</argsstring>
        <name>apr_atomic_cas32</name>
        <param>
          <type>volatile apr_uint32_t *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>with</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>cmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compare an apr_uint32_t&apos;s value with &apos;cmp&apos;. If they are the same swap the value with &apos;with&apos; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with</parametername>
</parameternamelist>
<parameterdescription>
<para>what to swap it with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmp</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to compare it to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the old value of *mem </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1ga50850e462d65e0409d5a93a6b4ec26c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_uint32_t</type>
        <definition>apr_uint32_t apr_atomic_xchg32</definition>
        <argsstring>(volatile apr_uint32_t *mem, apr_uint32_t val)</argsstring>
        <name>apr_atomic_xchg32</name>
        <param>
          <type>volatile apr_uint32_t *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>apr_uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>exchange an apr_uint32_t&apos;s value with &apos;val&apos;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>what to swap it with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the old value of *mem </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1gafdd02b41cc39ade873daa2734597b0fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_atomic_casptr</definition>
        <argsstring>(volatile void **mem, void *with, const void *cmp)</argsstring>
        <name>apr_atomic_casptr</name>
        <param>
          <type>volatile void **</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>with</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compare the pointer&apos;s value with cmp. If they are the same swap the value with &apos;with&apos; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with</parametername>
</parameternamelist>
<parameterdescription>
<para>what to swap it with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmp</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to compare it to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the old value of the pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__atomic_1gaab4c1c5b8be70ded06dd31a1a4f65bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_atomic_xchgptr</definition>
        <argsstring>(volatile void **mem, void *with)</argsstring>
        <name>apr_atomic_xchgptr</name>
        <param>
          <type>volatile void **</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>with</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>exchange a pair of pointer values <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with</parametername>
</parameternamelist>
<parameterdescription>
<para>what to swap it with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the old value of the pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_atomic.h" line="132" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
