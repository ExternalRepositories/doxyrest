<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___a_p_r___strings___snprintf" kind="group">
    <compoundname>APR_Strings_Snprintf</compoundname>
    <title>snprintf implementations</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___a_p_r___strings___snprintf_1gaf0d0becc04278df5172f0ce5905f8ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_snprintf</definition>
        <argsstring>(char *buf, apr_size_t len, const char *format,...)</argsstring>
        <name>apr_snprintf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>snprintf routine based on apr_vformatter. This means it understands the same extensions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to use to fill out the format string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___strings___snprintf_1gaf6bf63e240e48b517644ff3e99e49c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_vsnprintf</definition>
        <argsstring>(char *buf, apr_size_t len, const char *format, va_list ap)</argsstring>
        <name>apr_vsnprintf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>vsnprintf routine based on apr_vformatter. This means it understands the same extensions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to use to fill out the format string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="291" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>These are snprintf implementations based on <ref refid="group__apr__lib_1gad2cd3594aeaafd45931d1034965f48c1" kindref="member">apr_vformatter()</ref>.</para></simplesect>
Note that various standards and implementations disagree on the return value of snprintf, and side-effects due to n in the formatting string. apr_snprintf (and apr_vsnprintf) behaves as follows:</para><para>Process the format string until the entire string is exhausted, or the buffer fills. If the buffer fills then stop processing immediately (so no further n arguments are processed), and return the buffer length. In all cases the buffer is NUL terminated. It will return the number of characters inserted into the buffer, not including the terminating NUL. As a special case, if len is 0, apr_snprintf will return the number of characters that would have been inserted if the buffer had been infinite (in this case, *buffer can be NULL)</para><para>In no event does apr_snprintf return a negative number. </para>    </detaileddescription>
  </compounddef>
</doxygen>
