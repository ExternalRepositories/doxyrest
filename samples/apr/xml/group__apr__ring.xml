<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__ring" kind="group">
    <compoundname>apr_ring</compoundname>
    <title>Ring Macro Implementations</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__ring_1ga095edad4bcb6975014ed9584930f7819" prot="public" static="no">
        <name>APR_RING_ENTRY</name>
        <param><defname>elem</defname></param>
        <initializer>struct {								\
	struct elem * volatile next;					\
	struct elem * volatile prev;					\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Ring Element</para><para>A ring element struct is linked to the other elements in the ring through its ring entry field, e.g. <preformatted>
     struct my_element_t {
         <ref refid="group__apr__ring_1ga095edad4bcb6975014ed9584930f7819" kindref="member">APR_RING_ENTRY(my_element_t)</ref> link;
         int foo;
         char *bar;
     };
</preformatted></para><para>An element struct may be put on more than one ring if it has more than one APR_RING_ENTRY field. Each APR_RING_ENTRY has a corresponding APR_RING_HEAD declaration.</para><para><simplesect kind="warning"><para>For strict C standards compliance you should put the APR_RING_ENTRY first in the element struct unless the head is always part of a larger object with enough earlier fields to accommodate the offsetof() used to compute the ring sentinel below. You can usually ignore this caveat. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="70" column="9" bodyfile="include/apr_ring.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga2953b8d4034077c4020616282e6c0b67" prot="public" static="no">
        <name>APR_RING_HEAD</name>
        <param><defname>head</defname></param>
        <param><defname>elem</defname></param>
        <initializer>struct head {							\
	struct elem * volatile next;					\
	struct elem * volatile prev;					\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Ring Head</para><para>Each ring is managed via its head, which is a struct declared like this: <preformatted>
     <ref refid="group__apr__ring_1ga2953b8d4034077c4020616282e6c0b67" kindref="member">APR_RING_HEAD(my_ring_t, my_element_t)</ref>;
     struct my_ring_t ring, *ringp;
</preformatted></para><para>This struct looks just like the element link struct so that we can be sure that the typecasting games will work as expected.</para><para>The first element in the ring is next after the head, and the last element is just before the head. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="91" column="9" bodyfile="include/apr_ring.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" prot="public" static="no">
        <name>APR_RING_SENTINEL</name>
        <param><defname>hp</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer>(struct elem *)((char *)(&amp;(hp)-&gt;next) - <ref refid="group__apr__general_1gac16b1187b6ea63706c5dd48c88323dec" kindref="member">APR_OFFSETOF</ref>(struct elem, link))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Ring Sentinel</para><para>This is the magic pointer value that occurs before the first and after the last elements in the ring, computed from the address of the ring&apos;s head. The head itself isn&apos;t an element, but in order to get rid of all the special cases when dealing with the ends of the ring, we play typecasting games to make it look like one.</para><para>Here is a diagram to illustrate the arrangements of the next and prev pointers of each element in a single ring. Note that they point to the start of each element, not to the APR_RING_ENTRY structure.</para><para><preformatted>
    +-&gt;+------+&lt;-+  +-&gt;+------+&lt;-+  +-&gt;+------+&lt;-+
    |  |struct|  |  |  |struct|  |  |  |struct|  |
   /   | elem |   \/   | elem |   \/   | elem |  \
...    |      |   /\   |      |   /\   |      |   ...
       +------+  |  |  +------+  |  |  +------+
  ...--|prev  |  |  +--|ring  |  |  +--|prev  |
       |  next|--+     | entry|--+     |  next|--...
       +------+        +------+        +------+
       | etc. |        | etc. |        | etc. |
       :      :        :      :        :      :
</preformatted></para><para>The APR_RING_HEAD is nothing but a bare APR_RING_ENTRY. The prev and next pointers in the first and last elements don&apos;t actually point to the head, they point to a phantom place called the sentinel. Its value is such that last-&gt;next-&gt;next == first because the offset from the sentinel to the head&apos;s next pointer is the same as the offset from the start of an element to its next pointer. This also works in the opposite direction.</para><para><preformatted>
       last                            first
    +-&gt;+------+&lt;-+  +-&gt;sentinel&lt;-+  +-&gt;+------+&lt;-+
    |  |struct|  |  |            |  |  |struct|  |
   /   | elem |   \/              \/   | elem |  \
...    |      |   /\              /\   |      |   ...
       +------+  |  |  +------+  |  |  +------+
  ...--|prev  |  |  +--|ring  |  |  +--|prev  |
       |  next|--+     |  head|--+     |  next|--...
       +------+        +------+        +------+
       | etc. |                        | etc. |
       :      :                        :      :
</preformatted></para><para>Note that the offset mentioned above is different for each kind of ring that the element may be on, and each kind of ring has a unique name for its APR_RING_ENTRY in each element, and has its own type for its APR_RING_HEAD.</para><para>Note also that if the offset is non-zero (which is required if an element has more than one APR_RING_ENTRY), the unreality of the sentinel may have bad implications on very perverse implementations of C <ndash/> see the warning in APR_RING_ENTRY.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="159" column="9" bodyfile="include/apr_ring.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1gacacd9cfca24feb7ff754d4008422efcb" prot="public" static="no">
        <name>APR_RING_FIRST</name>
        <param><defname>hp</defname></param>
        <initializer>(hp)-&gt;next</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The first element of the ring <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the ring </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="166" column="9" bodyfile="include/apr_ring.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga8b927069ba9dc13defaf45a87267b5d3" prot="public" static="no">
        <name>APR_RING_LAST</name>
        <param><defname>hp</defname></param>
        <initializer>(hp)-&gt;prev</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The last element of the ring <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the ring </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="171" column="9" bodyfile="include/apr_ring.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" prot="public" static="no">
        <name>APR_RING_NEXT</name>
        <param><defname>ep</defname></param>
        <param><defname>link</defname></param>
        <initializer>(ep)-&gt;link.next</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The next element in the ring <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The current element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="177" column="9" bodyfile="include/apr_ring.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" prot="public" static="no">
        <name>APR_RING_PREV</name>
        <param><defname>ep</defname></param>
        <param><defname>link</defname></param>
        <initializer>(ep)-&gt;link.prev</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The previous element in the ring <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The current element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="183" column="9" bodyfile="include/apr_ring.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga245e1a73b162a4a68ebd54c84683729d" prot="public" static="no">
        <name>APR_RING_INIT</name>
        <param><defname>hp</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer>do {				\
	<ref refid="group__apr__ring_1gacacd9cfca24feb7ff754d4008422efcb" kindref="member">APR_RING_FIRST</ref>((hp)) = <ref refid="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" kindref="member">APR_RING_SENTINEL</ref>((hp), elem, link);	\
	<ref refid="group__apr__ring_1ga8b927069ba9dc13defaf45a87267b5d3" kindref="member">APR_RING_LAST</ref>((hp))  = <ref refid="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" kindref="member">APR_RING_SENTINEL</ref>((hp), elem, link);	\
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a ring <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="192" column="9" bodyfile="include/apr_ring.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga9b64ad6eebea19f896d2aa90172b6b9a" prot="public" static="no">
        <name>APR_RING_EMPTY</name>
        <param><defname>hp</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer>(<ref refid="group__apr__ring_1gacacd9cfca24feb7ff754d4008422efcb" kindref="member">APR_RING_FIRST</ref>((hp)) == <ref refid="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" kindref="member">APR_RING_SENTINEL</ref>((hp), elem, link))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if a ring is empty <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true or false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="204" column="9" bodyfile="include/apr_ring.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1gae5048ecda4b26b012ee93c2c830058cb" prot="public" static="no">
        <name>APR_RING_ELEM_INIT</name>
        <param><defname>ep</defname></param>
        <param><defname>link</defname></param>
        <initializer>do {				\
	<ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>((ep), link) = (ep);				\
	<ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>((ep), link) = (ep);				\
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a singleton element <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="212" column="9" bodyfile="include/apr_ring.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga438e7369e650ee07ac98ed0731589750" prot="public" static="no">
        <name>APR_RING_SPLICE_BEFORE</name>
        <param><defname>lep</defname></param>
        <param><defname>ep1</defname></param>
        <param><defname>epN</defname></param>
        <param><defname>link</defname></param>
        <initializer>do {		\
	<ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>((epN), link) = (lep);				\
	<ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>((ep1), link) = <ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>((lep), link);	\
	<ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>(<ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>((lep), link), link) = (ep1);	\
	<ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>((lep), link) = (epN);				\
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splice the sequence ep1..epN into the ring before element lep (..lep.. becomes ..ep1..epN..lep..) <simplesect kind="warning"><para>This doesn&apos;t work for splicing before the first element or on empty rings... see APR_RING_SPLICE_HEAD for one that does </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lep</parametername>
</parameternamelist>
<parameterdescription>
<para>Element in the ring to splice before </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep1</parametername>
</parameternamelist>
<parameterdescription>
<para>First element in the sequence to splice in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epN</parametername>
</parameternamelist>
<parameterdescription>
<para>Last element in the sequence to splice in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="228" column="9" bodyfile="include/apr_ring.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga53e6564eba59d7e734a0ce03cb418a42" prot="public" static="no">
        <name>APR_RING_SPLICE_AFTER</name>
        <param><defname>lep</defname></param>
        <param><defname>ep1</defname></param>
        <param><defname>epN</defname></param>
        <param><defname>link</defname></param>
        <initializer>do {			\
	<ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>((ep1), link) = (lep);				\
	<ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>((epN), link) = <ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>((lep), link);	\
	<ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>(<ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>((lep), link), link) = (epN);	\
	<ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>((lep), link) = (ep1);				\
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splice the sequence ep1..epN into the ring after element lep (..lep.. becomes ..lep..ep1..epN..) <simplesect kind="warning"><para>This doesn&apos;t work for splicing after the last element or on empty rings... see APR_RING_SPLICE_TAIL for one that does </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lep</parametername>
</parameternamelist>
<parameterdescription>
<para>Element in the ring to splice after </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep1</parametername>
</parameternamelist>
<parameterdescription>
<para>First element in the sequence to splice in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epN</parametername>
</parameternamelist>
<parameterdescription>
<para>Last element in the sequence to splice in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="245" column="9" bodyfile="include/apr_ring.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga76f9a04f932b3377073fa4e30d745564" prot="public" static="no">
        <name>APR_RING_INSERT_BEFORE</name>
        <param><defname>lep</defname></param>
        <param><defname>nep</defname></param>
        <param><defname>link</defname></param>
        <initializer><ref refid="group__apr__ring_1ga438e7369e650ee07ac98ed0731589750" kindref="member">APR_RING_SPLICE_BEFORE</ref>((lep), (nep), (nep), link)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert the element nep into the ring before element lep (..lep.. becomes ..nep..lep..) <simplesect kind="warning"><para>This doesn&apos;t work for inserting before the first element or on empty rings... see APR_RING_INSERT_HEAD for one that does </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lep</parametername>
</parameternamelist>
<parameterdescription>
<para>Element in the ring to insert before </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nep</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="261" column="9" bodyfile="include/apr_ring.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga40453637d00c853f3a212a30c1f2cb41" prot="public" static="no">
        <name>APR_RING_INSERT_AFTER</name>
        <param><defname>lep</defname></param>
        <param><defname>nep</defname></param>
        <param><defname>link</defname></param>
        <initializer><ref refid="group__apr__ring_1ga53e6564eba59d7e734a0ce03cb418a42" kindref="member">APR_RING_SPLICE_AFTER</ref>((lep), (nep), (nep), link)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert the element nep into the ring after element lep (..lep.. becomes ..lep..nep..) <simplesect kind="warning"><para>This doesn&apos;t work for inserting after the last element or on empty rings... see APR_RING_INSERT_TAIL for one that does </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lep</parametername>
</parameternamelist>
<parameterdescription>
<para>Element in the ring to insert after </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nep</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="273" column="9" bodyfile="include/apr_ring.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga592e71a7cf219fc70f4fc47c60ef4c64" prot="public" static="no">
        <name>APR_RING_SPLICE_HEAD</name>
        <param><defname>hp</defname></param>
        <param><defname>ep1</defname></param>
        <param><defname>epN</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer><ref refid="group__apr__ring_1ga53e6564eba59d7e734a0ce03cb418a42" kindref="member">APR_RING_SPLICE_AFTER</ref>(<ref refid="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" kindref="member">APR_RING_SENTINEL</ref>((hp), elem, link),	\
			     (ep1), (epN), link)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splice the sequence ep1..epN into the ring before the first element (..hp.. becomes ..hp..ep1..epN..) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep1</parametername>
</parameternamelist>
<parameterdescription>
<para>First element in the sequence to splice in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epN</parametername>
</parameternamelist>
<parameterdescription>
<para>Last element in the sequence to splice in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="286" column="9" bodyfile="include/apr_ring.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga51e02e214fb6e218f45ff23cbd1f7abc" prot="public" static="no">
        <name>APR_RING_SPLICE_TAIL</name>
        <param><defname>hp</defname></param>
        <param><defname>ep1</defname></param>
        <param><defname>epN</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer><ref refid="group__apr__ring_1ga438e7369e650ee07ac98ed0731589750" kindref="member">APR_RING_SPLICE_BEFORE</ref>(<ref refid="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" kindref="member">APR_RING_SENTINEL</ref>((hp), elem, link),	\
			     (ep1), (epN), link)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splice the sequence ep1..epN into the ring after the last element (..hp.. becomes ..ep1..epN..hp..) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep1</parametername>
</parameternamelist>
<parameterdescription>
<para>First element in the sequence to splice in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epN</parametername>
</parameternamelist>
<parameterdescription>
<para>Last element in the sequence to splice in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="299" column="9" bodyfile="include/apr_ring.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1gad59352546dc9253c0057ad43cf728a63" prot="public" static="no">
        <name>APR_RING_INSERT_HEAD</name>
        <param><defname>hp</defname></param>
        <param><defname>nep</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer><ref refid="group__apr__ring_1ga592e71a7cf219fc70f4fc47c60ef4c64" kindref="member">APR_RING_SPLICE_HEAD</ref>((hp), (nep), (nep), elem, link)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert the element nep into the ring before the first element (..hp.. becomes ..hp..nep..) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nep</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="311" column="9" bodyfile="include/apr_ring.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga235311035184125d72ce0689c9949a3e" prot="public" static="no">
        <name>APR_RING_INSERT_TAIL</name>
        <param><defname>hp</defname></param>
        <param><defname>nep</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer><ref refid="group__apr__ring_1ga51e02e214fb6e218f45ff23cbd1f7abc" kindref="member">APR_RING_SPLICE_TAIL</ref>((hp), (nep), (nep), elem, link)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert the element nep into the ring after the last element (..hp.. becomes ..nep..hp..) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nep</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="322" column="9" bodyfile="include/apr_ring.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga34ee7a0d6daa61117006bb74498ff5aa" prot="public" static="no">
        <name>APR_RING_CONCAT</name>
        <param><defname>h1</defname></param>
        <param><defname>h2</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer>do {			\
	if (!<ref refid="group__apr__ring_1ga9b64ad6eebea19f896d2aa90172b6b9a" kindref="member">APR_RING_EMPTY</ref>((h2), elem, link)) {			\
	    <ref refid="group__apr__ring_1ga438e7369e650ee07ac98ed0731589750" kindref="member">APR_RING_SPLICE_BEFORE</ref>(<ref refid="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" kindref="member">APR_RING_SENTINEL</ref>((h1), elem, link),	\
				  <ref refid="group__apr__ring_1gacacd9cfca24feb7ff754d4008422efcb" kindref="member">APR_RING_FIRST</ref>((h2)),			\
				  <ref refid="group__apr__ring_1ga8b927069ba9dc13defaf45a87267b5d3" kindref="member">APR_RING_LAST</ref>((h2)), link);		\
	    <ref refid="group__apr__ring_1ga245e1a73b162a4a68ebd54c84683729d" kindref="member">APR_RING_INIT</ref>((h2), elem, link);				\
	}								\
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Concatenate ring h2 onto the end of ring h1, leaving h2 empty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h1</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring to concatenate onto </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h2</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring to concatenate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="332" column="9" bodyfile="include/apr_ring.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga4d5aaa9b6f02f96f98f234a0a428474d" prot="public" static="no">
        <name>APR_RING_PREPEND</name>
        <param><defname>h1</defname></param>
        <param><defname>h2</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer>do {			\
	if (!<ref refid="group__apr__ring_1ga9b64ad6eebea19f896d2aa90172b6b9a" kindref="member">APR_RING_EMPTY</ref>((h2), elem, link)) {			\
	    <ref refid="group__apr__ring_1ga53e6564eba59d7e734a0ce03cb418a42" kindref="member">APR_RING_SPLICE_AFTER</ref>(<ref refid="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" kindref="member">APR_RING_SENTINEL</ref>((h1), elem, link),	\
				  <ref refid="group__apr__ring_1gacacd9cfca24feb7ff754d4008422efcb" kindref="member">APR_RING_FIRST</ref>((h2)),			\
				  <ref refid="group__apr__ring_1ga8b927069ba9dc13defaf45a87267b5d3" kindref="member">APR_RING_LAST</ref>((h2)), link);		\
	    <ref refid="group__apr__ring_1ga245e1a73b162a4a68ebd54c84683729d" kindref="member">APR_RING_INIT</ref>((h2), elem, link);				\
	}								\
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepend ring h2 onto the beginning of ring h1, leaving h2 empty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h1</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring to prepend onto </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h2</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring to prepend </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="348" column="9" bodyfile="include/apr_ring.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga1d725b0a9ea7ff88f771e37ec130c13b" prot="public" static="no">
        <name>APR_RING_UNSPLICE</name>
        <param><defname>ep1</defname></param>
        <param><defname>epN</defname></param>
        <param><defname>link</defname></param>
        <initializer>do {				\
	<ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>(<ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>((ep1), link), link) =		\
		     <ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>((epN), link);			\
	<ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>(<ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>((epN), link), link) =		\
		     <ref refid="group__apr__ring_1ga82d45623d505d59ea5619cf8f63d0ebb" kindref="member">APR_RING_PREV</ref>((ep1), link);			\
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unsplice a sequence of elements from a ring <simplesect kind="warning"><para>The unspliced sequence is left with dangling pointers at either end </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep1</parametername>
</parameternamelist>
<parameterdescription>
<para>First element in the sequence to unsplice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epN</parametername>
</parameternamelist>
<parameterdescription>
<para>Last element in the sequence to unsplice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="364" column="9" bodyfile="include/apr_ring.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1gaab4a57544bdb660ec1e306137387d9d7" prot="public" static="no">
        <name>APR_RING_REMOVE</name>
        <param><defname>ep</defname></param>
        <param><defname>link</defname></param>
        <initializer><ref refid="group__apr__ring_1ga1d725b0a9ea7ff88f771e37ec130c13b" kindref="member">APR_RING_UNSPLICE</ref>((ep), (ep), link)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a single element from a ring <simplesect kind="warning"><para>The unspliced element is left with dangling pointers at either end </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to remove </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="377" column="9" bodyfile="include/apr_ring.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga7dc7b26e72f836d27e8e0c87da14fb4a" prot="public" static="no">
        <name>APR_RING_FOREACH</name>
        <param><defname>ep</defname></param>
        <param><defname>head</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer>for (ep = <ref refid="group__apr__ring_1gacacd9cfca24feb7ff754d4008422efcb" kindref="member">APR_RING_FIRST</ref>(head);                                     \
         ep != <ref refid="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" kindref="member">APR_RING_SENTINEL</ref>(head, elem, link);                     \
         ep = <ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>(ep, link))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over a ring <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The current element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="387" column="9" bodyfile="include/apr_ring.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga9a1e91eef86d676d1622dc5b9ddd6f89" prot="public" static="no">
        <name>APR_RING_FOREACH_SAFE</name>
        <param><defname>ep1</defname></param>
        <param><defname>ep2</defname></param>
        <param><defname>head</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <initializer>for (ep1 = <ref refid="group__apr__ring_1gacacd9cfca24feb7ff754d4008422efcb" kindref="member">APR_RING_FIRST</ref>(head), ep2 = <ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>(ep1, link);    \
         ep1 != <ref refid="group__apr__ring_1ga54210090292ebafcd0a0d75d9ff1563d" kindref="member">APR_RING_SENTINEL</ref>(head, elem, link);                    \
         ep1 = ep2, ep2 = <ref refid="group__apr__ring_1gae42e4f7148719aa534bdbbc82be26a06" kindref="member">APR_RING_NEXT</ref>(ep1, link))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over a ring safe against removal of the current element <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep1</parametername>
</parameternamelist>
<parameterdescription>
<para>The current element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep2</parametername>
</parameternamelist>
<parameterdescription>
<para>Iteration cursor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="400" column="9" bodyfile="include/apr_ring.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga33c7cfbea7c688c7bd0a3d36609f318b" prot="public" static="no">
        <name>APR_RING_CHECK_ONE</name>
        <param><defname>msg</defname></param>
        <param><defname>ptr</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print a single pointer value to STDERR (This is a no-op unless APR_RING_DEBUG is defined.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptive message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer value to print </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="465" column="9" bodyfile="include/apr_ring.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga97bb4dcc313145496e6b05855f9c6e2b" prot="public" static="no">
        <name>APR_RING_CHECK</name>
        <param><defname>hp</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump all ring pointers to STDERR, starting with the head and looping all the way around the ring back to the head. Aborts if an inconsistency is found. (This is a no-op unless APR_RING_DEBUG is defined.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptive message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="476" column="9" bodyfile="include/apr_ring.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga6b0f2091527ee9c7a1511cb6f172a0a7" prot="public" static="no">
        <name>APR_RING_CHECK_CONSISTENCY</name>
        <param><defname>hp</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops around a ring and checks all the pointers for consistency. Pops an assertion if any inconsistency is found. Same idea as <ref refid="group__apr__ring_1ga97bb4dcc313145496e6b05855f9c6e2b" kindref="member">APR_RING_CHECK()</ref> except that it&apos;s silent if all is well. (This is a no-op unless APR_RING_DEBUG is defined.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hp</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the ring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="486" column="9" bodyfile="include/apr_ring.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1ga5500df0e96dea1a3258f1e92b28fea0a" prot="public" static="no">
        <name>APR_RING_CHECK_ELEM</name>
        <param><defname>ep</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump all ring pointers to STDERR, starting with the given element and looping all the way around the ring back to that element. Aborts if an inconsistency is found. (This is a no-op unless APR_RING_DEBUG is defined.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptive message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="497" column="9" bodyfile="include/apr_ring.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__ring_1gab7070ae5cf69bf16178a0e0e397c5b38" prot="public" static="no">
        <name>APR_RING_CHECK_ELEM_CONSISTENCY</name>
        <param><defname>ep</defname></param>
        <param><defname>elem</defname></param>
        <param><defname>link</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loops around a ring, starting with the given element, and checks all the pointers for consistency. Pops an assertion if any inconsistency is found. Same idea as <ref refid="group__apr__ring_1ga5500df0e96dea1a3258f1e92b28fea0a" kindref="member">APR_RING_CHECK_ELEM()</ref> except that it&apos;s silent if all is well. (This is a no-op unless APR_RING_DEBUG is defined.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>The element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the element struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the APR_RING_ENTRY in the element struct </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_ring.h" line="508" column="9" bodyfile="include/apr_ring.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A ring is a kind of doubly-linked list that can be manipulated without knowing where its head is. </para>    </detaileddescription>
  </compounddef>
</doxygen>
