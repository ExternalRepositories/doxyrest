<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pcm__misc_8c" kind="file" language="C++">
    <compoundname>pcm_misc.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">bswap.h</includes>
    <includes local="yes">pcm_local.h</includes>
    <incdepgraph>
      <node id="536">
        <label>stdlib.h</label>
      </node>
      <node id="538">
        <label>string.h</label>
      </node>
      <node id="537">
        <label>unistd.h</label>
      </node>
      <node id="540">
        <label>pcm_local.h</label>
      </node>
      <node id="535">
        <label>stdio.h</label>
      </node>
      <node id="534">
        <label>/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c</label>
        <link refid="pcm__misc_8c"/>
        <childnode refid="535" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="539">
        <label>bswap.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pcm__misc_8c_1a2ec08044fe4cd03e36fea26be7c3e2cf" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int linear_formats[4][2][2]</definition>
        <argsstring>[4][2][2]</argsstring>
        <name>linear_formats</name>
        <initializer>= {
	{ { SNDRV_PCM_FORMAT_S8, SNDRV_PCM_FORMAT_S8 },
	  { SNDRV_PCM_FORMAT_U8, SNDRV_PCM_FORMAT_U8 } },
	{ { SNDRV_PCM_FORMAT_S16_LE, SNDRV_PCM_FORMAT_S16_BE },
	  { SNDRV_PCM_FORMAT_U16_LE, SNDRV_PCM_FORMAT_U16_BE } },
	{ { SNDRV_PCM_FORMAT_S24_LE, SNDRV_PCM_FORMAT_S24_BE },
	  { SNDRV_PCM_FORMAT_U24_LE, SNDRV_PCM_FORMAT_U24_BE } },
	{ { SNDRV_PCM_FORMAT_S32_LE, SNDRV_PCM_FORMAT_S32_BE },
	  { SNDRV_PCM_FORMAT_U32_LE, SNDRV_PCM_FORMAT_U32_BE } }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="656" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcm__misc_8c_1acd3e886334e1c226b56d32a0ab461a26" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int linear24_formats[3][2][2]</definition>
        <argsstring>[3][2][2]</argsstring>
        <name>linear24_formats</name>
        <initializer>= {
	{ { SNDRV_PCM_FORMAT_S24_3LE, SNDRV_PCM_FORMAT_S24_3BE },
	  { SNDRV_PCM_FORMAT_U24_3LE, SNDRV_PCM_FORMAT_U24_3BE } },
	{ { SNDRV_PCM_FORMAT_S20_3LE, SNDRV_PCM_FORMAT_S20_3BE },
	  { SNDRV_PCM_FORMAT_U20_3LE, SNDRV_PCM_FORMAT_U20_3BE } },
	{ { SNDRV_PCM_FORMAT_S18_3LE, SNDRV_PCM_FORMAT_S18_3BE },
	  { SNDRV_PCM_FORMAT_U18_3LE, SNDRV_PCM_FORMAT_U18_3BE } },
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="667" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="667" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_c_m___helpers_1ga8b88181b11a026da55897a926d56034a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_signed</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_signed</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return sign info for a PCM sample linear format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 unsigned, 1 signed, a negative error code if format is not linear </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="35" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="35" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga8cd4e3ecc963942457e3b1b6f7661a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_unsigned</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_unsigned</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return sign info for a PCM sample linear format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 signed, 1 unsigned, a negative error code if format is not linear </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="81" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga5a52bb63323f463198dea3f3c6aca571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_linear</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_linear</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return linear info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 non linear, 1 linear </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="96" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga36ae70bef5bfd5e7ecc743f6a4d46cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_float</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_float</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return float info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 non float, 1 float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="106" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga89537d0a972fa124051f6ba1a78c4bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_little_endian</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_little_endian</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return endian info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 big endian, 1 little endian, a negative error code if endian independent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="124" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="124" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga3c0c224b8f67e73cf2447bee0110f760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_big_endian</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_big_endian</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return endian info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 little endian, 1 big endian, a negative error code if endian independent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="173" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="173" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaf950358cdbb26bab53f63f28443bd2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_cpu_endian</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_cpu_endian</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return endian info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 swapped, 1 CPU endian, a negative error code if endian independent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="188" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="188" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga8d4e07f2d68cc16f607857ed8a222a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_width</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_width</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return nominal bits per a PCM sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bits per sample, a negative error code if not applicable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="202" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="202" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaa3e0ff7560342e5af2b5c7bd2d63a307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_physical_width</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_physical_width</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return bits needed to store a PCM sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bits per sample, a negative error code if not applicable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="265" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="265" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga5953a58f024f8cf762a9e4dae6b09502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t snd_pcm_format_size</definition>
        <argsstring>(snd_pcm_format_t format, size_t samples)</argsstring>
        <name>snd_pcm_format_size</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>Return bytes needed to store a quantity of PCM sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>Samples count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bytes needed, a negative error code if not integer or unknown </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="326" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="326" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga79524557a85d7bbee12d315925e702b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int64_t</type>
        <definition>u_int64_t snd_pcm_format_silence_64</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence_64</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 64 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 64 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="390" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="390" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gafbf8a883e8b7c38b94df561e0169aef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int32_t</type>
        <definition>u_int32_t snd_pcm_format_silence_32</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence_32</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 32 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 32 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="542" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="542" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga6602d717534a0b6857f461fef1d8b37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int16_t</type>
        <definition>u_int16_t snd_pcm_format_silence_16</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence_16</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 16 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 16 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="553" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="553" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga812a6458ab7759b750d6954050c75bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int8_t</type>
        <definition>u_int8_t snd_pcm_format_silence</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 8 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 8 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="564" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="564" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga82631361cf1c1d13af207beb59cf97ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_set_silence</definition>
        <argsstring>(snd_pcm_format_t format, void *data, unsigned int samples)</argsstring>
        <name>snd_pcm_format_set_silence</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>Silence a PCM samples buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>Samples count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="577" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="577" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga5f5ab1ac13de9598cf05877e4894e0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
        <definition>snd_pcm_format_t snd_pcm_build_linear_format</definition>
        <argsstring>(int width, int pwidth, int unsignd, int big_endian)</argsstring>
        <name>snd_pcm_build_linear_format</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>unsignd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>big_endian</declname>
        </param>
        <briefdescription>
<para>Compose a PCM sample linear format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal bits per sample </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical bit width of the format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unsignd</parametername>
</parameternamelist>
<parameterdescription>
<para>Sign: 0 signed, 1 unsigned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>big_endian</parametername>
</parameternamelist>
<parameterdescription>
<para>Endian: 0 little endian, 1 big endian </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The matching format type, or <ref refid="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ab1e118ecdccf628639b5c85bc3a48999" kindref="member">SND_PCM_FORMAT_UNKNOWN</ref> if no match </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="684" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="684" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="group___plugin___s_d_k_1ga6cc0e84dc2822458b4ed163071a51ecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_parse_control_id</definition>
        <argsstring>(snd_config_t *conf, snd_ctl_elem_id_t *ctl_id, int *cardp, int *cchannelsp, int *hwctlp)</argsstring>
        <name>snd_pcm_parse_control_id</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>ctl_id</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cardp</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cchannelsp</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hwctlp</declname>
        </param>
        <briefdescription>
<para>Parse control element id from the config. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>the config tree to parse </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctl_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the resultant control element id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cardp</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the card index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cchannelsp</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the number of channels (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hwctlp</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the h/w control flag (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
This function parses the given config tree to retrieve the control element id and the card index. It&apos;s used by softvol. External PCM plugins can use this function for creating or assigining their controls.</para><para>cchannelsp and hwctlp arguments are optional. Set NULL if not necessary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" line="737" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="737" bodyend="863"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c"/>
  </compounddef>
</doxygen>
