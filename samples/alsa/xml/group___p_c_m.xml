<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___p_c_m" kind="group">
    <compoundname>PCM</compoundname>
    <title>PCM Interface</title>
    <innerfile refid="pcm_2pcm_8c">pcm.c</innerfile>
    <innerfile refid="pcm__plugin_8c">pcm_plugin.c</innerfile>
    <innerclass refid="structsnd__pcm__audio__tstamp__config__t" prot="public">snd_pcm_audio_tstamp_config_t</innerclass>
    <innerclass refid="structsnd__pcm__audio__tstamp__report__t" prot="public">snd_pcm_audio_tstamp_report_t</innerclass>
    <innerclass refid="structsnd__pcm__channel__area__t" prot="public">snd_pcm_channel_area_t</innerclass>
    <innerclass refid="unionsnd__pcm__sync__id__t" prot="public">snd_pcm_sync_id_t</innerclass>
    <innerclass refid="structsnd__pcm__chmap__t" prot="public">snd_pcm_chmap_t</innerclass>
    <innerclass refid="structsnd__pcm__chmap__query__t" prot="public">snd_pcm_chmap_query_t</innerclass>
    <innergroup refid="group___p_c_m___info">Stream Information</innergroup>
    <innergroup refid="group___p_c_m___h_w___params">Hardware Parameters</innergroup>
    <innergroup refid="group___p_c_m___s_w___params">Software Parameters</innergroup>
    <innergroup refid="group___p_c_m___access">Access Mask Functions</innergroup>
    <innergroup refid="group___p_c_m___format">Format Mask Functions</innergroup>
    <innergroup refid="group___p_c_m___sub_format">Subformat Mask Functions</innergroup>
    <innergroup refid="group___p_c_m___status">Status Functions</innergroup>
    <innergroup refid="group___p_c_m___description">Description Functions</innergroup>
    <innergroup refid="group___p_c_m___dump">Debug Functions</innergroup>
    <innergroup refid="group___p_c_m___direct">Direct Access (MMAP) Functions</innergroup>
    <innergroup refid="group___p_c_m___helpers">Helper Functions</innergroup>
    <innergroup refid="group___p_c_m___hook">Hook Extension</innergroup>
    <innergroup refid="group___p_c_m___scope">Scope Plugin Extension</innergroup>
    <innergroup refid="group___p_c_m___simple">Simple setup functions</innergroup>
    <innergroup refid="group___p_c_m___deprecated">Deprecated Functions</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___p_c_m_1gad0e95dc8a590d8f9915fec237d7a28a5" prot="public" static="no">
        <name>snd_pcm_class_t</name>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a3899ef7b0fa4a9717abe5587e9110514" prot="public">
          <name>SND_PCM_CLASS_GENERIC</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>standard device </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a223f6ffeb72c72144f4f680998fbedb3" prot="public">
          <name>SND_PCM_CLASS_MULTI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multichannel device </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a79cdb236d774a3a5e17cf4929a16936b" prot="public">
          <name>SND_PCM_CLASS_MODEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>software modem device </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a69f4d2c8aa3195c6fc140b6d4c2f25ea" prot="public">
          <name>SND_PCM_CLASS_DIGITIZER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>digitizer device </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a59360955ed5c52870d37476cc800f8de" prot="public">
          <name>SND_PCM_CLASS_LAST</name>
          <initializer>= SND_PCM_CLASS_DIGITIZER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM class </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="76" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="76" bodyend="87"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga6a164917c35e2216f6e76beff4e4d0cb" prot="public" static="no">
        <name>snd_pcm_subclass_t</name>
        <enumvalue id="group___p_c_m_1gga6a164917c35e2216f6e76beff4e4d0cba79a61939325a37b0fdfcf6e9ac0ce572" prot="public">
          <name>SND_PCM_SUBCLASS_GENERIC_MIX</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>subdevices are mixed together </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6a164917c35e2216f6e76beff4e4d0cbaafd17e33fac6f3c2b7e9bb48473b8c54" prot="public">
          <name>SND_PCM_SUBCLASS_MULTI_MIX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multichannel subdevices are mixed together </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6a164917c35e2216f6e76beff4e4d0cbac2020878b69934e7baf35333bf7c1460" prot="public">
          <name>SND_PCM_SUBCLASS_LAST</name>
          <initializer>= SND_PCM_SUBCLASS_MULTI_MIX</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM subclass </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="90" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" prot="public" static="no">
        <name>snd_pcm_stream_t</name>
        <enumvalue id="group___p_c_m_1ggac23b43ff55add78638e503b9cc892c24a57a2b920dbc34173479fc9036cfc78a1" prot="public">
          <name>SND_PCM_STREAM_PLAYBACK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Playback stream </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggac23b43ff55add78638e503b9cc892c24af07834f756b4f95cb61987f4811073c4" prot="public">
          <name>SND_PCM_STREAM_CAPTURE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture stream </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggac23b43ff55add78638e503b9cc892c24a0f3a6097ab0ecf17fb33304e713a3a44" prot="public">
          <name>SND_PCM_STREAM_LAST</name>
          <initializer>= SND_PCM_STREAM_CAPTURE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM stream (direction) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="99" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" prot="public" static="no">
        <name>snd_pcm_access_t</name>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aa90a5dea527c5ae9a53f1448beb2dee6f" prot="public">
          <name>SND_PCM_ACCESS_MMAP_INTERLEAVED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mmap access with simple interleaved channels </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aa7de225785e05dd1d538203c5ece9036e" prot="public">
          <name>SND_PCM_ACCESS_MMAP_NONINTERLEAVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mmap access with simple non interleaved channels </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aa26a4f161364cb539df4de5eeb9949121" prot="public">
          <name>SND_PCM_ACCESS_MMAP_COMPLEX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mmap access with complex placement </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aa72a970ed6e676ab0fd9f3c3d36737e0a" prot="public">
          <name>SND_PCM_ACCESS_RW_INTERLEAVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>snd_pcm_readi/snd_pcm_writei access </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aae7ab128d10c32667f396933190435071" prot="public">
          <name>SND_PCM_ACCESS_RW_NONINTERLEAVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>snd_pcm_readn/snd_pcm_writen access </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aad57e116e80d0e3362751e6e075961f2b" prot="public">
          <name>SND_PCM_ACCESS_LAST</name>
          <initializer>= SND_PCM_ACCESS_RW_NONINTERLEAVED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM access type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="108" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="108" bodyend="120"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" prot="public" static="no">
        <name>snd_pcm_format_t</name>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ab1e118ecdccf628639b5c85bc3a48999" prot="public">
          <name>SND_PCM_FORMAT_UNKNOWN</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unknown </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a5b78bf93eaed5f52cf16c582f04aa7f1" prot="public">
          <name>SND_PCM_FORMAT_S8</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 8 bit </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ad5856f97113926836a7c6651cb8864a3" prot="public">
          <name>SND_PCM_FORMAT_U8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 8 bit </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a8b66a29293c62df9d1678c609fab76c0" prot="public">
          <name>SND_PCM_FORMAT_S16_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 16 bit Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a9f6783e14d7cbb5023c86427263b0d50" prot="public">
          <name>SND_PCM_FORMAT_S16_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 16 bit Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ab2f9619da5d5062e612b2ee0929e8164" prot="public">
          <name>SND_PCM_FORMAT_U16_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 16 bit Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aecc04aa997503c030a47fe5798514180" prot="public">
          <name>SND_PCM_FORMAT_U16_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 16 bit Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a04b3c3b9ad0106c9619a28b753d8fd18" prot="public">
          <name>SND_PCM_FORMAT_S24_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24 bit Little Endian using low three bytes in 32-bit word </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a226d2f6a6bc53a6f75786ca8fad3fc65" prot="public">
          <name>SND_PCM_FORMAT_S24_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24 bit Big Endian using low three bytes in 32-bit word </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a33b2fb89235eebda4e6820d4a80a4c29" prot="public">
          <name>SND_PCM_FORMAT_U24_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24 bit Little Endian using low three bytes in 32-bit word </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a2c2effcf940fdee8eddf43a62360f7c4" prot="public">
          <name>SND_PCM_FORMAT_U24_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24 bit Big Endian using low three bytes in 32-bit word </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aa99dcea38d9cd8ea3b8a6e9ea85bcc52" prot="public">
          <name>SND_PCM_FORMAT_S32_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 32 bit Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ad30a0d4bc893eba11d08d72b3916ca2a" prot="public">
          <name>SND_PCM_FORMAT_S32_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 32 bit Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a4c9ee7d82e322009e85f7cd739bbb692" prot="public">
          <name>SND_PCM_FORMAT_U32_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 32 bit Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ac4d69a20b22df53a63ad8589bbdf6f93" prot="public">
          <name>SND_PCM_FORMAT_U32_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 32 bit Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a083f32474a84d344e0da496470085c8f" prot="public">
          <name>SND_PCM_FORMAT_FLOAT_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 32 bit Little Endian, Range -1.0 to 1.0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ab24eac408b0d2ae6b5f68ed3a7cd2d75" prot="public">
          <name>SND_PCM_FORMAT_FLOAT_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 32 bit Big Endian, Range -1.0 to 1.0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a8e6d82461abbb8be043f8addd23f76c0" prot="public">
          <name>SND_PCM_FORMAT_FLOAT64_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 64 bit Little Endian, Range -1.0 to 1.0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a9215cd0ab46e6db8668d8bfbb3cd76a6" prot="public">
          <name>SND_PCM_FORMAT_FLOAT64_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 64 bit Big Endian, Range -1.0 to 1.0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a4a51dcbdb981d0357447115d7ccf3b1f" prot="public">
          <name>SND_PCM_FORMAT_IEC958_SUBFRAME_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEC-958 Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a347bac4a7d9ac64e3019a2f3238e09fb" prot="public">
          <name>SND_PCM_FORMAT_IEC958_SUBFRAME_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEC-958 Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a1f71fdf666f5dea8b84d627ba84a9ea5" prot="public">
          <name>SND_PCM_FORMAT_MU_LAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mu-Law </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a9d1017ad6b2f73e97f20cf933a5d8a7e" prot="public">
          <name>SND_PCM_FORMAT_A_LAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A-Law </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a984ec5c790504560bfc7564cfeaddc23" prot="public">
          <name>SND_PCM_FORMAT_IMA_ADPCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ima-ADPCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a3705d4bd3266f3a68c276da9e7a65660" prot="public">
          <name>SND_PCM_FORMAT_MPEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MPEG </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a32ec1ed1e6bc5eafff1547e1401f679c" prot="public">
          <name>SND_PCM_FORMAT_GSM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GSM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a770a94546bff2f0d07e32dd22c5f9a2c" prot="public">
          <name>SND_PCM_FORMAT_SPECIAL</name>
          <initializer>= 31</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Special </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a1fd8c22f3dd45fc1b8e41b0b5e6107ce" prot="public">
          <name>SND_PCM_FORMAT_S24_3LE</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a531ede921f12bd96e02499f962fdb7ea" prot="public">
          <name>SND_PCM_FORMAT_S24_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a76ef58eb516389000bdc678ca69515c3" prot="public">
          <name>SND_PCM_FORMAT_U24_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a26318cc44ae67775ccedc1f5ba07d925" prot="public">
          <name>SND_PCM_FORMAT_U24_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a8f23da6a6564831a09f079f4d0e7fd6c" prot="public">
          <name>SND_PCM_FORMAT_S20_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 20bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a178dd8e9b92a0dbe80ae837979720fa7" prot="public">
          <name>SND_PCM_FORMAT_S20_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 20bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a15eb6dc96e7940b06b2b40fd483073a3" prot="public">
          <name>SND_PCM_FORMAT_U20_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 20bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a8d4e75049c83e0b26493d4d149de5b22" prot="public">
          <name>SND_PCM_FORMAT_U20_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 20bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a89ba6879c39fec5ee33f2b760ebd7053" prot="public">
          <name>SND_PCM_FORMAT_S18_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 18bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ad49193efd29a9f7085ddcd08e3b33eba" prot="public">
          <name>SND_PCM_FORMAT_S18_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 18bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a3ab354cc702a7b9d651aec726bb8a68c" prot="public">
          <name>SND_PCM_FORMAT_U18_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 18bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a0bab067dee022bd684b1015762a44663" prot="public">
          <name>SND_PCM_FORMAT_U18_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 18bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aad44c7d69d3f1c0f6031a41b8b74597b" prot="public">
          <name>SND_PCM_FORMAT_G723_24</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aebf3d46180931d31df789a70a49a342d" prot="public">
          <name>SND_PCM_FORMAT_G723_24_1B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ada75abbb2f69dabb8dd9051d3514de09" prot="public">
          <name>SND_PCM_FORMAT_G723_40</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a325c1f94052bfdcaf556c74157928ca6" prot="public">
          <name>SND_PCM_FORMAT_G723_40_1B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a4d1cfd6fcfd493bc6fe7bf6acd9168a0" prot="public">
          <name>SND_PCM_FORMAT_DSD_U8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a85bf2f1d7578f6e5395b2773e58d0d28" prot="public">
          <name>SND_PCM_FORMAT_DSD_U16_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a56ad301fcb8cf5b44fda3818e078b91b" prot="public">
          <name>SND_PCM_FORMAT_DSD_U32_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a350b70a24e88f75d27e57343779fc386" prot="public">
          <name>SND_PCM_FORMAT_DSD_U16_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a2fdbe11656020f7ab8c78fafcf85d23a" prot="public">
          <name>SND_PCM_FORMAT_DSD_U32_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ac6bb71e1f2d74ac0ddfbfde91fccbbed" prot="public">
          <name>SND_PCM_FORMAT_LAST</name>
          <initializer>= SND_PCM_FORMAT_DSD_U32_BE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aac4470b6be81c22af0cfe528bee4a474" prot="public">
          <name>SND_PCM_FORMAT_S16</name>
          <initializer>= SND_PCM_FORMAT_S16_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 16 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a032b33ad0fe643a3177be26148f026f1" prot="public">
          <name>SND_PCM_FORMAT_U16</name>
          <initializer>= SND_PCM_FORMAT_U16_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 16 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ad2eb0073f6d7ba800695c088b32956a5" prot="public">
          <name>SND_PCM_FORMAT_S24</name>
          <initializer>= SND_PCM_FORMAT_S24_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a036c86abc5151b9a1f19476d34120994" prot="public">
          <name>SND_PCM_FORMAT_U24</name>
          <initializer>= SND_PCM_FORMAT_U24_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8abccf973f2b6eba3481949a7b5b04f4ab" prot="public">
          <name>SND_PCM_FORMAT_S32</name>
          <initializer>= SND_PCM_FORMAT_S32_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 32 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8abbdd76fc846d3a68c19727a44bd38336" prot="public">
          <name>SND_PCM_FORMAT_U32</name>
          <initializer>= SND_PCM_FORMAT_U32_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 32 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a7d9fd83c6ff5be7a9cde4b0673b64bf0" prot="public">
          <name>SND_PCM_FORMAT_FLOAT</name>
          <initializer>= SND_PCM_FORMAT_FLOAT_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 32 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a0ecea6572fd04ef25ae24cde617eaa9a" prot="public">
          <name>SND_PCM_FORMAT_FLOAT64</name>
          <initializer>= SND_PCM_FORMAT_FLOAT64_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 64 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a7ecefcb13f1fbb3ffb24f9b6582d53cc" prot="public">
          <name>SND_PCM_FORMAT_IEC958_SUBFRAME</name>
          <initializer>= SND_PCM_FORMAT_IEC958_SUBFRAME_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEC-958 CPU Endian </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM sample format </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="123" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="123" bodyend="263"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" prot="public" static="no">
        <name>snd_pcm_subformat_t</name>
        <enumvalue id="group___p_c_m_1gga1e5fe73a6bdf881e2f91921d5e5327c7a09a538c9147dae5bb19df88198f0ebb8" prot="public">
          <name>SND_PCM_SUBFORMAT_STD</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Standard </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga1e5fe73a6bdf881e2f91921d5e5327c7acfd8b7903cb1073399a86b6d85ea7aef" prot="public">
          <name>SND_PCM_SUBFORMAT_LAST</name>
          <initializer>= SND_PCM_SUBFORMAT_STD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM sample subformat </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="266" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" prot="public" static="no">
        <name>snd_pcm_state_t</name>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a56cf8033b50561b57437232e243f3007" prot="public">
          <name>SND_PCM_STATE_OPEN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Open </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a58d9a0501aa1b2bd2607e1084c335672" prot="public">
          <name>SND_PCM_STATE_SETUP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Setup installed </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" prot="public">
          <name>SND_PCM_STATE_PREPARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ready to start </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" prot="public">
          <name>SND_PCM_STATE_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Running </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860ab63b5b90201110cd586b686355fd5d83" prot="public">
          <name>SND_PCM_STATE_XRUN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stopped: underrun (playback) or overrun (capture) detected </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f88c2a4c8eedb5c91f3b6cb4879cfe" prot="public">
          <name>SND_PCM_STATE_DRAINING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Draining: running (playback) or stopped (capture) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a9fa0c5b43e5c924f87b50e22878a8952" prot="public">
          <name>SND_PCM_STATE_PAUSED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Paused </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a79a05b6b619f88e153d50d9daf2e84bf" prot="public">
          <name>SND_PCM_STATE_SUSPENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hardware is suspended </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860aa0cbad634a40383eed6059d1b49c215a" prot="public">
          <name>SND_PCM_STATE_DISCONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hardware is disconnected </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a4ddd9705bc92c46869d2af8b0335688e" prot="public">
          <name>SND_PCM_STATE_LAST</name>
          <initializer>= SND_PCM_STATE_DISCONNECTED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="273" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="273" bodyend="293"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga0eae9150f4f207ed05cb629cc3a3673f" prot="public" static="no">
        <name>snd_pcm_start_t</name>
        <enumvalue id="group___p_c_m_1gga0eae9150f4f207ed05cb629cc3a3673fa1784d28a1a0b6d0dc9726e8093fef095" prot="public">
          <name>SND_PCM_START_DATA</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Automatic start on data read/write </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga0eae9150f4f207ed05cb629cc3a3673fa3f7514d50731fbec3bf3963f8f50e377" prot="public">
          <name>SND_PCM_START_EXPLICIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Explicit start </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga0eae9150f4f207ed05cb629cc3a3673fa78da8ffe8eae323c6e05f1fdaa8b1496" prot="public">
          <name>SND_PCM_START_LAST</name>
          <initializer>= SND_PCM_START_EXPLICIT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM start mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="296" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="296" bodyend="302"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga67c10983b5cadd8b3eb3163489655784" prot="public" static="no">
        <name>snd_pcm_xrun_t</name>
        <enumvalue id="group___p_c_m_1gga67c10983b5cadd8b3eb3163489655784a2041251f57b2d807a87dbb33de4a0299" prot="public">
          <name>SND_PCM_XRUN_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Xrun detection disabled </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga67c10983b5cadd8b3eb3163489655784a79be5aacb29e5eb3cea538eb7a24c57c" prot="public">
          <name>SND_PCM_XRUN_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop on xrun detection </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga67c10983b5cadd8b3eb3163489655784a9db770a846a51d1ee5e7743eb2375547" prot="public">
          <name>SND_PCM_XRUN_LAST</name>
          <initializer>= SND_PCM_XRUN_STOP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM xrun mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="305" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="305" bodyend="311"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga695a9755880cf886c13d07938f92ea77" prot="public" static="no">
        <name>snd_pcm_tstamp_t</name>
        <enumvalue id="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77af49a1c378583854b22ed6f6490f3b1ee" prot="public">
          <name>SND_PCM_TSTAMP_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No timestamp </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77ac62f4ba2b203d59b8f11074fb12788ae" prot="public">
          <name>SND_PCM_TSTAMP_ENABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Update timestamp at every hardware position update </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77ab09196ab367636c4d365b5b6bcd391d8" prot="public">
          <name>SND_PCM_TSTAMP_MMAP</name>
          <initializer>= SND_PCM_TSTAMP_ENABLE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Equivalent with <ref refid="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77ac62f4ba2b203d59b8f11074fb12788ae" kindref="member">SND_PCM_TSTAMP_ENABLE</ref>, just for compatibility with older versions </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77a0cfbb1f2b6cbd10d81beccdf6be8ae9c" prot="public">
          <name>SND_PCM_TSTAMP_LAST</name>
          <initializer>= SND_PCM_TSTAMP_ENABLE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM timestamp mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="314" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="314" bodyend="324"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c" prot="public" static="no">
        <name>snd_pcm_tstamp_type_t</name>
        <enumvalue id="group___p_c_m_1gga6e7869809e23ed1a3595e94fbd9a275ca363906e727cdee56da82cab964ac3ad9" prot="public">
          <name>SND_PCM_TSTAMP_TYPE_GETTIMEOFDAY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>gettimeofday equivalent </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6e7869809e23ed1a3595e94fbd9a275ca649eaa23a8ba59ef31b7cb1582a9d2b2" prot="public">
          <name>SND_PCM_TSTAMP_TYPE_MONOTONIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>posix_clock_monotonic equivalent </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6e7869809e23ed1a3595e94fbd9a275caaf1a88d034848bf2154be94ace1f8cef" prot="public">
          <name>SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>monotonic_raw (no NTP) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6e7869809e23ed1a3595e94fbd9a275ca339d5d7a1338cc436f4d0cb55ee366bc" prot="public">
          <name>SND_PCM_TSTAMP_TYPE_LAST</name>
          <initializer>= SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="326" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="326" bodyend="331"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga060d5b81f2fc8efcc35ff3e1de6e9fa4" prot="public" static="no">
        <name>_snd_pcm_type</name>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a09891cdb0b9282c37c41941b922b12c4" prot="public">
          <name>SND_PCM_TYPE_HW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Kernel level PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a2e332e4a85ab27030c8504a2becc02ee" prot="public">
          <name>SND_PCM_TYPE_HOOKS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hooked PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a568ddf1cfbafe64782e3073b235ff5f3" prot="public">
          <name>SND_PCM_TYPE_MULTI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>One or more linked PCM with exclusive access to selected channels </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a583a91928c037820337cd8915cd85e02" prot="public">
          <name>SND_PCM_TYPE_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>File writing plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a1fd5236858488b6bb1c565ae83ba451d" prot="public">
          <name>SND_PCM_TYPE_NULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Null endpoint PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a7af39420542c41f72a62551b2ae8db6d" prot="public">
          <name>SND_PCM_TYPE_SHM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shared memory client PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a3b07a18a1c2cadfc4e2eec2d62aef57e" prot="public">
          <name>SND_PCM_TYPE_INET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>INET client PCM (not yet implemented) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af09844304be19ee3a81ba5e2165e00bc" prot="public">
          <name>SND_PCM_TYPE_COPY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Copying plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a3a89f56e7151dba7ba93e392fe709222" prot="public">
          <name>SND_PCM_TYPE_LINEAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Linear format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4aaefed6aee6ad9570fa3fdd5943702e43" prot="public">
          <name>SND_PCM_TYPE_ALAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A-Law format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a225a22f28b83348c81b9962b53f68419" prot="public">
          <name>SND_PCM_TYPE_MULAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mu-Law format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a8b358976321af44871bfd4f5743eb7f0" prot="public">
          <name>SND_PCM_TYPE_ADPCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IMA-ADPCM format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4ac551ab5a7b8c32d4a79a9f605287c4b0" prot="public">
          <name>SND_PCM_TYPE_RATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Rate conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a25b8c982e260c67fdf3da22a7d68bbb0" prot="public">
          <name>SND_PCM_TYPE_ROUTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Attenuated static route PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af03892219cb4ca4f07025b7a67d3890e" prot="public">
          <name>SND_PCM_TYPE_PLUG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Format adjusted PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a5f90c13d40f32cdbaa24304f1f4aa260" prot="public">
          <name>SND_PCM_TYPE_SHARE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sharing PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" prot="public">
          <name>SND_PCM_TYPE_METER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Meter plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a9d46de594d5885faa0fc4c3075eade76" prot="public">
          <name>SND_PCM_TYPE_MIX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mixing PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4ac48d9a315b2094989b303b62939f4d12" prot="public">
          <name>SND_PCM_TYPE_DROUTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Attenuated dynamic route PCM (not yet implemented) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a819e90fe76ad9b1f8615cdaa76d47606" prot="public">
          <name>SND_PCM_TYPE_LBSERVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Loopback server plugin (not yet implemented) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af99ee7d59e1195c15440b7688e36b4e2" prot="public">
          <name>SND_PCM_TYPE_LINEAR_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Linear Integer &lt;-&gt; Linear Float format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af3096430cd38726e8dd3751c611af13e" prot="public">
          <name>SND_PCM_TYPE_LADSPA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LADSPA integration plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a1345bfdf8c4052ec4eaea99ddca5b25e" prot="public">
          <name>SND_PCM_TYPE_DMIX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct Mixing plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a3c059ea48c0ecb784421997aa302ff44" prot="public">
          <name>SND_PCM_TYPE_JACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Jack Audio Connection Kit plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a4fd7bc5c326b81d47841dc3133c6a154" prot="public">
          <name>SND_PCM_TYPE_DSNOOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct Snooping plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a02bca0b5efdbdfedb0983dacac599977" prot="public">
          <name>SND_PCM_TYPE_DSHARE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct Sharing plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4aa94a5d305b7803cf7ccda2ca0099a954" prot="public">
          <name>SND_PCM_TYPE_IEC958</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEC958 subframe plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a80dcbde2dd52a423f8c5b055aacaa17d" prot="public">
          <name>SND_PCM_TYPE_SOFTVOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Soft volume plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4ad4b0a23cef67fe330cce313c4f9e242a" prot="public">
          <name>SND_PCM_TYPE_IOPLUG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External I/O plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a876553cf6a0650a8adcb17c3e768a8da" prot="public">
          <name>SND_PCM_TYPE_EXTPLUG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External filter plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4aa426bf738261ee3cd1ca3a25d8cbed12" prot="public">
          <name>SND_PCM_TYPE_MMAP_EMUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mmap-emulation plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af7d38f0138e1ebfdf44e83a852b93c27" prot="public">
          <name>SND_PCM_TYPE_LAST</name>
          <initializer>= SND_PCM_TYPE_MMAP_EMUL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="377" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="377" bodyend="442"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1gad77f16d07431203bacc8694d28814506" prot="public" static="no">
        <name>snd_pcm_chmap_type</name>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a0d5c1dab935398488b798934515f1fba" prot="public">
          <name>SND_CHMAP_TYPE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>unspecified channel position </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a223cda2f0c432fc4706089304b550e31" prot="public">
          <name>SND_CHMAP_TYPE_FIXED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fixed channel position </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a4c6c131c3ec7eabf1073244c9765a3f7" prot="public">
          <name>SND_CHMAP_TYPE_VAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>freely swappable channel position </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a7f52f1c242f67d876d2bc920aba932b7" prot="public">
          <name>SND_CHMAP_TYPE_PAIRED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>pair-wise swappable channel position </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a19c6886e5e3b457e1a6f055f124f0fe3" prot="public">
          <name>SND_CHMAP_TYPE_LAST</name>
          <initializer>= SND_CHMAP_TYPE_PAIRED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>last entry </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>channel map list type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="529" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="529" bodyend="535"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga07f09c302588b9758946fedf97772975" prot="public" static="no">
        <name>snd_pcm_chmap_position</name>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a5013bd25392cde7881a00bdb4ab030ee" prot="public">
          <name>SND_CHMAP_UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>unspecified </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a757ea8c2af5fcce95adc50d1faf12956" prot="public">
          <name>SND_CHMAP_NA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>N/A, silent </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a57f7b8aa28a96384e75d6a75c7f2728c" prot="public">
          <name>SND_CHMAP_MONO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mono stream </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a583e5b3018a572266dff31ceb647173d" prot="public">
          <name>SND_CHMAP_FL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a1199db6603bfa8756b109720d6f47b88" prot="public">
          <name>SND_CHMAP_FR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975af55c7cf1772be450187b9c733e5a4601" prot="public">
          <name>SND_CHMAP_RL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a2de6b761ffe69645bdc84dcc154ca704" prot="public">
          <name>SND_CHMAP_RR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a1b986f167d0af5a2993688f0dc4f7ca7" prot="public">
          <name>SND_CHMAP_FC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a2e02fc34fc3156b9b651ddafe9430e76" prot="public">
          <name>SND_CHMAP_LFE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LFE </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975abef51a1484c1b62ba57abdbf4c319018" prot="public">
          <name>SND_CHMAP_SL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>side left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a99a126ad5674edde88e274247cdc77b0" prot="public">
          <name>SND_CHMAP_SR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>side right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975ab826e0b6dc51913bed17b9c9cd501b8b" prot="public">
          <name>SND_CHMAP_RC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a899724c4ba10d58f489aa95b1be85707" prot="public">
          <name>SND_CHMAP_FLC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front left center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a715eee05d56adb21c32f04a2dff32f41" prot="public">
          <name>SND_CHMAP_FRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front right center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a792ec89e7ed77e517fca9a042030cf91" prot="public">
          <name>SND_CHMAP_RLC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear left center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a01bb8ab068f1ad7ea82201fda13e7351" prot="public">
          <name>SND_CHMAP_RRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear right center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a0aba5e9499f8c439d7af5aba4eea7013" prot="public">
          <name>SND_CHMAP_FLW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front left wide </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a866fd0a5bdacb87f672c06b19c95e3e6" prot="public">
          <name>SND_CHMAP_FRW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front right wide </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a0ebb60cbf70f6bdf44f23ca53f27a48e" prot="public">
          <name>SND_CHMAP_FLH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front left high </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975aa6fc16c41ed3c77d03d5338b71767dd5" prot="public">
          <name>SND_CHMAP_FCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front center high </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975aedc57856e5d15e089ca997bb2517e558" prot="public">
          <name>SND_CHMAP_FRH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front right high </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975af92f549344923b13b3f988a8bd411248" prot="public">
          <name>SND_CHMAP_TC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975ab408982aed624e7895a88a70d3cad9ce" prot="public">
          <name>SND_CHMAP_TFL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975aac94c3e49e00cf6ddc8277be9211af8a" prot="public">
          <name>SND_CHMAP_TFR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a8afc5e5e7278cd11e275c353f7debb76" prot="public">
          <name>SND_CHMAP_TFC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a9801a726d1ef900db691fb3ee766c15c" prot="public">
          <name>SND_CHMAP_TRL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top rear left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a8f2b99c9f99b964305e7b20a24205845" prot="public">
          <name>SND_CHMAP_TRR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top rear right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975aa38f97720df84f0d0a729a2977a7e96f" prot="public">
          <name>SND_CHMAP_TRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top rear center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a056a6a819e4f86531c2f72f2cca30a2f" prot="public">
          <name>SND_CHMAP_TFLC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front left center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a1901ba205094fa4d78ae1b6ccba2a0b7" prot="public">
          <name>SND_CHMAP_TFRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front right center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a37e4efa8f78e28245172e609b3e2edb1" prot="public">
          <name>SND_CHMAP_TSL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top side left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a002352cd72d1a7bb12a371c0a700368e" prot="public">
          <name>SND_CHMAP_TSR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top side right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a98412e4b242d63dd0f6543d7979f65d2" prot="public">
          <name>SND_CHMAP_LLFE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>left LFE </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a5a90ba518606bd795133b7464e297037" prot="public">
          <name>SND_CHMAP_RLFE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>right LFE </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a6bdb9ff785f20a01942c51f5306f1b7a" prot="public">
          <name>SND_CHMAP_BC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>bottom center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a64d185c840a6c5a85b373c7b4c24a6ac" prot="public">
          <name>SND_CHMAP_BLC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>bottom left center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975ae8657844c743e6303622c8a5db01f9fc" prot="public">
          <name>SND_CHMAP_BRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>bottom right center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a3754a57ceb4570b10f68d5ac8698a9f6" prot="public">
          <name>SND_CHMAP_LAST</name>
          <initializer>= SND_CHMAP_BRC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>channel positions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="538" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="538" bodyend="577"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" prot="public" static="no">
        <type>struct _snd_pcm_info</type>
        <definition>typedef struct _snd_pcm_info snd_pcm_info_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM generic info container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" prot="public" static="no">
        <type>struct _snd_pcm_hw_params</type>
        <definition>typedef struct _snd_pcm_hw_params snd_pcm_hw_params_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_hw_params_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM hardware configuration space container</para><para>snd_pcm_hw_params_t is an opaque structure which contains a set of possible PCM hardware configurations. For example, a given instance might include a range of buffer sizes, a range of period sizes, and a set of several sample formats. Some subset of all possible combinations these sets may be valid, but not necessarily any combination will be valid.</para><para>When a parameter is set or restricted using a snd_pcm_hw_params_set* function, all of the other ranges will be updated to exclude as many impossible configurations as possible. Attempting to set a parameter outside of its acceptable range will result in the function failing and an error code being returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" prot="public" static="no">
        <type>struct _snd_pcm_sw_params</type>
        <definition>typedef struct _snd_pcm_sw_params snd_pcm_sw_params_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_sw_params_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM software configuration container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" prot="public" static="no">
        <type>struct _snd_pcm_status</type>
        <definition>typedef struct _snd_pcm_status snd_pcm_status_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_status_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM status container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" prot="public" static="no">
        <type>struct _snd_pcm_access_mask</type>
        <definition>typedef struct _snd_pcm_access_mask snd_pcm_access_mask_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_access_mask_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM access types mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" prot="public" static="no">
        <type>struct _snd_pcm_format_mask</type>
        <definition>typedef struct _snd_pcm_format_mask snd_pcm_format_mask_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_format_mask_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM formats mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga891b054202089747199bc3348b9d9630" prot="public" static="no">
        <type>struct _snd_pcm_subformat_mask</type>
        <definition>typedef struct _snd_pcm_subformat_mask snd_pcm_subformat_mask_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_subformat_mask_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM subformats mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long snd_pcm_uframes_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_uframes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unsigned frames quantity </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="354" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" prot="public" static="no">
        <type>long</type>
        <definition>typedef long snd_pcm_sframes_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_sframes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signed frames quantity </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="356" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" prot="public" static="no">
        <type>struct _snd_pcm</type>
        <definition>typedef struct _snd_pcm snd_pcm_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="356" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1gaca6314f46f54a0b62536c403bbb62601" prot="public" static="no">
        <type>enum <ref refid="group___p_c_m_1ga060d5b81f2fc8efcc35ff3e1de6e9fa4" kindref="member">_snd_pcm_type</ref></type>
        <definition>typedef enum _snd_pcm_type snd_pcm_type_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="356" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" prot="public" static="no">
        <type>struct _snd_pcm_scope</type>
        <definition>typedef struct _snd_pcm_scope snd_pcm_scope_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_scope_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> scope handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="356" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="468" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_c_m_1ga8340c7dc0ac37f37afe5e7c21d6c528b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_open</definition>
        <argsstring>(snd_pcm_t **pcm, const char *name, snd_pcm_stream_t stream, int mode)</argsstring>
        <name>snd_pcm_open</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> **</type>
          <declname>pcm</declname>
          <defname>pcmp</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Opens a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII identifier of the PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Wanted stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Open mode (see <ref refid="group___p_c_m_1ga6bd90de1d1527b5804090dcce51079ad" kindref="member">SND_PCM_NONBLOCK</ref>, <ref refid="group___p_c_m_1ga9b22351abf6c85ced128e2088f6f6a5c" kindref="member">SND_PCM_ASYNC</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="470" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2517" bodyend="2530"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga88164d313d8ff9dc33c94815869cb677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_open_lconf</definition>
        <argsstring>(snd_pcm_t **pcm, const char *name, snd_pcm_stream_t stream, int mode, snd_config_t *lconf)</argsstring>
        <name>snd_pcm_open_lconf</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> **</type>
          <declname>pcm</declname>
          <defname>pcmp</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>lconf</declname>
        </param>
        <briefdescription>
<para>Opens a PCM using local configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII identifier of the PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Wanted stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Open mode (see <ref refid="group___p_c_m_1ga6bd90de1d1527b5804090dcce51079ad" kindref="member">SND_PCM_NONBLOCK</ref>, <ref refid="group___p_c_m_1ga9b22351abf6c85ced128e2088f6f6a5c" kindref="member">SND_PCM_ASYNC</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lconf</parametername>
</parameternamelist>
<parameterdescription>
<para>Local configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="472" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2541" bodyend="2547"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga189a69e31cec0aefa8c124764e99e0bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_open_fallback</definition>
        <argsstring>(snd_pcm_t **pcm, snd_config_t *root, const char *name, const char *orig_name, snd_pcm_stream_t stream, int mode)</argsstring>
        <name>snd_pcm_open_fallback</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> **</type>
          <declname>pcm</declname>
          <defname>pcmp</defname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>orig_name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Opens a fallback PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration root </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII identifier of the PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orig_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The original ASCII name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Wanted stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Open mode (see <ref refid="group___p_c_m_1ga6bd90de1d1527b5804090dcce51079ad" kindref="member">SND_PCM_NONBLOCK</ref>, <ref refid="group___p_c_m_1ga9b22351abf6c85ced128e2088f6f6a5c" kindref="member">SND_PCM_ASYNC</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="475" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2559" bodyend="2571"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga042aba7262a4cbb4d444b6fc08cb7124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_close</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_close</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>close PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Closes the specified PCM handle and frees all associated resources. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="479" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="724" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga5031edc0422df8db1f70af056a12dd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_name</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_name</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>get identifier of PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii identifier of PCM handle</para></simplesect>
Returns the ASCII identifier of given PCM handle. It&apos;s the same identifier specified in <ref refid="group___p_c_m_1ga8340c7dc0ac37f37afe5e7c21d6c528b" kindref="member">snd_pcm_open()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="480" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="684" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gaa7cf89c3f83d83aaa0248055a783b632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gaca6314f46f54a0b62536c403bbb62601" kindref="member">snd_pcm_type_t</ref></type>
        <definition>snd_pcm_type_t snd_pcm_type</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_type</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>get type of PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>type of PCM handle</para></simplesect>
Returns the type <ref refid="group___p_c_m_1gaca6314f46f54a0b62536c403bbb62601" kindref="member">snd_pcm_type_t</ref> of given PCM handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="481" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="697" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga8eea4a021a114ecc3e8f6d80901faf46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
        <definition>snd_pcm_stream_t snd_pcm_stream</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_stream</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>get stream for a PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>stream of PCM handle</para></simplesect>
Returns the type <ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref> of given PCM handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="482" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="710" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gac7f4cdb1c930b8d343714f60afa02fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_poll_descriptors_count</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_poll_descriptors_count</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>get count of poll descriptors for PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of poll descriptors</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="483" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1591" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga742e8705f6992fd0e36efc868e574f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_poll_descriptors</definition>
        <argsstring>(snd_pcm_t *pcm, struct pollfd *pfds, unsigned int space)</argsstring>
        <name>snd_pcm_poll_descriptors</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>struct pollfd *</type>
          <declname>pfds</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>get poll descriptors </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfds</parametername>
</parameternamelist>
<parameterdescription>
<para>array of poll descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>space</parametername>
</parameternamelist>
<parameterdescription>
<para>space in the poll descriptor array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of filled descriptors</para></simplesect>
This function fills the given poll descriptor structs for the specified PCM handle. The poll desctiptor array should have the size returned by <ref refid="group___p_c_m_1gac7f4cdb1c930b8d343714f60afa02fc4" kindref="member">::snd_pcm_poll_descriptors_count()</ref> function.</para><para>The result is intended for direct use with the poll() syscall.</para><para>For reading the returned events of poll descriptor after poll() system call, use <ref refid="group___p_c_m_1ga7e561f305702c6f52dab49b6c84f7df7" kindref="member">::snd_pcm_poll_descriptors_revents()</ref> function. The field values in pollfd structs may be bogus regarding the stream direction from the application perspective (POLLIN might not imply read direction and POLLOUT might not imply write), but the <ref refid="group___p_c_m_1ga7e561f305702c6f52dab49b6c84f7df7" kindref="member">::snd_pcm_poll_descriptors_revents()</ref> function does the right &quot;demangling&quot;.</para><para>You can use output from this function as arguments for the select() syscall, too. Do not forget to translate POLLIN and POLLOUT events to corresponding FD_SET arrays and demangle events using <ref refid="group___p_c_m_1ga7e561f305702c6f52dab49b6c84f7df7" kindref="member">::snd_pcm_poll_descriptors_revents()</ref> .</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="484" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1649" bodyend="1658"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga7e561f305702c6f52dab49b6c84f7df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_poll_descriptors_revents</definition>
        <argsstring>(snd_pcm_t *pcm, struct pollfd *pfds, unsigned int nfds, unsigned short *revents)</argsstring>
        <name>snd_pcm_poll_descriptors_revents</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>struct pollfd *</type>
          <declname>pfds</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nfds</declname>
        </param>
        <param>
          <type>unsigned short *</type>
          <declname>revents</declname>
        </param>
        <briefdescription>
<para>get returned events from poll descriptors </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfds</parametername>
</parameternamelist>
<parameterdescription>
<para>array of poll descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nfds</parametername>
</parameternamelist>
<parameterdescription>
<para>count of poll descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>revents</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the returned (single) event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if success, otherwise a negative error code</para></simplesect>
This function does &quot;demangling&quot; of the revents mask returned from the poll() syscall to correct semantics (POLLIN = read, POLLOUT = write).</para><para>Note: The null event also exists. Even if poll() or select() syscall returned that some events are waiting, this function might return empty set of events. In this case, application should do next event waiting using poll() or select().</para><para>Note: Even if multiple poll descriptors are used (i.e. pfds &gt; 1), this function returns only a single event.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="485" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1684" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga8d9ed4a62c17402de0389fd31fc7dc1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_nonblock</definition>
        <argsstring>(snd_pcm_t *pcm, int nonblock)</argsstring>
        <name>snd_pcm_nonblock</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonblock</declname>
        </param>
        <briefdescription>
<para>set nonblock mode </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonblock</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = block, 1 = nonblock mode, 2 = abort </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="486" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="757" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gacbee826525609f07c5245b1d7d9db9ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__inline__ int</type>
        <definition>static __inline__ int snd_pcm_abort</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_abort</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="487" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="487" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga5a0c0da6d0d35a3ac9f6a97567ac3b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_async_add_pcm_handler</definition>
        <argsstring>(snd_async_handler_t **handler, snd_pcm_t *pcm, snd_async_callback_t callback, void *private_data)</argsstring>
        <name>snd_async_add_pcm_handler</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> **</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___global_1gaf8937eadd968df14b64e54f49c29821c" kindref="member">snd_async_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>private_data</declname>
        </param>
        <briefdescription>
<para>Add an async handler for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned handler handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback private data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code on failure</para></simplesect>
The asynchronous callback is called when period boundary elapses. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="488" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2289" bodyend="2312"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gace4920d5943820c395dab8d9cd4fed0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
        <definition>snd_pcm_t* snd_async_handler_get_pcm</definition>
        <argsstring>(snd_async_handler_t *handler)</argsstring>
        <name>snd_async_handler_get_pcm</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Return PCM handle related to an async handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Async handler handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PCM handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="490" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2319" bodyend="2326"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gadd9467ca75884292234e4986b329a17f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_info</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_info_t *info)</argsstring>
        <name>snd_pcm_info</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Obtain general (static) information for PCM handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="491" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="809" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gaf8cd01c4c6b79c4a45a2c816fb8fbc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_current</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_current</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Retreive current PCM hardware configuration chosen with <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space definition container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="492" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="820" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Install one PCM hardware configuration chosen from a configuration space and <ref refid="group___p_c_m_1ga788d05de75f2d536f8443cb0306754d0" kindref="member">snd_pcm_prepare</ref> it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space definition container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The configuration is chosen fixing single parameters in this order: first access, first format, first subformat, min channels, min rate, min period time, max buffer size, min tick time. If no mutually compatible set of parameters can be chosen, a negative error code will be returned.</para><para>After this call, <ref refid="group___p_c_m_1ga788d05de75f2d536f8443cb0306754d0" kindref="member">snd_pcm_prepare()</ref> is called automatically and the stream is brought to <computeroutput><ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref></computeroutput> state.</para><para>The hardware parameters cannot be changed when the stream is running (active). The software parameters can be changed at any time.</para><para>The configuration space will be updated to reflect the chosen parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="493" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="871" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga242ad0a269c272830d30666220edbc2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_free</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_hw_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Remove PCM hardware configuration and free associated resources. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="494" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="886" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga61c5495ffb44c75aaa595e85512d28de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_current</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params)</argsstring>
        <name>snd_pcm_sw_params_current</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Return current software configuration for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="495" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5941" bodyend="5964"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga891ccaeea2c685a533b61b5fa0493974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params)</argsstring>
        <name>snd_pcm_sw_params</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Install PCM software configuration defined by params. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The software parameters can be changed at any time. The hardware parameters cannot be changed when the stream is running (active).</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="496" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="916" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga788d05de75f2d536f8443cb0306754d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_prepare</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_prepare</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Prepare PCM for use. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="497" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1132" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga390e084f13d24244196aca64262ce3fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_reset</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_reset</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Reset PCM position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Reduce PCM delay to 0.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="498" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1158" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga32891eaac37741728a9b23027012c892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_status</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_status_t *status)</argsstring>
        <name>snd_pcm_status</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Obtain status (runtime) information for PCM handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="499" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="966" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga6bdb88b68a9d9e66015d770f600c6aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_start</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_start</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Start a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="500" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1180" bodyend="1195"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga7000ca6010a1a2739daddff8e2fbb440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_drop</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_drop</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Stop a PCM dropping pending frames. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
This function stops the PCM <emphasis>immediately</emphasis>. The pending samples on the buffer are ignored.</para><para>For processing all pending samples, use <ref refid="group___p_c_m_1ga49afc5b8527f30c33fafa476533c9f86" kindref="member">::snd_pcm_drain()</ref> instead.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="501" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1210" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga49afc5b8527f30c33fafa476533c9f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_drain</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_drain</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Stop a PCM preserving pending frames. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred</para></parameterdescription>
</parameteritem>
</parameterlist>
For playback wait for all pending frames to be played and then stop the PCM. For capture stop PCM permitting to retrieve residual frames.</para><para>For stopping the PCM stream immediately, use <ref refid="group___p_c_m_1ga7000ca6010a1a2739daddff8e2fbb440" kindref="member">::snd_pcm_drop()</ref> instead.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="502" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1243" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gad711b582c7066bd4fffa1d08a04316b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_pause</definition>
        <argsstring>(snd_pcm_t *pcm, int enable)</argsstring>
        <name>snd_pcm_pause</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Pause/resume PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = resume, 1 = pause </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Note that this function works only on the hardware which supports pause feature. You can check it via <ref refid="group___p_c_m___h_w___params_1gaad4ba98b2f66baa5360b9a85f064a3e9" kindref="member">::snd_pcm_hw_params_can_pause()</ref> function.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="503" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1268" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga87896f6f17020fc19835790369e7ce75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" kindref="member">snd_pcm_state_t</ref></type>
        <definition>snd_pcm_state_t snd_pcm_state</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_state</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Return PCM state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PCM state <ref refid="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" kindref="member">snd_pcm_state_t</ref> of given PCM handle</para></simplesect>
This is a faster way to obtain only the PCM state without calling <ref refid="group___p_c_m_1ga32891eaac37741728a9b23027012c892" kindref="member">::snd_pcm_status()</ref>.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="504" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="988" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga3b71a41f6b300bf63ad374013f19d8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hwsync</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_hwsync</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Synchronize stream position with hardware </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Note this function does not update the actual r/w pointer for applications. The function <ref refid="group___p_c_m_1ga8bb836bd0c414b59789d51a5f5379c08" kindref="member">snd_pcm_avail_update()</ref> have to be called before any mmap begin+commit operation.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="505" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1010" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga012e8b999070e72ab23514f25e7d6482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_delay</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sframes_t *delayp)</argsstring>
        <name>snd_pcm_delay</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref> *</type>
          <declname>delayp</declname>
        </param>
        <briefdescription>
<para>Obtain delay for a running PCM handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned delay in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
For playback the delay is defined as the time that a frame that is written to the PCM stream shortly after this call will take to be actually audible. It is as such the overall latency from the write call to the final DAC.</para><para>For capture the delay is defined as the time that a frame that was digitized by the audio device takes until it can be read from the PCM stream shortly after this call returns. It is as such the overall latency from the initial ADC to the read call.</para><para>Please note that hence in case of a playback underrun this value will not necessarily got down to 0.</para><para>If the application is interested in the fill level of the playback buffer of the device, it should use <ref refid="group___p_c_m_1ga577b4d51e08d94930a05bbe73291ed2a" kindref="member">snd_pcm_avail</ref>*() functions. The value returned by that call is not directly related to the delay, since the latter might include some additional, fixed latencies the former does not.</para><para>Note this function does not update the actual r/w pointer for applications. The function <ref refid="group___p_c_m_1ga8bb836bd0c414b59789d51a5f5379c08" kindref="member">snd_pcm_avail_update()</ref> have to be called before any begin+commit operation.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="506" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1058" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga13083ce2209aab9ea73831610bc61ab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_resume</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_resume</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Resume from suspend, no samples are lost. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>resume can&apos;t be proceed immediately (audio hardware is probably still suspended) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>hardware doesn&apos;t support this feature</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can be used when the stream is in the suspend state to do the fine resume from this state. Not all hardware supports this feature, when an -ENOSYS error is returned, use the <ref refid="group___p_c_m_1ga788d05de75f2d536f8443cb0306754d0" kindref="member">::snd_pcm_prepare()</ref> function to recovery.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="507" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1087" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga3946abd34178b3de60fd5329b71c189b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_htimestamp</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_uframes_t *avail, snd_htimestamp_t *tstamp)</argsstring>
        <name>snd_pcm_htimestamp</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>avail</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>tstamp</declname>
        </param>
        <briefdescription>
<para>Obtain last position update hi-res timestamp. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>avail</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of available frames when timestamp was grabbed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tstamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Hi-res timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Note this function does not update the actual r/w pointer for applications.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="508" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1110" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga577b4d51e08d94930a05bbe73291ed2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_avail</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_avail</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Return number of frames ready to be read (capture) / written (playback) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames ready otherwise a negative error code</para></simplesect>
On capture does all the actions needed to transport to application level all the ready frames across underlying layers.</para><para>The position is synced with hardware (driver) position in the sound ring buffer in this functions.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="509" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2803" bodyend="2821"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga8bb836bd0c414b59789d51a5f5379c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_avail_update</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_avail_update</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Return number of frames ready to be read (capture) / written (playback) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames ready otherwise a negative error code</para></simplesect>
On capture does all the actions needed to transport to application level all the ready frames across underlying layers.</para><para>The position is not synced with hardware (driver) position in the sound ring buffer in this function. This function is a light version of <ref refid="group___p_c_m_1ga577b4d51e08d94930a05bbe73291ed2a" kindref="member">snd_pcm_avail()</ref> .</para><para>Using this function is ideal after poll() or select() when audio file descriptor made the event and when application expects just period timing.</para><para>Also this function might be called after <ref refid="group___p_c_m_1ga012e8b999070e72ab23514f25e7d6482" kindref="member">snd_pcm_delay()</ref> or <ref refid="group___p_c_m_1ga3b71a41f6b300bf63ad374013f19d8d7" kindref="member">snd_pcm_hwsync()</ref> functions to move private ring buffer pointers in alsa-lib (the internal plugin chain).</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="510" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2779" bodyend="2787"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga170bc44da2607b5583cff5ab5a985d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_avail_delay</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sframes_t *availp, snd_pcm_sframes_t *delayp)</argsstring>
        <name>snd_pcm_avail_delay</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref> *</type>
          <declname>availp</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref> *</type>
          <declname>delayp</declname>
        </param>
        <briefdescription>
<para>Combine snd_pcm_avail and snd_pcm_delay functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availp</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of available frames in the ring buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayp</parametername>
</parameternamelist>
<parameterdescription>
<para>Total I/O latency in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success otherwise a negative error code</para></simplesect>
The avail and delay values retuned are in sync.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="511" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2834" bodyend="2863"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga0ea7a8aade4e6e76f2cdfd8c85f37bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_rewindable</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_rewindable</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get safe count of frames which can be rewinded. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames or negative error code</para></simplesect>
Note: The <ref refid="group___p_c_m_1ga6c66040dbe01797379436fdf36268fec" kindref="member">snd_pcm_rewind()</ref> can accept bigger value than returned by this function. But it is not guaranteed that output stream will be consistent with bigger value.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="512" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1296" bodyend="1311"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga6c66040dbe01797379436fdf36268fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_rewind</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_uframes_t frames)</argsstring>
        <name>snd_pcm_rewind</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Move application frame position backward. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>wanted displacement in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number for actual displacement otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="513" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1322" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gaa2f506e03630a074130443d7b9c1a27e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_forwardable</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_forwardable</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get safe count of frames which can be forwarded. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames or negative error code</para></simplesect>
Note: The <ref refid="group___p_c_m_1gad0774fa8991248c6f1c264aaeb0b4207" kindref="member">snd_pcm_forward()</ref> can accept bigger value than returned by this function. But it is not guaranteed that output stream will be consistent with bigger value.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="514" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1352" bodyend="1367"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gad0774fa8991248c6f1c264aaeb0b4207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_forward</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_uframes_t frames)</argsstring>
        <name>snd_pcm_forward</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Move application frame position forward. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>wanted skip in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number for actual skip otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>means no action</para></parameterdescription>
</parameteritem>
</parameterlist>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="515" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1381" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gabc748a500743713eafa960c7d104ca6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_writei</definition>
        <argsstring>(snd_pcm_t *pcm, const void *buffer, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_writei</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write interleaved frames to a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually written otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an underrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour is selected and it is running, then routine waits until all requested frames are played or put to the playback ring buffer. The returned number of frames can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="516" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1421" bodyend="1436"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga4c2c7bd26cf221268d59dc3bbeb9c048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_readi</definition>
        <argsstring>(snd_pcm_t *pcm, void *buffer, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_readi</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read interleaved frames from a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually read otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an overrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour was selected and it is running, then routine waits until all requested frames are filled. The returned number of frames can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="517" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1493" bodyend="1508"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gae599772ce3d0aa6a70de143abcf145e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_writen</definition>
        <argsstring>(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_writen</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>bufs</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write non interleaved frames to a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffers (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually written otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an underrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour is selected and it is running, then routine waits until all requested frames are played or put to the playback ring buffer. The returned number of frames can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="518" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1457" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gafea175455f1a405f633a43484ded3d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_readn</definition>
        <argsstring>(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_readn</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>bufs</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read non interleaved frames to a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffers (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually read otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an overrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour was selected and it is running, then routine waits until all requested frames are filled. The returned number of frames can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="519" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1529" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gad4d53d58b996a7cd9a5cbf1710b90375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_wait</definition>
        <argsstring>(snd_pcm_t *pcm, int timeout)</argsstring>
        <name>snd_pcm_wait</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for a PCM to become ready. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum time in milliseconds to wait, a negative value means infinity </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive value on success otherwise a negative error code (-EPIPE for the xrun and -ESTRPIPE for the suspended status, others for general errors) </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM stream is ready for I/O</para></parameterdescription>
</parameteritem>
</parameterlist>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="520" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2657" bodyend="2665"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gac6c33091b049985baa6466e8fe93917e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_link</definition>
        <argsstring>(snd_pcm_t *pcm1, snd_pcm_t *pcm2)</argsstring>
        <name>snd_pcm_link</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm1</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm2</declname>
        </param>
        <briefdescription>
<para>Link two PCMs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm1</parametername>
</parameternamelist>
<parameterdescription>
<para>first PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcm2</parametername>
</parameternamelist>
<parameterdescription>
<para>first PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The two PCMs will start/stop/prepare in sync. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="522" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1554" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga0d3af5e30593dae857b4308aab5035cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_unlink</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_unlink</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Remove a PCM from a linked group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="523" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1568" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga675cb6a0fd5470345105574216a652c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsnd__pcm__chmap__query__t" kindref="compound">snd_pcm_chmap_query_t</ref> **</type>
        <definition>snd_pcm_chmap_query_t** snd_pcm_query_chmaps</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_query_chmaps</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Query the available channel maps <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle to query </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the NULL-terminated array of integer pointers, each of which contains the channel map. A channel map is represented by an integer array, beginning with the channel map type, followed by the number of channels, and the position of each channel.</para></simplesect>
Note: the caller is requested to release the returned value via <ref refid="group___p_c_m_1ga0a131c274594f6266b9a3f980e479e49" kindref="member">snd_pcm_free_chmaps()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="600" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7845" bodyend="7850"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gae766a086ec64ec1189a87da3e54b8441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsnd__pcm__chmap__query__t" kindref="compound">snd_pcm_chmap_query_t</ref> **</type>
        <definition>snd_pcm_chmap_query_t** snd_pcm_query_chmaps_from_hw</definition>
        <argsstring>(int card, int dev, int subdev, snd_pcm_stream_t stream)</argsstring>
        <name>snd_pcm_query_chmaps_from_hw</name>
        <param>
          <type>int</type>
          <declname>card</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>subdev</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Query the available channel maps <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>card</parametername>
</parameternamelist>
<parameterdescription>
<para>the card number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the PCM device number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subdev</parametername>
</parameternamelist>
<parameterdescription>
<para>the PCM substream index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction of PCM stream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the NULL-terminated array of integer pointers, or NULL at error.</para></simplesect>
This function works like <ref refid="group___p_c_m_1ga675cb6a0fd5470345105574216a652c2" kindref="member">snd_pcm_query_chmaps()</ref> but it takes the card, device, substream and stream numbers instead of the already opened snd_pcm_t instance, so that you can query available channel maps of a PCM before actually opening it.</para><para>As the parameters stand, the query is performed only to the hw PCM devices, not the abstracted PCM object in alsa-lib. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="601" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_hw.c" bodystart="1093" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga0a131c274594f6266b9a3f980e479e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_free_chmaps</definition>
        <argsstring>(snd_pcm_chmap_query_t **maps)</argsstring>
        <name>snd_pcm_free_chmaps</name>
        <param>
          <type><ref refid="structsnd__pcm__chmap__query__t" kindref="compound">snd_pcm_chmap_query_t</ref> **</type>
          <declname>maps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Release the channel map array allocated via <ref refid="group___p_c_m_1ga675cb6a0fd5470345105574216a652c2" kindref="member">snd_pcm_query_chmaps</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maps</parametername>
</parameternamelist>
<parameterdescription>
<para>the array pointer to release </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="604" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7856" bodyend="7864"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gac3150e89164f6cb1276abda84b399c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsnd__pcm__chmap__t" kindref="compound">snd_pcm_chmap_t</ref> *</type>
        <definition>snd_pcm_chmap_t* snd_pcm_get_chmap</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_get_chmap</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Get the current channel map <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM instance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current channel map, or NULL if error</para></simplesect>
Note: the caller is requested to release the returned value via free() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="605" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7873" bodyend="7878"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga60ee7d2c2555e21dbc844a1b73839085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_set_chmap</definition>
        <argsstring>(snd_pcm_t *pcm, const snd_pcm_chmap_t *map)</argsstring>
        <name>snd_pcm_set_chmap</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__pcm__chmap__t" kindref="compound">snd_pcm_chmap_t</ref> *</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Configure the current channel map <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM instance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel map to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if succeeded, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="606" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7886" bodyend="7895"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga2c559ecbc8f79457c1d7be5d08365739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_chmap_type_name</definition>
        <argsstring>(enum snd_pcm_chmap_type val)</argsstring>
        <name>snd_pcm_chmap_type_name</name>
        <param>
          <type>enum <ref refid="group___p_c_m_1gad77f16d07431203bacc8694d28814506" kindref="member">snd_pcm_chmap_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Get a name string for a channel map type as query results <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel position </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the given type, or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="608" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7912" bodyend="7918"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gac13f471d76d025798a25f3b422a07b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_chmap_name</definition>
        <argsstring>(enum snd_pcm_chmap_position val)</argsstring>
        <name>snd_pcm_chmap_name</name>
        <param>
          <type>enum <ref refid="group___p_c_m_1ga07f09c302588b9758946fedf97772975" kindref="member">snd_pcm_chmap_position</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Get a name string for a standard channel map position <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel position </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the given position, or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="609" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7945" bodyend="7951"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga5dc94582c2356ad6f214761de888bf43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_chmap_long_name</definition>
        <argsstring>(enum snd_pcm_chmap_position val)</argsstring>
        <name>snd_pcm_chmap_long_name</name>
        <param>
          <type>enum <ref refid="group___p_c_m_1ga07f09c302588b9758946fedf97772975" kindref="member">snd_pcm_chmap_position</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Get a longer name string for a standard channel map position <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel position </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the given position, or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="610" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7998" bodyend="8004"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga1e10b4d6db07a3ef3a1105e703a38629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_chmap_print</definition>
        <argsstring>(const snd_pcm_chmap_t *map, size_t maxlen, char *buf)</argsstring>
        <name>snd_pcm_chmap_print</name>
        <param>
          <type>const <ref refid="structsnd__pcm__chmap__t" kindref="compound">snd_pcm_chmap_t</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxlen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Print the channels in chmap on the buffer <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel map to print </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximal length to write (including NUL letter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The actual string length or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="611" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8013" bodyend="8044"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gad3e0c4157e5f491ba448bfd4d4dc0177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_chmap_from_string</definition>
        <argsstring>(const char *str)</argsstring>
        <name>snd_pcm_chmap_from_string</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Convert from string to channel position <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to parse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The channel position value or -1 as an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="612" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8091" bodyend="8094"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga77973afbe7ab02bfde38d574d4879355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsnd__pcm__chmap__t" kindref="compound">snd_pcm_chmap_t</ref> *</type>
        <definition>snd_pcm_chmap_t* snd_pcm_chmap_parse_string</definition>
        <argsstring>(const char *str)</argsstring>
        <name>snd_pcm_chmap_parse_string</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Convert from string to channel map <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to parse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The channel map</para></simplesect>
Note: the caller is requested to release the returned value via free() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="613" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8103" bodyend="8144"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga2157aaeb6fc14da3f040d76591f9d3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_recover</definition>
        <argsstring>(snd_pcm_t *pcm, int err, int silent)</argsstring>
        <name>snd_pcm_recover</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <param>
          <type>int</type>
          <declname>silent</declname>
        </param>
        <briefdescription>
<para>Recover the stream state from an error or suspend. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>error number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>silent</parametername>
</parameternamelist>
<parameterdescription>
<para>do not print error reason </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 when error code was handled successfuly, otherwise a negative error code</para></simplesect>
This a high-level helper function building on other functions.</para><para>This functions handles -EINTR (interrupted system call), -EPIPE (overrun or underrun) and -ESTRPIPE (stream is suspended) error codes trying to prepare given stream for next I/O.</para><para>Note that this function returs the original error code when it is not handled inside this function (for example -EAGAIN is returned back). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="622" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8293" bodyend="8328"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga45d50841b307f2156fce1857bfac228c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_set_params</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_format_t format, snd_pcm_access_t access, unsigned int channels, unsigned int rate, int soft_resample, unsigned int latency)</argsstring>
        <name>snd_pcm_set_params</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>access</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>rate</declname>
        </param>
        <param>
          <type>int</type>
          <declname>soft_resample</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>latency</declname>
        </param>
        <briefdescription>
<para>Set the hardware and software parameters in a simple way. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>required PCM format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>required PCM access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>required PCM channels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>required sample rate in Hz </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>soft_resample</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disallow alsa-lib resample stream, 1 = allow resampling </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latency</parametername>
</parameternamelist>
<parameterdescription>
<para>required overall latency in us </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="623" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8341" bodyend="8521"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga2827b8fa77ca05717df9b0447b99d1cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_get_params</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_uframes_t *buffer_size, snd_pcm_uframes_t *period_size)</argsstring>
        <name>snd_pcm_get_params</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>period_size</declname>
        </param>
        <briefdescription>
<para>Get the transfer size parameters in a simple way. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM ring buffer size in frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period_size</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM period size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="630" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8530" bodyend="8546"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___p_c_m_1ga32ccf47736036e86b0d787dc43e64d4a" prot="public" static="no">
        <name>SND_PCM_DLSYM_VERSION</name>
        <initializer>_dlsym_pcm_001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>dlsym version for interface entry callback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="43" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga6bd90de1d1527b5804090dcce51079ad" prot="public" static="no">
        <name>SND_PCM_NONBLOCK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non blocking mode (flag for open mode) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="359" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga9b22351abf6c85ced128e2088f6f6a5c" prot="public" static="no">
        <name>SND_PCM_ASYNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Async notification (flag for open mode) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="361" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga06aa6da1ebeff70c83d9f6e18a91a3d7" prot="public" static="no">
        <name>SND_PCM_ABORT</name>
        <initializer>0x00008000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In an abort state (internal, not allowed for open) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="363" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gaba352dfac44ef1681f91d476ed781005" prot="public" static="no">
        <name>SND_PCM_NO_AUTO_RESAMPLE</name>
        <initializer>0x00010000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable automatic (but not forced!) rate resamplinig </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="365" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga64fa40b556374dabe40d4874242fee19" prot="public" static="no">
        <name>SND_PCM_NO_AUTO_CHANNELS</name>
        <initializer>0x00020000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable automatic (but not forced!) channel conversion </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="367" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gacb997a23fbba62232101f730e9ae1e96" prot="public" static="no">
        <name>SND_PCM_NO_AUTO_FORMAT</name>
        <initializer>0x00040000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable automatic (but not forced!) format conversion </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="369" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga1f67b4e05749f0d3dafe7c17e448518a" prot="public" static="no">
        <name>SND_PCM_NO_SOFTVOL</name>
        <initializer>0x00080000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable soft volume control </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="371" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gaf79d447b5f5c0936cfbc769eee03078b" prot="public" static="no">
        <name>SND_CHMAP_API_VERSION</name>
        <initializer>((1 &lt;&lt; 16) | (0 &lt;&lt; 8) | 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>channel mapping API version number </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="526" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gad6713109477a592274f92f85670fcc1a" prot="public" static="no">
        <name>SND_CHMAP_POSITION_MASK</name>
        <initializer>0xffff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>bitmask for channel position </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="580" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gad98b225c79dd92fc387b2e7884ef97da" prot="public" static="no">
        <name>SND_CHMAP_PHASE_INVERSE</name>
        <initializer>(0x01 &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>bit flag indicating the channel is phase inverted </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="583" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gaf3d1c438269afa0206fb9f2151c4fc6a" prot="public" static="no">
        <name>SND_CHMAP_DRIVER_SPEC</name>
        <initializer>(0x02 &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>bit flag indicating the non-standard channel value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="585" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>See the <ref refid="pcm" kindref="compound">PCM (digital audio) interface</ref> page for more details. </para>    </detaileddescription>
  </compounddef>
</doxygen>
