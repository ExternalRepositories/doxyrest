<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___p_c_m___status" kind="group">
    <compoundname>PCM_Status</compoundname>
    <title>Status Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_c_m___status_1ga6a8ae2a4786419af7853687a99436d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_pcm_status_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_pcm_status_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="989" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6540" bodyend="6543"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gaa97cf9bdc31e686fe491985486194a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_status_malloc</definition>
        <argsstring>(snd_pcm_status_t **ptr)</argsstring>
        <name>snd_pcm_status_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="995" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6550" bodyend="6557"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gaeb0a7ff880647e7255cb58904270106b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_free</definition>
        <argsstring>(snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="996" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6563" bodyend="6566"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga307827ec2057b969520c7508fe41dd63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_copy</definition>
        <argsstring>(snd_pcm_status_t *dst, const snd_pcm_status_t *src)</argsstring>
        <name>snd_pcm_status_copy</name>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="997" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6573" bodyend="6577"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gabaae998f0d374c50195b3206d1e43659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" kindref="member">snd_pcm_state_t</ref></type>
        <definition>snd_pcm_state_t snd_pcm_status_get_state</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_state</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get state from a PCM status container (see <ref refid="group___p_c_m_1ga87896f6f17020fc19835790369e7ce75" kindref="member">snd_pcm_state</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PCM state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="998" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6584" bodyend="6588"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga5eaeff98814e96c2ffd5f04c95b22c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_trigger_tstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_timestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_trigger_tstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1gadd377862d568809fb0e32c9faddf99a4" kindref="member">snd_timestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get trigger timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp</para></parameterdescription>
</parameteritem>
</parameterlist>
Trigger means a PCM state transition (from stopped to running or versa vice). It applies also to pause and suspend. In other words, timestamp contains time when stream started or when it was stopped. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="999" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6599" bodyend="6604"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gab1c832aedb25670d010c53d9081a4b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_trigger_htstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_trigger_htstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get trigger hi-res timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp</para></parameterdescription>
</parameteritem>
</parameterlist>
Trigger means a PCM state transition (from stopped to running or versa vice). It applies also to pause and suspend. In other words, timestamp contains time when stream started or when it was stopped. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1000" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6618" bodyend="6623"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gaea54e0a110afa01dd42071a1ca43902e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_tstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_timestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_tstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1gadd377862d568809fb0e32c9faddf99a4" kindref="member">snd_timestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get &quot;now&quot; timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1001" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6631" bodyend="6636"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gafa66bda27a6b914e66e053bb76571013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_htstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_htstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get &quot;now&quot; hi-res timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1002" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6646" bodyend="6651"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga15d17e74f3352e189df5ccd4cc4c116d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_audio_htstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_audio_htstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get &quot;now&quot; hi-res audio timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1003" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6659" bodyend="6663"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga6ee47c7a98005629ec691eae4b7f1b0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_driver_htstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_driver_htstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get &quot;now&quot; hi-res driver timestamp from a PCM status container. Defines when the status was generated by driver, may differ from normal timestamp. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1004" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6671" bodyend="6675"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga79a7e633c36d79aab76c3b4ee39e1588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_audio_htstamp_report</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_pcm_audio_tstamp_report_t *audio_tstamp_report)</argsstring>
        <name>snd_pcm_status_get_audio_htstamp_report</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structsnd__pcm__audio__tstamp__report__t" kindref="compound">snd_pcm_audio_tstamp_report_t</ref> *</type>
          <declname>audio_tstamp_report</declname>
        </param>
        <briefdescription>
<para>Get audio_tstamp_report from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned report (valid fields are accuracy and type) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1005" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6682" bodyend="6689"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gad0dba60f0f312167755500cb49e24eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_set_audio_htstamp_config</definition>
        <argsstring>(snd_pcm_status_t *obj, snd_pcm_audio_tstamp_config_t *audio_tstamp_config)</argsstring>
        <name>snd_pcm_status_set_audio_htstamp_config</name>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structsnd__pcm__audio__tstamp__config__t" kindref="compound">snd_pcm_audio_tstamp_config_t</ref> *</type>
          <declname>audio_tstamp_config</declname>
        </param>
        <briefdescription>
<para>set audio_tstamp_config from a PCM status container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to config (valid fields are type and report_analog_delay) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1007" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6696" bodyend="6701"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga24c8a320ba5c66f9b6a605735d33a2ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void snd_pcm_pack_audio_tstamp_config</definition>
        <argsstring>(unsigned int *data, snd_pcm_audio_tstamp_config_t *config)</argsstring>
        <name>snd_pcm_pack_audio_tstamp_config</name>
        <param>
          <type>unsigned int *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structsnd__pcm__audio__tstamp__config__t" kindref="compound">snd_pcm_audio_tstamp_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1010" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1010" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gaf753b32cb55ee05440800d1095f4bdb1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void snd_pcm_unpack_audio_tstamp_report</definition>
        <argsstring>(unsigned int data, unsigned int accuracy, snd_pcm_audio_tstamp_report_t *report)</argsstring>
        <name>snd_pcm_unpack_audio_tstamp_report</name>
        <param>
          <type>unsigned int</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>accuracy</declname>
        </param>
        <param>
          <type><ref refid="structsnd__pcm__audio__tstamp__report__t" kindref="compound">snd_pcm_audio_tstamp_report_t</ref> *</type>
          <declname>report</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1018" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1018" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga1fdce3985e64f66385a5805da1110f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_status_get_delay</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_delay</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get delay from a PCM status container (see <ref refid="group___p_c_m_1ga012e8b999070e72ab23514f25e7d6482" kindref="member">snd_pcm_delay</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Delay in frames</para></simplesect>
Delay is distance between current application frame position and sound frame position. It&apos;s positive and less than buffer size in normal situation, negative on playback underrun and greater than buffer size on capture overrun. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1028" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6713" bodyend="6717"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga91c110525060b925ad4f0c21c205b757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_status_get_avail</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_avail</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get number of frames available from a PCM status container (see <ref refid="group___p_c_m_1ga8bb836bd0c414b59789d51a5f5379c08" kindref="member">snd_pcm_avail_update</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of frames ready to be read/written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1029" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6723" bodyend="6727"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gac58d13e4d03c9420c57428ddffd94964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_status_get_avail_max</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_avail_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get maximum number of frames available from a PCM status container after last <ref refid="group___p_c_m_1ga32891eaac37741728a9b23027012c892" kindref="member">snd_pcm_status</ref> call. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum number of frames ready to be read/written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1030" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6733" bodyend="6737"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga3f4bfd0a0327529abaa621b248b6b1aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_status_get_overrange</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_overrange</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get count of ADC overrange detections since last call. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Count of ADC overrange detections </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1031" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6743" bodyend="6747"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___p_c_m___status_1ga046c09e5d14b684d9fefd70a12cdde1a" prot="public" static="no">
        <name>snd_pcm_status_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="994" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="994" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>See the <ref refid="pcm" kindref="compound">PCM (digital audio) interface</ref> page for more details. </para>    </detaileddescription>
  </compounddef>
</doxygen>
