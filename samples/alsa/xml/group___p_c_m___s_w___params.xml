<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___p_c_m___s_w___params" kind="group">
    <compoundname>PCM_SW_Params</compoundname>
    <title>Software Parameters</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga7886ee5b3a48fb58ef8f70886472029a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_pcm_sw_params_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_pcm_sw_params_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="866" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5990" bodyend="5993"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga23382b62e7fc0de94b279c9f5dd08e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_malloc</definition>
        <argsstring>(snd_pcm_sw_params_t **ptr)</argsstring>
        <name>snd_pcm_sw_params_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="872" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6000" bodyend="6007"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga35af2df23ec46619a82cb52e3733d47a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_sw_params_free</definition>
        <argsstring>(snd_pcm_sw_params_t *obj)</argsstring>
        <name>snd_pcm_sw_params_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="873" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6013" bodyend="6016"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1gafe9ebe9ea669012af58b728d55fc295b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_sw_params_copy</definition>
        <argsstring>(snd_pcm_sw_params_t *dst, const snd_pcm_sw_params_t *src)</argsstring>
        <name>snd_pcm_sw_params_copy</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="874" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6023" bodyend="6027"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga8bdb67600cf3c0705518b6c0a79c56fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_boundary</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_boundary</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get boundary for ring pointers from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned boundary in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="875" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6035" bodyend="6040"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1gac2fba23ba6ac1636785e27f0f5381a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_tstamp_mode</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_tstamp_t val)</argsstring>
        <name>snd_pcm_sw_params_set_tstamp_mode</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga695a9755880cf886c13d07938f92ea77" kindref="member">snd_pcm_tstamp_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set timestamp mode inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="879" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6144" bodyend="6154"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga4caef7435210cd7f4878d55dadeed0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_tstamp_mode</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_tstamp_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_tstamp_mode</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga695a9755880cf886c13d07938f92ea77" kindref="member">snd_pcm_tstamp_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get timestamp mode from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="880" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6165" bodyend="6171"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga912bad749f6317000eede607bb0bc935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_tstamp_type</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_tstamp_type_t val)</argsstring>
        <name>snd_pcm_sw_params_set_tstamp_type</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c" kindref="member">snd_pcm_tstamp_type_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set timestamp type inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="881" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6180" bodyend="6189"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga1cd956ea3dc0e32e32abc99af50f0819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_tstamp_type</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_tstamp_type_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_tstamp_type</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c" kindref="member">snd_pcm_tstamp_type_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get timestamp type from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned timestamp type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="882" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6197" bodyend="6202"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga79b12cbbd309750156261e7f5a39167b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_avail_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_avail_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set avail min inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum avail frames to consider PCM ready </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Note: This is similar to setting an OSS wakeup point. The valid values for &apos;val&apos; are determined by the specific hardware. Most PC sound cards can only accept power of 2 frame counts (i.e. 512, 1024, 2048). You cannot use this as a high resolution timer - it is limited to how often the sound card hardware raises an interrupt. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="883" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6253" bodyend="6265"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga587ccbb0b025dc97d2af5db9516163d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_avail_min</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_avail_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get avail min from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>returned minimum available frames to consider PCM ready </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="884" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6276" bodyend="6282"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1gaf62ce50d6242b4f4dc9d6534a97e5c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_period_event</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, int val)</argsstring>
        <name>snd_pcm_sw_params_set_period_event</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set period event inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disable period event, 1 = enable period event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
An poll (select) wakeup event is raised if enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="885" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6293" bodyend="6298"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga0458a8fe480a7887726748052bd77211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_period_event</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, int *val)</argsstring>
        <name>snd_pcm_sw_params_get_period_event</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get period event from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>returned period event state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="886" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6306" bodyend="6311"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga1d338f1f7e33b7a6d0f9a8f61f87f057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_start_threshold</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_start_threshold</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set start threshold inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Start threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
PCM is automatically started when playback frames available to PCM are &gt;= threshold or when requested capture frames are &gt;= threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="887" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6358" bodyend="6364"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga1ee7116c68bdea12606aab57db86a1d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_start_threshold</definition>
        <argsstring>(const snd_pcm_sw_params_t *paramsm, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_start_threshold</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>paramsm</declname>
          <defname>params</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get start threshold from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned start threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
PCM is automatically started when playback frames available to PCM are &gt;= threshold or when requested capture frames are &gt;= threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="888" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6378" bodyend="6384"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga6a41bf533207d56fdb1ff10aeeac28e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_stop_threshold</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_stop_threshold</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set stop threshold inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Stop threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
PCM is automatically stopped in <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860ab63b5b90201110cd586b686355fd5d83" kindref="member">SND_PCM_STATE_XRUN</ref> state when available frames is &gt;= threshold. If the stop threshold is equal to boundary (also software parameter - sw_param) then automatic stop will be disabled (thus device will do the endless loop in the ring buffer). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="889" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6402" bodyend="6408"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga8a55577d7f3d8e4ce63a710921199c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_stop_threshold</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_stop_threshold</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get stop threshold from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned stop threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
PCM is automatically stopped in <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860ab63b5b90201110cd586b686355fd5d83" kindref="member">SND_PCM_STATE_XRUN</ref> state when available frames is &gt;= threshold. If the stop threshold is equal to boundary (also software parameter - sw_param) then automatic stop will be disabled (thus device will do the endless loop in the ring buffer). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="890" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6424" bodyend="6430"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_silence_threshold</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_silence_threshold</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set silence threshold inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Silence threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
A portion of playback buffer is overwritten with silence (see <ref refid="group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3" kindref="member">snd_pcm_sw_params_set_silence_size</ref>) when playback underrun is nearer than silence threshold. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="891" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6447" bodyend="6458"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga896ece8b418f6d6e92d2df5a4b59c3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_silence_threshold</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_silence_threshold</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get silence threshold from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned silence threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error value</para></simplesect>
A portion of playback buffer is overwritten with silence (see <ref refid="group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3" kindref="member">snd_pcm_sw_params_set_silence_size</ref>) when playback underrun is nearer than silence threshold. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="892" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6473" bodyend="6479"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_silence_size</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_silence_size</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set silence size inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Silence size in frames (0 for disabled) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
A portion of playback buffer is overwritten with silence when playback underrun is nearer than silence threshold (see <ref refid="group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b" kindref="member">snd_pcm_sw_params_set_silence_threshold</ref>)</para><para>The special case is when silence size value is equal or greater than boundary. The unused portion of the ring buffer (initial written samples are untouched) is filled with silence at start. Later, only just processed sample area is filled with silence. Note: silence_threshold must be set to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="893" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6501" bodyend="6512"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga6a197020c09c8a20e697d12e9fac3e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_silence_size</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_silence_size</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get silence size from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned silence size in frames (0 for disabled) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
A portion of playback buffer is overwritten with silence when playback underrun is nearer than silence threshold (see <ref refid="group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b" kindref="member">snd_pcm_sw_params_set_silence_threshold</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="894" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6527" bodyend="6533"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___p_c_m___s_w___params_1ga8e564553bdc89948c918729e3cc7beb0" prot="public" static="no">
        <name>snd_pcm_sw_params_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="871" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>See the <ref refid="pcm" kindref="compound">PCM (digital audio) interface</ref> page for more details. </para>    </detaileddescription>
  </compounddef>
</doxygen>
