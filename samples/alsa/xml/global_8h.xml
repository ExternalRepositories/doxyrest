<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="global_8h" kind="file" language="C++">
    <compoundname>global.h</compoundname>
    <includes local="no">time.h</includes>
    <incdepgraph>
      <node id="48">
        <label>time.h</label>
      </node>
      <node id="47">
        <label>/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h</label>
        <link refid="global_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___global_1gafefcb2bb4a877727b16de5c56e09055b" prot="public" static="no">
        <name>__SND_DLSYM_VERSION</name>
        <param><defname>name</defname></param>
        <param><defname>version</defname></param>
        <briefdescription>
<para>Helper macro for <ref refid="group___global_1ga355c462c8c5dee0aeadae17d096ba531" kindref="member">SND_DLSYM_BUILD_VERSION</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="57" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___global_1ga355c462c8c5dee0aeadae17d096ba531" prot="public" static="no">
        <name>SND_DLSYM_BUILD_VERSION</name>
        <param><defname>name</defname></param>
        <param><defname>version</defname></param>
        <briefdescription>
<para>Appends the build version to the name of a versioned dynamic symbol. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="62" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___global_1ga375c4dc9f0fb338999de81aab826f9d6" prot="public" static="no">
        <name>__STRING</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
<para>Return &apos;x&apos; argument as string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="94" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___global_1ga7bba39703a3275de48b3e919a2849c4b" prot="public" static="no">
        <name>SND_DLSYM_VERSION</name>
        <param><defname>version</defname></param>
        <initializer><ref refid="group___global_1ga375c4dc9f0fb338999de81aab826f9d6" kindref="member">__STRING</ref>(version)</initializer>
        <briefdescription>
<para>Returns the version of a dynamic symbol as a string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="98" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___global_1ga0d723ca68908f9c4eb7c6e9eb03cff3f" prot="public" static="no">
        <name>__snd_alloca</name>
        <param><defname>ptr</defname></param>
        <param><defname>type</defname></param>
        <initializer>do { *<ref refid="seq__event_8h_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref> = (type##_t *) alloca(type##_sizeof()); memset(*<ref refid="seq__event_8h_1add9af9569af79ec26dd741fb226b38ba" kindref="member">ptr</ref>, 0, type##_sizeof()); } while (0)</initializer>
        <briefdescription>
<para>alloca helper macro. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="106" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" prot="public" static="no">
        <type>struct _snd_async_handler</type>
        <definition>typedef struct _snd_async_handler snd_async_handler_t</definition>
        <argsstring></argsstring>
        <name>snd_async_handler_t</name>
        <briefdescription>
<para>Internal structure for an async notification client handler. </para>        </briefdescription>
        <detaileddescription>
<para>The ALSA library uses a pointer to this structure as a handle to an async notification object. Applications don&apos;t access its contents directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="102" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___global_1gaf8937eadd968df14b64e54f49c29821c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* snd_async_callback_t) (snd_async_handler_t *handler)</definition>
        <argsstring>)(snd_async_handler_t *handler)</argsstring>
        <name>snd_async_callback_t</name>
        <briefdescription>
<para>Async notification callback. </para>        </briefdescription>
        <detaileddescription>
<para>See the <ref refid="group___global_1gafd936c40505997bb659b74bd368636b8" kindref="member">snd_async_add_handler</ref> function for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="121" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___global_1gadd377862d568809fb0e32c9faddf99a4" prot="public" static="no">
        <type>struct timeval</type>
        <definition>typedef struct timeval snd_timestamp_t</definition>
        <argsstring></argsstring>
        <name>snd_timestamp_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Timestamp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="134" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" prot="public" static="no">
        <type>struct timespec</type>
        <definition>typedef struct timespec snd_htimestamp_t</definition>
        <argsstring></argsstring>
        <name>snd_htimestamp_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hi-res timestamp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="134" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___global_1ga1b8d6e2acb0a62de5c23bd8aef3ec225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_asoundlib_version</definition>
        <argsstring>(void)</argsstring>
        <name>snd_asoundlib_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the ALSA sound library version in ASCII format. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The ASCII description of the used ALSA sound library. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="47" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/error.c" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1ga40fa4f69aa58fd0086a43baef8e685b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* snd_dlopen</definition>
        <argsstring>(const char *file, int mode)</argsstring>
        <name>snd_dlopen</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
          <defname>name</defname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Opens a dynamic library - ALSA wrapper for <computeroutput>dlopen</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the library, similar to <computeroutput>dlopen</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>mode flags, similar to <computeroutput>dlopen</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Library handle if successful, otherwise <computeroutput>NULL</computeroutput>.</para></simplesect>
This function can emulate dynamic linking for the static build of the alsa-lib library. In that case, <computeroutput>name</computeroutput> is set to <computeroutput>NULL</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="100" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/dlmisc.c" bodystart="51" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1gae865f293c8771998b2b6a9f25a135408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* snd_dlsym</definition>
        <argsstring>(void *handle, const char *name, const char *version)</argsstring>
        <name>snd_dlsym</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Resolves a symbol from a dynamic library - ALSA wrapper for <computeroutput>dlsym</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle, similar to <computeroutput>dlsym</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>Version of the symbol.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can emulate dynamic linking for the static build of the alsa-lib library.</para><para>This special version of the <computeroutput>dlsym</computeroutput> function checks also the version of the symbol. A versioned symbol should be defined using the <ref refid="group___global_1ga355c462c8c5dee0aeadae17d096ba531" kindref="member">SND_DLSYM_BUILD_VERSION</ref> macro. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="101" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/dlmisc.c" bodystart="162" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1ga7cc0866a9d1fbce4e34a8b342674836e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_dlclose</definition>
        <argsstring>(void *handle)</argsstring>
        <name>snd_dlclose</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Closes a dynamic library - ALSA wrapper for <computeroutput>dlclose</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Library handle, similar to <computeroutput>dlclose</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise an error code.</para></simplesect>
This function can emulate dynamic linking for the static build of the alsa-lib library. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="102" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/dlmisc.c" bodystart="102" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1gafd936c40505997bb659b74bd368636b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_async_add_handler</definition>
        <argsstring>(snd_async_handler_t **handler, int fd, snd_async_callback_t callback, void *private_data)</argsstring>
        <name>snd_async_add_handler</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> **</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="group___global_1gaf8937eadd968df14b64e54f49c29821c" kindref="member">snd_async_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>private_data</declname>
        </param>
        <briefdescription>
<para>Registers an async handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the pointer to the new async handler object at the address specified by <computeroutput>handler</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to be associated with the callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The async callback function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Private data for the async callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function associates the callback function with the given file, and saves this association in a <computeroutput>snd_async_handler_t</computeroutput> object.</para><para>Whenever the <computeroutput>SIGIO</computeroutput> signal is raised for the file <computeroutput>fd</computeroutput>, the callback function will be called with its parameter pointing to the async handler object returned by this function.</para><para>The ALSA <computeroutput>sigaction</computeroutput> handler for the <computeroutput>SIGIO</computeroutput> signal automatically multiplexes the notifications to the registered async callbacks. However, the application is responsible for instructing the device driver to generate the <computeroutput>SIGIO</computeroutput> signal.</para><para>The <computeroutput>SIGIO</computeroutput> signal may have been replaced with another signal, see <ref refid="group___global_1gab32c9afe265784634c78e7a6b5d27abe" kindref="member">snd_async_handler_get_signo</ref>.</para><para>When the async handler isn&apos;t needed anymore, you must delete it with <ref refid="group___global_1ga1c0bd4d123e9581a749b80e2df48b4e1" kindref="member">snd_async_del_handler</ref>.</para><para><simplesect kind="see"><para><ref refid="group___p_c_m_1ga5a0c0da6d0d35a3ac9f6a97567ac3b63" kindref="member">snd_async_add_pcm_handler</ref>, <ref refid="group___control_1ga23813430fb81fecb0e95d1dfd688337d" kindref="member">snd_async_add_ctl_handler</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="123" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/async.c" bodystart="100" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1ga1c0bd4d123e9581a749b80e2df48b4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_async_del_handler</definition>
        <argsstring>(snd_async_handler_t *handler)</argsstring>
        <name>snd_async_del_handler</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Deletes an async handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the async handler to delete. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="125" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/async.c" bodystart="138" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1gad601f70e0405a8522860edb15db6350c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_async_handler_get_fd</definition>
        <argsstring>(snd_async_handler_t *handler)</argsstring>
        <name>snd_async_handler_get_fd</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Returns the file descriptor assigned to an async handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to an async handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The file descriptor if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="126" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/async.c" bodystart="196" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1gab32c9afe265784634c78e7a6b5d27abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_async_handler_get_signo</definition>
        <argsstring>(snd_async_handler_t *handler)</argsstring>
        <name>snd_async_handler_get_signo</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Returns the signal number assigned to an async handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to an async handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The signal number if successful, otherwise a negative error code.</para></simplesect>
The signal number for async handlers usually is <computeroutput>SIGIO</computeroutput>, but wizards can redefine it to a realtime signal when compiling the ALSA library. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="127" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/async.c" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1gad9c76588a87918901c6273e6bc98a1bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* snd_async_handler_get_callback_private</definition>
        <argsstring>(snd_async_handler_t *handler)</argsstring>
        <name>snd_async_handler_get_callback_private</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Returns the private data assigned to an async handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to an async handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <computeroutput>private_data</computeroutput> value registered with the async handler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="128" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/async.c" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1ga4141de7b343dd6e5af12df97f98c6caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct snd_shm_area *</type>
        <definition>struct snd_shm_area* snd_shm_area_create</definition>
        <argsstring>(int shmid, void *ptr)</argsstring>
        <name>snd_shm_area_create</name>
        <param>
          <type>int</type>
          <declname>shmid</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1ga9dbf4bcf38bb7cc054accbbbf3a33df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct snd_shm_area *</type>
        <definition>struct snd_shm_area* snd_shm_area_share</definition>
        <argsstring>(struct snd_shm_area *area)</argsstring>
        <name>snd_shm_area_share</name>
        <param>
          <type>struct snd_shm_area *</type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1ga59f424fb93a72226e642dbb04b870c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_shm_area_destroy</definition>
        <argsstring>(struct snd_shm_area *area)</argsstring>
        <name>snd_shm_area_destroy</name>
        <param>
          <type>struct snd_shm_area *</type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___global_1gaade4b91c735abcec70101b9d83b11126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_user_file</definition>
        <argsstring>(const char *file, char **result)</argsstring>
        <name>snd_user_file</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get the full file name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file name string to parse </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to store the resultant file name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
Parses the given file name with POSIX-Shell-like expansion and stores the first matchine one. The returned string is strdup&apos;ed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h" line="134" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/userfile.c" bodystart="66" bodyend="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Application interface library for the ALSA driver. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jaroslav Kysela <ulink url="mailto:perex@perex.cz">perex@perex.cz</ulink> </para></simplesect>
<simplesect kind="author"><para>Abramo Bagnara <ulink url="mailto:abramo@alsa-project.org">abramo@alsa-project.org</ulink> </para></simplesect>
<simplesect kind="author"><para>Takashi Iwai <ulink url="mailto:tiwai@suse.de">tiwai@suse.de</ulink> </para></simplesect>
<simplesect kind="date"><para>1998-2001</para></simplesect>
Application interface library for the ALSA driver </para>    </detaileddescription>
    <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/global.h"/>
  </compounddef>
</doxygen>
