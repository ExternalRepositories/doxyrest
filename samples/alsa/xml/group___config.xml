<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___config" kind="group">
    <compoundname>Config</compoundname>
    <title>Configuration Interface</title>
    <innerclass refid="structsnd__devname" prot="public">snd_devname</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___config_1gaa41083e55d19c7755c5d624030e06887" prot="public" static="no">
        <name>snd_config_type_t</name>
        <enumvalue id="group___config_1ggaa41083e55d19c7755c5d624030e06887aaa9d6e02cd0eb42db96122c925c023e7" prot="public">
          <name>SND_CONFIG_TYPE_INTEGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Integer number. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___config_1ggaa41083e55d19c7755c5d624030e06887a710f962ebb93e3824ddee2d833f735a2" prot="public">
          <name>SND_CONFIG_TYPE_INTEGER64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit integer number. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___config_1ggaa41083e55d19c7755c5d624030e06887a0a938daae4006e204150082ab9c73508" prot="public">
          <name>SND_CONFIG_TYPE_REAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Real number. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___config_1ggaa41083e55d19c7755c5d624030e06887a99eed49f50d4f62a7fc0c95301918f49" prot="public">
          <name>SND_CONFIG_TYPE_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Character string. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___config_1ggaa41083e55d19c7755c5d624030e06887ab0b5d34e2f16e81d4eb5f933c30158fe" prot="public">
          <name>SND_CONFIG_TYPE_POINTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Pointer (runtime only, cannot be saved). </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___config_1ggaa41083e55d19c7755c5d624030e06887a82b5c1a9dbadaa4e36815fc1f01fc2f7" prot="public">
          <name>SND_CONFIG_TYPE_COMPOUND</name>
          <initializer>= 1024</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compound node. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Configuration node type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="48" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" bodystart="48" bodyend="61"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___config_1ga1c20905af775ae77d04d1a5696f67985" prot="public" static="no">
        <type>struct _snd_config</type>
        <definition>typedef struct _snd_config snd_config_t</definition>
        <argsstring></argsstring>
        <name>snd_config_t</name>
        <briefdescription>
<para>Internal structure for a configuration node object. </para>        </briefdescription>
        <detaileddescription>
<para>The ALSA library uses a pointer to this structure as a handle to a configuration node. Applications don&apos;t access its contents directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="82" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___config_1ga6c621ab8875a222e1fcb56e9feed6ec6" prot="public" static="no">
        <type>struct _snd_config_iterator *</type>
        <definition>typedef struct _snd_config_iterator* snd_config_iterator_t</definition>
        <argsstring></argsstring>
        <name>snd_config_iterator_t</name>
        <briefdescription>
<para>Type for a configuration compound iterator. </para>        </briefdescription>
        <detaileddescription>
<para>The ALSA library uses this pointer type as a handle to a configuration compound iterator. Applications don&apos;t directly access the contents of the structure pointed to by this type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="77" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___config_1gab10b229189a94e3fcbac7f6ca5794cc0" prot="public" static="no">
        <type>struct _snd_config_update</type>
        <definition>typedef struct _snd_config_update snd_config_update_t</definition>
        <argsstring></argsstring>
        <name>snd_config_update_t</name>
        <briefdescription>
<para>Internal structure for a configuration private update object. </para>        </briefdescription>
        <detaileddescription>
<para>The ALSA library uses this structure to save private update information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="77" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" prot="public" static="no" mutable="no">
        <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
        <definition>snd_config_t* snd_config</definition>
        <argsstring></argsstring>
        <name>snd_config</name>
        <briefdescription>
<para>Configuration top-level node (the global configuration). </para>        </briefdescription>
        <detaileddescription>
<para>This variable contains a handle to the top-level configuration node, as loaded from global configuration file.</para><para>This variable is initialized or updated by <ref refid="group___config_1ga41a3d2202cfb9016e33aa85ea70a4c9c" kindref="member">snd_config_update</ref>. Functions like <ref refid="group___p_c_m_1ga8340c7dc0ac37f37afe5e7c21d6c528b" kindref="member">snd_pcm_open</ref> (that use a device name from the global configuration) automatically call <ref refid="group___config_1ga41a3d2202cfb9016e33aa85ea70a4c9c" kindref="member">snd_config_update</ref>. Before the first call to <ref refid="group___config_1ga41a3d2202cfb9016e33aa85ea70a4c9c" kindref="member">snd_config_update</ref>, this variable is <computeroutput>NULL</computeroutput>.</para><para>The global configuration files are specified in the environment variable <computeroutput>ALSA_CONFIG_PATH</computeroutput>. If this is not set, the default value is &quot;/usr/share/alsa/alsa.conf&quot;.</para><para><simplesect kind="warning"><para>Whenever the configuration tree is updated, all string pointers and configuration node handles previously obtained from this variable may become invalid.</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="85" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="3437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" prot="public" static="no" mutable="no">
        <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
        <definition>snd_config_t* snd_config</definition>
        <argsstring></argsstring>
        <name>snd_config</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Configuration top-level node (the global configuration). </para>        </briefdescription>
        <detaileddescription>
<para>This variable contains a handle to the top-level configuration node, as loaded from global configuration file.</para><para>This variable is initialized or updated by <ref refid="group___config_1ga41a3d2202cfb9016e33aa85ea70a4c9c" kindref="member">snd_config_update</ref>. Functions like <ref refid="group___p_c_m_1ga8340c7dc0ac37f37afe5e7c21d6c528b" kindref="member">snd_pcm_open</ref> (that use a device name from the global configuration) automatically call <ref refid="group___config_1ga41a3d2202cfb9016e33aa85ea70a4c9c" kindref="member">snd_config_update</ref>. Before the first call to <ref refid="group___config_1ga41a3d2202cfb9016e33aa85ea70a4c9c" kindref="member">snd_config_update</ref>, this variable is <computeroutput>NULL</computeroutput>.</para><para>The global configuration files are specified in the environment variable <computeroutput>ALSA_CONFIG_PATH</computeroutput>. If this is not set, the default value is &quot;/usr/share/alsa/alsa.conf&quot;.</para><para><simplesect kind="warning"><para>Whenever the configuration tree is updated, all string pointers and configuration node handles previously obtained from this variable may become invalid.</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" line="3437" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="3437" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___config_1gaf563d57ea9d576a94578368a3d2382c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_top</definition>
        <argsstring>(snd_config_t **config)</argsstring>
        <name>snd_config_top</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates a top level configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
The returned node is an empty compound node without a parent and without an id.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="87" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="1804" bodyend="1808"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga51f79d1f24a519e126415c72210525b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_load</definition>
        <argsstring>(snd_config_t *config, snd_input_t *in)</argsstring>
        <name>snd_config_load</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Loads a configuration tree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to a top level configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input handle to read the configuration from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
The definitions loaded from the input are added to <emphasis>config</emphasis>, which must be a compound node.</para><para><simplesect kind="par"><title>Errors:</title><para>Any errors encountered when parsing the input or returned by hooks or functions.</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="89" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="1891" bodyend="1894"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga27334922bab8391aa2ef1813f48f4d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_load_override</definition>
        <argsstring>(snd_config_t *config, snd_input_t *in)</argsstring>
        <name>snd_config_load_override</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Loads a configuration tree and overrides existing configuration nodes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to a top level configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input handle to read the configuration from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function loads definitions from <emphasis>in</emphasis> into <emphasis>config</emphasis> like <ref refid="group___config_1ga51f79d1f24a519e126415c72210525b0" kindref="member">snd_config_load</ref>, but the default mode for input nodes is &apos;override&apos; (!) instead of &apos;merge+create&apos; (+). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="90" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="1906" bodyend="1909"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gafac08a29a1e04b03a22028a8c70f78bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_save</definition>
        <argsstring>(snd_config_t *config, snd_output_t *out)</argsstring>
        <name>snd_config_save</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Dumps the contents of a configuration node or tree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the (root) configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output handle. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function writes a textual representation of <emphasis>config&apos;s</emphasis> value to the output <emphasis>out</emphasis>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para>A node in the tree has a type that cannot be printed, i.e., <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887ab0b5d34e2f16e81d4eb5f933c30158fe" kindref="member">SND_CONFIG_TYPE_POINTER</ref>. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="91" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2923" bodyend="2930"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga41a3d2202cfb9016e33aa85ea70a4c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_update</definition>
        <argsstring>(void)</argsstring>
        <name>snd_config_update</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Updates <ref refid="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" kindref="member">snd_config</ref> by rereading the global configuration files (if needed). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if <ref refid="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" kindref="member">snd_config</ref> was up to date, 1 if <ref refid="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" kindref="member">snd_config</ref> was updated, otherwise a negative error code.</para></simplesect>
<simplesect kind="warning"><para>Whenever <ref refid="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" kindref="member">snd_config</ref> is updated, all string pointers and configuration node handles previously obtained from it may become invalid. For safer operations, use <ref refid="group___config_1ga568fcf6f45808319725ac066714b25a8" kindref="member">snd_config_update_ref</ref> and release the config via <ref refid="group___config_1gac87538403cb6f8125468a1af56f42e33" kindref="member">snd_config_unref</ref>.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para>Any errors encountered when parsing the input or returned by hooks or functions.</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="92" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4012" bodyend="4020"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga06e80976c3c00fdc786f9b213e5c40f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_update_r</definition>
        <argsstring>(snd_config_t **top, snd_config_update_t **update, const char *path)</argsstring>
        <name>snd_config_update_r</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>top</declname>
          <defname>_top</defname>
        </param>
        <param>
          <type><ref refid="group___config_1gab10b229189a94e3fcbac7f6ca5794cc0" kindref="member">snd_config_update_t</ref> **</type>
          <declname>update</declname>
          <defname>_update</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
          <defname>cfgs</defname>
        </param>
        <briefdescription>
<para>Updates a configuration tree by rereading the configuration files (if needed). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">_top</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the handle to the top-level node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of a pointer to private update information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cfgs</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of configuration file names, delimited with &apos;:&apos;. If <computeroutput>cfgs</computeroutput> is <computeroutput>NULL</computeroutput>, the default global configuration file is used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if <emphasis>_top</emphasis> was up to date, 1 if the configuration files have been reread, otherwise a negative error code.</para></simplesect>
The variables pointed to by <emphasis>_top</emphasis> and <emphasis>_update</emphasis> can be initialized to <computeroutput>NULL</computeroutput> before the first call to this function. The private update information holds information about all used configuration files that allows this function to detects changes to them; this data can be freed with <ref refid="group___config_1ga8f781ac635a0233fb2f58766a83d65cd" kindref="member">snd_config_update_free</ref>.</para><para>The global configuration files are specified in the environment variable <computeroutput>ALSA_CONFIG_PATH</computeroutput>.</para><para><simplesect kind="warning"><para>If the configuration tree is reread, all string pointers and configuration node handles previously obtained from this tree become invalid.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para>Any errors encountered when parsing the input or returned by hooks or functions. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="93" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="3856" bodyend="3992"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga8f781ac635a0233fb2f58766a83d65cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_update_free</definition>
        <argsstring>(snd_config_update_t *update)</argsstring>
        <name>snd_config_update_free</name>
        <param>
          <type><ref refid="group___config_1gab10b229189a94e3fcbac7f6ca5794cc0" kindref="member">snd_config_update_t</ref> *</type>
          <declname>update</declname>
        </param>
        <briefdescription>
<para>Frees a private update structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">update</parametername>
</parameternamelist>
<parameterdescription>
<para>The private update structure to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="94" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4095" bodyend="4105"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga51dbc0ff1d9b34d753706d09d768116b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_update_free_global</definition>
        <argsstring>(void)</argsstring>
        <name>snd_config_update_free_global</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Frees the global configuration tree in <ref refid="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" kindref="member">snd_config</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This functions releases all resources of the global configuration tree, and sets <ref refid="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" kindref="member">snd_config</ref> to <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="95" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4117" bodyend="4131"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga568fcf6f45808319725ac066714b25a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_update_ref</definition>
        <argsstring>(snd_config_t **top)</argsstring>
        <name>snd_config_update_ref</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>top</declname>
        </param>
        <briefdescription>
<para>Updates <ref refid="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" kindref="member">snd_config</ref> and takes its reference. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if <ref refid="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" kindref="member">snd_config</ref> was up to date, 1 if <ref refid="group___config_1ga6cf7955d3a072d354dab4d7b536c7831" kindref="member">snd_config</ref> was updated, otherwise a negative error code.</para></simplesect>
Unlike <ref refid="group___config_1ga41a3d2202cfb9016e33aa85ea70a4c9c" kindref="member">snd_config_update</ref>, this function increases a reference counter so that the obtained tree won&apos;t be deleted until unreferenced by <ref refid="group___config_1gac87538403cb6f8125468a1af56f42e33" kindref="member">snd_config_unref</ref>.</para><para>This function is supposed to be thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="97" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4033" bodyend="4053"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gae8baa15082818d721607932bb99f318d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_config_ref</definition>
        <argsstring>(snd_config_t *top)</argsstring>
        <name>snd_config_ref</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>top</declname>
          <defname>cfg</defname>
        </param>
        <briefdescription>
<para>Take the reference of the config tree. </para>        </briefdescription>
        <detaileddescription>
<para>Increases a reference counter of the given config tree.</para><para>This function is supposed to be thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="98" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4062" bodyend="4068"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gac87538403cb6f8125468a1af56f42e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_config_unref</definition>
        <argsstring>(snd_config_t *top)</argsstring>
        <name>snd_config_unref</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>top</declname>
          <defname>cfg</defname>
        </param>
        <briefdescription>
<para>Unreference the config tree. </para>        </briefdescription>
        <detaileddescription>
<para>Decreases a reference counter of the given config tree, and eventually deletes the tree if all references are gone. This is the counterpart of <ref refid="group___config_1gac87538403cb6f8125468a1af56f42e33" kindref="member">snd_config_unref</ref>.</para><para>Also, the config taken via <ref refid="group___config_1ga568fcf6f45808319725ac066714b25a8" kindref="member">snd_config_update_ref</ref> must be unreferenced by this function, too.</para><para>This function is supposed to be thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="99" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4082" bodyend="4088"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gabafb8cac2181c4c1e34b99f54421d1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_search</definition>
        <argsstring>(snd_config_t *config, const char *key, snd_config_t **result)</argsstring>
        <name>snd_config_search</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Searches for a node in a configuration tree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the root of the configuration (sub)tree to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Search key: one or more node ids, separated with dots. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>When <emphasis>result</emphasis> != <computeroutput>NULL</computeroutput>, the function puts the handle to the node found at the address specified by <emphasis>result</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function searches for a child node of <emphasis>config</emphasis> that is identified by <emphasis>key</emphasis>, which contains either the id of a direct child node of <emphasis>config</emphasis>, or a series of ids, separated with dots, where each id specifies a node that is contained in the previous compound node.</para><para>In the following example, the comment after each node shows the search key to find that node, assuming that <emphasis>config</emphasis> is a handle to the compound node with id <computeroutput>config:</computeroutput> <programlisting><codeline><highlight class="normal">config<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>42<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&quot;a&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&quot;b&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>&quot;cee&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&quot;b.c&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&quot;b.d&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>2.71828<sp/><sp/>#<sp/>&quot;b.d.e&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOENT</term></varlistentry>
<listitem><para>An id in <emphasis>key</emphasis> does not exist. </para></listitem>
<varlistentry><term>-ENOENT</term></varlistentry>
<listitem><para><emphasis>config</emphasis> or one of its child nodes to be searched is not a compound node. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="101" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="3118" bodyend="3121"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga7b2f5723e44a1b69f2a8555d469803d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_searchv</definition>
        <argsstring>(snd_config_t *config, snd_config_t **result,...)</argsstring>
        <name>snd_config_searchv</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>result</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Searches for a node in a configuration tree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the root of the configuration (sub)tree to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>When <emphasis>result</emphasis> != <computeroutput>NULL</computeroutput>, the function puts the handle to the node found at the address specified by <emphasis>result</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>One or more concatenated dot-separated search keys, terminated with <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This functions searches for a child node of <emphasis>config</emphasis> like <ref refid="group___config_1gabafb8cac2181c4c1e34b99f54421d1c6" kindref="member">snd_config_search</ref>, but the search key is the concatenation of all passed search key strings. For example, the call <programlisting><codeline><highlight class="normal">snd_config_searchv(cfg,<sp/>&amp;res,<sp/>&quot;a&quot;,<sp/>&quot;b.c&quot;,<sp/>&quot;d.e&quot;,<sp/>NULL);</highlight></codeline>
</programlisting> is equivalent to the call <programlisting><codeline><highlight class="normal">snd_config_search(cfg,<sp/>&quot;a.b.c.d.e&quot;,<sp/>&amp;res);</highlight></codeline>
</programlisting></para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOENT</term></varlistentry>
<listitem><para>An id in a search key does not exist. </para></listitem>
<varlistentry><term>-ENOENT</term></varlistentry>
<listitem><para><emphasis>config</emphasis> or one of its child nodes to be searched is not a compound node. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="103" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="3209" bodyend="3212"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gad7c23084ee4052ad33d77db6278db46f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_search_definition</definition>
        <argsstring>(snd_config_t *config, const char *base, const char *key, snd_config_t **result)</argsstring>
        <name>snd_config_search_definition</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>name</defname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Searches for a definition in a configuration tree, using aliases and expanding hooks and arguments. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration (sub)tree to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>Implicit key base, or <computeroutput>NULL</computeroutput> for none. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Key suffix, optionally with arguments. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the expanded found node at the address specified by <emphasis>result</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A non-negative value if successful, otherwise a negative error code.</para></simplesect>
This functions searches for a child node of <emphasis>config</emphasis>, allowing aliases and expanding hooks, like <ref refid="conf_8c_1a1f86a23e559213fb07097637feeac70f" kindref="member">snd_config_search_alias_hooks</ref>.</para><para>If <emphasis>name</emphasis> contains a colon (:), the rest of the string after the colon contains arguments that are expanded as with <ref refid="group___config_1ga7759f41c3757ce72ee9bd118976071c2" kindref="member">snd_config_expand</ref>.</para><para>In any case, <emphasis>result</emphasis> is a new node that must be freed by the caller.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOENT</term></varlistentry>
<listitem><para>An id in <emphasis>key</emphasis> or an alias id does not exist. </para></listitem>
<varlistentry><term>-ENOENT</term></varlistentry>
<listitem><para><emphasis>config</emphasis> or one of its child nodes to be searched is not a compound node. </para></listitem>
</variablelist>
Additionally, any errors encountered when parsing the hook definitions or arguments, or returned by (hook) functions. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="105" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="5048" bodyend="5077"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga7759f41c3757ce72ee9bd118976071c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_expand</definition>
        <argsstring>(snd_config_t *config, snd_config_t *root, const char *args, snd_config_t *private_data, snd_config_t **result)</argsstring>
        <name>snd_config_expand</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>private_data</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Expands a configuration node, applying arguments and functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the root configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments string, can be <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">private_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the private data node for functions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the result configuration node at the address specified by <emphasis>result</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A non-negative value if successful, otherwise a negative error code.</para></simplesect>
If <emphasis>config</emphasis> has arguments (defined by a child with id <computeroutput>@args</computeroutput>), this function replaces any string node beginning with $ with the respective argument value, or the default argument value, or nothing. Furthermore, any functions are evaluated (see <ref refid="group___config_1ga1a51645a07e204d4e814d890452da558" kindref="member">snd_config_evaluate</ref>). The resulting copy of <emphasis>config</emphasis> is returned in <emphasis>result</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="109" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4966" bodyend="5017"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga1a51645a07e204d4e814d890452da558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_evaluate</definition>
        <argsstring>(snd_config_t *config, snd_config_t *root, snd_config_t *private_data, snd_config_t **result)</argsstring>
        <name>snd_config_evaluate</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>private_data</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Evaluates a configuration node at runtime. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the source configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the root of the source configuration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">private_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the private data node for runtime evaluation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A non-negative value if successful, otherwise a negative error code.</para></simplesect>
This function evaluates any functions (<computeroutput>@func</computeroutput>) in <emphasis>config</emphasis> and replaces those nodes with the respective function results. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="112" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4558" bodyend="4564"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gaf62dd825828c05f1d63a62eee7046080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_add</definition>
        <argsstring>(snd_config_t *config, snd_config_t *leaf)</argsstring>
        <name>snd_config_add</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
          <defname>parent</defname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>leaf</declname>
          <defname>child</defname>
        </param>
        <briefdescription>
<para>Adds a child to a compound configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to a compound configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node to be added. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function makes the node <emphasis>child</emphasis> a child of the node <emphasis>parent</emphasis>.</para><para>The parent node then owns the child node, i.e., the child node gets deleted together with its parent.</para><para><emphasis>child</emphasis> must have an id.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>child</emphasis> does not have an id. </para></listitem>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>child</emphasis> already has a parent. </para></listitem>
<varlistentry><term>-EEXIST</term></varlistentry>
<listitem><para><emphasis>parent</emphasis> already contains a child node with the same id as <emphasis>child</emphasis>. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="115" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="1935" bodyend="1949"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga2a006b942faa3335a958a7df7bcea17e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_delete</definition>
        <argsstring>(snd_config_t *config)</argsstring>
        <name>snd_config_delete</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Frees a configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node to be deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function frees a configuration node and all its resources.</para><para>If the node is a child node, it is removed from the tree before being deleted.</para><para>If the node is a compound node, its descendants (the whole subtree) are deleted recursively.</para><para>The function is supposed to be called only for locally copied config trees. For the global tree, take the reference via <ref refid="group___config_1ga568fcf6f45808319725ac066714b25a8" kindref="member">snd_config_update_ref</ref> and free it via <ref refid="group___config_1gac87538403cb6f8125468a1af56f42e33" kindref="member">snd_config_unref</ref>.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2</para></simplesect>
<simplesect kind="see"><para><ref refid="conf_8c_1ad4d69b003662e09e8206a7892e849d27" kindref="member">snd_config_remove</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="116" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="1995" bodyend="2029"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gaec120883e56ecb510e064151e0b11d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_delete_compound_members</definition>
        <argsstring>(const snd_config_t *config)</argsstring>
        <name>snd_config_delete_compound_members</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Deletes the children of a node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the compound configuration node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function removes and frees all children of a configuration node.</para><para>Any compound nodes among the children of <emphasis>config</emphasis> are deleted recursively.</para><para>After a successful call to this function, <emphasis>config</emphasis> is an empty compound node.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a compound node. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="117" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2049" bodyend="2067"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga30f30bd27d13fbb3527270b3fc9e1676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_copy</definition>
        <argsstring>(snd_config_t **dst, snd_config_t *src)</argsstring>
        <name>snd_config_copy</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Creates a copy of a configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new configuration node at the address specified by <emphasis>dst</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the source configuration node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A non-negative value if successful, otherwise a negative error code.</para></simplesect>
This function creates a deep copy, i.e., if <emphasis>src</emphasis> is a compound node, all children are copied recursively.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="118" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4348" bodyend="4352"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gac570ecbaba611ccc12bc235a1f4d0181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_make</definition>
        <argsstring>(snd_config_t **config, const char *key, snd_config_type_t type)</argsstring>
        <name>snd_config_make</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <param>
          <type><ref refid="group___config_1gaa41083e55d19c7755c5d624030e06887" kindref="member">snd_config_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Creates a configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This functions creates a new node of the specified type. The new node has id <emphasis>id</emphasis>, which may be <computeroutput>NULL</computeroutput>.</para><para>The value of the new node is zero (for numbers), or <computeroutput>NULL</computeroutput> (for strings and pointers), or empty (for compound nodes).</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="120" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2088" bodyend="2100"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga838fac581e115574acc3711cad9f5877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_make_integer</definition>
        <argsstring>(snd_config_t **config, const char *key)</argsstring>
        <name>snd_config_make_integer</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <briefdescription>
<para>Creates an integer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887aaa9d6e02cd0eb42db96122c925c023e7" kindref="member">SND_CONFIG_TYPE_INTEGER</ref> and with value <computeroutput>0</computeroutput>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2</para></simplesect>
<simplesect kind="see"><para><ref refid="group___config_1gafeb0552cbed09a3badbb5e74c7a7973d" kindref="member">snd_config_imake_integer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="122" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2122" bodyend="2125"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga2c27175c162fe5027e3f1b3d5420afbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_make_integer64</definition>
        <argsstring>(snd_config_t **config, const char *key)</argsstring>
        <name>snd_config_make_integer64</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <briefdescription>
<para>Creates a 64-bit-integer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a710f962ebb93e3824ddee2d833f735a2" kindref="member">SND_CONFIG_TYPE_INTEGER64</ref> and with value <computeroutput>0</computeroutput>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2</para></simplesect>
<simplesect kind="see"><para><ref refid="group___config_1ga04cfbfda89dc17c19a5a4076271a4d07" kindref="member">snd_config_imake_integer64</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="123" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2147" bodyend="2150"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga8f175813bfc2556bd08fd580f05d36e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_make_real</definition>
        <argsstring>(snd_config_t **config, const char *key)</argsstring>
        <name>snd_config_make_real</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <briefdescription>
<para>Creates a real number configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a0a938daae4006e204150082ab9c73508" kindref="member">SND_CONFIG_TYPE_REAL</ref> and with value <computeroutput>0.0</computeroutput>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group___config_1ga968e5bb773dfea922b5272636b26e9c2" kindref="member">snd_config_imake_real</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="124" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2169" bodyend="2172"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga6764115f489629be027b434c4e323cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_make_string</definition>
        <argsstring>(snd_config_t **config, const char *key)</argsstring>
        <name>snd_config_make_string</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <briefdescription>
<para>Creates a string configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a99eed49f50d4f62a7fc0c95301918f49" kindref="member">SND_CONFIG_TYPE_STRING</ref> and with value <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2</para></simplesect>
<simplesect kind="see"><para><ref refid="group___config_1gaa83035f79027a464bf9d5d31e0a20547" kindref="member">snd_config_imake_string</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="125" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2194" bodyend="2197"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gadbcce71d8d3a78709fc2a78d6f543584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_make_pointer</definition>
        <argsstring>(snd_config_t **config, const char *key)</argsstring>
        <name>snd_config_make_pointer</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <briefdescription>
<para>Creates a pointer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887ab0b5d34e2f16e81d4eb5f933c30158fe" kindref="member">SND_CONFIG_TYPE_POINTER</ref> and with value <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group___config_1gac7c6ce28a676169fff594aa4222705b2" kindref="member">snd_config_imake_pointer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="126" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2216" bodyend="2219"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga2ce24133c1d6828e2afe366284c61e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_make_compound</definition>
        <argsstring>(snd_config_t **config, const char *key, int join)</argsstring>
        <name>snd_config_make_compound</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <param>
          <type>int</type>
          <declname>join</declname>
        </param>
        <briefdescription>
<para>Creates an empty compound configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">join</parametername>
</parameternamelist>
<parameterdescription>
<para>Join flag. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new empty node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a82b5c1a9dbadaa4e36815fc1f01fc2f7" kindref="member">SND_CONFIG_TYPE_COMPOUND</ref>.</para><para><emphasis>join</emphasis> determines how the compound node&apos;s id is printed when the configuration is saved to a text file. For example, if the join flag of compound node <computeroutput>a</computeroutput> is zero, the output will look as follows: <programlisting><codeline><highlight class="normal">a<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>&quot;hello&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>42</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> If, however, the join flag of <computeroutput>a</computeroutput> is nonzero, its id will be joined with its children&apos;s ids, like this: <programlisting><codeline><highlight class="normal">a.b<sp/>&quot;hello&quot;</highlight></codeline>
<codeline><highlight class="normal">a.c<sp/>42</highlight></codeline>
</programlisting> An <emphasis>empty</emphasis> compound node with its join flag set would result in no output, i.e., after saving and reloading the configuration file, that compound node would be lost.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="127" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2259" bodyend="2268"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gafeb0552cbed09a3badbb5e74c7a7973d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_imake_integer</definition>
        <argsstring>(snd_config_t **config, const char *key, const long value)</argsstring>
        <name>snd_config_imake_integer</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <param>
          <type>const long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Creates an integer configuration node with the given initial value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887aaa9d6e02cd0eb42db96122c925c023e7" kindref="member">SND_CONFIG_TYPE_INTEGER</ref> and with value <emphasis>value</emphasis>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="129" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2289" bodyend="2298"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga04cfbfda89dc17c19a5a4076271a4d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_imake_integer64</definition>
        <argsstring>(snd_config_t **config, const char *key, const long long value)</argsstring>
        <name>snd_config_imake_integer64</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <param>
          <type>const long long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Creates a 64-bit-integer configuration node with the given initial value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a710f962ebb93e3824ddee2d833f735a2" kindref="member">SND_CONFIG_TYPE_INTEGER64</ref> and with value <emphasis>value</emphasis>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="130" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2319" bodyend="2328"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga968e5bb773dfea922b5272636b26e9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_imake_real</definition>
        <argsstring>(snd_config_t **config, const char *key, const double value)</argsstring>
        <name>snd_config_imake_real</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Creates a real number configuration node with the given initial value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a0a938daae4006e204150082ab9c73508" kindref="member">SND_CONFIG_TYPE_REAL</ref> and with value <emphasis>value</emphasis>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="131" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2346" bodyend="2355"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gaa83035f79027a464bf9d5d31e0a20547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_imake_string</definition>
        <argsstring>(snd_config_t **config, const char *key, const char *ascii)</argsstring>
        <name>snd_config_imake_string</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ascii</declname>
          <defname>value</defname>
        </param>
        <briefdescription>
<para>Creates a string configuration node with the given initial value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value of the new node. May be <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a99eed49f50d4f62a7fc0c95301918f49" kindref="member">SND_CONFIG_TYPE_STRING</ref> and with a copy of the string <computeroutput>value</computeroutput>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="132" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2376" bodyend="2395"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga5bb83b269c6e41717a3524abcec5f787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_imake_safe_string</definition>
        <argsstring>(snd_config_t **config, const char *key, const char *ascii)</argsstring>
        <name>snd_config_imake_safe_string</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ascii</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="133" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2397" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gac7c6ce28a676169fff594aa4222705b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_imake_pointer</definition>
        <argsstring>(snd_config_t **config, const char *key, const void *ptr)</argsstring>
        <name>snd_config_imake_pointer</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> **</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <defname>id</defname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
          <defname>value</defname>
        </param>
        <briefdescription>
<para>Creates a pointer configuration node with the given initial value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the handle to the new node at the address specified by <emphasis>config</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the new node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value of the new node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function creates a new node of type <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887ab0b5d34e2f16e81d4eb5f933c30158fe" kindref="member">SND_CONFIG_TYPE_POINTER</ref> and with value <computeroutput>value</computeroutput>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="134" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2445" bodyend="2454"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga6def4c43ce325abaa3ddfba5a4f4d138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___config_1gaa41083e55d19c7755c5d624030e06887" kindref="member">snd_config_type_t</ref></type>
        <definition>snd_config_type_t snd_config_get_type</definition>
        <argsstring>(const snd_config_t *config)</argsstring>
        <name>snd_config_get_type</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Returns the type of a configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The node&apos;s type.</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="136" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="1719" bodyend="1722"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga550948931d44695b6d8e8f148f87cb54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_set_id</definition>
        <argsstring>(snd_config_t *config, const char *id)</argsstring>
        <name>snd_config_set_id</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Sets the id of a configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The new node id, must not be <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function stores a copy of <emphasis>id</emphasis> in the node.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EEXIST</term></varlistentry>
<listitem><para>One of <emphasis>config&apos;s</emphasis> siblings already has the id <emphasis>id</emphasis>. </para></listitem>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para>The id of a node with a parent cannot be set to <computeroutput>NULL</computeroutput>. </para></listitem>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="138" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="1762" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga6fd3be48221cae9cee9c7245a0804d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_set_integer</definition>
        <argsstring>(snd_config_t *config, long value)</argsstring>
        <name>snd_config_set_integer</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Changes the value of an integer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not an integer node. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="139" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2470" bodyend="2477"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gafdb63c78c07e11194a28d591b0fbffc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_set_integer64</definition>
        <argsstring>(snd_config_t *config, long long value)</argsstring>
        <name>snd_config_set_integer64</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Changes the value of a 64-bit-integer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a 64-bit-integer node. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="140" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2493" bodyend="2500"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga46c71d5d36c64f0a06ceae956a39fedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_set_real</definition>
        <argsstring>(snd_config_t *config, double value)</argsstring>
        <name>snd_config_set_real</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Changes the value of a real-number configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a real-number node. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="141" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2513" bodyend="2520"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga0f76f8ad47dce7f90580c8d59c6e44f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_set_string</definition>
        <argsstring>(snd_config_t *config, const char *value)</argsstring>
        <name>snd_config_set_string</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Changes the value of a string configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the node. May be <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function deletes the old string in the node and stores a copy of <emphasis>value</emphasis> string in the node.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a string node. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="142" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2539" bodyend="2555"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gac1810a11f576fe339074502f4fed4a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_set_ascii</definition>
        <argsstring>(snd_config_t *config, const char *ascii)</argsstring>
        <name>snd_config_set_ascii</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ascii</declname>
        </param>
        <briefdescription>
<para>Changes the value of a configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ascii</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the node, as an ASCII string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function changes the node&apos;s value to a new value that is parsed from the string <emphasis>ascii</emphasis>. <emphasis>ascii</emphasis> must not be <computeroutput>NULL</computeroutput>, not even for a string node.</para><para>The node&apos;s type does not change, i.e., the string must contain a valid value with the same type as the node&apos;s type. For a string node, the node&apos;s new value is a copy of <emphasis>ascii</emphasis>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a number or string node. </para></listitem>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para>The value in <emphasis>ascii</emphasis> cannot be parsed. </para></listitem>
<varlistentry><term>-ERANGE</term></varlistentry>
<listitem><para>The value in <emphasis>ascii</emphasis> is too big for the node&apos;s type. </para></listitem>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="143" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2604" bodyend="2648"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga037c3bf96326bb6f5dfd340475b34fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_set_pointer</definition>
        <argsstring>(snd_config_t *config, const void *ptr)</argsstring>
        <name>snd_config_set_pointer</name>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
          <defname>value</defname>
        </param>
        <briefdescription>
<para>Changes the value of a pointer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the node. May be <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function does not free the old pointer in the node.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a pointer node. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="144" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2570" bodyend="2577"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gae366751e8ea98aeb69f9ef876f7b949c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_id</definition>
        <argsstring>(const snd_config_t *config, const char **value)</argsstring>
        <name>snd_config_get_id</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>value</declname>
          <defname>id</defname>
        </param>
        <briefdescription>
<para>Returns the id of a configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">id</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the pointer to the id string at the address specified by <emphasis>id</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
The returned string is owned by the configuration node; the application must not modify or delete it, and the string becomes invalid when the node&apos;s id changes or when the node is freed.</para><para>If the node does not have an id, <emphasis>*id</emphasis> is set to <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="145" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="1740" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gabfbc36060fd4f5d1d929938443f95559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_integer</definition>
        <argsstring>(const snd_config_t *config, long *value)</argsstring>
        <name>snd_config_get_integer</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>value</declname>
          <defname>ptr</defname>
        </param>
        <briefdescription>
<para>Returns the value of an integer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The node&apos;s value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not an integer node. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="146" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2664" bodyend="2671"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gaf4d9e68918f7d49d7b4b14ffbe94afc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_integer64</definition>
        <argsstring>(const snd_config_t *config, long long *value)</argsstring>
        <name>snd_config_get_integer64</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>value</declname>
          <defname>ptr</defname>
        </param>
        <briefdescription>
<para>Returns the value of a 64-bit-integer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The node&apos;s value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a 64-bit-integer node. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="147" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2687" bodyend="2694"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gad4d23c0bf941527d80aeb6f991bf88c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_real</definition>
        <argsstring>(const snd_config_t *config, double *value)</argsstring>
        <name>snd_config_get_real</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>value</declname>
          <defname>ptr</defname>
        </param>
        <briefdescription>
<para>Returns the value of a real-number configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The node&apos;s value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a real-number node. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="148" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2707" bodyend="2714"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga79738baffa6fa7722b1027ab84ac61bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_ireal</definition>
        <argsstring>(const snd_config_t *config, double *value)</argsstring>
        <name>snd_config_get_ireal</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>value</declname>
          <defname>ptr</defname>
        </param>
        <briefdescription>
<para>Returns the value of a real or integer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The node&apos;s value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
If the node&apos;s type is integer or integer64, the value is converted to the <computeroutput>double</computeroutput> type on the fly.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a number node. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="149" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2730" bodyend="2742"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga5ab99983d1d93ddbcde9bb69a1e4f9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_string</definition>
        <argsstring>(const snd_config_t *config, const char **value)</argsstring>
        <name>snd_config_get_string</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>value</declname>
          <defname>ptr</defname>
        </param>
        <briefdescription>
<para>Returns the value of a string configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the node&apos;s value at the address specified by <emphasis>ptr</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
The returned string is owned by the configuration node; the application must not modify or delete it, and the string becomes invalid when the node&apos;s value changes or when the node is freed.</para><para>The string may be <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a string node. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="150" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2765" bodyend="2772"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gaa26f97e098a0dd2cd5e28299b6b6c132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_ascii</definition>
        <argsstring>(const snd_config_t *config, char **value)</argsstring>
        <name>snd_config_get_ascii</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>value</declname>
          <defname>ascii</defname>
        </param>
        <briefdescription>
<para>Returns the value of a configuration node as a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ascii</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the pointer to the returned string at the address specified by <emphasis>ascii</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This function dynamically allocates the returned string. The application is responsible for deleting it with <computeroutput>free()</computeroutput> when it is no longer used.</para><para>For a string node with <computeroutput>NULL</computeroutput> value, the returned string is <computeroutput>NULL</computeroutput>.</para><para>Supported node types are <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887aaa9d6e02cd0eb42db96122c925c023e7" kindref="member">SND_CONFIG_TYPE_INTEGER</ref>, <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a710f962ebb93e3824ddee2d833f735a2" kindref="member">SND_CONFIG_TYPE_INTEGER64</ref>, <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a0a938daae4006e204150082ab9c73508" kindref="member">SND_CONFIG_TYPE_REAL</ref>, and <ref refid="group___config_1ggaa41083e55d19c7755c5d624030e06887a99eed49f50d4f62a7fc0c95301918f49" kindref="member">SND_CONFIG_TYPE_STRING</ref>.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a (64-bit) integer or real number or string node. </para></listitem>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="151" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2822" bodyend="2885"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga54868e0fa30458ef1c259772a8e7c6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_pointer</definition>
        <argsstring>(const snd_config_t *config, const void **value)</argsstring>
        <name>snd_config_get_pointer</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>value</declname>
          <defname>ptr</defname>
        </param>
        <briefdescription>
<para>Returns the value of a pointer configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the node&apos;s value at the address specified by <emphasis>ptr</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>config</emphasis> is not a string node. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="152" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2786" bodyend="2793"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gaeec157fd161a138e402c9bd243bbd408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_test_id</definition>
        <argsstring>(const snd_config_t *config, const char *id)</argsstring>
        <name>snd_config_test_id</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Compares the id of a configuration node to a given string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII id. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The same value as the result of the <computeroutput>strcmp</computeroutput> function, i.e., less than zero if <emphasis>config&apos;s</emphasis> id is lexicographically less than <emphasis>id</emphasis>, zero if <emphasis>config&apos;s</emphasis> id is equal to id, greater than zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="153" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="2896" bodyend="2903"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gac8965466674c10b9a119d591ed484cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___config_1ga6c621ab8875a222e1fcb56e9feed6ec6" kindref="member">snd_config_iterator_t</ref></type>
        <definition>snd_config_iterator_t snd_config_iterator_first</definition>
        <argsstring>(const snd_config_t *node)</argsstring>
        <name>snd_config_iterator_first</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>node</declname>
          <defname>config</defname>
        </param>
        <briefdescription>
<para>Returns an iterator pointing to a node&apos;s first child. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to a configuration node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to <emphasis>config&apos;s</emphasis> first child.</para></simplesect>
<emphasis>config</emphasis> must be a compound node.</para><para>The returned iterator is valid if it is not equal to the return value of <ref refid="group___config_1gac08a30bc630481f69feb2170fed4afda" kindref="member">snd_config_iterator_end</ref> on <emphasis>config</emphasis>.</para><para>Use <ref refid="group___config_1gaa91fe1d926d88041ed516a6a7293f606" kindref="member">snd_config_iterator_entry</ref> to get the handle of the node pointed to.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="155" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4149" bodyend="4153"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga10c27ddc83c78680d91a167dd2f0a3cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___config_1ga6c621ab8875a222e1fcb56e9feed6ec6" kindref="member">snd_config_iterator_t</ref></type>
        <definition>snd_config_iterator_t snd_config_iterator_next</definition>
        <argsstring>(const snd_config_iterator_t iterator)</argsstring>
        <name>snd_config_iterator_next</name>
        <param>
          <type>const <ref refid="group___config_1ga6c621ab8875a222e1fcb56e9feed6ec6" kindref="member">snd_config_iterator_t</ref></type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Returns an iterator pointing to the next sibling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator pointing to a child configuration node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the next sibling of <emphasis>iterator</emphasis>.</para></simplesect>
The returned iterator is valid if it is not equal to the return value of <ref refid="group___config_1gac08a30bc630481f69feb2170fed4afda" kindref="member">snd_config_iterator_end</ref> on the node&apos;s parent.</para><para>Use <ref refid="group___config_1gaa91fe1d926d88041ed516a6a7293f606" kindref="member">snd_config_iterator_entry</ref> to get the handle of the node pointed to.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="156" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4169" bodyend="4172"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gac08a30bc630481f69feb2170fed4afda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___config_1ga6c621ab8875a222e1fcb56e9feed6ec6" kindref="member">snd_config_iterator_t</ref></type>
        <definition>snd_config_iterator_t snd_config_iterator_end</definition>
        <argsstring>(const snd_config_t *node)</argsstring>
        <name>snd_config_iterator_end</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>node</declname>
          <defname>config</defname>
        </param>
        <briefdescription>
<para>Returns an iterator that ends a node&apos;s children list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to a configuration node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator that indicates the end of <emphasis>config&apos;s</emphasis> children list.</para></simplesect>
<emphasis>config</emphasis> must be a compound node.</para><para>The return value can be understood as pointing past the last child of <emphasis>config</emphasis>.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="157" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4187" bodyend="4191"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gaa91fe1d926d88041ed516a6a7293f606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
        <definition>snd_config_t* snd_config_iterator_entry</definition>
        <argsstring>(const snd_config_iterator_t iterator)</argsstring>
        <name>snd_config_iterator_entry</name>
        <param>
          <type>const <ref refid="group___config_1ga6c621ab8875a222e1fcb56e9feed6ec6" kindref="member">snd_config_iterator_t</ref></type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Returns the configuration node handle pointed to by an iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>A configuration node iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The configuration node handle pointed to by <emphasis>iterator</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="158" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/conf.c" bodystart="4201" bodyend="4204"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga11dfab861b537b564f0c76d9b1eb2935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_bool_ascii</definition>
        <argsstring>(const char *ascii)</argsstring>
        <name>snd_config_get_bool_ascii</name>
        <param>
          <type>const char *</type>
          <declname>ascii</declname>
        </param>
        <briefdescription>
<para>Gets the boolean value from the given ASCII string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ascii</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be parsed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or 1 if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="182" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/confmisc.c" bodystart="88" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gae5d80ee31e779992fd14672fd850a3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_bool</definition>
        <argsstring>(const snd_config_t *conf)</argsstring>
        <name>snd_config_get_bool</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Gets the boolean value from a configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node to be parsed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or 1 if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="183" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/confmisc.c" bodystart="116" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga5759c972706da4bd3be35c9336568bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_ctl_iface_ascii</definition>
        <argsstring>(const char *ascii)</argsstring>
        <name>snd_config_get_ctl_iface_ascii</name>
        <param>
          <type>const char *</type>
          <declname>ascii</declname>
        </param>
        <briefdescription>
<para>Gets the control interface index from the given ASCII string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ascii</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be parsed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The control interface index if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="184" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/confmisc.c" bodystart="150" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gaaf1c1ea4801961e3107ca23ba89bd429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_config_get_ctl_iface</definition>
        <argsstring>(const snd_config_t *conf)</argsstring>
        <name>snd_config_get_ctl_iface</name>
        <param>
          <type>const <ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Gets the control interface index from a configuration node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the configuration node to be parsed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The control interface index if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="185" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/confmisc.c" bodystart="173" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1gaf35b51ab61fd7ea628ab088a1b444aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_names_list</definition>
        <argsstring>(const char *iface, snd_devname_t **list)</argsstring>
        <name>snd_names_list</name>
        <param>
          <type>const char *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>snd_devname_t **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>This function is unimplemented. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Since 1.0.14 </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="203" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/names.c" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group___config_1ga665741321b3c1c3f07a6eeb969406cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_names_list_free</definition>
        <argsstring>(snd_devname_t *list)</argsstring>
        <name>snd_names_list_free</name>
        <param>
          <type>snd_devname_t *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>This function is unimplemented. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Since 1.0.14 </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="204" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/names.c" bodystart="53" bodyend="55"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___config_1ga96fd234b2ce9c03a9e82f4e854cc65ce" prot="public" static="no">
        <name>SND_CONFIG_DLSYM_VERSION_EVALUATE</name>
        <initializer>_dlsym_config_evaluate_001</initializer>
        <briefdescription>
<para><computeroutput>dlsym</computeroutput> version for the config evaluate callback. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="43" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___config_1ga948b35b3df554e2e06ba5bb9f5452704" prot="public" static="no">
        <name>SND_CONFIG_DLSYM_VERSION_HOOK</name>
        <initializer>_dlsym_config_hook_001</initializer>
        <briefdescription>
<para><computeroutput>dlsym</computeroutput> version for the config hook callback. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="45" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___config_1gac3f21333e1f9b602cad9b06cb418fa80" prot="public" static="no">
        <name>snd_config_for_each</name>
        <param><defname>pos</defname></param>
        <param><defname>next</defname></param>
        <param><defname>node</defname></param>
        <initializer>for (pos = <ref refid="group___config_1gac8965466674c10b9a119d591ed484cef" kindref="member">snd_config_iterator_first</ref>(node), next = <ref refid="group___config_1ga10c27ddc83c78680d91a167dd2f0a3cb" kindref="member">snd_config_iterator_next</ref>(pos); pos != <ref refid="group___config_1gac08a30bc630481f69feb2170fed4afda" kindref="member">snd_config_iterator_end</ref>(node); pos = next, next = <ref refid="group___config_1ga10c27ddc83c78680d91a167dd2f0a3cb" kindref="member">snd_config_iterator_next</ref>(pos))</initializer>
        <briefdescription>
<para>Helper macro to iterate over the children of a compound node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator variable for the current node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">next</parametername>
</parameternamelist>
<parameterdescription>
<para>Temporary iterator variable for the next node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the compound configuration node to iterate over.</para></parameterdescription>
</parameteritem>
</parameterlist>
Use this macro like a <computeroutput>for</computeroutput> statement, e.g.: <programlisting><codeline><highlight class="normal">snd_config_iterator_t<sp/>pos,<sp/>next;</highlight></codeline>
<codeline><highlight class="normal">snd_config_for_each(pos,<sp/>next,<sp/>node)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>snd_config_t<sp/>*entry<sp/>=<sp/>snd_config_iterator_entry(pos);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>This macro allows deleting or removing the current node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" line="177" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/conf.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The configuration functions and types allow you to read, enumerate, modify and write the contents of ALSA configuration files. </para>    </detaileddescription>
  </compounddef>
</doxygen>
