<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pcm__ioplug_8c" kind="file" language="C++">
    <compoundname>pcm_ioplug.c</compoundname>
    <includes local="yes">pcm_local.h</includes>
    <includes refid="pcm__ioplug_8h" local="yes">pcm_ioplug.h</includes>
    <includes local="yes">pcm_ext_parm.h</includes>
    <includes local="yes">pcm_generic.h</includes>
    <incdepgraph>
      <node id="500">
        <label>/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c</label>
        <link refid="pcm__ioplug_8c"/>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
      </node>
      <node id="503">
        <label>pcm_ext_parm.h</label>
      </node>
      <node id="501">
        <label>pcm_local.h</label>
      </node>
      <node id="502">
        <label>pcm_ioplug.h</label>
        <link refid="pcm__ioplug_8h"/>
      </node>
      <node id="504">
        <label>pcm_generic.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1ga7fb5213a5e776246e2b4dc53ec8d7604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_create</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug, const char *name, snd_pcm_stream_t stream, int mode)</argsstring>
        <name>snd_pcm_ioplug_create</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Create an ioplug instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of PCM </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream direction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM open mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
Creates the ioplug instance.</para><para>The callback is the mandatory field of ioplug handle. At least, start, stop and pointer callbacks must be set before calling this function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" line="974" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="974" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1ga286ec116983166de889f0268a2c666ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_delete</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug)</argsstring>
        <name>snd_pcm_ioplug_delete</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <briefdescription>
<para>Delete the ioplug instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" line="1026" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1026" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1gad74355dfaa56fae80d49181c83eeecc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_ioplug_params_reset</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug)</argsstring>
        <name>snd_pcm_ioplug_params_reset</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <briefdescription>
<para>Reset ioplug parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle</para></parameterdescription>
</parameteritem>
</parameterlist>
Resets the all parameters for the given ioplug handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" line="1038" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1038" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1ga7d713552fb846ccdf4b7ec6a9fc1b562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_set_param_list</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug, int type, unsigned int num_list, const unsigned int *list)</argsstring>
        <name>snd_pcm_ioplug_set_param_list</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_list</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Set parameter as the list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_list</parametername>
</parameternamelist>
<parameterdescription>
<para>number of available values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of available values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
Sets the parameter as the list. The available values of the given parameter type is restricted to the ones of the given list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" line="1055" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1055" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1gab62d470b02661214319196394b55fb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_set_param_minmax</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug, int type, unsigned int min, unsigned int max)</argsstring>
        <name>snd_pcm_ioplug_set_param_minmax</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Set parameter as the min/max values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
Sets the parameter as the min/max values. The available values of the given parameter type is restricted between the given minimum and maximum values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" line="1079" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1079" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1gab223893226ecf78f675c89959a8c421a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_reinit_status</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug)</argsstring>
        <name>snd_pcm_ioplug_reinit_status</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <briefdescription>
<para>Reinitialize the poll and mmap status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
Reinitializes the poll and the mmap status of the PCM. Call this function to propagate the status change in the ioplug instance to its PCM internals. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" line="1104" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1104" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1gac3b666ff286745c9eb24de3e3930970a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
        <definition>const snd_pcm_channel_area_t* snd_pcm_ioplug_mmap_areas</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug)</argsstring>
        <name>snd_pcm_ioplug_mmap_areas</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <briefdescription>
<para>Get mmap area of ioplug. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the mmap channel areas if available, or NULL</para></simplesect>
Returns the mmap channel areas if available. When mmap_rw field is not set, this function always returns NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" line="1124" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1124" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1ga65feed7caf26f07aad0c722fc61fe751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_set_state</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug, snd_pcm_state_t state)</argsstring>
        <name>snd_pcm_ioplug_set_state</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" kindref="member">snd_pcm_state_t</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Change the ioplug PCM status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>the PCM status </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if successful or a negative error code</para></simplesect>
Changes the PCM status of the ioplug to the given value. This function can be used for external plugins to notify the status change, e.g. XRUN. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" line="1141" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1141" bodyend="1145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>I/O Plugin SDK. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Takashi Iwai <ulink url="mailto:tiwai@suse.de">tiwai@suse.de</ulink> </para></simplesect>
<simplesect kind="date"><para>2005 </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c"/>
  </compounddef>
</doxygen>
