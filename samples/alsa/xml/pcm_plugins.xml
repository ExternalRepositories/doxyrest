<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pcm_plugins" kind="page">
    <compoundname>pcm_plugins</compoundname>
    <title>PCM (digital audio) plugins</title>
    <detaileddescription>
<para>PCM plugins extends functionality and features of PCM devices. The plugins take care about various sample conversions, sample copying among channels and so on.</para><sect1 id="pcm_plugins_1pcm_plugins_slave">
<title>Slave definition</title>
<para>The slave plugin can be specified directly with a string or the definition can be entered inside a compound configuration node. Some restrictions can be also specified (like static rate or count of channels).</para><para><programlisting><codeline><highlight class="normal">pcm_slave.NAME<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/>#<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/>#<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>format<sp/>STR<sp/><sp/>#<sp/>Format<sp/>or<sp/>&quot;unchanged&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>channels<sp/>INT<sp/><sp/><sp/><sp/>#<sp/>Count<sp/>of<sp/>channels<sp/>or<sp/>&quot;unchanged&quot;<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rate<sp/>INT<sp/><sp/><sp/><sp/>#<sp/>Rate<sp/>in<sp/>Hz<sp/>or<sp/>&quot;unchanged&quot;<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>period_time<sp/>INT<sp/>#<sp/>Period<sp/>time<sp/>in<sp/>us<sp/>or<sp/>&quot;unchanged&quot;<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_time<sp/>INT<sp/>#<sp/>Buffer<sp/>time<sp/>in<sp/>us<sp/>or<sp/>&quot;unchanged&quot;<sp/>string</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Example:</para><para><programlisting><codeline><highlight class="normal">pcm_slave.slave_rate44100Hz<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pcm<sp/>&quot;hw:0,0&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rate<sp/>44100</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">pcm.rate44100Hz<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>plug</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>slave_rate44100Hz</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The equivalent configuration (in one compound):</para><para><programlisting><codeline><highlight class="normal">pcm.rate44100Hz<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>plug</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>&quot;hw:0,0&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate<sp/>44100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="pcm_plugins_1pcm_plugins_hw">
<title>Plugin: hw</title>
<para>This plugin communicates directly with the ALSA kernel driver. It is a raw communication without any conversions. The emulation of mmap access can be optionally enabled, but expect worse latency in the case.</para><para>The nonblock option specifies whether the device is opened in a non-blocking manner. Note that the blocking behavior for read/write access won&apos;t be changed by this option. This influences only on the blocking behavior at opening the device. If you would like to keep the compatibility with the older ALSA stuff, turn this option off.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>hw<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Kernel<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>card<sp/>INT/STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Card<sp/>name<sp/>(string)<sp/>or<sp/>number<sp/>(integer)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[device<sp/>INT]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Device<sp/>number<sp/>(default<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[subdevice<sp/>INT]<sp/><sp/><sp/><sp/><sp/>#<sp/>Subdevice<sp/>number<sp/>(default<sp/>-1:<sp/>first<sp/>available)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[sync_ptr_ioctl<sp/>BOOL]<sp/><sp/><sp/>#<sp/>Use<sp/>SYNC_PTR<sp/>ioctl<sp/>rather<sp/>than<sp/>the<sp/>direct<sp/>mmap<sp/>access<sp/>for<sp/>control<sp/>structures</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[nonblock<sp/>BOOL]<sp/><sp/><sp/><sp/><sp/>#<sp/>Force<sp/>non-blocking<sp/>open<sp/>mode</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[format<sp/>STR]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Restrict<sp/>only<sp/>to<sp/>the<sp/>given<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[channels<sp/>INT]<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Restrict<sp/>only<sp/>to<sp/>the<sp/>given<sp/>channels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[rate<sp/>INT]<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Restrict<sp/>only<sp/>to<sp/>the<sp/>given<sp/>rate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[chmap<sp/>MAP]<sp/><sp/><sp/><sp/><sp/>#<sp/>Override<sp/>channel<sp/>maps;<sp/>MAP<sp/>is<sp/>a<sp/>string<sp/>array</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_hw_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__hw_8c_1a06abf5d78c26a9d8e79fd0428a5c7183" kindref="member">snd_pcm_hw_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__hw_8c_1a7687673b2a39b944c5693043446afaf9" kindref="member">_snd_pcm_hw_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_mmap_emul">
<title>Plugin: mmap_emul</title>
<para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>mmap_emul</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_mmap_emul_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__hw_8c_1a7687673b2a39b944c5693043446afaf9" kindref="member">_snd_pcm_hw_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_shm">
<title>Plugin: shm</title>
<para>This plugin communicates with aserver via shared memory. It is a raw communication without any conversions, but it can be expected worse performance.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>shm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Shared<sp/>memory<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>server<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Server<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_shm_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__shm_8c_1a3684b5fb80a3549a9176cbc7ea9e5181" kindref="member">snd_pcm_shm_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__shm_8c_1adc046ce3ea6720d3545bb2158266bc75" kindref="member">_snd_pcm_shm_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_null">
<title>Plugin: Null</title>
<para>This plugin discards contents of a PCM stream or creates a stream with zero samples.</para><para>Note: This implementation uses devices /dev/null (playback, must be writable) and /dev/full (capture, must be readable).</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>null<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Null<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[chmap<sp/>MAP]<sp/><sp/><sp/><sp/><sp/>#<sp/>Provide<sp/>channel<sp/>maps;<sp/>MAP<sp/>is<sp/>a<sp/>string<sp/>array</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_null_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__null_8c_1ad1e47f314d908607cf908d9859359724" kindref="member">snd_pcm_null_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__null_8c_1af964b1e41d92a723748128014026ebd6" kindref="member">_snd_pcm_null_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_copy">
<title>Plugin: copy</title>
<para>This plugin copies samples from master copy PCM to given slave PCM. The channel count, format and rate must match for both of them.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>copy<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Copy<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_copy_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__copy_8c_1a97fb1b1587b7905bbc908cf7d03a727a" kindref="member">snd_pcm_copy_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__copy_8c_1a47dd871325fe6dfe7650443de19e31ba" kindref="member">_snd_pcm_copy_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_linear">
<title>Plugin: linear</title>
<para>This plugin converts linear samples from master linear conversion PCM to given slave PCM. The channel count, format and rate must match for both of them.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>linear<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Linear<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_linear_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__linear_8c_1ad5aad633e536382e36d128aa074ae2d5" kindref="member">snd_pcm_linear_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__linear_8c_1a705b6ecd46bb7ceb0cfef986404686f8" kindref="member">_snd_pcm_linear_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_lfloat">
<title>Plugin: linear&lt;-&gt;float</title>
<para>This plugin converts linear to float samples and float to linear samples from master linear&lt;-&gt;float conversion PCM to given slave PCM. The channel count, format and rate must match for both of them.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>lfloat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Linear&lt;-&gt;Float<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_lfloat_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__lfloat_8c_1a1cf1d379cfe222a0205356e72ae1e460" kindref="member">snd_pcm_lfloat_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__lfloat_8c_1a073916f2bcb53f0020b5fd5c371f4fc8" kindref="member">_snd_pcm_lfloat_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_mulaw">
<title>Plugin: Mu-Law</title>
<para>This plugin converts Mu-Law samples to linear or linear to Mu-Law samples from master Mu-Law conversion PCM to given slave PCM. The channel count, format and rate must match for both of them.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>mulaw<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Mu-Law<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_mulaw_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__mulaw_8c_1a5180265fc0f22f9eeabaa15555bcd072" kindref="member">snd_pcm_mulaw_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__mulaw_8c_1aac8ed7d538562e09d0b8bbfe08df3665" kindref="member">_snd_pcm_mulaw_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_alaw">
<title>Plugin: A-Law</title>
<para>This plugin converts A-Law samples to linear or linear to A-Law samples from master A-Law conversion PCM to given slave PCM. The channel count, format and rate must match for both of them.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>alaw<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>A-Law<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_alaw_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__alaw_8c_1adfc7fc62627b564e1a6e0a3069730a56" kindref="member">snd_pcm_alaw_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__alaw_8c_1a033d4c03b15175509e960689b5d515b0" kindref="member">_snd_pcm_alaw_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_adpcm">
<title>Plugin: Ima-ADPCM</title>
<para>This plugin converts Ima-ADPCM samples to linear or linear to Ima-ADPCM samples from master Ima-ADPCM conversion PCM to given slave PCM. The channel count, format and rate must match for both of them.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>adpcm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Ima-ADPCM<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_adpcm_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__adpcm_8c_1afc781f794b0c705552491b6707bf2c86" kindref="member">snd_pcm_adpcm_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__adpcm_8c_1a71eccece5048625c5648aa4b1077c271" kindref="member">_snd_pcm_adpcm_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_route">
<title>Plugin: Route &amp; Volume</title>
<para>This plugin converts channels and applies volume during the conversion. The format and rate must match for both of them.</para><para>SCHANNEL can be a channel name instead of a number (e g FL, LFE). If so, a matching channel map will be selected for the slave.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>route<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Route<sp/>&amp;<sp/>Volume<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[format<sp/>STR]<sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[channels<sp/>INT]<sp/><sp/>#<sp/>Slave<sp/>channels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ttable<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Transfer<sp/>table<sp/>(bi-dimensional<sp/>compound<sp/>of<sp/>cchannels<sp/>*<sp/>schannels<sp/>numbers)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCHANNEL<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCHANNEL<sp/>REAL<sp/><sp/><sp/>#<sp/>route<sp/>value<sp/>(0.0<sp/>-<sp/>1.0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_route_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__route_8c_1ae19a77e8ec26dc93b8be5a93e7391550" kindref="member">snd_pcm_route_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__route_8c_1abee47f3c05e74d83bf2a96559de9a262" kindref="member">_snd_pcm_route_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_rate">
<title>Plugin: Rate</title>
<para>This plugin converts a stream rate. The input and output formats must be linear.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>rate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Rate<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>rate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[format<sp/>STR]<sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>converter<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>optional</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>converter<sp/>[<sp/>STR1<sp/>STR2<sp/>...<sp/>]<sp/>#<sp/>optional</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Converter<sp/>type,<sp/>default<sp/>is<sp/>taken<sp/>from</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>defaults.pcm.rate_converter</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_rate_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__rate_8c_1acbc33a01e5c38505fb8777e8a3cb808f" kindref="member">snd_pcm_rate_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__rate_8c_1aa2b39b0460f63d709b2244be669c479b" kindref="member">_snd_pcm_rate_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_plug">
<title>Automatic conversion plugin</title>
<para>This plugin converts channels, rate and format on request.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>plug<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Automatic<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[format<sp/>STR]<sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format<sp/>(default<sp/>nearest)<sp/>or<sp/>&quot;unchanged&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[channels<sp/>INT]<sp/><sp/>#<sp/>Slave<sp/>channels<sp/>(default<sp/>nearest)<sp/>or<sp/>&quot;unchanged&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[rate<sp/>INT]<sp/><sp/>#<sp/>Slave<sp/>rate<sp/>(default<sp/>nearest)<sp/>or<sp/>&quot;unchanged&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>route_policy<sp/>STR<sp/><sp/><sp/><sp/>#<sp/>route<sp/>policy<sp/>for<sp/>automatic<sp/>ttable<sp/>generation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>STR<sp/>can<sp/>be<sp/>&apos;default&apos;,<sp/>&apos;average&apos;,<sp/>&apos;copy&apos;,<sp/>&apos;duplicate&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>average:<sp/>result<sp/>is<sp/>average<sp/>of<sp/>input<sp/>channels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>copy:<sp/>only<sp/>first<sp/>channels<sp/>are<sp/>copied<sp/>to<sp/>destination</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>duplicate:<sp/>duplicate<sp/>first<sp/>set<sp/>of<sp/>channels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>default:<sp/>copy<sp/>policy,<sp/>except<sp/>for<sp/>mono<sp/>capture<sp/>-<sp/>sum</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ttable<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Transfer<sp/>table<sp/>(bi-dimensional<sp/>compound<sp/>of<sp/>cchannels<sp/>*<sp/>schannels<sp/>numbers)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCHANNEL<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCHANNEL<sp/>REAL<sp/><sp/><sp/>#<sp/>route<sp/>value<sp/>(0.0<sp/>-<sp/>1.0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rate_converter<sp/>STR<sp/><sp/>#<sp/>type<sp/>of<sp/>rate<sp/>converter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rate_converter<sp/>[<sp/>STR1<sp/>STR2<sp/>...<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>type<sp/>of<sp/>rate<sp/>converter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>default<sp/>value<sp/>is<sp/>taken<sp/>from<sp/>defaults.pcm.rate_converter</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_plug_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para>snd_pcm_plug_open() </para></listitem>
<listitem>
<para>_snd_pcm_plug_open() </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_file">
<title>Plugin: File</title>
<para>This plugin stores contents of a PCM stream to file or pipes the stream to a command, and optionally uses an existing file as an input data source (i.e., &quot;virtual mic&quot;)</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>file<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>File<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Output<sp/>filename<sp/>(or<sp/>shell<sp/>command<sp/>the<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>will<sp/>be<sp/>piped<sp/>to<sp/>if<sp/>STR<sp/>starts<sp/>with<sp/>the<sp/>pipe</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>char).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>STR<sp/>can<sp/>contain<sp/>format<sp/>keys,<sp/>replaced<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>real<sp/>values<sp/>corresponding<sp/>to<sp/>the<sp/>stream:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>%r<sp/><sp/><sp/><sp/>rate<sp/>(replaced<sp/>with:<sp/>48000)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>%c<sp/><sp/><sp/><sp/>channels<sp/>(replaced<sp/>with:<sp/>2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>%b<sp/><sp/><sp/><sp/>bits<sp/>per<sp/>sample<sp/>(replaced<sp/>with:<sp/>16)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>%f<sp/><sp/><sp/><sp/>sample<sp/>format<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(replaced<sp/>with:<sp/>S16_LE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>%%<sp/><sp/><sp/><sp/>replaced<sp/>with<sp/>%</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Output<sp/>file<sp/>descriptor<sp/>number</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>infile<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Input<sp/>filename<sp/>-<sp/>only<sp/>raw<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>infile<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Input<sp/>file<sp/>descriptor<sp/>number</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[format<sp/>STR]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>File<sp/>format<sp/>(&quot;raw&quot;<sp/>or<sp/>&quot;wav&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[perm<sp/>INT]<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Output<sp/>file<sp/>permission<sp/>(octal,<sp/>def.<sp/>0600)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_file_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__file_8c_1a2d295a1bebec45e0541de03b86de0703" kindref="member">snd_pcm_file_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__file_8c_1a3732156e2f368386a89f2f200c496b0a" kindref="member">_snd_pcm_file_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_multi">
<title>Plugin: Multiple streams to One</title>
<para>This plugin converts multiple streams to one.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>multi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Multiple<sp/>streams<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slaves<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slaves<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>INT<sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>channels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Bindings<sp/>table</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/>#<sp/>Slave<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel<sp/>INT<sp/>#<sp/>Slave<sp/>channel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[master<sp/>INT]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Define<sp/>the<sp/>master<sp/>slave</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>For example, to bind two PCM streams with two-channel stereo (hw:0,0 and hw:0,1) as one 4-channel stereo PCM stream, define like this: <programlisting><codeline><highlight class="normal">pcm.quad<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>multi</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slaves.a.pcm<sp/>&quot;hw:0,0&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slaves.a.channels<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slaves.b.pcm<sp/>&quot;hw:0,1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slaves.b.channels<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings.0.slave<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings.0.channel<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings.1.slave<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings.1.channel<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings.2.slave<sp/>b</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings.2.channel<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings.3.slave<sp/>b</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings.3.channel<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Note that the resultant pcm &quot;quad&quot; is not in the interleaved format but in the &quot;complex&quot; format. Hence, it&apos;s not accessible by applications which can handle only the interleaved (or the non-interleaved) format. In such a case, wrap this PCM with <ref refid="pcm_plugins_1pcm_plugins_route" kindref="member">route</ref> or <ref refid="pcm_plugins_1pcm_plugins_plug" kindref="member">plug</ref> plugin. <programlisting><codeline><highlight class="normal">pcm.quad2<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>route</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave.pcm<sp/>&quot;quad&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ttable.0.0<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ttable.1.1<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ttable.2.2<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ttable.3.3<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_multi_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__multi_8c_1a9cd9738f81265d5255a9c28bbccb8bb4" kindref="member">snd_pcm_multi_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__multi_8c_1aeb0fcef35d9f9bf598384cfe46e163a5" kindref="member">_snd_pcm_multi_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_share">
<title>Plugin: Share</title>
<para>This plugin allows sharing of multiple channels with more clients. The access to each channel is exlusive (samples are not mixed together). It means, if the channel zero is used with first client, the channel cannot be used with second one. If you are looking for a mixing plugin, use the <ref refid="pcm_plugins_1pcm_plugins_dmix" kindref="member">dmix plugin</ref>.</para><para>The difference from <ref refid="pcm_plugins_1pcm_plugins_dshare" kindref="member">dshare plugin</ref> is that share plugin requires the server program &quot;aserver&quot;, while dshare plugin doesn&apos;t need the explicit server but access to the shared buffer.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>share<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Share<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[format<sp/>STR]<sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[channels<sp/>INT]<sp/><sp/>#<sp/>Slave<sp/>channels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[rate<sp/>INT]<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>rate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[period_time<sp/>INT]<sp/>#<sp/>Slave<sp/>period<sp/>time<sp/>in<sp/>us</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[buffer_time<sp/>INT]<sp/>#<sp/>Slave<sp/>buffer<sp/>time<sp/>in<sp/>us</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>channel<sp/>INT<sp/>for<sp/>client<sp/>channel<sp/>N</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_share_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__share_8c_1ab7c7e88e681d727250e67b6fbd11e245" kindref="member">snd_pcm_share_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__share_8c_1a201ff59d8aad291bfd324fef114bf2d9" kindref="member">_snd_pcm_share_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_hooks">
<title>Plugin: hooks</title>
<para>This plugin is used to call some &apos;hook&apos; function when this plugin is opened, modified or closed. Typically, it is used to change control values for a certain state specially for the PCM (see the example below).</para><para><programlisting><codeline><highlight class="normal">#<sp/>Hook<sp/>arguments<sp/>definition</highlight></codeline>
<codeline><highlight class="normal">hook_args.NAME<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Arbitrary<sp/>arguments</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>PCM<sp/>hook<sp/>type</highlight></codeline>
<codeline><highlight class="normal">pcm_hook_type.NAME<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[lib<sp/>STR]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Library<sp/>file<sp/>(default<sp/>libasound.so)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[install<sp/>STR]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Install<sp/>function<sp/>(default<sp/>_snd_pcm_hook_NAME_install)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>PCM<sp/>hook<sp/>definition</highlight></codeline>
<codeline><highlight class="normal">pcm_hook.NAME<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>PCM<sp/>Hook<sp/>type<sp/>(see<sp/>pcm_hook_type)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[args<sp/>STR]<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Arguments<sp/>for<sp/>install<sp/>function<sp/>(see<sp/>hook_args)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[args<sp/>{<sp/>}]<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Arguments<sp/>for<sp/>install<sp/>function</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>PCM<sp/>hook<sp/>plugin</highlight></codeline>
<codeline><highlight class="normal">pcm.NAME<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>hooks<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>PCM<sp/>with<sp/>hooks</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>hooks<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Hook<sp/>name<sp/>(see<sp/>pcm_hook)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Hook<sp/>definition<sp/>(see<sp/>pcm_hook)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Example:</para><para><programlisting><codeline><highlight class="normal">hooks.0<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>ctl_elems</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>hook_args<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>&quot;Wave<sp/>Surround<sp/>Playback<sp/>Volume&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preserve<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lock<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>[<sp/>0<sp/>0<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>&quot;EMU10K1<sp/>PCM<sp/>Send<sp/>Volume&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>{<sp/>@func<sp/>private_pcm_subdevice<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lock<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>[<sp/>0<sp/>0<sp/>0<sp/>0<sp/>0<sp/>0<sp/>255<sp/>0<sp/>0<sp/>0<sp/>0<sp/>255<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Here, the controls &quot;Wave Surround Playback Volume&quot; and &quot;EMU10K1 PCM Send Volume&quot; are set to the given values when this pcm is accessed. Since these controls take multi-dimensional values, the <computeroutput>value</computeroutput> field is written as an array. When <computeroutput>preserve</computeroutput> is true, the old values are saved and restored when the pcm is closed. The <computeroutput>lock</computeroutput> means that the control is locked during this pcm is opened, and cannot be changed by others. When <computeroutput>optional</computeroutput> is set, no error is returned but ignored even if the specified control doesn&apos;t exist.</para><sect2 id="pcm_plugins_1pcm_plugins_hooks_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para>The function ctl_elems - <ref refid="pcm__hooks_8c_1abfd89c986184f010df8646b46e623490" kindref="member">_snd_pcm_hook_ctl_elems_install()</ref> - installs CTL settings described by given configuration. </para></listitem>
<listitem>
<para><ref refid="pcm__hooks_8c_1a0355f8ca87a7361b1c3fdd36baf05175" kindref="member">snd_pcm_hooks_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__hooks_8c_1a4d7e604b82a739945aefde32395bea24" kindref="member">_snd_pcm_hooks_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_dmix">
<title>Plugin: dmix</title>
<para>This plugin provides direct mixing of multiple streams. The resolution for 32-bit mixing is only 24-bit. The low significant byte is filled with zeros. The extra 8 bits are used for the saturation.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>dmix<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Direct<sp/>mix</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key<sp/>INT<sp/><sp/><sp/><sp/><sp/>#<sp/>unique<sp/>IPC<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key_add_uid<sp/>BOOL<sp/><sp/><sp/><sp/>#<sp/>add<sp/>current<sp/>uid<sp/>to<sp/>unique<sp/>IPC<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_perm<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>IPC<sp/>permissions<sp/>(octal,<sp/>default<sp/>0600)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>STR</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/>#<sp/>slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/>#<sp/>slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>STR<sp/><sp/>#<sp/>format<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate<sp/>INT<sp/><sp/><sp/><sp/>#<sp/>rate<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>INT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_time<sp/>INT<sp/>#<sp/>in<sp/>usec</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_size<sp/>INT<sp/>#<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_time<sp/>INT<sp/>#<sp/>in<sp/>usec</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size<sp/>INT<sp/>#<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>periods<sp/>INT<sp/>#<sp/>when<sp/>buffer_size<sp/>or<sp/>buffer_time<sp/>is<sp/>not<sp/>specified</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>note:<sp/>this<sp/>is<sp/>client<sp/>independent!!!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>maps<sp/>slave<sp/>channel<sp/>to<sp/>client<sp/>channel<sp/>N</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slowptr<sp/>BOOL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>slow<sp/>but<sp/>more<sp/>precise<sp/>pointer<sp/>updates</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><computeroutput>ipc_key</computeroutput> specfies the unique IPC key in integer. This number must be unique for each different dmix definition, since the shared memory is created with this key number. When <computeroutput>ipc_key_add_uid</computeroutput> is set true, the uid value is added to the value set in <computeroutput>ipc_key</computeroutput>. This will avoid the confliction of the same IPC key with different users concurrently.</para><para>Note that the dmix plugin itself supports only a single configuration. That is, it supports only the fixed rate (default 48000), format (<computeroutput>S16</computeroutput>), channels (2), and period_time (125000). For using other configuration, you have to set the value explicitly in the slave PCM definition. The rate, format and channels can be covered by an additional <ref refid="pcm_plugins_1pcm_plugins_dmix" kindref="member">plug plugin</ref>, but there is only one base configuration, anyway.</para><para>An example configuration for setting 44100 Hz, <computeroutput>S32_LE</computeroutput> format as the slave PCM of &quot;hw:0&quot; is like below: <programlisting><codeline><highlight class="normal">pcm.dmix_44<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>dmix</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key<sp/>321456<sp/><sp/>#<sp/>any<sp/>unique<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key_add_uid<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>&quot;hw:0&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>S32_LE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate<sp/>44100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> You can hear 48000 Hz samples still using this dmix pcm via plug plugin like: <programlisting><codeline><highlight class="normal">%<sp/>aplay<sp/>-Dplug:dmix_44<sp/>foo_48k.wav</highlight></codeline>
</programlisting></para><para>For using the dmix plugin for OSS emulation device, you have to set the period and the buffer sizes in power of two. For example, <programlisting><codeline><highlight class="normal">pcm.dmixoss<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>dmix</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key<sp/>321456<sp/><sp/>#<sp/>any<sp/>unique<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key_add_uid<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>&quot;hw:0&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_time<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_size<sp/>1024<sp/><sp/>#<sp/>must<sp/>be<sp/>power<sp/>of<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size<sp/>8192<sp/><sp/>#<sp/>ditto</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <computeroutput>period_time 0</computeroutput> must be set, too, for resetting the default value. In the case of soundcards with multi-channel IO, adding the bindings would help <programlisting><codeline><highlight class="normal">pcm.dmixoss<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>0<sp/><sp/><sp/>#<sp/>map<sp/>from<sp/>0<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>1<sp/><sp/><sp/>#<sp/>map<sp/>from<sp/>1<sp/>to<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> so that only the first two channels are used by dmix. Also, note that ICE1712 have the limited buffer size, 5513 frames (corresponding to 640 kB). In this case, reduce the buffer_size to 4096.</para><sect2 id="pcm_plugins_1pcm_plugins_dmix_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__dmix_8c_1ae31120062bceb47f24d18e672f728b4f" kindref="member">snd_pcm_dmix_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__dmix_8c_1a98332eee00abd086c486bc63ade4484e" kindref="member">_snd_pcm_dmix_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_dshare">
<title>Plugin: dshare</title>
<para>This plugin provides sharing channels. Unlike <ref refid="pcm_plugins_1pcm_plugins_share" kindref="member">share plugin</ref>, this plugin doesn&apos;t need the explicit server program but accesses the shared buffer concurrently from each client as well as <ref refid="pcm_plugins_1pcm_plugins_dmix" kindref="member">dmix</ref> and <ref refid="pcm_plugins_1pcm_plugins_dsnoop" kindref="member">dsnoop</ref> plugins do. The parameters below are almost identical with these plugins.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>dshare<sp/><sp/><sp/><sp/><sp/>#<sp/>Direct<sp/>sharing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key<sp/>INT<sp/><sp/><sp/><sp/><sp/>#<sp/>unique<sp/>IPC<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key_add_uid<sp/>BOOL<sp/><sp/><sp/><sp/>#<sp/>add<sp/>current<sp/>uid<sp/>to<sp/>unique<sp/>IPC<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_perm<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>IPC<sp/>permissions<sp/>(octal,<sp/>default<sp/>0600)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>STR</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/>#<sp/>slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/>#<sp/>slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>STR<sp/><sp/>#<sp/>format<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate<sp/>INT<sp/><sp/><sp/><sp/>#<sp/>rate<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>INT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_time<sp/>INT<sp/>#<sp/>in<sp/>usec</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_size<sp/>INT<sp/>#<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_time<sp/>INT<sp/>#<sp/>in<sp/>usec</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size<sp/>INT<sp/>#<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>periods<sp/>INT<sp/>#<sp/>when<sp/>buffer_size<sp/>or<sp/>buffer_time<sp/>is<sp/>not<sp/>specified</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>note:<sp/>this<sp/>is<sp/>client<sp/>independent!!!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>maps<sp/>slave<sp/>channel<sp/>to<sp/>client<sp/>channel<sp/>N</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slowptr<sp/>BOOL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>slow<sp/>but<sp/>more<sp/>precise<sp/>pointer<sp/>updates</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_dshare_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__dshare_8c_1a88bec432614f2a75100c33ed8dfd97b6" kindref="member">snd_pcm_dshare_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__dshare_8c_1ae837c9fab4f6e2e0b08aa7864c19901b" kindref="member">_snd_pcm_dshare_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_dsnoop">
<title>Plugin: dsnoop</title>
<para>This plugin splits one capture stream to more. It works the reverse way of <ref refid="pcm_plugins_1pcm_plugins_dmix" kindref="member">dmix plugin</ref>, reading the shared capture buffer from many clients concurrently. The meaning of parameters below are almost identical with dmix plugin.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>dsnoop<sp/><sp/><sp/><sp/><sp/>#<sp/>Direct<sp/>snoop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key<sp/>INT<sp/><sp/><sp/><sp/><sp/>#<sp/>unique<sp/>IPC<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_key_add_uid<sp/>BOOL<sp/><sp/><sp/><sp/>#<sp/>add<sp/>current<sp/>uid<sp/>to<sp/>unique<sp/>IPC<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ipc_perm<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>IPC<sp/>permissions<sp/>(octal,<sp/>default<sp/>0600)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>STR</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/>#<sp/>slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/>#<sp/>slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>STR<sp/><sp/>#<sp/>format<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate<sp/>INT<sp/><sp/><sp/><sp/>#<sp/>rate<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>INT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_time<sp/>INT<sp/>#<sp/>in<sp/>usec</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_size<sp/>INT<sp/>#<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_time<sp/>INT<sp/>#<sp/>in<sp/>usec</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size<sp/>INT<sp/>#<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>periods<sp/>INT<sp/>#<sp/>when<sp/>buffer_size<sp/>or<sp/>buffer_time<sp/>is<sp/>not<sp/>specified</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bindings<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>note:<sp/>this<sp/>is<sp/>client<sp/>independent!!!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>maps<sp/>slave<sp/>channel<sp/>to<sp/>client<sp/>channel<sp/>N</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slowptr<sp/>BOOL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>slow<sp/>but<sp/>more<sp/>precise<sp/>pointer<sp/>updates</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_dsnoop_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__dsnoop_8c_1a8cb7e3979f25d99e74e7a1e6d016436e" kindref="member">snd_pcm_dsnoop_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__dsnoop_8c_1a6f504effb6bc99326e94e3450602cd37" kindref="member">_snd_pcm_dsnoop_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_ladpsa">
<title>Plugin: LADSPA &lt;-&gt; ALSA</title>
<para>This plugin allows to apply a set of LADPSA plugins. The input and output format is always <ref refid="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a7d9fd83c6ff5be7a9cde4b0673b64bf0" kindref="member">SND_PCM_FORMAT_FLOAT</ref> (note: this type can be either little or big-endian depending on architecture).</para><para>The policy duplicate means that there must be only one binding definition for channel zero. This definition is automatically duplicated for all channels. If the LADSPA plugin has multiple audio inputs or outputs the policy duplicate is automatically switched to policy none.</para><para>The plugin serialization works as expected. You can eventually use more channels (inputs / outputs) inside the LADPSA plugin chain than processed in the ALSA plugin chain. If ALSA channel does not exist for given LADSPA input audio port, zero samples are given to this LADSPA port. On the output side (ALSA next plugin input), the valid channels are checked, too. If specific ALSA channel does not exist, the LADSPA output port is connected to a dummy sample area.</para><para>Instances of LADSPA plugins are created dynamically.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>ladspa<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>ALSA&lt;-&gt;LADSPA<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[channels<sp/>INT]<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>count<sp/>input<sp/>channels<sp/>(input<sp/>to<sp/>LADSPA<sp/>plugin<sp/>chain)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[path<sp/>STR]<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Path<sp/>(directory)<sp/>with<sp/>LADSPA<sp/>plugins</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>plugins<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Definition<sp/>for<sp/>both<sp/>directions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playback_plugins<sp/>|<sp/><sp/>#<sp/>Definition<sp/>for<sp/>playback<sp/>direction</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>capture_plugins<sp/>{<sp/><sp/><sp/>#<sp/>Definition<sp/>for<sp/>capture<sp/>direction</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>{<sp/><sp/><sp/><sp/><sp/>#<sp/>Configuration<sp/>for<sp/>LADPSA<sp/>plugin<sp/>N</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[id<sp/>INT]<sp/><sp/><sp/><sp/>#<sp/>LADSPA<sp/>plugin<sp/>ID<sp/>(for<sp/>example<sp/>1043)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[label<sp/>STR]<sp/>#<sp/>LADSPA<sp/>plugin<sp/>label<sp/>(for<sp/>example<sp/>&apos;delay_5s&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[filename<sp/>STR]<sp/><sp/>#<sp/>Full<sp/>filename<sp/>of<sp/>.so<sp/>library<sp/>with<sp/>LADSPA<sp/>plugin<sp/>code</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[policy<sp/>STR]<sp/><sp/><sp/><sp/>#<sp/>Policy<sp/>can<sp/>be<sp/>&apos;none&apos;<sp/>or<sp/>&apos;duplicate&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>|<sp/>output<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindings<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>INT<sp/>or<sp/>STR<sp/><sp/><sp/><sp/>#<sp/>C<sp/>-<sp/>channel,<sp/>INT<sp/>-<sp/>audio<sp/>port<sp/>index,<sp/>STR<sp/>-<sp/>audio<sp/>port<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>controls<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>valid<sp/>only<sp/>in<sp/>the<sp/>input<sp/>block</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>INT<sp/>or<sp/>REAL<sp/><sp/><sp/>#<sp/>I<sp/>-<sp/>control<sp/>port<sp/>index,<sp/>INT<sp/>or<sp/>REAL<sp/>-<sp/>control<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STR<sp/>INT<sp/>or<sp/>REAL<sp/>#<sp/>STR<sp/>-<sp/>control<sp/>port<sp/>name,<sp/>INT<sp/>or<sp/>REAL<sp/>-<sp/>control<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_ladspa_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__ladspa_8c_1adcc43e9aeb068d3f8e1cd17d7f8a92cc" kindref="member">snd_pcm_ladspa_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__ladspa_8c_1af310f491d26253256cdf8589334a64d2" kindref="member">_snd_pcm_ladspa_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_asym">
<title>Plugin: asym</title>
<para>This plugin is a combination of playback and capture PCM streams. Slave PCMs can be defined asymmetrically for both directions.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>asym<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Asym<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playback<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Playback<sp/>slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playback<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Playback<sp/>slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capture<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Capture<sp/>slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capture<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Capture<sp/>slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>For example, you can combine a dmix plugin and a dsnoop plugin as as a single PCM for playback and capture directions, respectively. <programlisting><codeline><highlight class="normal">pcm.duplex<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>asym</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>playback.pcm<sp/>&quot;dmix&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>capture.pcm<sp/>&quot;dsnoop&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>By defining only a single direction, the resultant PCM becomes half-duplex.</para><sect2 id="pcm_plugins_1pcm_plugins_asym_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__asym_8c_1a39d690db97257936622f800f1d81d306" kindref="member">_snd_pcm_asym_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_iec958">
<title>Plugin: IEC958</title>
<para>This plugin converts 32bit IEC958 subframe samples to linear, or linear to 32bit IEC958 subframe samples.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>iec958<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>IEC958<sp/>subframe<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[status<sp/>status-bytes]<sp/><sp/><sp/>#<sp/>IEC958<sp/>status<sp/>bits<sp/>(given<sp/>in<sp/>byte<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>IEC958<sp/>preamble<sp/>bits<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>B/M/W<sp/>or<sp/>Z/X/Y,<sp/>B<sp/>=<sp/>block<sp/>start,<sp/>M<sp/>=<sp/>even<sp/>subframe,<sp/>W<sp/>=<sp/>odd<sp/>subframe</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>As<sp/>default,<sp/>Z<sp/>=<sp/>0x08,<sp/>Y<sp/>=<sp/>0x04,<sp/>X<sp/>=<sp/>0x02</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[preamble.z<sp/>or<sp/>preamble.b<sp/>val]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[preamble.x<sp/>or<sp/>preamble.m<sp/>val]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[preamble.y<sp/>or<sp/>preamble.w<sp/>val]</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_iec958_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__iec958_8c_1a5838de1fbcdbbc2debfd3995aa8f402b" kindref="member">snd_pcm_iec958_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__iec958_8c_1aa2e0ac89b0b3190b5cf4c31c97e77620" kindref="member">_snd_pcm_iec958_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_softvol">
<title>Plugin: Soft Volume</title>
<para>This plugin applies the software volume attenuation. The format, rate and channels must match for both of source and destination.</para><para>When the control is stereo (count=2), the channels are assumed to be either mono, 2.0, 2.1, 4.0, 4.1, 5.1 or 7.1.</para><para>If the control already exists and it&apos;s a system control (i.e. no user-defined control), the plugin simply passes its slave without any changes.</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>softvol<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Soft<sp/>Volume<sp/>conversion<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcm<sp/>{<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>PCM<sp/>definition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[format<sp/>STR]<sp/><sp/><sp/><sp/>#<sp/>Slave<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>control<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>control<sp/>element<sp/>id<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[card<sp/>STR]<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>control<sp/>card<sp/>index</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[iface<sp/>STR]<sp/><sp/><sp/><sp/><sp/>#<sp/>interface<sp/>of<sp/>the<sp/>element</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[index<sp/>INT]<sp/><sp/><sp/><sp/><sp/>#<sp/>index<sp/>of<sp/>the<sp/>element</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[device<sp/>INT]<sp/><sp/><sp/><sp/>#<sp/>device<sp/>number<sp/>of<sp/>the<sp/>element</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[subdevice<sp/>INT]<sp/>#<sp/>subdevice<sp/>number<sp/>of<sp/>the<sp/>element</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[count<sp/>INT]<sp/><sp/><sp/><sp/><sp/>#<sp/>control<sp/>channels<sp/>1<sp/>or<sp/>2<sp/>(default:<sp/>2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[min_dB<sp/>REAL]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>minimal<sp/>dB<sp/>value<sp/>(default:<sp/>-51.0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[max_dB<sp/>REAL]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>maximal<sp/>dB<sp/>value<sp/>(default:<sp/><sp/><sp/>0.0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[resolution<sp/>INT]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>resolution<sp/>(default:<sp/>256)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>resolution<sp/>=<sp/>2<sp/>means<sp/>a<sp/>mute<sp/>switch</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_softvol_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__softvol_8c_1ad569db39824bb0a31c73dd9d4948a4b7" kindref="member">snd_pcm_softvol_open()</ref> </para></listitem>
<listitem>
<para><ref refid="pcm__softvol_8c_1a4347460ac616c9a323681021c6498d0d" kindref="member">_snd_pcm_softvol_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
<sect1 id="pcm_plugins_1pcm_plugins_null">
<title>Plugin: Null</title>
<para>This plugin discards contents of a PCM stream or creates a stream with zero samples.</para><para>Note: This implementation uses devices /dev/null (playback, must be writable) and /dev/full (capture, must be readable).</para><para><programlisting><codeline><highlight class="normal">pcm.name<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>null<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Null<sp/>PCM</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><sect2 id="pcm_plugins_1pcm_plugins_null_funcref">
<title>Function reference</title>
<para><itemizedlist>
<listitem>
<para><ref refid="pcm__empty_8c_1a55df6f9b1b71d37ea91557cc26e8ab3a" kindref="member">_snd_pcm_empty_open()</ref> </para></listitem>
</itemizedlist>
</para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
