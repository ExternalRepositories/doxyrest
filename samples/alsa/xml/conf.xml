<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="conf" kind="page">
    <compoundname>conf</compoundname>
    <title>Configuration files</title>
    <detaileddescription>
<para>Configuration files use a simple format allowing modern data description like nesting and array assignments.</para><sect1 id="conf_1conf_whitespace">
<title>Whitespace</title>
<para>Whitespace is the collective name given to spaces (blanks), horizontal and vertical tabs, newline characters, and comments. Whitespace can indicate where configuration tokens start and end, but beyond this function, any surplus whitespace is discarded. For example, the two sequences</para><para><programlisting><codeline><highlight class="normal">a<sp/>1<sp/>b<sp/>2</highlight></codeline>
</programlisting></para><para>and</para><para><programlisting><codeline><highlight class="normal">a<sp/>1<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>b<sp/>2</highlight></codeline>
</programlisting></para><para>are lexically equivalent and parse identically to give the four tokens:</para><para><programlisting><codeline><highlight class="normal">a</highlight></codeline>
<codeline><highlight class="normal">1</highlight></codeline>
<codeline><highlight class="normal">b</highlight></codeline>
<codeline><highlight class="normal">2</highlight></codeline>
</programlisting></para><para>The ASCII characters representing whitespace can occur within literal strings, in which case they are protected from the normal parsing process (they remain as part of the string). For example:</para><para><programlisting><codeline><highlight class="normal">name<sp/>&quot;John<sp/>Smith&quot;</highlight></codeline>
</programlisting></para><para>parses to two tokens, including the single literal-string token &quot;John
Smith&quot;.</para></sect1>
<sect1 id="conf_1conf_linesplicing">
<title>Line continuation with</title>
<para>A special case occurs if a newline character in a string is preceded by a backslash (). The backslash and the new line are both discarded, allowing two physical lines of text to be treated as one unit.</para><para><programlisting><codeline><highlight class="normal">&quot;John<sp/>\</highlight></codeline>
<codeline><highlight class="normal">Smith&quot;</highlight></codeline>
</programlisting></para><para>is parsed as &quot;John Smith&quot;.</para></sect1>
<sect1 id="conf_1conf_comments">
<title>Comments</title>
<para>A single-line comment begins with the character #. The comment can start at any position, and extends to the end of the line.</para><para><programlisting><codeline><highlight class="normal">a<sp/>1<sp/><sp/>#<sp/>this<sp/>is<sp/>a<sp/>comment</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="conf_1conf_include">
<title>Including configuration files</title>
<para>To include another configuration file, write the file name in angle brackets. The prefix <computeroutput>confdir:</computeroutput> will reference the global configuration directory.</para><para><programlisting><codeline><highlight class="normal">&lt;/etc/alsa1.conf&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;confdir:pcm/surround.conf&gt;</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="conf_1conf_punctuators">
<title>Punctuators</title>
<para>The configuration punctuators (also known as separators) are:</para><para><programlisting><codeline><highlight class="normal">{}<sp/>[]<sp/>,<sp/>;<sp/>=<sp/>.<sp/>&apos;<sp/>&quot;<sp/>new-line<sp/>form-feed<sp/>carriage-return<sp/>whitespace</highlight></codeline>
</programlisting></para><sect2 id="conf_1conf_braces">
<title>Braces</title>
<para>Opening and closing braces { } indicate the start and end of a compound statement:</para><para><programlisting><codeline><highlight class="normal">a<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>b<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="conf_1conf_brackets">
<title>Brackets</title>
<para>Opening and closing brackets indicate a single array definition. The identifiers are automatically generated starting with zero.</para><para><programlisting><codeline><highlight class="normal">a<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;first&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;second&quot;</highlight></codeline>
<codeline><highlight class="normal">]</highlight></codeline>
</programlisting></para><para>The above code is equal to</para><para><programlisting><codeline><highlight class="normal">a.0<sp/>&quot;first&quot;</highlight></codeline>
<codeline><highlight class="normal">a.1<sp/>&quot;second&quot;</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="conf_1conf_comma_semicolon">
<title>Comma and semicolon</title>
<para>The comma (,) or semicolon (;) can separate value assignments. It is not strictly required to use these separators because whitespace suffices to separate tokens.</para><para><programlisting><codeline><highlight class="normal">a<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">b<sp/>1,</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="conf_1conf_equal">
<title>Equal sign</title>
<para>The equal sign (=) can separate variable declarations from initialization lists:</para><para><programlisting><codeline><highlight class="normal">a=1</highlight></codeline>
<codeline><highlight class="normal">b=2</highlight></codeline>
</programlisting></para><para>Using equal signs is not required because whitespace suffices to separate tokens.</para></sect2>
</sect1>
<sect1 id="conf_1conf_assigns">
<title>Assignments</title>
<para>The configuration file defines id (key) and value pairs. The id (key) can be composed from ASCII digits, characters from a to z and A to Z, and the underscore (_). The value can be either a string, an integer, a real number, or a compound statement.</para><sect2 id="conf_1conf_single">
<title>Single assignments</title>
<para><programlisting><codeline><highlight class="normal">a<sp/>1<sp/>#<sp/>is<sp/>equal<sp/>to</highlight></codeline>
<codeline><highlight class="normal">a=1<sp/>#<sp/>is<sp/>equal<sp/>to</highlight></codeline>
<codeline><highlight class="normal">a=1;<sp/><sp/><sp/><sp/>#<sp/>is<sp/>equal<sp/>to</highlight></codeline>
<codeline><highlight class="normal">a<sp/>1,</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="conf_1conf_compound">
<title>Compound assignments (definitions using braces)</title>
<para><programlisting><codeline><highlight class="normal">a<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">a={</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>b<sp/>1,</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect2>
</sect1>
<sect1 id="conf_1conf_compound1">
<title>Compound assignments (one key definitions)</title>
<para><programlisting><codeline><highlight class="normal">a.b<sp/>1</highlight></codeline>
<codeline><highlight class="normal">a.b=1</highlight></codeline>
</programlisting></para><sect2 id="conf_1conf_array">
<title>Array assignments (definitions using brackets)</title>
<para><programlisting><codeline><highlight class="normal">a<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;first&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;second&quot;</highlight></codeline>
<codeline><highlight class="normal">]</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="conf_1conf_array1">
<title>Array assignments (one key definitions)</title>
<para><programlisting><codeline><highlight class="normal">a.0<sp/>&quot;first&quot;</highlight></codeline>
<codeline><highlight class="normal">a.1<sp/>&quot;second&quot;</highlight></codeline>
</programlisting></para></sect2>
</sect1>
<sect1 id="conf_1conf_mode">
<title>Operation modes for parsing nodes</title>
<para>By default, the node operation mode is &apos;merge+create&apos;, i.e., if a configuration node is not present a new one is created, otherwise the latest assignment is merged (if possible - type checking). The &apos;merge+create&apos; operation mode is specified with the prefix character plus (+).</para><para>The operation mode &apos;merge&apos; merges the node with the old one (which must exist). Type checking is done, so strings cannot be assigned to integers and so on. This mode is specified with the prefix character minus (-).</para><para>The operation mode &apos;do not override&apos; ignores a new configuration node if a configuration node with the same name exists. This mode is specified with the prefix character question mark (?).</para><para>The operation mode &apos;override&apos; always overrides the old configuration node with new contents. This mode is specified with the prefix character exclamation mark (!).</para><para><programlisting><codeline><highlight class="normal">defaults.pcm.!device<sp/>1</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="conf_1conf_syntax_summary">
<title>Syntax summary</title>
<para><programlisting><codeline><highlight class="normal">#<sp/>Configuration<sp/>file<sp/>syntax</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Include<sp/>a<sp/>new<sp/>configuration<sp/>file</highlight></codeline>
<codeline><highlight class="normal">&lt;filename&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Simple<sp/>assignment</highlight></codeline>
<codeline><highlight class="normal">name<sp/>[=]<sp/>value<sp/>[,|;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Compound<sp/>assignment<sp/>(first<sp/>style)</highlight></codeline>
<codeline><highlight class="normal">name<sp/>[=]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name1<sp/>[=]<sp/>value<sp/>[,|;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Compound<sp/>assignment<sp/>(second<sp/>style)</highlight></codeline>
<codeline><highlight class="normal">name.name1<sp/>[=]<sp/>value<sp/>[,|;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Array<sp/>assignment<sp/>(first<sp/>style)</highlight></codeline>
<codeline><highlight class="normal">name<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value0<sp/>[,|;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value1<sp/>[,|;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Array<sp/>assignment<sp/>(second<sp/>style)</highlight></codeline>
<codeline><highlight class="normal">name.0<sp/>[=]<sp/>value0<sp/>[,|;]</highlight></codeline>
<codeline><highlight class="normal">name.1<sp/>[=]<sp/>value1<sp/>[,|;]</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="conf_1conf_syntax_ref">
<title>References</title>
<para><ref refid="confarg" kindref="compound">Runtime arguments in configuration files</ref> <ref refid="conffunc" kindref="compound">Runtime functions in configuration files</ref> <ref refid="confhooks" kindref="compound">Hooks in configuration files</ref> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
