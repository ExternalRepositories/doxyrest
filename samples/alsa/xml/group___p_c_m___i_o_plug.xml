<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___p_c_m___i_o_plug" kind="group">
    <compoundname>PCM_IOPlug</compoundname>
    <title>External I/O plugin SDK</title>
    <innerclass refid="structsnd__pcm__ioplug" prot="public">snd_pcm_ioplug</innerclass>
    <innerclass refid="structsnd__pcm__ioplug__callback" prot="public">snd_pcm_ioplug_callback</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___p_c_m___i_o_plug_1ga726ca809ffd3d67ab4b8476646f26635" prot="public" static="no">
        <name>@6</name>
        <enumvalue id="group___p_c_m___i_o_plug_1gga726ca809ffd3d67ab4b8476646f26635adf64bb9d9a7f95f878e8bb22e003c357" prot="public">
          <name>SND_PCM_IOPLUG_HW_ACCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>access type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___i_o_plug_1gga726ca809ffd3d67ab4b8476646f26635aa7186fa6ab3791611363c83f725f1a57" prot="public">
          <name>SND_PCM_IOPLUG_HW_FORMAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___i_o_plug_1gga726ca809ffd3d67ab4b8476646f26635a5cb59832a513d2b87166000d3f4035e2" prot="public">
          <name>SND_PCM_IOPLUG_HW_CHANNELS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>channels </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___i_o_plug_1gga726ca809ffd3d67ab4b8476646f26635a43827c9773bc5c40a1643bd8f930c8d1" prot="public">
          <name>SND_PCM_IOPLUG_HW_RATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rate </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___i_o_plug_1gga726ca809ffd3d67ab4b8476646f26635aafe12ebbe6f618aa75cc7c5d64d45eda" prot="public">
          <name>SND_PCM_IOPLUG_HW_PERIOD_BYTES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>period bytes </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___i_o_plug_1gga726ca809ffd3d67ab4b8476646f26635a004f7b7af23b37d30d520777158e8277" prot="public">
          <name>SND_PCM_IOPLUG_HW_BUFFER_BYTES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>buffer bytes </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___i_o_plug_1gga726ca809ffd3d67ab4b8476646f26635a1f68c89ac11ae9fe28710cee044a0b94" prot="public">
          <name>SND_PCM_IOPLUG_HW_PERIODS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>number of periods </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___i_o_plug_1gga726ca809ffd3d67ab4b8476646f26635ab024a119736127e7a606c75e57d34585" prot="public">
          <name>SND_PCM_IOPLUG_HW_PARAMS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max number of hw constraints </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>hw constraints for ioplug </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="42" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" bodystart="42" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" prot="public" static="no">
        <type><ref refid="structsnd__pcm__ioplug" kindref="compound">snd_pcm_ioplug</ref></type>
        <definition>typedef struct snd_pcm_ioplug snd_pcm_ioplug_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_ioplug_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I/O plugin handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="59" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m___i_o_plug_1ga9bbf2927f689c96faa7b6c5c89286355" prot="public" static="no">
        <type><ref refid="structsnd__pcm__ioplug__callback" kindref="compound">snd_pcm_ioplug_callback</ref></type>
        <definition>typedef struct snd_pcm_ioplug_callback snd_pcm_ioplug_callback_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_ioplug_callback_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback table of ioplug </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="60" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1ga7fb5213a5e776246e2b4dc53ec8d7604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_create</definition>
        <argsstring>(snd_pcm_ioplug_t *io, const char *name, snd_pcm_stream_t stream, int mode)</argsstring>
        <name>snd_pcm_ioplug_create</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>io</declname>
          <defname>ioplug</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Create an ioplug instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of PCM </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream direction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM open mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
Creates the ioplug instance.</para><para>The callback is the mandatory field of ioplug handle. At least, start, stop and pointer callbacks must be set before calling this function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="212" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="974" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1ga286ec116983166de889f0268a2c666ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_delete</definition>
        <argsstring>(snd_pcm_ioplug_t *io)</argsstring>
        <name>snd_pcm_ioplug_delete</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>io</declname>
          <defname>ioplug</defname>
        </param>
        <briefdescription>
<para>Delete the ioplug instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="214" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1026" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1gab223893226ecf78f675c89959a8c421a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_reinit_status</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug)</argsstring>
        <name>snd_pcm_ioplug_reinit_status</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <briefdescription>
<para>Reinitialize the poll and mmap status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
Reinitializes the poll and the mmap status of the PCM. Call this function to propagate the status change in the ioplug instance to its PCM internals. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="217" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1104" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1gac3b666ff286745c9eb24de3e3930970a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
        <definition>const snd_pcm_channel_area_t* snd_pcm_ioplug_mmap_areas</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug)</argsstring>
        <name>snd_pcm_ioplug_mmap_areas</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <briefdescription>
<para>Get mmap area of ioplug. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the mmap channel areas if available, or NULL</para></simplesect>
Returns the mmap channel areas if available. When mmap_rw field is not set, this function always returns NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="220" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1124" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1gad74355dfaa56fae80d49181c83eeecc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_ioplug_params_reset</definition>
        <argsstring>(snd_pcm_ioplug_t *io)</argsstring>
        <name>snd_pcm_ioplug_params_reset</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>io</declname>
          <defname>ioplug</defname>
        </param>
        <briefdescription>
<para>Reset ioplug parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle</para></parameterdescription>
</parameteritem>
</parameterlist>
Resets the all parameters for the given ioplug handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="223" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1038" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1gab62d470b02661214319196394b55fb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_set_param_minmax</definition>
        <argsstring>(snd_pcm_ioplug_t *io, int type, unsigned int min, unsigned int max)</argsstring>
        <name>snd_pcm_ioplug_set_param_minmax</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>io</declname>
          <defname>ioplug</defname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Set parameter as the min/max values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
Sets the parameter as the min/max values. The available values of the given parameter type is restricted between the given minimum and maximum values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="226" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1079" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1ga7d713552fb846ccdf4b7ec6a9fc1b562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_set_param_list</definition>
        <argsstring>(snd_pcm_ioplug_t *io, int type, unsigned int num_list, const unsigned int *list)</argsstring>
        <name>snd_pcm_ioplug_set_param_list</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>io</declname>
          <defname>ioplug</defname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_list</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Set parameter as the list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_list</parametername>
</parameternamelist>
<parameterdescription>
<para>number of available values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of available values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
Sets the parameter as the list. The available values of the given parameter type is restricted to the ones of the given list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="227" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1055" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___i_o_plug_1ga65feed7caf26f07aad0c722fc61fe751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_ioplug_set_state</definition>
        <argsstring>(snd_pcm_ioplug_t *ioplug, snd_pcm_state_t state)</argsstring>
        <name>snd_pcm_ioplug_set_state</name>
        <param>
          <type><ref refid="group___p_c_m___i_o_plug_1ga1038655a4ca74f3aef060282d6df739b" kindref="member">snd_pcm_ioplug_t</ref> *</type>
          <declname>ioplug</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" kindref="member">snd_pcm_state_t</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Change the ioplug PCM status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioplug</parametername>
</parameternamelist>
<parameterdescription>
<para>the ioplug handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>the PCM status </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if successful or a negative error code</para></simplesect>
Changes the PCM status of the ioplug to the given value. This function can be used for external plugins to notify the status change, e.g. XRUN. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="230" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_ioplug.c" bodystart="1141" bodyend="1145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___p_c_m___i_o_plug_1ga435c57838f97c24b7274a9596ccbe3b6" prot="public" static="no">
        <name>SND_PCM_IOPLUG_FLAG_LISTED</name>
        <initializer>(1&lt;&lt;0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>list up this PCM </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="66" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___i_o_plug_1gad5c0b67e4d9b7be96f1083179e95f38a" prot="public" static="no">
        <name>SND_PCM_IOPLUG_FLAG_MONOTONIC</name>
        <initializer>(1&lt;&lt;1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>monotonic timestamps </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="67" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___i_o_plug_1ga46f4111ec394e6c4209a4e1b5f99a9f7" prot="public" static="no">
        <name>SND_PCM_IOPLUG_VERSION_MAJOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protocol major version </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="72" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___i_o_plug_1ga49ea8946ea0c9b2655b70afb03ed79bd" prot="public" static="no">
        <name>SND_PCM_IOPLUG_VERSION_MINOR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protocol minor version </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="73" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___i_o_plug_1gabe46103216aa58afc3c4bc314dd1bbc6" prot="public" static="no">
        <name>SND_PCM_IOPLUG_VERSION_TINY</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Protocol tiny version </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="74" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___i_o_plug_1ga81a2273c4df9be29d91e6e2a0860d991" prot="public" static="no">
        <name>SND_PCM_IOPLUG_VERSION</name>
        <initializer>((<ref refid="group___p_c_m___i_o_plug_1ga46f4111ec394e6c4209a4e1b5f99a9f7" kindref="member">SND_PCM_IOPLUG_VERSION_MAJOR</ref>&lt;&lt;16) |\
					 (<ref refid="group___p_c_m___i_o_plug_1ga49ea8946ea0c9b2655b70afb03ed79bd" kindref="member">SND_PCM_IOPLUG_VERSION_MINOR</ref>&lt;&lt;8) |\
					 (<ref refid="group___p_c_m___i_o_plug_1gabe46103216aa58afc3c4bc314dd1bbc6" kindref="member">SND_PCM_IOPLUG_VERSION_TINY</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IO-plugin protocol version </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" line="78" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_ioplug.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>See the <ref refid="pcm" kindref="compound">PCM (digital audio) interface</ref> page for more details. </para>    </detaileddescription>
  </compounddef>
</doxygen>
