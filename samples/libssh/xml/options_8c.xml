<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="options_8c" kind="file" language="C++">
    <compoundname>options.c</compoundname>
    <includes local="yes">config.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes local="no">pwd.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes refid="priv_8h" local="yes">libssh/priv.h</includes>
    <includes refid="session_8h" local="yes">libssh/session.h</includes>
    <includes refid="misc_8h" local="yes">libssh/misc.h</includes>
    <includes refid="options_8h" local="yes">libssh/options.h</includes>
    <includes refid="server_8h" local="yes">libssh/server.h</includes>
    <includes refid="bind_8h" local="yes">libssh/bind.h</includes>
    <incdepgraph>
      <node id="1709">
        <label>sys/select.h</label>
      </node>
      <node id="1704">
        <label>libssh/priv.h</label>
        <link refid="priv_8h_source"/>
        <childnode refid="1700" relation="include">
        </childnode>
        <childnode refid="1705" relation="include">
        </childnode>
        <childnode refid="1706" relation="include">
        </childnode>
        <childnode refid="1712" relation="include">
        </childnode>
      </node>
      <node id="1724">
        <label>libssh/misc.h</label>
        <link refid="misc_8h_source"/>
      </node>
      <node id="1706">
        <label>libssh/libssh.h</label>
        <link refid="libssh_8h_source"/>
        <childnode refid="1705" relation="include">
        </childnode>
        <childnode refid="1707" relation="include">
        </childnode>
        <childnode refid="1708" relation="include">
        </childnode>
        <childnode refid="1709" relation="include">
        </childnode>
        <childnode refid="1710" relation="include">
        </childnode>
        <childnode refid="1711" relation="include">
        </childnode>
      </node>
      <node id="1716">
        <label>libssh/packet.h</label>
        <link refid="packet_8h_source"/>
        <childnode refid="1717" relation="include">
        </childnode>
      </node>
      <node id="1702">
        <label>stdlib.h</label>
      </node>
      <node id="1703">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="1704" relation="include">
        </childnode>
      </node>
      <node id="1711">
        <label>libssh/legacy.h</label>
        <link refid="legacy_8h_source"/>
      </node>
      <node id="1710">
        <label>netdb.h</label>
      </node>
      <node id="1712">
        <label>libssh/callbacks.h</label>
        <link refid="callbacks_8h_source"/>
        <childnode refid="1706" relation="include">
        </childnode>
        <childnode refid="1703" relation="include">
        </childnode>
      </node>
      <node id="1708">
        <label>sys/types.h</label>
      </node>
      <node id="1727">
        <label>libssh/bind.h</label>
        <link refid="bind_8h_source"/>
        <childnode refid="1704" relation="include">
        </childnode>
        <childnode refid="1714" relation="include">
        </childnode>
      </node>
      <node id="1723">
        <label>libssh/poll.h</label>
        <link refid="poll_8h_source"/>
        <childnode refid="1700" relation="include">
        </childnode>
      </node>
      <node id="1725">
        <label>libssh/options.h</label>
        <link refid="options_8h_source"/>
      </node>
      <node id="1705">
        <label>unistd.h</label>
      </node>
      <node id="1722">
        <label>libssh/channels.h</label>
        <link refid="channels_8h_source"/>
        <childnode refid="1704" relation="include">
        </childnode>
      </node>
      <node id="1721">
        <label>libssh/auth.h</label>
        <link refid="auth_8h_source"/>
        <childnode refid="1700" relation="include">
        </childnode>
        <childnode refid="1712" relation="include">
        </childnode>
      </node>
      <node id="1717">
        <label>libssh/wrapper.h</label>
        <link refid="wrapper_8h_source"/>
        <childnode refid="1700" relation="include">
        </childnode>
        <childnode refid="1706" relation="include">
        </childnode>
        <childnode refid="1718" relation="include">
        </childnode>
        <childnode refid="1719" relation="include">
        </childnode>
      </node>
      <node id="1718">
        <label>libssh/libcrypto.h</label>
        <link refid="libcrypto_8h_source"/>
        <childnode refid="1700" relation="include">
        </childnode>
      </node>
      <node id="1715">
        <label>libssh/kex.h</label>
        <link refid="kex_8h_source"/>
        <childnode refid="1704" relation="include">
        </childnode>
        <childnode refid="1712" relation="include">
        </childnode>
      </node>
      <node id="1719">
        <label>libssh/libgcrypt.h</label>
        <link refid="libgcrypt_8h_source"/>
        <childnode refid="1700" relation="include">
        </childnode>
      </node>
      <node id="1713">
        <label>pwd.h</label>
      </node>
      <node id="1720">
        <label>libssh/pcap.h</label>
        <link refid="pcap_8h_source"/>
        <childnode refid="1700" relation="include">
        </childnode>
        <childnode refid="1706" relation="include">
        </childnode>
      </node>
      <node id="1700">
        <label>config.h</label>
      </node>
      <node id="1699">
        <label>src/options.c</label>
        <link refid="options_8c"/>
        <childnode refid="1700" relation="include">
        </childnode>
        <childnode refid="1701" relation="include">
        </childnode>
        <childnode refid="1702" relation="include">
        </childnode>
        <childnode refid="1703" relation="include">
        </childnode>
        <childnode refid="1713" relation="include">
        </childnode>
        <childnode refid="1708" relation="include">
        </childnode>
        <childnode refid="1704" relation="include">
        </childnode>
        <childnode refid="1714" relation="include">
        </childnode>
        <childnode refid="1724" relation="include">
        </childnode>
        <childnode refid="1725" relation="include">
        </childnode>
        <childnode refid="1726" relation="include">
        </childnode>
        <childnode refid="1727" relation="include">
        </childnode>
      </node>
      <node id="1726">
        <label>libssh/server.h</label>
        <link refid="server_8h_source"/>
        <childnode refid="1706" relation="include">
        </childnode>
      </node>
      <node id="1701">
        <label>stdio.h</label>
      </node>
      <node id="1714">
        <label>libssh/session.h</label>
        <link refid="session_8h_source"/>
        <childnode refid="1704" relation="include">
        </childnode>
        <childnode refid="1715" relation="include">
        </childnode>
        <childnode refid="1716" relation="include">
        </childnode>
        <childnode refid="1720" relation="include">
        </childnode>
        <childnode refid="1721" relation="include">
        </childnode>
        <childnode refid="1722" relation="include">
        </childnode>
        <childnode refid="1723" relation="include">
        </childnode>
      </node>
      <node id="1707">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libssh__session_1gaead8cef1f39e785139bc510852ce1dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_copy</definition>
        <argsstring>(ssh_session src, ssh_session *dest)</argsstring>
        <name>ssh_options_copy</name>
        <param>
          <type>ssh_session</type>
          <declname>src</declname>
        </param>
        <param>
          <type>ssh_session *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Duplicate the options of a session structure. </para>        </briefdescription>
        <detaileddescription>
<para>If you make several sessions with the same options this is useful. You cannot use twice the same option structure in ssh_session_connect.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use to copy the options.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the allocated session with duplicated options. You have to free the memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on sucess, -1 on error with errno set.</para></simplesect>
<simplesect kind="see"><para>ssh_session_connect() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="64" column="1" bodyfile="src/options.c" bodystart="64" bodyend="163"/>
        <references refid="group__libssh__session_1gae5af27a98a7488e9f5ded6b37c274156" compoundref="session_8c" startline="184" endline="305">ssh_free</references>
        <references refid="group__libssh__session_1gaadadc0f9601547c30db7c4d62017d32c" compoundref="session_8c" startline="61" endline="174">ssh_new</references>
        <referencedby refid="classssh_1_1_session_1a05cbc79d7b3ef14499fe258f56031957" compoundref="libsshpp_8hpp" startline="327" endline="330">ssh::Session::optionsCopy</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga980c4ecd572fdb816d2f8b0a0479cea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_set_algo</definition>
        <argsstring>(ssh_session session, int algo, const char *list)</argsstring>
        <name>ssh_options_set_algo</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>algo</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="165" column="1" bodyfile="src/options.c" bodystart="165" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_set</definition>
        <argsstring>(ssh_session session, enum ssh_options_e type, const void *value)</argsstring>
        <name>ssh_options_set</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>enum ssh_options_e</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This function can set all possible ssh options. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated SSH session structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The option type to set. This could be one of the following:</para></parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>SSH_OPTIONS_HOST: The hostname or ip address to connect to (const char *).</para></listitem><listitem><para>SSH_OPTIONS_PORT: The port to connect to (unsigned int).</para></listitem><listitem><para>SSH_OPTIONS_PORT_STR: The port to connect to (const char *).</para></listitem><listitem><para>SSH_OPTIONS_FD: The file descriptor to use (socket_t).<linebreak/>
 <linebreak/>
 If you wish to open the socket yourself for a reason or another, set the file descriptor. Don&apos;t forget to set the hostname as the hostname is used as a key in the known_host mechanism.</para></listitem><listitem><para>SSH_OPTIONS_BINDADDR: The address to bind the client to (const char *).</para></listitem><listitem><para>SSH_OPTIONS_USER: The username for authentication (const char *).<linebreak/>
 <linebreak/>
 If the value is NULL, the username is set to the default username.</para></listitem><listitem><para>SSH_OPTIONS_SSH_DIR: Set the ssh directory (const char *,format string).<linebreak/>
 <linebreak/>
 If the value is NULL, the directory is set to the default ssh directory.<linebreak/>
 <linebreak/>
 The ssh directory is used for files like known_hosts and identity (private and public key). It may include &quot;%s&quot; which will be replaced by the user home directory.</para></listitem><listitem><para>SSH_OPTIONS_KNOWNHOSTS: Set the known hosts file name (const char *,format string).<linebreak/>
 <linebreak/>
 If the value is NULL, the directory is set to the default known hosts file, normally ~/.ssh/known_hosts.<linebreak/>
 <linebreak/>
 The known hosts file is used to certify remote hosts are genuine. It may include &quot;%s&quot; which will be replaced by the user home directory.</para></listitem><listitem><para>SSH_OPTIONS_IDENTITY: Set the identity file name (const char *,format string).<linebreak/>
 <linebreak/>
 By default identity, id_dsa and id_rsa are checked.<linebreak/>
 <linebreak/>
 The identity file used authenticate with public key. It may include &quot;%s&quot; which will be replaced by the user home directory.</para></listitem><listitem><para>SSH_OPTIONS_TIMEOUT: Set a timeout for the connection in seconds (long).</para></listitem><listitem><para>SSH_OPTIONS_TIMEOUT_USEC: Set a timeout for the connection in micro seconds (long).</para></listitem><listitem><para>SSH_OPTIONS_SSH1: Allow or deny the connection to SSH1 servers (int, 0 is false).</para></listitem><listitem><para>SSH_OPTIONS_SSH2: Allow or deny the connection to SSH2 servers (int, 0 is false).</para></listitem><listitem><para>SSH_OPTIONS_LOG_VERBOSITY: Set the session logging verbosity (int).<linebreak/>
 <linebreak/>
 The verbosity of the messages. Every log smaller or equal to verbosity will be shown.<itemizedlist>
<listitem><para>SSH_LOG_NOLOG: No logging</para></listitem><listitem><para>SSH_LOG_RARE: Rare conditions or warnings</para></listitem><listitem><para>SSH_LOG_ENTRY: API-accessible entrypoints</para></listitem><listitem><para>SSH_LOG_PACKET: Packet id and size</para></listitem><listitem><para>SSH_LOG_FUNCTIONS: Function entering and leaving</para></listitem></itemizedlist>
</para></listitem><listitem><para>SSH_OPTIONS_LOG_VERBOSITY_STR: Set the session logging verbosity (const char *).<linebreak/>
 <linebreak/>
 The verbosity of the messages. Every log smaller or equal to verbosity will be shown.<itemizedlist>
<listitem><para>SSH_LOG_NOLOG: No logging</para></listitem><listitem><para>SSH_LOG_RARE: Rare conditions or warnings</para></listitem><listitem><para>SSH_LOG_ENTRY: API-accessible entrypoints</para></listitem><listitem><para>SSH_LOG_PACKET: Packet id and size</para></listitem><listitem><para>SSH_LOG_FUNCTIONS: Function entering and leaving <linebreak/>
 See the corresponding numbers in <ref refid="libssh_8h_source" kindref="compound">libssh.h</ref>.</para></listitem></itemizedlist>
</para></listitem><listitem><para>SSH_OPTIONS_AUTH_CALLBACK: Set a callback to use your own authentication function (function pointer).</para></listitem><listitem><para>SSH_OPTIONS_AUTH_USERDATA: Set the user data passed to the authentication function (generic pointer).</para></listitem><listitem><para>SSH_OPTIONS_LOG_CALLBACK: Set a callback to use your own logging function (function pointer).</para></listitem><listitem><para>SSH_OPTIONS_LOG_USERDATA: Set the user data passed to the logging function (generic pointer).</para></listitem><listitem><para>SSH_OPTIONS_STATUS_CALLBACK: Set a callback to show connection status in realtime (function pointer).<linebreak/>
 <linebreak/>
<programlisting><codeline><highlight class="normal">fn(void<sp/>*arg,<sp/>float<sp/>status)</highlight></codeline>
</programlisting> <linebreak/>
 During <ref refid="group__libssh__session_1ga032e07cbd8bc3f14cb2dd375db0b03d7" kindref="member">ssh_connect()</ref>, libssh will call the callback with status from 0.0 to 1.0.</para></listitem><listitem><para>SSH_OPTIONS_STATUS_ARG: Set the status argument which should be passed to the status callback (generic pointer).</para></listitem><listitem><para>SSH_OPTIONS_CIPHERS_C_S: Set the symmetric cipher client to server (const char *, comma-separated list).</para></listitem><listitem><para>SSH_OPTIONS_CIPHERS_S_C: Set the symmetric cipher server to client (const char *, comma-separated list).</para></listitem><listitem><para>SSH_OPTIONS_KEY_EXCHANGE: Set the key exchange method to be used (const char *, comma-separated list). ex: &quot;ecdh-sha2-nistp256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1&quot;</para></listitem><listitem><para>SSH_OPTIONS_HOSTKEYS: Set the preferred server host key types (const char *, comma-separated list). ex: &quot;ssh-rsa,ssh-dss,ecdh-sha2-nistp256&quot;</para></listitem><listitem><para>SSH_OPTIONS_COMPRESSION_C_S: Set the compression to use for client to server communication (const char *, &quot;yes&quot;, &quot;no&quot; or a specific algorithm name if needed (&quot;zlib&quot;,&quot;zlib@openssh.com&quot;,&quot;none&quot;).</para></listitem><listitem><para>SSH_OPTIONS_COMPRESSION_S_C: Set the compression to use for server to client communication (const char *, &quot;yes&quot;, &quot;no&quot; or a specific algorithm name if needed (&quot;zlib&quot;,&quot;zlib@openssh.com&quot;,&quot;none&quot;).</para></listitem><listitem><para>SSH_OPTIONS_COMPRESSION: Set the compression to use for both directions communication (const char *, &quot;yes&quot;, &quot;no&quot; or a specific algorithm name if needed (&quot;zlib&quot;,&quot;zlib@openssh.com&quot;,&quot;none&quot;).</para></listitem><listitem><para>SSH_OPTIONS_COMPRESSION_LEVEL: Set the compression level to use for zlib functions. (int, value from 1 to 9, 9 being the most efficient but slower).</para></listitem><listitem><para>SSH_OPTIONS_STRICTHOSTKEYCHECK: Set the parameter StrictHostKeyChecking to avoid asking about a fingerprint (int, 0 = false).</para></listitem><listitem><para>SSH_OPTIONS_PROXYCOMMAND: Set the command to be executed in order to connect to server (const char *).</para></listitem><listitem><para>SSH_OPTIONS_GSSAPI_SERVER_IDENTITY Set it to specify the GSSAPI server identity that libssh should expect when connecting to the server (const char *).</para></listitem><listitem><para>SSH_OPTIONS_GSSAPI_CLIENT_IDENTITY Set it to specify the GSSAPI client identity that libssh should expect when connecting to the server (const char *).</para></listitem><listitem><para>SSH_OPTIONS_GSSAPI_DELEGATE_CREDENTIALS Set it to specify that GSSAPI should delegate credentials to the server (int, 0 = false).</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set. This is a generic pointer and the datatype which is used should be set according to the type set.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="382" column="1" bodyfile="src/options.c" bodystart="382" bodyend="868"/>
        <referencedby refid="classssh_1_1_session_1ad19ae4a0927094c12f383907cbf40ccc" compoundref="libsshpp_8hpp" startline="142" endline="145">ssh::Session::setOption</referencedby>
        <referencedby refid="group__libssh__session_1ga93f7f7159893f3ce62c9b178724eff75" compoundref="options_8c" startline="1012" endline="1182">ssh_options_getopt</referencedby>
        <referencedby refid="group__libssh__session_1ga82371e723260c7572ea061edecc2e9f1" compoundref="options_8c" startline="1200" endline="1241">ssh_options_parse_config</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaa298d8445355420d80f2d968477ba86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_get_port</definition>
        <argsstring>(ssh_session session, unsigned int *port_target)</argsstring>
        <name>ssh_options_get_port</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>port_target</declname>
        </param>
        <briefdescription>
<para>This function can get ssh the ssh port. </para>        </briefdescription>
        <detaileddescription>
<para>It must only be used on a valid ssh session. This function is useful when the session options have been automatically inferred from the environment or configuration files and one</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated SSH session structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port_target</parametername>
</parameternamelist>
<parameterdescription>
<para>An unsigned integer into which the port will be set from the ssh session.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="884" column="1" bodyfile="src/options.c" bodystart="884" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaaa9d400920cad4d6e4a0fb09ff8c7b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_get</definition>
        <argsstring>(ssh_session session, enum ssh_options_e type, char **value)</argsstring>
        <name>ssh_options_get</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>enum ssh_options_e</type>
          <declname>type</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This function can get ssh options, it does not support all options provided for ssh options set, but mostly those which a user-space program may care about having trusted the ssh driver to infer these values from underlaying configuration files. </para>        </briefdescription>
        <detaileddescription>
<para>It operates only on those SSH_OPTIONS_* which return char*. If you wish to receive the port then please use <ref refid="group__libssh__session_1gaa298d8445355420d80f2d968477ba86f" kindref="member">ssh_options_get_port()</ref> which returns an unsigned int.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated SSH session structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The option type to get. This could be one of the following:</para></parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>SSH_OPTIONS_HOST: The hostname or ip address to connect to (const char *).</para></listitem><listitem><para>SSH_OPTIONS_USER: The username for authentication (const char *).<linebreak/>
 <linebreak/>
 when not explicitly set this will be inferred from the ~/.ssh/config file.</para></listitem><listitem><para>SSH_OPTIONS_IDENTITY: Set the identity file name (const char *,format string).<linebreak/>
 <linebreak/>
 By default identity, id_dsa and id_rsa are checked.<linebreak/>
 <linebreak/>
 The identity file used authenticate with public key. It may include &quot;%s&quot; which will be replaced by the user home directory.</para></listitem><listitem><para>SSH_OPTIONS_PROXYCOMMAND: Get the proxycommand necessary to log into the remote host. When not explicitly set, it will be read from the ~/.ssh/config file.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to get into. As a char**, space will be allocated by the function for the value, it is your responsibility to free the memory using <ref refid="group__libssh__string_1gafc10700722d6cafc468c2ee97585449a" kindref="member">ssh_string_free_char()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="940" column="1" bodyfile="src/options.c" bodystart="940" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga93f7f7159893f3ce62c9b178724eff75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_getopt</definition>
        <argsstring>(ssh_session session, int *argcptr, char **argv)</argsstring>
        <name>ssh_options_getopt</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>argcptr</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Parse command line arguments. </para>        </briefdescription>
        <detaileddescription>
<para>This is a helper for your application to generate the appropriate options from the command line arguments.<linebreak/>
The argv array and argc value are changed so that the parsed arguments wont appear anymore in them.<linebreak/>
The single arguments (without switches) are not parsed. thus, myssh -l user localhost<linebreak/>
The command wont set the hostname value of options to localhost.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to configure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argcptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the argument count.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments list pointer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error.</para></simplesect>
<simplesect kind="see"><para>ssh_session_new() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="1012" column="1" bodyfile="src/options.c" bodystart="1012" bodyend="1182"/>
        <references refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" compoundref="options_8c" startline="382" endline="868">ssh_options_set</references>
        <references refid="group__libssh__log_1ga9719dabb8fab8a3ebeb4dc2ebcd2dd45" compoundref="log_8c" startline="178" endline="186">ssh_set_log_level</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga82371e723260c7572ea061edecc2e9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_parse_config</definition>
        <argsstring>(ssh_session session, const char *filename)</argsstring>
        <name>ssh_options_parse_config</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Parse the ssh config file. </para>        </briefdescription>
        <detaileddescription>
<para>This should be the last call of all options, it may overwrite options which are already set. It requires that the host name is already set with ssh_options_set_host().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>SSH session handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The options file to use, if NULL the default ~/.ssh/config will be used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error.</para></simplesect>
<simplesect kind="see"><para>ssh_options_set_host() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="1200" column="1" bodyfile="src/options.c" bodystart="1200" bodyend="1241"/>
        <references refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" compoundref="options_8c" startline="382" endline="868">ssh_options_set</references>
        <referencedby refid="classssh_1_1_session_1a0fe8a68c45f9f150bb306ae840f68f0f" compoundref="libsshpp_8hpp" startline="336" endline="339">ssh::Session::optionsParseConfig</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga882e56c9ac92b2e860f055ac903e9c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_apply</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_options_apply</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="1243" column="1" bodyfile="src/options.c" bodystart="1243" bodyend="1295"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__server_1gaaaecf23e1dd8926e085a240725a7faa9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_bind_set_key</definition>
        <argsstring>(ssh_bind sshbind, char **key_loc, const void *value)</argsstring>
        <name>ssh_bind_set_key</name>
        <param>
          <type>ssh_bind</type>
          <declname>sshbind</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>key_loc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="1304" column="1" bodyfile="src/options.c" bodystart="1304" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__server_1ga8fd4253643bc9cf33d6f41d170e83fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LIBSSH_API int</type>
        <definition>int ssh_bind_options_set</definition>
        <argsstring>(ssh_bind sshbind, enum ssh_bind_options_e type, const void *value)</argsstring>
        <name>ssh_bind_options_set</name>
        <param>
          <type>ssh_bind</type>
          <declname>sshbind</declname>
        </param>
        <param>
          <type>enum ssh_bind_options_e</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set options for an SSH server bind. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sshbind</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh server bind to configure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The option type to set. This should be one of the following:</para></parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>SSH_BIND_OPTIONS_HOSTKEY: Set the path to an ssh host key, regardless of type. Only one key from per key type (RSA, DSA, ECDSA) is allowed in an ssh_bind at a time, and later calls to this function with this option for the same key type will override prior calls (const char *).</para></listitem><listitem><para>SSH_BIND_OPTIONS_BINDADDR: Set the IP address to bind (const char *).</para></listitem><listitem><para>SSH_BIND_OPTIONS_BINDPORT: Set the port to bind (unsigned int *).</para></listitem><listitem><para>SSH_BIND_OPTIONS_BINDPORT_STR: Set the port to bind (const char *).</para></listitem><listitem><para>SSH_BIND_OPTIONS_LOG_VERBOSITY: Set the session logging verbosity (int *). The logging verbosity should have one of the following values, which are listed in order of increasing verbosity. Every log message with verbosity less than or equal to the logging verbosity will be shown.<itemizedlist>
<listitem><para>SSH_LOG_NOLOG: No logging</para></listitem><listitem><para>SSH_LOG_WARNING: Only warnings</para></listitem><listitem><para>SSH_LOG_PROTOCOL: High level protocol information</para></listitem><listitem><para>SSH_LOG_PACKET: Lower level protocol infomations, packet level</para></listitem><listitem><para>SSH_LOG_FUNCTIONS: Every function path</para></listitem></itemizedlist>
</para></listitem><listitem><para>SSH_BIND_OPTIONS_LOG_VERBOSITY_STR: Set the session logging verbosity via a string that will be converted to a numerical value (e.g. &quot;3&quot;) and interpreted according to the values of SSH_BIND_OPTIONS_LOG_VERBOSITY above (const char *).</para></listitem><listitem><para>SSH_BIND_OPTIONS_DSAKEY: Set the path to the ssh host dsa key, SSHv2 only (const char *).</para></listitem><listitem><para>SSH_BIND_OPTIONS_RSAKEY: Set the path to the ssh host rsa key, SSHv2 only (const char *).</para></listitem><listitem><para>SSH_BIND_OPTIONS_ECDSAKEY: Set the path to the ssh host ecdsa key, SSHv2 only (const char *).</para></listitem><listitem><para>SSH_BIND_OPTIONS_BANNER: Set the server banner sent to clients (const char *).</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set. This is a generic pointer and the datatype which should be used is described at the corresponding value of type above.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error, invalid option, or parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/server.h" line="84" column="1" bodyfile="src/options.c" bodystart="1387" bodyend="1564"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/options.c"/>
  </compounddef>
</doxygen>
