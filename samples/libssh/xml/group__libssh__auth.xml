<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__libssh__auth" kind="group">
    <compoundname>libssh_auth</compoundname>
    <title>The SSH authentication functions.</title>
    <innerclass refid="structssh__agent__state__struct" prot="public">ssh_agent_state_struct</innerclass>
    <innerclass refid="structssh__auth__auto__state__struct" prot="public">ssh_auth_auto_state_struct</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__libssh__auth_1ga288d00c21fe2d652607792379d90b7cf" prot="public" static="no">
        <name>ssh_agent_state_e</name>
        <enumvalue id="group__libssh__auth_1gga288d00c21fe2d652607792379d90b7cfa5965e2ae4d759e633b54e038783fb118" prot="public">
          <name>SSH_AGENT_STATE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libssh__auth_1gga288d00c21fe2d652607792379d90b7cfa2c08668800684d1e8b900b73b6681bb6" prot="public">
          <name>SSH_AGENT_STATE_PUBKEY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libssh__auth_1gga288d00c21fe2d652607792379d90b7cfaadc9127e305c239a7e60de4bb569c89d" prot="public">
          <name>SSH_AGENT_STATE_AUTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="731" column="1" bodyfile="src/auth.c" bodystart="731" bodyend="735"/>
      </memberdef>
      <memberdef kind="enum" id="group__libssh__auth_1gac65f4923889fe6f2b91021872463b4c4" prot="public" static="no">
        <name>ssh_auth_auto_state_e</name>
        <enumvalue id="group__libssh__auth_1ggac65f4923889fe6f2b91021872463b4c4a7423bce4e2477ab036c8ce272fd7642f" prot="public">
          <name>SSH_AUTH_AUTO_STATE_NONE</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libssh__auth_1ggac65f4923889fe6f2b91021872463b4c4a82677b8f55353fe73bdd8ddb9958d367" prot="public">
          <name>SSH_AUTH_AUTO_STATE_PUBKEY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libssh__auth_1ggac65f4923889fe6f2b91021872463b4c4a0f73343ecb44ed535c5d53cede05485a" prot="public">
          <name>SSH_AUTH_AUTO_STATE_KEY_IMPORTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__libssh__auth_1ggac65f4923889fe6f2b91021872463b4c4ad484a042d380c408bc75ef844e8e0e9c" prot="public">
          <name>SSH_AUTH_AUTO_STATE_PUBKEY_ACCEPTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="863" column="1" bodyfile="src/auth.c" bodystart="863" bodyend="868"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libssh__auth_1ga812fb86c3dd4a6245bc7d01beaa9cfe8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_userauth_request_service</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_userauth_request_service</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Ask access to the ssh-userauth service. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
<simplesect kind="return"><para>SSH_AGAIN on nonblocking mode, if calling that function again is necessary </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="68" column="1" bodyfile="src/auth.c" bodystart="68" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga4eba018b5d45cc32999cb76b06440c55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_auth_response_termination</definition>
        <argsstring>(void *user)</argsstring>
        <name>ssh_auth_response_termination</name>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="80" column="1" bodyfile="src/auth.c" bodystart="80" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gabff6b3898d3bf45b62cc3ed3774eaa83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_userauth_get_response</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_userauth_get_response</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Wait for a response of an authentication function. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_SUCCESS Authentication success, or pubkey accepted SSH_AUTH_PARTIAL Authentication succeeded but another mean of authentication is needed. SSH_AUTH_INFO Data for keyboard-interactive SSH_AUTH_AGAIN In nonblocking mode, call has to be made again SSH_AUTH_ERROR Error during the process. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="107" column="1" bodyfile="src/auth.c" bodystart="107" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga1fc1f11c7ba0469c866c42956450ebf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_packet_userauth_banner)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_packet_userauth_banner</type>
        </param>
        <briefdescription>
<para>Handles a SSH_USERAUTH_BANNER packet. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This banner should be shown to user prior to authentication </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="156" column="1" bodyfile="src/auth.c" bodystart="156" bodyend="174"/>
        <references refid="group__libssh__buffer_1ga208f7cc2f69191c717d4bfd5d153bca4" compoundref="buffer_8c" startline="650" endline="676">buffer_get_ssh_string</references>
        <references refid="group__libssh__callbacks_1gac29df803aa1295d6a498c1b081f3b494" compoundref="callbacks_8h" startline="436">SSH_PACKET_USED</references>
        <references refid="group__libssh__string_1gacd9c4eb69f7ecfdcf709deb8dde6a5a8" compoundref="string_8c" startline="272" endline="274">ssh_string_free</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga89e83a8f415d2d6783b25b5f96226208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_packet_userauth_failure)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_packet_userauth_failure</type>
        </param>
        <briefdescription>
<para>Handles a SSH_USERAUTH_FAILURE packet. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This handles the complete or partial authentication failure. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="183" column="1" bodyfile="src/auth.c" bodystart="183" bodyend="234"/>
        <references refid="group__libssh__callbacks_1gac29df803aa1295d6a498c1b081f3b494" compoundref="callbacks_8h" startline="436">SSH_PACKET_USED</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gadbd916c2423b2097647263645e0dd422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_packet_userauth_success)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_packet_userauth_success</type>
        </param>
        <briefdescription>
<para>Handles a SSH_USERAUTH_SUCCESS packet. </para>        </briefdescription>
        <detaileddescription>
<internal><para>It is also used to communicate the new to the upper levels. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="243" column="1" bodyfile="src/auth.c" bodystart="243" bodyend="265"/>
        <references refid="group__libssh__callbacks_1gac29df803aa1295d6a498c1b081f3b494" compoundref="callbacks_8h" startline="436">SSH_PACKET_USED</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gabcd6b05236558e07e8dc564a68f0a4a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_packet_userauth_pk_ok)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_packet_userauth_pk_ok</type>
        </param>
        <briefdescription>
<para>Handles a SSH_USERAUTH_PK_OK or SSH_USERAUTH_INFO_REQUEST packet. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Since the two types of packets share the same code, additional work is done to understand if we are in a public key or keyboard-interactive context. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="275" column="1" bodyfile="src/auth.c" bodystart="275" bodyend="296"/>
        <references refid="group__libssh__callbacks_1gac29df803aa1295d6a498c1b081f3b494" compoundref="callbacks_8h" startline="436">SSH_PACKET_USED</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga35d44897a44b4bb3b7c01108c1812a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_list</definition>
        <argsstring>(ssh_session session, const char *username)</argsstring>
        <name>ssh_userauth_list</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <briefdescription>
<para>Get available authentication methods from the server. </para>        </briefdescription>
        <detaileddescription>
<para>This requires the function <ref refid="group__libssh__auth_1ga58e7c265236edbc97a2f117d3f23b4dd" kindref="member">ssh_userauth_none()</ref> to be called before the methods are available. The server MAY return a list of methods that may continue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">username</parametername>
</parameternamelist>
<parameterdescription>
<para>Deprecated, set to NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield of the fllowing values:<itemizedlist>
<listitem><para>SSH_AUTH_METHOD_PASSWORD</para></listitem><listitem><para>SSH_AUTH_METHOD_PUBLICKEY</para></listitem><listitem><para>SSH_AUTH_METHOD_HOSTBASED</para></listitem><listitem><para>SSH_AUTH_METHOD_INTERACTIVE</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="warning"><para>Other reserved flags may appear in future versions. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__auth_1ga58e7c265236edbc97a2f117d3f23b4dd" kindref="member">ssh_userauth_none()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="318" column="1" bodyfile="src/auth.c" bodystart="318" bodyend="333"/>
        <referencedby refid="classssh_1_1_session_1a08d70b5cdb5bd1a2a8f5f9ebbdf67b3b" compoundref="libsshpp_8hpp" startline="238" endline="242">ssh::Session::getAuthList</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga58e7c265236edbc97a2f117d3f23b4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_none</definition>
        <argsstring>(ssh_session session, const char *username)</argsstring>
        <name>ssh_userauth_none</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <briefdescription>
<para>Try to authenticate through the &quot;none&quot; method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username, this SHOULD be NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_ERROR: A serious error happened.<linebreak/>
 SSH_AUTH_DENIED: Authentication failed: use another method<linebreak/>
 SSH_AUTH_PARTIAL: You&apos;ve been partially authenticated, you still have to use another method<linebreak/>
 SSH_AUTH_SUCCESS: Authentication success<linebreak/>
 SSH_AUTH_AGAIN: In nonblocking mode, you&apos;ve got to call this again later.</para></simplesect>
<simplesect kind="note"><para>Most server implementations do not permit changing the username during authentication. The username should only be set with <ref refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" kindref="member">ssh_options_set()</ref> only before you connect to the server. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="354" column="1" bodyfile="src/auth.c" bodystart="354" bodyend="411"/>
        <referencedby refid="classssh_1_1_session_1a988398835fc131b0eb5a83a4adaec532" compoundref="libsshpp_8hpp" startline="192" endline="196">ssh::Session::userauthNone</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga592f673c4d417a6a46cd4876ac8287aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_try_publickey</definition>
        <argsstring>(ssh_session session, const char *username, const ssh_key pubkey)</argsstring>
        <name>ssh_userauth_try_publickey</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
<para>Try to authenticate with the given public key. </para>        </briefdescription>
        <detaileddescription>
<para>To avoid unnecessary processing and user interaction, the following method is provided for querying whether authentication using the &apos;pubkey&apos; would be possible.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username, this SHOULD be NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pubkey</parametername>
</parameternamelist>
<parameterdescription>
<para>The public key to try.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_ERROR: A serious error happened.<linebreak/>
 SSH_AUTH_DENIED: The server doesn&apos;t accept that public key as an authentication token. Try another key or another method.<linebreak/>
 SSH_AUTH_PARTIAL: You&apos;ve been partially authenticated, you still have to use another method.<linebreak/>
 SSH_AUTH_SUCCESS: The public key is accepted, you want now to use ssh_userauth_pubkey(). SSH_AUTH_AGAIN: In nonblocking mode, you&apos;ve got to call this again later.</para></simplesect>
<simplesect kind="note"><para>Most server implementations do not permit changing the username during authentication. The username should only be set with <ref refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" kindref="member">ssh_options_set()</ref> only before you connect to the server. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="441" column="1" bodyfile="src/auth.c" bodystart="441" bodyend="524"/>
        <references refid="group__libssh__pki_1ga9bc688b5cbc400320ac44896eba21924" compoundref="pki_8c" startline="269" endline="275">ssh_key_is_public</references>
        <referencedby refid="classssh_1_1_session_1afb635d7f84b000bbabb09a86ad5ad074" compoundref="libsshpp_8hpp" startline="215" endline="219">ssh::Session::userauthTryPublickey</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gaa38c4f3194ef36720da7eddb0aa99e23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_publickey</definition>
        <argsstring>(ssh_session session, const char *username, const ssh_key privkey)</argsstring>
        <name>ssh_userauth_publickey</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <briefdescription>
<para>Authenticate with public/private key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username, this SHOULD be NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">privkey</parametername>
</parameternamelist>
<parameterdescription>
<para>The private key for authentication.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_ERROR: A serious error happened.<linebreak/>
 SSH_AUTH_DENIED: The server doesn&apos;t accept that public key as an authentication token. Try another key or another method.<linebreak/>
 SSH_AUTH_PARTIAL: You&apos;ve been partially authenticated, you still have to use another method.<linebreak/>
 SSH_AUTH_SUCCESS: The public key is accepted, you want now to use ssh_userauth_pubkey(). SSH_AUTH_AGAIN: In nonblocking mode, you&apos;ve got to call this again later.</para></simplesect>
<simplesect kind="note"><para>Most server implementations do not permit changing the username during authentication. The username should only be set with <ref refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" kindref="member">ssh_options_set()</ref> only before you connect to the server. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="550" column="1" bodyfile="src/auth.c" bodystart="550" bodyend="645"/>
        <references refid="group__libssh__pki_1ga09de68aba0a7c4e31d8ba7df43b637c5" compoundref="pki_8c" startline="284" endline="290">ssh_key_is_private</references>
        <referencedby refid="classssh_1_1_session_1a6dd49ee38bf24c31c5e0e28dc2af07b7" compoundref="libsshpp_8hpp" startline="226" endline="230">ssh::Session::userauthPublickey</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga691078be9ea2a55fed97c7488395af5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_userauth_agent_publickey</definition>
        <argsstring>(ssh_session session, const char *username, ssh_key pubkey)</argsstring>
        <name>ssh_userauth_agent_publickey</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>ssh_key</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="648" column="1" bodyfile="src/auth.c" bodystart="648" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga7d4487088981015ec0b1c66befc1c7dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_agent_state_free</definition>
        <argsstring>(void *data)</argsstring>
        <name>ssh_agent_state_free</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="744" column="1" bodyfile="src/auth.c" bodystart="744" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga7d84f3f89f65455b80b10e2643d80719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_agent</definition>
        <argsstring>(ssh_session session, const char *username)</argsstring>
        <name>ssh_userauth_agent</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <briefdescription>
<para>Try to do public key authentication with ssh agent. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username, this SHOULD be NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_ERROR: A serious error happened.<linebreak/>
 SSH_AUTH_DENIED: The server doesn&apos;t accept that public key as an authentication token. Try another key or another method.<linebreak/>
 SSH_AUTH_PARTIAL: You&apos;ve been partially authenticated, you still have to use another method.<linebreak/>
 SSH_AUTH_SUCCESS: The public key is accepted, you want now to use ssh_userauth_pubkey(). SSH_AUTH_AGAIN: In nonblocking mode, you&apos;ve got to call this again later.</para></simplesect>
<simplesect kind="note"><para>Most server implementations do not permit changing the username during authentication. The username should only be set with <ref refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" kindref="member">ssh_options_set()</ref> only before you connect to the server. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="775" column="1" bodyfile="src/auth.c" bodystart="775" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga53e6771b250c061463ed98b6e5b6e0af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_publickey_auto</definition>
        <argsstring>(ssh_session session, const char *username, const char *passphrase)</argsstring>
        <name>ssh_userauth_publickey_auto</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <briefdescription>
<para>Tries to automatically authenticate with public key and &quot;none&quot;. </para>        </briefdescription>
        <detaileddescription>
<para>It may fail, for instance it doesn&apos;t ask for a password and uses a default asker for passphrases (in case the private key is encrypted).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username, this SHOULD be NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>Use this passphrase to unlock the privatekey. Use NULL if you don&apos;t want to use a passphrase or the user should be asked.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_ERROR: A serious error happened.<linebreak/>
 SSH_AUTH_DENIED: The server doesn&apos;t accept that public key as an authentication token. Try another key or another method.<linebreak/>
 SSH_AUTH_PARTIAL: You&apos;ve been partially authenticated, you still have to use another method.<linebreak/>
 SSH_AUTH_SUCCESS: The public key is accepted, you want now to use ssh_userauth_pubkey(). SSH_AUTH_AGAIN: In nonblocking mode, you&apos;ve got to call this again later.</para></simplesect>
<simplesect kind="note"><para>Most server implementations do not permit changing the username during authentication. The username should only be set with <ref refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" kindref="member">ssh_options_set()</ref> only before you connect to the server. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="906" column="1" bodyfile="src/auth.c" bodystart="906" bodyend="1088"/>
        <referencedby refid="classssh_1_1_session_1a651141f9bcf5792644f6d411ab2cc0c5" compoundref="libsshpp_8hpp" startline="180" endline="184">ssh::Session::userauthPublickeyAuto</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga50c0c150f8c4703e7ee49b3e3e3ca215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_password</definition>
        <argsstring>(ssh_session session, const char *username, const char *password)</argsstring>
        <name>ssh_userauth_password</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Try to authenticate by password. </para>        </briefdescription>
        <detaileddescription>
<para>This authentication method is normally disabled on SSHv2 server. You should use keyboard-interactive mode.</para><para>The &apos;password&apos; value MUST be encoded UTF-8. It is up to the server how to interpret the password and validate it against the password database. However, if you read the password in some other encoding, you MUST convert the password to UTF-8.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username, this SHOULD be NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">password</parametername>
</parameternamelist>
<parameterdescription>
<para>The password to authenticate in UTF-8.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_ERROR: A serious error happened.<linebreak/>
 SSH_AUTH_DENIED: Authentication failed: use another method<linebreak/>
 SSH_AUTH_PARTIAL: You&apos;ve been partially authenticated, you still have to use another method<linebreak/>
 SSH_AUTH_SUCCESS: Authentication success<linebreak/>
 SSH_AUTH_AGAIN: In nonblocking mode, you&apos;ve got to call this again later.</para></simplesect>
<simplesect kind="note"><para>Most server implementations do not permit changing the username during authentication. The username should only be set with <ref refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" kindref="member">ssh_options_set()</ref> only before you connect to the server.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__auth_1ga58e7c265236edbc97a2f117d3f23b4dd" kindref="member">ssh_userauth_none()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__auth_1ga6b3b1c2a045286d9476b0252791a07d2" kindref="member">ssh_userauth_kbdint()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1122" column="1" bodyfile="src/auth.c" bodystart="1122" bodyend="1185"/>
        <referencedby refid="classssh_1_1_session_1ac2d10826877bec6598961614eb62f0f7" compoundref="libsshpp_8hpp" startline="203" endline="207">ssh::Session::userauthPassword</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga5cc49db459d6e27c8645a20bbd0f5f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_agent_pubkey</definition>
        <argsstring>(ssh_session session, const char *username, ssh_public_key publickey)</argsstring>
        <name>ssh_userauth_agent_pubkey</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>ssh_public_key</type>
          <declname>publickey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1189" column="1" bodyfile="src/auth.c" bodystart="1189" bodyend="1214"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gac17384e2e1723b50cd041d775c0175a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_kbdint</type>
        <definition>ssh_kbdint ssh_kbdint_new</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_kbdint_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1217" column="1" bodyfile="src/auth.c" bodystart="1217" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga43266010b4cc11e277658c4c6c4a5500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_kbdint_free</definition>
        <argsstring>(ssh_kbdint kbd)</argsstring>
        <name>ssh_kbdint_free</name>
        <param>
          <type>ssh_kbdint</type>
          <declname>kbd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1230" column="1" bodyfile="src/auth.c" bodystart="1230" bodyend="1260"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gac042e71960b1aa80d8245125feeb249a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_kbdint_clean</definition>
        <argsstring>(ssh_kbdint kbd)</argsstring>
        <name>ssh_kbdint_clean</name>
        <param>
          <type>ssh_kbdint</type>
          <declname>kbd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1262" column="1" bodyfile="src/auth.c" bodystart="1262" bodyend="1294"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gac689d3761c0dc4ebee9971ecc482d9a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_userauth_kbdint_init</definition>
        <argsstring>(ssh_session session, const char *username, const char *submethods)</argsstring>
        <name>ssh_userauth_kbdint_init</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>submethods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1299" column="1" bodyfile="src/auth.c" bodystart="1299" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gaaa68e6aec2da509b246b7cba071408d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_userauth_kbdint_send</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_userauth_kbdint_send</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Send the current challenge response and wait for a reply from the server. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>SSH_AUTH_INFO if more info is needed </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_SUCCESS </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_FAILURE </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_PARTIAL </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1364" column="1" bodyfile="src/auth.c" bodystart="1364" bodyend="1412"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga09059b696a82df0fb633977d2749e10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_packet_userauth_info_request)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_packet_userauth_info_request</type>
        </param>
        <briefdescription>
<para>handles a SSH_USERAUTH_INFO_REQUEST packet, as used in keyboard-interactive authentication, and changes the authentication state. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1420" column="1" bodyfile="src/auth.c" bodystart="1420" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga6b3b1c2a045286d9476b0252791a07d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_kbdint</definition>
        <argsstring>(ssh_session session, const char *user, const char *submethods)</argsstring>
        <name>ssh_userauth_kbdint</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>submethods</declname>
        </param>
        <briefdescription>
<para>Try to authenticate through the &quot;keyboard-interactive&quot; method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">user</parametername>
</parameternamelist>
<parameterdescription>
<para>The username to authenticate. You can specify NULL if ssh_option_set_username() has been used. You cannot try two different logins in a row.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">submethods</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented. Set it to NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_ERROR: A serious error happened<linebreak/>
 SSH_AUTH_DENIED: Authentication failed : use another method<linebreak/>
 SSH_AUTH_PARTIAL: You&apos;ve been partially authenticated, you still have to use another method<linebreak/>
 SSH_AUTH_SUCCESS: Authentication success<linebreak/>
 SSH_AUTH_INFO: The server asked some questions. Use <ref refid="group__libssh__auth_1gacb996ff4979670db009a71a90172ece9" kindref="member">ssh_userauth_kbdint_getnprompts()</ref> and such.<linebreak/>
 SSH_AUTH_AGAIN: In nonblocking mode, you&apos;ve got to call this again later.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__auth_1gacb996ff4979670db009a71a90172ece9" kindref="member">ssh_userauth_kbdint_getnprompts()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__auth_1gaf920b6f8ed1e3c53cc2a683230098657" kindref="member">ssh_userauth_kbdint_getname()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__auth_1gaa757fbdbd4f95261bbbbc12b1ec33078" kindref="member">ssh_userauth_kbdint_getinstruction()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__auth_1ga4e7466c30852a3339003af7046fab396" kindref="member">ssh_userauth_kbdint_getprompt()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__auth_1ga75e44b1f27059a00080f80fac0107a20" kindref="member">ssh_userauth_kbdint_setanswer()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1536" column="1" bodyfile="src/auth.c" bodystart="1536" bodyend="1571"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gacb996ff4979670db009a71a90172ece9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_kbdint_getnprompts</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_userauth_kbdint_getnprompts</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the number of prompts (questions) the server has given. </para>        </briefdescription>
        <detaileddescription>
<para>Once you have called <ref refid="group__libssh__auth_1ga6b3b1c2a045286d9476b0252791a07d2" kindref="member">ssh_userauth_kbdint()</ref> and received SSH_AUTH_INFO return code, this function can be used to retrieve information about the keyboard interactive authentication questions sent by the remote host.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of prompts. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1584" column="1" bodyfile="src/auth.c" bodystart="1584" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gaf920b6f8ed1e3c53cc2a683230098657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_userauth_kbdint_getname</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_userauth_kbdint_getname</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the &quot;name&quot; of the message block. </para>        </briefdescription>
        <detaileddescription>
<para>Once you have called <ref refid="group__libssh__auth_1ga6b3b1c2a045286d9476b0252791a07d2" kindref="member">ssh_userauth_kbdint()</ref> and received SSH_AUTH_INFO return code, this function can be used to retrieve information about the keyboard interactive authentication questions sent by the remote host.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The name of the message block. Do not free it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1605" column="1" bodyfile="src/auth.c" bodystart="1605" bodyend="1613"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1gaa757fbdbd4f95261bbbbc12b1ec33078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_userauth_kbdint_getinstruction</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_userauth_kbdint_getinstruction</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the &quot;instruction&quot; of the message block. </para>        </briefdescription>
        <detaileddescription>
<para>Once you have called <ref refid="group__libssh__auth_1ga6b3b1c2a045286d9476b0252791a07d2" kindref="member">ssh_userauth_kbdint()</ref> and received SSH_AUTH_INFO return code, this function can be used to retrieve information about the keyboard interactive authentication questions sent by the remote host.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The instruction of the message block. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1627" column="1" bodyfile="src/auth.c" bodystart="1627" bodyend="1635"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga4e7466c30852a3339003af7046fab396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_userauth_kbdint_getprompt</definition>
        <argsstring>(ssh_session session, unsigned int i, char *echo)</argsstring>
        <name>ssh_userauth_kbdint_getprompt</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>echo</declname>
        </param>
        <briefdescription>
<para>Get a prompt from a message block. </para>        </briefdescription>
        <detaileddescription>
<para>Once you have called <ref refid="group__libssh__auth_1ga6b3b1c2a045286d9476b0252791a07d2" kindref="member">ssh_userauth_kbdint()</ref> and received SSH_AUTH_INFO return code, this function can be used to retrieve information about the keyboard interactive authentication questions sent by the remote host.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index number of the i&apos;th prompt.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">echo</parametername>
</parameternamelist>
<parameterdescription>
<para>This is an optional variable. You can obtain a boolean if the user input should be echoed or hidden. For passwords it is usually hidden.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the prompt. Do not free it.</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>char<sp/>prompt;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>echo;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">prompt<sp/>=<sp/>ssh_userauth_kbdint_getprompt(session,<sp/>0,<sp/>&amp;echo);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(echo)<sp/>...</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1662" column="1" bodyfile="src/auth.c" bodystart="1662" bodyend="1680"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga3a98024f73a8bba6afed0b21de513bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_kbdint_getnanswers</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_userauth_kbdint_getnanswers</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the number of answers the client has given. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of answers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1690" column="1" bodyfile="src/auth.c" bodystart="1690" bodyend="1694"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga66f1634f9f839b42cd600753f032c7da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_userauth_kbdint_getanswer</definition>
        <argsstring>(ssh_session session, unsigned int i)</argsstring>
        <name>ssh_userauth_kbdint_getanswer</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get the answer for a question from a message block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>index The number of the ith answer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1705" column="1" bodyfile="src/auth.c" bodystart="1705" bodyend="1715"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga75e44b1f27059a00080f80fac0107a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_kbdint_setanswer</definition>
        <argsstring>(ssh_session session, unsigned int i, const char *answer)</argsstring>
        <name>ssh_userauth_kbdint_setanswer</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>answer</declname>
        </param>
        <briefdescription>
<para>Set the answer for a question from a message block. </para>        </briefdescription>
        <detaileddescription>
<para>If you have called <ref refid="group__libssh__auth_1ga6b3b1c2a045286d9476b0252791a07d2" kindref="member">ssh_userauth_kbdint()</ref> and got SSH_AUTH_INFO, this function returns the questions from the server.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>index The number of the ith prompt.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">answer</parametername>
</parameternamelist>
<parameterdescription>
<para>The answer to give to the server. The answer MUST be encoded UTF-8. It is up to the server how to interpret the value and validate it. However, if you read the answer in some other encoding, you MUST convert it to UTF-8.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1736" column="1" bodyfile="src/auth.c" bodystart="1736" bodyend="1767"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__auth_1ga2758b0e86a848fe0d1d3d263d2a34d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_userauth_gssapi</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_userauth_gssapi</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Try to authenticate through the &quot;gssapi-with-mic&quot; method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_ERROR: A serious error happened<linebreak/>
 SSH_AUTH_DENIED: Authentication failed : use another method<linebreak/>
 SSH_AUTH_PARTIAL: You&apos;ve been partially authenticated, you still have to use another method<linebreak/>
 SSH_AUTH_SUCCESS: Authentication success<linebreak/>
 SSH_AUTH_AGAIN: In nonblocking mode, you&apos;ve got to call this again later. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/auth.c" line="1782" column="1" bodyfile="src/auth.c" bodystart="1782" bodyend="1823"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions to authenticate with a server. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
