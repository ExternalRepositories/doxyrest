<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__libssh__scp" kind="group">
    <compoundname>libssh_scp</compoundname>
    <title>The SSH scp functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libssh__scp_1ga9fcd39a2bb6438e39cf19ff859dc2f2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_scp</type>
        <definition>ssh_scp ssh_scp_new</definition>
        <argsstring>(ssh_session session, int mode, const char *location)</argsstring>
        <name>ssh_scp_new</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Create a new scp session. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>One of SSH_SCP_WRITE or SSH_SCP_READ, depending if you need to drop files remotely or read them. It is not possible to combine read and write. SSH_SCP_RECURSIVE Flag can be or&apos;ed to this to indicate that you&apos;re going to use recursion. Browsing through directories is not possible without this.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">location</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory in which write or read will be done. Any push or pull will be relative to this place. This can also be a pattern of files to download (read).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A ssh_scp handle, NULL if the creation was impossible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="60" column="1" bodyfile="src/scp.c" bodystart="60" bodyend="84"/>
        <references refid="group__libssh__scp_1gac29000cdb07c74d54251fbd838c0c661" compoundref="scp_8c" startline="199" endline="211">ssh_scp_free</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga1db56dcb9dee01dd0b679b3b11151110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_init</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_init</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Initialize the scp channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp context to initialize.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success or an SSH error code.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1ga9fcd39a2bb6438e39cf19ff859dc2f2e" kindref="member">ssh_scp_new()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="95" column="1" bodyfile="src/scp.c" bodystart="95" bodyend="150"/>
        <references refid="group__libssh__channel_1gada8ccda7bf65165fe145d3096a252dcc" compoundref="channels_8c" startline="79" endline="118">ssh_channel_new</references>
        <references refid="group__libssh__channel_1gaf051dd30d75bf6dc45d1a5088cf970bd" compoundref="channels_8c" startline="860" endline="876">ssh_channel_open_session</references>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__channel_1ga567d509183ade0a77190f390e2b5747d" compoundref="channels_8c" startline="2368" endline="2408">ssh_channel_request_exec</references>
        <references refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" compoundref="channels_8c" startline="1369" endline="1371">ssh_channel_write</references>
        <references refid="group__libssh__error_1ga9241586665bf21f823806473fc386258" compoundref="error_8c" startline="111" endline="115">ssh_get_error</references>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba75fa79e63947b66462db977d9b5ae27c" compoundref="libssh_8h" startline="286">SSH_LOG_PROTOCOL</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga14d31059dcf6fb2325fb960da8e4474e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_close</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_close</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Close the scp channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp context to close.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success or an SSH error code.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1ga1db56dcb9dee01dd0b679b3b11151110" kindref="member">ssh_scp_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="161" column="1" bodyfile="src/scp.c" bodystart="161" bodyend="190"/>
        <references refid="group__libssh__channel_1ga238f07e0455456a5bfd8a49ead917732" compoundref="channels_8c" startline="1117" endline="1163">ssh_channel_close</references>
        <references refid="group__libssh__channel_1gad1417f9eae8928fed20faafe2d9dbfff" compoundref="channels_8c" startline="993" endline="1015">ssh_channel_free</references>
        <references refid="group__libssh__channel_1gab535264029443d77214c0615a0788b0a" compoundref="channels_8c" startline="1412" endline="1424">ssh_channel_is_eof</references>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__channel_1ga072f82fdf3e50514f747653af2c99004" compoundref="channels_8c" startline="1065" endline="1102">ssh_channel_send_eof</references>
        <referencedby refid="group__libssh__scp_1gac29000cdb07c74d54251fbd838c0c661" compoundref="scp_8c" startline="199" endline="211">ssh_scp_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gac29000cdb07c74d54251fbd838c0c661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_scp_free</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_free</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Free a scp context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to free.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1ga9fcd39a2bb6438e39cf19ff859dc2f2e" kindref="member">ssh_scp_new()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="199" column="1" bodyfile="src/scp.c" bodystart="199" bodyend="211"/>
        <references refid="group__libssh__channel_1gad1417f9eae8928fed20faafe2d9dbfff" compoundref="channels_8c" startline="993" endline="1015">ssh_channel_free</references>
        <references refid="group__libssh__scp_1ga14d31059dcf6fb2325fb960da8e4474e" compoundref="scp_8c" startline="161" endline="190">ssh_scp_close</references>
        <referencedby refid="group__libssh__scp_1ga9fcd39a2bb6438e39cf19ff859dc2f2e" compoundref="scp_8c" startline="60" endline="84">ssh_scp_new</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gaa584f03d4e3d582ac10a3a19818ec56d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_push_directory</definition>
        <argsstring>(ssh_scp scp, const char *dirname, int mode)</argsstring>
        <name>ssh_scp_push_directory</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>dirname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Create a directory in a scp in sink mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dirname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the directory being created.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The UNIX permissions for the new directory, e.g. 0755.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK if the directory has been created, SSH_ERROR if an error occured.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1ga2ca698c1e49612c083d9f8a72df52188" kindref="member">ssh_scp_leave_directory()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="227" column="1" bodyfile="src/scp.c" bodystart="227" bodyend="261"/>
        <references refid="group__libssh__misc_1ga83b053a8bdf80eea5ebc662e5098a52b" compoundref="misc_8c" startline="555" endline="593">ssh_basename</references>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" compoundref="channels_8c" startline="1369" endline="1371">ssh_channel_write</references>
        <references refid="group__libssh__error_1ga9241586665bf21f823806473fc386258" compoundref="error_8c" startline="111" endline="115">ssh_get_error</references>
        <references refid="group__libssh__scp_1ga8772a6523a2a21a06e3986dbcc02118f" compoundref="scp_8c" startline="815" endline="819">ssh_scp_string_mode</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga2ca698c1e49612c083d9f8a72df52188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_leave_directory</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_leave_directory</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Leave a directory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SSH_OK if the directory has been left,SSH_ERROR if an error occured.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1gaa584f03d4e3d582ac10a3a19818ec56d" kindref="member">ssh_scp_push_directory()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="271" column="1" bodyfile="src/scp.c" bodystart="271" bodyend="298"/>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" compoundref="channels_8c" startline="1369" endline="1371">ssh_channel_write</references>
        <references refid="group__libssh__error_1ga9241586665bf21f823806473fc386258" compoundref="error_8c" startline="111" endline="115">ssh_get_error</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga50b701b9c8923011d4fc6489c9c7eaae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_push_file64</definition>
        <argsstring>(ssh_scp scp, const char *filename, uint64_t size, int mode)</argsstring>
        <name>ssh_scp_push_file64</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Initialize the sending of a file to a scp in sink mode, using a 64-bit size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file being sent. It should not contain any path indicator</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Exact size in bytes of the file being sent.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The UNIX permissions for the new file, e.g. 0644.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK if the file is ready to be sent, SSH_ERROR if an error occured.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1ga544f4b9c525071910110ada94148adc6" kindref="member">ssh_scp_push_file()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="317" column="1" bodyfile="src/scp.c" bodystart="317" bodyend="355"/>
        <references refid="group__libssh__misc_1ga83b053a8bdf80eea5ebc662e5098a52b" compoundref="misc_8c" startline="555" endline="593">ssh_basename</references>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" compoundref="channels_8c" startline="1369" endline="1371">ssh_channel_write</references>
        <references refid="group__libssh__error_1ga9241586665bf21f823806473fc386258" compoundref="error_8c" startline="111" endline="115">ssh_get_error</references>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba75fa79e63947b66462db977d9b5ae27c" compoundref="libssh_8h" startline="286">SSH_LOG_PROTOCOL</references>
        <references refid="group__libssh__scp_1ga8772a6523a2a21a06e3986dbcc02118f" compoundref="scp_8c" startline="815" endline="819">ssh_scp_string_mode</references>
        <referencedby refid="group__libssh__scp_1ga544f4b9c525071910110ada94148adc6" compoundref="scp_8c" startline="372" endline="374">ssh_scp_push_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga544f4b9c525071910110ada94148adc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_push_file</definition>
        <argsstring>(ssh_scp scp, const char *filename, size_t size, int mode)</argsstring>
        <name>ssh_scp_push_file</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Initialize the sending of a file to a scp in sink mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file being sent. It should not contain any path indicator</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Exact size in bytes of the file being sent.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The UNIX permissions for the new file, e.g. 0644.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK if the file is ready to be sent, SSH_ERROR if an error occured. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="372" column="1" bodyfile="src/scp.c" bodystart="372" bodyend="374"/>
        <references refid="group__libssh__scp_1ga50b701b9c8923011d4fc6489c9c7eaae" compoundref="scp_8c" startline="317" endline="355">ssh_scp_push_file64</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gab713864881af7ebda7e1e9c609fdf604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_response</definition>
        <argsstring>(ssh_scp scp, char **response)</argsstring>
        <name>ssh_scp_response</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>response</declname>
        </param>
        <briefdescription>
<para>Wait for a response of the scp server. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">response</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where the response message must be copied if any. This pointer must then be free&apos;d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return code, SSH_ERROR a error occured. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="388" column="1" bodyfile="src/scp.c" bodystart="388" bodyend="423"/>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__scp_1ga0be44d8a450767d92668d36d1beb43b9" compoundref="scp_8c" startline="504" endline="525">ssh_scp_read_string</references>
        <referencedby refid="group__libssh__scp_1ga10bf627407959b51a7c39b37e8d46460" compoundref="scp_8c" startline="703" endline="745">ssh_scp_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga11f48e2cf62bcec20d9232ed3ca41752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_write</definition>
        <argsstring>(ssh_scp scp, const void *buffer, size_t len)</argsstring>
        <name>ssh_scp_write</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Write into a remote scp file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to write.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK if the write was successful, SSH_ERROR an error occured while writing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="437" column="1" bodyfile="src/scp.c" bodystart="437" bodyend="488"/>
        <references refid="group__libssh__channel_1ga157f7d1df5de07ec6c6976e2034ba6e2" compoundref="channels_8c" startline="2789" endline="2820">ssh_channel_poll</references>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" compoundref="channels_8c" startline="1369" endline="1371">ssh_channel_write</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga0be44d8a450767d92668d36d1beb43b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_read_string</definition>
        <argsstring>(ssh_scp scp, char *buffer, size_t len)</argsstring>
        <name>ssh_scp_read_string</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read a string on a channel, terminated by &apos;<linebreak/>
&apos;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer to place the string.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer in bytes. If the string is bigger than len-1, only len-1 bytes are read and the string is null-terminated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK if the string was read, SSH_ERROR if an error occured while reading. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="504" column="1" bodyfile="src/scp.c" bodystart="504" bodyend="525"/>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <referencedby refid="group__libssh__scp_1gaba59cd8cc77d219cac93f865445c6e47" compoundref="scp_8c" startline="547" endline="631">ssh_scp_pull_request</referencedby>
        <referencedby refid="group__libssh__scp_1gab713864881af7ebda7e1e9c609fdf604" compoundref="scp_8c" startline="388" endline="423">ssh_scp_response</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gaba59cd8cc77d219cac93f865445c6e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_pull_request</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_pull_request</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Wait for a scp request (file, directory). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SSH_SCP_REQUEST_NEWFILE: The other side is sending a file SSH_SCP_REQUEST_NEWDIR: The other side is sending a directory SSH_SCP_REQUEST_ENDDIR: The other side has finished with the current directory SSH_SCP_REQUEST_WARNING: The other side sent us a warning SSH_SCP_REQUEST_EOF: The other side finished sending us files and data. SSH_ERROR: Some error happened</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1ga10bf627407959b51a7c39b37e8d46460" kindref="member">ssh_scp_read()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1gad36438c6b1e235d96cec43ca350e9b4f" kindref="member">ssh_scp_deny_request()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1gad3bb38b15f02597cc1e155c526a51e51" kindref="member">ssh_scp_accept_request()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1gafa91c1569e4d22d58a928b232264bbcb" kindref="member">ssh_scp_request_get_warning()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="547" column="1" bodyfile="src/scp.c" bodystart="547" bodyend="631"/>
        <references refid="group__libssh__channel_1gab535264029443d77214c0615a0788b0a" compoundref="channels_8c" startline="1412" endline="1424">ssh_channel_is_eof</references>
        <references refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" compoundref="channels_8c" startline="1369" endline="1371">ssh_channel_write</references>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba75fa79e63947b66462db977d9b5ae27c" compoundref="libssh_8h" startline="286">SSH_LOG_PROTOCOL</references>
        <references refid="group__libssh__scp_1gab7d6e452c6963199477103394456d3ae" compoundref="scp_8c" startline="802" endline="805">ssh_scp_integer_mode</references>
        <references refid="group__libssh__scp_1ga0be44d8a450767d92668d36d1beb43b9" compoundref="scp_8c" startline="504" endline="525">ssh_scp_read_string</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gad36438c6b1e235d96cec43ca350e9b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_deny_request</definition>
        <argsstring>(ssh_scp scp, const char *reason)</argsstring>
        <name>ssh_scp_deny_request</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Deny the transfer of a file or creation of a directory coming from the remote party. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reason</parametername>
</parameternamelist>
<parameterdescription>
<para>A nul-terminated string with a human-readable explanation of the deny.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK if the message was sent, SSH_ERROR if the sending the message failed, or sending it in a bad state. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="644" column="1" bodyfile="src/scp.c" bodystart="644" bodyend="662"/>
        <references refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" compoundref="channels_8c" startline="1369" endline="1371">ssh_channel_write</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gad3bb38b15f02597cc1e155c526a51e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_accept_request</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_accept_request</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Accepts transfer of a file or creation of a directory coming from the remote party. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK if the message was sent, SSH_ERROR if sending the message failed, or sending it in a bad state. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="673" column="1" bodyfile="src/scp.c" bodystart="673" bodyend="691"/>
        <references refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" compoundref="channels_8c" startline="1369" endline="1371">ssh_channel_write</references>
        <referencedby refid="group__libssh__scp_1ga10bf627407959b51a7c39b37e8d46460" compoundref="scp_8c" startline="703" endline="745">ssh_scp_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga10bf627407959b51a7c39b37e8d46460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_read</definition>
        <argsstring>(ssh_scp scp, void *buffer, size_t size)</argsstring>
        <name>ssh_scp_read</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read from a remote scp file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nNumber of bytes read, SSH_ERROR if an error occured while reading. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="703" column="1" bodyfile="src/scp.c" bodystart="703" bodyend="745"/>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" compoundref="channels_8c" startline="1369" endline="1371">ssh_channel_write</references>
        <references refid="group__libssh__scp_1gad3bb38b15f02597cc1e155c526a51e51" compoundref="scp_8c" startline="673" endline="691">ssh_scp_accept_request</references>
        <references refid="group__libssh__scp_1gab713864881af7ebda7e1e9c609fdf604" compoundref="scp_8c" startline="388" endline="423">ssh_scp_response</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gab41ede14208dea4bbd3600077008ccf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_scp_request_get_filename</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_request_get_filename</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Get the name of the directory or file being pushed from the other party. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The file name, NULL on error. The string should not be freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="754" column="1" bodyfile="src/scp.c" bodystart="754" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga3386eb6df0cc620e74a039974c6280d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_request_get_permissions</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_request_get_permissions</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Get the permissions of the directory or file being pushed from the other party. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The UNIX permission, e.g 0644, -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="766" column="1" bodyfile="src/scp.c" bodystart="766" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga8b6f736a5b5af73cf59c7825d7e61966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ssh_scp_request_get_size</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_request_get_size</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Get the size of the file being pushed from the other party. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The numeric size of the file being read. </para></simplesect>
<simplesect kind="warning"><para>The real size may not fit in a 32 bits field and may be truncated. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__scp_1gaefe7f44417e1dc0d857d634fe1117d6d" kindref="member">ssh_scp_request_get_size64()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="779" column="1" bodyfile="src/scp.c" bodystart="779" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gaefe7f44417e1dc0d857d634fe1117d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ssh_scp_request_get_size64</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_request_get_size64</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Get the size of the file being pushed from the other party. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The numeric size of the file being read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="789" column="1" bodyfile="src/scp.c" bodystart="789" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gab7d6e452c6963199477103394456d3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_scp_integer_mode</definition>
        <argsstring>(const char *mode)</argsstring>
        <name>ssh_scp_integer_mode</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Convert a scp text mode to an integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode to convert, e.g. &quot;0644&quot;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer value, e.g. 420 for &quot;0644&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="802" column="1" bodyfile="src/scp.c" bodystart="802" bodyend="805"/>
        <referencedby refid="group__libssh__scp_1gaba59cd8cc77d219cac93f865445c6e47" compoundref="scp_8c" startline="547" endline="631">ssh_scp_pull_request</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1ga8772a6523a2a21a06e3986dbcc02118f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_scp_string_mode</definition>
        <argsstring>(int mode)</argsstring>
        <name>ssh_scp_string_mode</name>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Convert a unix mode into a scp string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode to convert, e.g. 420 or 0644.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a malloc&apos;ed string containing the scp mode, e.g. &quot;0644&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="815" column="1" bodyfile="src/scp.c" bodystart="815" bodyend="819"/>
        <referencedby refid="group__libssh__scp_1gaa584f03d4e3d582ac10a3a19818ec56d" compoundref="scp_8c" startline="227" endline="261">ssh_scp_push_directory</referencedby>
        <referencedby refid="group__libssh__scp_1ga50b701b9c8923011d4fc6489c9c7eaae" compoundref="scp_8c" startline="317" endline="355">ssh_scp_push_file64</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__scp_1gafa91c1569e4d22d58a928b232264bbcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_scp_request_get_warning</definition>
        <argsstring>(ssh_scp scp)</argsstring>
        <name>ssh_scp_request_get_warning</name>
        <param>
          <type>ssh_scp</type>
          <declname>scp</declname>
        </param>
        <briefdescription>
<para>Get the warning string from a scp handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scp</parametername>
</parameternamelist>
<parameterdescription>
<para>The scp handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A warning string, or NULL on error. The string should not be freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scp.c" line="829" column="1" bodyfile="src/scp.c" bodystart="829" bodyend="833"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>SCP protocol over SSH functions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
