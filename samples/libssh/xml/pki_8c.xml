<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pki_8c" kind="file" language="C++">
    <compoundname>pki.c</compoundname>
    <includes local="yes">config.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes refid="libssh_8h" local="yes">libssh/libssh.h</includes>
    <includes refid="session_8h" local="yes">libssh/session.h</includes>
    <includes refid="priv_8h" local="yes">libssh/priv.h</includes>
    <includes refid="pki_8h" local="yes">libssh/pki.h</includes>
    <includes refid="pki__priv_8h" local="yes">libssh/pki_priv.h</includes>
    <includes refid="keys_8h" local="yes">libssh/keys.h</includes>
    <includes refid="buffer_8h" local="yes">libssh/buffer.h</includes>
    <includes refid="misc_8h" local="yes">libssh/misc.h</includes>
    <includes refid="agent_8h" local="yes">libssh/agent.h</includes>
    <incdepgraph>
      <node id="1906">
        <label>sys/stat.h</label>
      </node>
      <node id="1934">
        <label>libssh/buffer.h</label>
        <link refid="buffer_8h_source"/>
        <childnode refid="1935" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
      </node>
      <node id="1935">
        <label>stdarg.h</label>
      </node>
      <node id="1930">
        <label>libssh/curve25519.h</label>
        <link refid="curve25519_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
      </node>
      <node id="1911">
        <label>sys/select.h</label>
      </node>
      <node id="1915">
        <label>libssh/priv.h</label>
        <link refid="priv_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1909" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1916" relation="include">
        </childnode>
      </node>
      <node id="1936">
        <label>libssh/misc.h</label>
        <link refid="misc_8h_source"/>
      </node>
      <node id="1908">
        <label>libssh/libssh.h</label>
        <link refid="libssh_8h_source"/>
        <childnode refid="1909" relation="include">
        </childnode>
        <childnode refid="1910" relation="include">
        </childnode>
        <childnode refid="1907" relation="include">
        </childnode>
        <childnode refid="1911" relation="include">
        </childnode>
        <childnode refid="1912" relation="include">
        </childnode>
        <childnode refid="1913" relation="include">
        </childnode>
      </node>
      <node id="1933">
        <label>libssh/keys.h</label>
        <link refid="keys_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1920" relation="include">
        </childnode>
      </node>
      <node id="1919">
        <label>libssh/packet.h</label>
        <link refid="packet_8h_source"/>
        <childnode refid="1920" relation="include">
        </childnode>
      </node>
      <node id="1902">
        <label>errno.h</label>
      </node>
      <node id="1917">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="1915" relation="include">
        </childnode>
      </node>
      <node id="1905">
        <label>fcntl.h</label>
      </node>
      <node id="1927">
        <label>libssh/pki.h</label>
        <link refid="pki_8h_source"/>
        <childnode refid="1915" relation="include">
        </childnode>
        <childnode refid="1928" relation="include">
        </childnode>
        <childnode refid="1931" relation="include">
        </childnode>
      </node>
      <node id="1913">
        <label>libssh/legacy.h</label>
        <link refid="legacy_8h_source"/>
      </node>
      <node id="1928">
        <label>libssh/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1920" relation="include">
        </childnode>
        <childnode refid="1929" relation="include">
        </childnode>
        <childnode refid="1918" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
      </node>
      <node id="1912">
        <label>netdb.h</label>
      </node>
      <node id="1916">
        <label>libssh/callbacks.h</label>
        <link refid="callbacks_8h_source"/>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
      </node>
      <node id="1931">
        <label>libssh/ed25519.h</label>
        <link refid="ed25519_8h_source"/>
        <childnode refid="1915" relation="include">
        </childnode>
      </node>
      <node id="1907">
        <label>sys/types.h</label>
      </node>
      <node id="1937">
        <label>libssh/agent.h</label>
        <link refid="agent_8h_source"/>
        <childnode refid="1908" relation="include">
        </childnode>
      </node>
      <node id="1926">
        <label>libssh/poll.h</label>
        <link refid="poll_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
      </node>
      <node id="1909">
        <label>unistd.h</label>
      </node>
      <node id="1929">
        <label>libssh/ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
      </node>
      <node id="1900">
        <label>src/pki.c</label>
        <link refid="pki_8c"/>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1902" relation="include">
        </childnode>
        <childnode refid="1903" relation="include">
        </childnode>
        <childnode refid="1904" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1906" relation="include">
        </childnode>
        <childnode refid="1907" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1914" relation="include">
        </childnode>
        <childnode refid="1915" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1934" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
        <childnode refid="1937" relation="include">
        </childnode>
      </node>
      <node id="1925">
        <label>libssh/channels.h</label>
        <link refid="channels_8h_source"/>
        <childnode refid="1915" relation="include">
        </childnode>
      </node>
      <node id="1924">
        <label>libssh/auth.h</label>
        <link refid="auth_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1916" relation="include">
        </childnode>
      </node>
      <node id="1920">
        <label>libssh/wrapper.h</label>
        <link refid="wrapper_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1921" relation="include">
        </childnode>
        <childnode refid="1922" relation="include">
        </childnode>
      </node>
      <node id="1903">
        <label>ctype.h</label>
      </node>
      <node id="1921">
        <label>libssh/libcrypto.h</label>
        <link refid="libcrypto_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
      </node>
      <node id="1918">
        <label>libssh/kex.h</label>
        <link refid="kex_8h_source"/>
        <childnode refid="1915" relation="include">
        </childnode>
        <childnode refid="1916" relation="include">
        </childnode>
      </node>
      <node id="1922">
        <label>libssh/libgcrypt.h</label>
        <link refid="libgcrypt_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
      </node>
      <node id="1923">
        <label>libssh/pcap.h</label>
        <link refid="pcap_8h_source"/>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
      </node>
      <node id="1901">
        <label>config.h</label>
      </node>
      <node id="1932">
        <label>libssh/pki_priv.h</label>
        <link refid="pki__priv_8h_source"/>
        <childnode refid="1927" relation="include">
        </childnode>
      </node>
      <node id="1904">
        <label>stdio.h</label>
      </node>
      <node id="1914">
        <label>libssh/session.h</label>
        <link refid="session_8h_source"/>
        <childnode refid="1915" relation="include">
        </childnode>
        <childnode refid="1918" relation="include">
        </childnode>
        <childnode refid="1919" relation="include">
        </childnode>
        <childnode refid="1923" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
      </node>
      <node id="1910">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libssh__pki_1ga44009d2912430773ef2d4fc8a27eec3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ssh_pki_log</definition>
        <argsstring>(const char *function, const char *format,...)</argsstring>
        <name>_ssh_pki_log</name>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="67" column="1" bodyfile="src/pki.c" bodystart="67" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga7e7a133a35452b9ffe494848aa347cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum ssh_keytypes_e</type>
        <definition>enum ssh_keytypes_e pki_privatekey_type_from_string</definition>
        <argsstring>(const char *privkey)</argsstring>
        <name>pki_privatekey_type_from_string</name>
        <param>
          <type>const char *</type>
          <declname>privkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="67" column="1" bodyfile="src/pki.c" bodystart="85" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gaf9ba4d3e3cd2a8b61fabe33b5b7e59c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_pki_key_ecdsa_name</definition>
        <argsstring>(const ssh_key key)</argsstring>
        <name>ssh_pki_key_ecdsa_name</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns the ECDSA key name (&quot;ecdsa-sha2-nistp256&quot; for example) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>the ssh_key whose ECDSA name to get</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the ECDSA key name (&quot;ecdsa-sha2-nistp256&quot; for example)</para></simplesect>
<simplesect kind="return"><para>&quot;unknown&quot; if the ECDSA key name is not known </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="110" column="1" bodyfile="src/pki.c" bodystart="110" bodyend="118"/>
        <referencedby refid="group__libssh__pki_1gae038fa1b34f9427c7ba84082a1a20bad" compoundref="pki_8c" startline="1036" endline="1087">ssh_pki_generate</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gabfebce03474a4d014aa779d5dbf057b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_key</type>
        <definition>ssh_key ssh_key_new</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_key_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>creates a new empty SSH key </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an empty ssh_key handle, or NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="124" column="1" bodyfile="src/pki.c" bodystart="124" bodyend="131"/>
        <referencedby refid="group__libssh__pki_1gae038fa1b34f9427c7ba84082a1a20bad" compoundref="pki_8c" startline="1036" endline="1087">ssh_pki_generate</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gae0944d085d1a63c73b7eaf78924ddca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_key</type>
        <definition>ssh_key ssh_key_dup</definition>
        <argsstring>(const ssh_key key)</argsstring>
        <name>ssh_key_dup</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="133" column="1" bodyfile="src/pki.c" bodystart="133" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga9ee6aacb86cb7f4e8f3b5ec582040d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_key_clean</definition>
        <argsstring>(ssh_key key)</argsstring>
        <name>ssh_key_clean</name>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>clean up the key and deallocate all existing keys </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>ssh_key to clean </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="146" column="1" bodyfile="src/pki.c" bodystart="146" bodyend="172"/>
        <referencedby refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" compoundref="pki_8c" startline="178" endline="183">ssh_key_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_key_free</definition>
        <argsstring>(ssh_key key)</argsstring>
        <name>ssh_key_free</name>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>deallocate a SSH key </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>ssh_key handle to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="178" column="1" bodyfile="src/pki.c" bodystart="178" bodyend="183"/>
        <references refid="group__libssh__pki_1ga9ee6aacb86cb7f4e8f3b5ec582040d3a" compoundref="pki_8c" startline="146" endline="172">ssh_key_clean</references>
        <referencedby refid="group__libssh__server_1gaa7650d22d982a82bf328345c04948cdf" compoundref="bind_8c" startline="345" endline="382">ssh_bind_free</referencedby>
        <referencedby refid="group__libssh__messages_1ga9d1b1d2279c6be3539f2b630960759c3" compoundref="messages_8c" startline="502" endline="556">ssh_message_free</referencedby>
        <referencedby refid="group__libssh__pki_1gae038fa1b34f9427c7ba84082a1a20bad" compoundref="pki_8c" startline="1036" endline="1087">ssh_pki_generate</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga9cb4a857f8e510f80cfc38e46c476490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum ssh_keytypes_e</type>
        <definition>enum ssh_keytypes_e ssh_key_type</definition>
        <argsstring>(const ssh_key key)</argsstring>
        <name>ssh_key_type</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns the type of a ssh key </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>the ssh_key handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>one of SSH_KEYTYPE_RSA,SSH_KEYTYPE_DSS,SSH_KEYTYPE_RSA1 </para></simplesect>
<simplesect kind="return"><para>SSH_KEYTYPE_UNKNOWN if the type is unknown </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="178" column="1" bodyfile="src/pki.c" bodystart="191" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga302919f046a4af504e5a2a9924b031c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_key_type_to_char</definition>
        <argsstring>(enum ssh_keytypes_e type)</argsstring>
        <name>ssh_key_type_to_char</name>
        <param>
          <type>enum ssh_keytypes_e</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Convert a key type to a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string for the keytype or NULL if unknown. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="205" column="1" bodyfile="src/pki.c" bodystart="205" bodyend="223"/>
        <referencedby refid="group__libssh__pki_1gae038fa1b34f9427c7ba84082a1a20bad" compoundref="pki_8c" startline="1036" endline="1087">ssh_pki_generate</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga44584f2316c6ccd40e9939454335d8bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum ssh_keytypes_e</type>
        <definition>enum ssh_keytypes_e ssh_key_type_from_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>ssh_key_type_from_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Convert a ssh key name to a ssh key type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The enum ssh key type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="205" column="1" bodyfile="src/pki.c" bodystart="232" bodyend="260"/>
        <referencedby refid="group__libssh__pki_1ga942b96ee72b13655952c87efe938e6ee" compoundref="pki_8c" startline="882" endline="929">ssh_pki_import_pubkey_blob</referencedby>
        <referencedby refid="group__libssh__pki_1gaffb08168b870fb9e86cc7649c8987eb0" compoundref="pki_8c" startline="944" endline="1018">ssh_pki_import_pubkey_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga9bc688b5cbc400320ac44896eba21924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_key_is_public</definition>
        <argsstring>(const ssh_key k)</argsstring>
        <name>ssh_key_is_public</name>
        <param>
          <type>const ssh_key</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Check if the key has/is a public key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">k</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to check.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if it is a public key, 0 if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="269" column="1" bodyfile="src/pki.c" bodystart="269" bodyend="275"/>
        <referencedby refid="group__libssh__auth_1ga592f673c4d417a6a46cd4876ac8287aa" compoundref="auth_8c" startline="441" endline="524">ssh_userauth_try_publickey</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga09de68aba0a7c4e31d8ba7df43b637c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_key_is_private</definition>
        <argsstring>(const ssh_key k)</argsstring>
        <name>ssh_key_is_private</name>
        <param>
          <type>const ssh_key</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Check if the key is a private key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">k</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to check.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if it is a private key, 0 if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="284" column="1" bodyfile="src/pki.c" bodystart="284" bodyend="290"/>
        <referencedby refid="group__libssh__pki_1ga4dc33945294c2bbd671365a9d3db8e2f" compoundref="pki_8c" startline="303" endline="328">ssh_key_cmp</referencedby>
        <referencedby refid="group__libssh__pki_1ga3b294c44e2280c935cb0b82ede5c42ee" compoundref="pki_8c" startline="548" endline="595">ssh_pki_export_privkey_file</referencedby>
        <referencedby refid="group__libssh__pki_1ga5777bc537da6a447b2a9aa9eceff9877" compoundref="pki_8c" startline="1101" endline="1117">ssh_pki_export_privkey_to_pubkey</referencedby>
        <referencedby refid="group__libssh__auth_1gaa38c4f3194ef36720da7eddb0aa99e23" compoundref="auth_8c" startline="550" endline="645">ssh_userauth_publickey</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga4dc33945294c2bbd671365a9d3db8e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_key_cmp</definition>
        <argsstring>(const ssh_key k1, const ssh_key k2, enum ssh_keycmp_e what)</argsstring>
        <name>ssh_key_cmp</name>
        <param>
          <type>const ssh_key</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>k2</declname>
        </param>
        <param>
          <type>enum ssh_keycmp_e</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Compare keys if they are equal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">k1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first key to compare.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">k2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second key to compare.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">what</parametername>
</parameternamelist>
<parameterdescription>
<para>What part or type of the key do you want to compare.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if equal, 1 if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="303" column="1" bodyfile="src/pki.c" bodystart="303" bodyend="328"/>
        <references refid="group__libssh__pki_1ga09de68aba0a7c4e31d8ba7df43b637c5" compoundref="pki_8c" startline="284" endline="290">ssh_key_is_private</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gae69bb1e43ad83f808cc0ce4b89727bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_signature</type>
        <definition>ssh_signature ssh_signature_new</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_signature_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="330" column="1" bodyfile="src/pki.c" bodystart="330" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga428f0c9a085999e3e28e672d23a5bc55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_signature_free</definition>
        <argsstring>(ssh_signature sig)</argsstring>
        <name>ssh_signature_free</name>
        <param>
          <type>ssh_signature</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="343" column="1" bodyfile="src/pki.c" bodystart="343" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga5f2a2ca4b9b711d1c1af8020dfbd4a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_import_privkey_base64</definition>
        <argsstring>(const char *b64_key, const char *passphrase, ssh_auth_callback auth_fn, void *auth_data, ssh_key *pkey)</argsstring>
        <name>ssh_pki_import_privkey_base64</name>
        <param>
          <type>const char *</type>
          <declname>b64_key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
<para>import a base64 formated key from a memory c-string </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">b64_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The c-string holding the base64 encoded key</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>The passphrase to decrypt the key, or NULL</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">auth_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>An auth function you may want to use or NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">auth_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Private data passed to the auth function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pkey</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where the allocated key can be stored. You need to free the memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_ERROR in case of error, SSH_OK otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" kindref="member">ssh_key_free()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="398" column="1" bodyfile="src/pki.c" bodystart="398" bodyend="439"/>
        <references refid="group__libssh__pki_1gaf157c1df451c718d42a3db69443acf12" compoundref="pki__container__openssh_8c" startline="272" endline="406">ssh_pki_openssh_privkey_import</references>
        <referencedby refid="group__libssh__pki_1ga1c8f84137606b1585006302499100ee0" compoundref="pki_8c" startline="461" endline="529">ssh_pki_import_privkey_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga1c8f84137606b1585006302499100ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_import_privkey_file</definition>
        <argsstring>(const char *filename, const char *passphrase, ssh_auth_callback auth_fn, void *auth_data, ssh_key *pkey)</argsstring>
        <name>ssh_pki_import_privkey_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
<para>Import a key from a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename of the the private key.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>The passphrase to decrypt the private key. Set to NULL if none is needed or it is unknown.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">auth_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>An auth function you may want to use or NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">auth_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Private data passed to the auth function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pkey</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the allocated ssh_key. You need to free the key.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_EOF if the file doesn&apos;t exist or permission denied, SSH_ERROR otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" kindref="member">ssh_key_free()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="461" column="1" bodyfile="src/pki.c" bodystart="461" bodyend="529"/>
        <references refid="group__libssh__pki_1ga5f2a2ca4b9b711d1c1af8020dfbd4a53" compoundref="pki_8c" startline="398" endline="439">ssh_pki_import_privkey_base64</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga3b294c44e2280c935cb0b82ede5c42ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_export_privkey_file</definition>
        <argsstring>(const ssh_key privkey, const char *passphrase, ssh_auth_callback auth_fn, void *auth_data, const char *filename)</argsstring>
        <name>ssh_pki_export_privkey_file</name>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Export a private key to a pem file on disk, or OpenSSH format for keytype ssh-ed25519. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">privkey</parametername>
</parameternamelist>
<parameterdescription>
<para>The private key to export.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>The passphrase to use to encrypt the key with or NULL. An empty string means no passphrase.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">auth_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>An auth function you may want to use or NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">auth_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Private data passed to the auth function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path where to store the pem file.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="548" column="1" bodyfile="src/pki.c" bodystart="548" bodyend="595"/>
        <references refid="group__libssh__pki_1ga09de68aba0a7c4e31d8ba7df43b637c5" compoundref="pki_8c" startline="284" endline="290">ssh_key_is_private</references>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba926c933f61d1afa64003c1cc66f6a01c" compoundref="libssh_8h" startline="292">SSH_LOG_FUNCTIONS</references>
        <references refid="group__libssh__pki_1ga0a1b01b666de3e4f433660761c7658ad" compoundref="pki__container__openssh_8c" startline="554" endline="718">ssh_pki_openssh_privkey_export</references>
        <references refid="group__libssh__string_1gaf01673d22adbff92c88bcb6e30946ea6" compoundref="string_8c" startline="259" endline="265">ssh_string_data</references>
        <references refid="group__libssh__string_1gacd9c4eb69f7ecfdcf709deb8dde6a5a8" compoundref="string_8c" startline="272" endline="274">ssh_string_free</references>
        <references refid="group__libssh__string_1ga331553369afbfcb4f5300729ed65d0fe" compoundref="string_8c" startline="131" endline="144">ssh_string_len</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga2fb166991a033adb5540b66f407e2db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_public_key</type>
        <definition>ssh_public_key ssh_pki_convert_key_to_publickey</definition>
        <argsstring>(const ssh_key key)</argsstring>
        <name>ssh_pki_convert_key_to_publickey</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="598" column="1" bodyfile="src/pki.c" bodystart="598" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gacf3c14fbfaa1e0b1aa3d4129bad07fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_private_key</type>
        <definition>ssh_private_key ssh_pki_convert_key_to_privatekey</definition>
        <argsstring>(const ssh_key key)</argsstring>
        <name>ssh_pki_convert_key_to_privatekey</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="631" column="1" bodyfile="src/pki.c" bodystart="631" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga47e989e47acf6d577c805910e688a21f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int pki_import_pubkey_buffer</definition>
        <argsstring>(ssh_buffer buffer, enum ssh_keytypes_e type, ssh_key *pkey)</argsstring>
        <name>pki_import_pubkey_buffer</name>
        <param>
          <type>ssh_buffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>enum ssh_keytypes_e</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="647" column="1" bodyfile="src/pki.c" bodystart="647" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gac8d7d3fa88b93d8b059b6b5b2f457913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_import_pubkey_base64</definition>
        <argsstring>(const char *b64_key, enum ssh_keytypes_e type, ssh_key *pkey)</argsstring>
        <name>ssh_pki_import_pubkey_base64</name>
        <param>
          <type>const char *</type>
          <declname>b64_key</declname>
        </param>
        <param>
          <type>enum ssh_keytypes_e</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
<para>Import a base64 formated public key from a memory c-string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">b64_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The base64 key to format.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the key to format.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pkey</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where the allocated key can be stored. You need to free the memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" kindref="member">ssh_key_free()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="838" column="1" bodyfile="src/pki.c" bodystart="838" bodyend="865"/>
        <references refid="group__libssh__buffer_1ga208f7cc2f69191c717d4bfd5d153bca4" compoundref="buffer_8c" startline="650" endline="676">buffer_get_ssh_string</references>
        <references refid="group__libssh__buffer_1ga608cf73226454f21e8b2f9f1d838c5fc" compoundref="buffer_8c" startline="102" endline="115">ssh_buffer_free</references>
        <references refid="group__libssh__string_1gacd9c4eb69f7ecfdcf709deb8dde6a5a8" compoundref="string_8c" startline="272" endline="274">ssh_string_free</references>
        <referencedby refid="group__libssh__pki_1gaffb08168b870fb9e86cc7649c8987eb0" compoundref="pki_8c" startline="944" endline="1018">ssh_pki_import_pubkey_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga942b96ee72b13655952c87efe938e6ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_import_pubkey_blob</definition>
        <argsstring>(const ssh_string key_blob, ssh_key *pkey)</argsstring>
        <name>ssh_pki_import_pubkey_blob</name>
        <param>
          <type>const ssh_string</type>
          <declname>key_blob</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
<para>Import a public key from a ssh string. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>The key blob to import as specified in RFC 4253 section 6.6 &quot;Public Key Algorithms&quot;.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pkey</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where the allocated key can be stored. You need to free the memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" kindref="member">ssh_key_free()</ref> </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="882" column="1" bodyfile="src/pki.c" bodystart="882" bodyend="929"/>
        <references refid="group__libssh__buffer_1ga208f7cc2f69191c717d4bfd5d153bca4" compoundref="buffer_8c" startline="650" endline="676">buffer_get_ssh_string</references>
        <references refid="group__libssh__buffer_1ga3bf82f0f310311432410f9393ebab528" compoundref="buffer_8c" startline="223" endline="247">ssh_buffer_add_data</references>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <references refid="group__libssh__pki_1ga44584f2316c6ccd40e9939454335d8bc" compoundref="pki_8c" startline="232" endline="260">ssh_key_type_from_name</references>
        <references refid="group__libssh__string_1gaf01673d22adbff92c88bcb6e30946ea6" compoundref="string_8c" startline="259" endline="265">ssh_string_data</references>
        <references refid="group__libssh__string_1gacd9c4eb69f7ecfdcf709deb8dde6a5a8" compoundref="string_8c" startline="272" endline="274">ssh_string_free</references>
        <references refid="group__libssh__string_1gaf867504fb528c32bf9e5e1459321cf59" compoundref="string_8c" startline="155" endline="163">ssh_string_get_char</references>
        <references refid="group__libssh__string_1ga331553369afbfcb4f5300729ed65d0fe" compoundref="string_8c" startline="131" endline="144">ssh_string_len</references>
        <referencedby refid="group__libssh__session_1ga839a93298aeff85adbaf4db815b58730" compoundref="dh_8c" startline="964" endline="974">ssh_get_publickey</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gaffb08168b870fb9e86cc7649c8987eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_import_pubkey_file</definition>
        <argsstring>(const char *filename, ssh_key *pkey)</argsstring>
        <name>ssh_pki_import_pubkey_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
<para>Import a public key from the given filename. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the public key.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pkey</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the allocated public key. You need to free the memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_EOF if the file doesn&apos;t exist or permission denied, SSH_ERROR otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" kindref="member">ssh_key_free()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="944" column="1" bodyfile="src/pki.c" bodystart="944" bodyend="1018"/>
        <references refid="group__libssh__pki_1ga44584f2316c6ccd40e9939454335d8bc" compoundref="pki_8c" startline="232" endline="260">ssh_key_type_from_name</references>
        <references refid="group__libssh__pki_1gac8d7d3fa88b93d8b059b6b5b2f457913" compoundref="pki_8c" startline="838" endline="865">ssh_pki_import_pubkey_base64</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gae038fa1b34f9427c7ba84082a1a20bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_generate</definition>
        <argsstring>(enum ssh_keytypes_e type, int parameter, ssh_key *pkey)</argsstring>
        <name>ssh_pki_generate</name>
        <param>
          <type>enum ssh_keytypes_e</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
<para>Generates a keypair. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of key to create</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter to the creation of key: rsa : length of the key in bits (e.g. 1024, 2048, 4096) dsa : length of the key in bits (e.g. 1024, 2048, 3072) ecdsa : bits of the key (e.g. 256, 384, 512) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pkey</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the allocated private key. You need to free the memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error.</para></simplesect>
<simplesect kind="warning"><para>Generating a key pair may take some time. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1036" column="1" bodyfile="src/pki.c" bodystart="1036" bodyend="1087"/>
        <references refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" compoundref="pki_8c" startline="178" endline="183">ssh_key_free</references>
        <references refid="group__libssh__pki_1gabfebce03474a4d014aa779d5dbf057b0" compoundref="pki_8c" startline="124" endline="131">ssh_key_new</references>
        <references refid="group__libssh__pki_1ga302919f046a4af504e5a2a9924b031c1" compoundref="pki_8c" startline="205" endline="223">ssh_key_type_to_char</references>
        <references refid="group__libssh__pki_1gaf9ba4d3e3cd2a8b61fabe33b5b7e59c2" compoundref="pki_8c" startline="110" endline="118">ssh_pki_key_ecdsa_name</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga5777bc537da6a447b2a9aa9eceff9877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_export_privkey_to_pubkey</definition>
        <argsstring>(const ssh_key privkey, ssh_key *pkey)</argsstring>
        <name>ssh_pki_export_privkey_to_pubkey</name>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
<para>Create a public key from a private key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">privkey</parametername>
</parameternamelist>
<parameterdescription>
<para>The private key to get the public key from.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pkey</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the newly allocated public key. You NEED to free the key.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" kindref="member">ssh_key_free()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1101" column="1" bodyfile="src/pki.c" bodystart="1101" bodyend="1117"/>
        <references refid="group__libssh__pki_1ga09de68aba0a7c4e31d8ba7df43b637c5" compoundref="pki_8c" startline="284" endline="290">ssh_key_is_private</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gaadeaf6dc35e99214de0af82c3c431649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_export_pubkey_blob</definition>
        <argsstring>(const ssh_key key, ssh_string *pblob)</argsstring>
        <name>ssh_pki_export_pubkey_blob</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ssh_string *</type>
          <declname>pblob</declname>
        </param>
        <briefdescription>
<para>Create a key_blob from a public key. </para>        </briefdescription>
        <detaileddescription>
<internal><para>The &quot;key_blob&quot; is encoded as per RFC 4253 section 6.6 &quot;Public Key
Algorithms&quot; for any of the supported protocol 2 key types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>A public or private key to create the public ssh_string from.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pblob</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the newly allocated key blob. You NEED to free it.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__string_1gacd9c4eb69f7ecfdcf709deb8dde6a5a8" kindref="member">ssh_string_free()</ref> </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1137" column="1" bodyfile="src/pki.c" bodystart="1137" bodyend="1153"/>
        <referencedby refid="group__libssh__session_1ga7a7b16a4bed6d8d58f10bdb269172ff7" compoundref="dh_8c" startline="1004" endline="1075">ssh_get_publickey_hash</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga2caa40cbd9620e9f7e3e7ab654b256c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_export_pubkey_base64</definition>
        <argsstring>(const ssh_key key, char **b64_key)</argsstring>
        <name>ssh_pki_export_pubkey_base64</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>b64_key</declname>
        </param>
        <briefdescription>
<para>Convert a public key to a base64 encoded key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to hash</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">b64_key</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the allocated base64 encoded key. You need to free the buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__string_1gafc10700722d6cafc468c2ee97585449a" kindref="member">ssh_string_free_char()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1167" column="1" bodyfile="src/pki.c" bodystart="1167" bodyend="1191"/>
        <references refid="group__libssh__string_1gaf01673d22adbff92c88bcb6e30946ea6" compoundref="string_8c" startline="259" endline="265">ssh_string_data</references>
        <references refid="group__libssh__string_1gacd9c4eb69f7ecfdcf709deb8dde6a5a8" compoundref="string_8c" startline="272" endline="274">ssh_string_free</references>
        <references refid="group__libssh__string_1ga331553369afbfcb4f5300729ed65d0fe" compoundref="string_8c" startline="131" endline="144">ssh_string_len</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga576cb3a5c7f40a0e20a88b14a023613d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_export_pubkey_file</definition>
        <argsstring>(const ssh_key key, const char *filename)</argsstring>
        <name>ssh_pki_export_pubkey_file</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1193" column="1" bodyfile="src/pki.c" bodystart="1193" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga9fe9fefc705e7ea8acc8dc809cea1076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_export_pubkey_rsa1</definition>
        <argsstring>(const ssh_key key, const char *host, char *rsa1, size_t rsa1_len)</argsstring>
        <name>ssh_pki_export_pubkey_rsa1</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>rsa1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rsa1_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1251" column="1" bodyfile="src/pki.c" bodystart="1251" bodyend="1257"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga302c3e762e3268e3971df86784688013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_export_signature_blob</definition>
        <argsstring>(const ssh_signature sig, ssh_string *sig_blob)</argsstring>
        <name>ssh_pki_export_signature_blob</name>
        <param>
          <type>const ssh_signature</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>ssh_string *</type>
          <declname>sig_blob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1259" column="1" bodyfile="src/pki.c" bodystart="1259" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga02ef62122b1d2c3065e86413cc673704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_import_signature_blob</definition>
        <argsstring>(const ssh_string sig_blob, const ssh_key pubkey, ssh_signature *psig)</argsstring>
        <name>ssh_pki_import_signature_blob</name>
        <param>
          <type>const ssh_string</type>
          <declname>sig_blob</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>ssh_signature *</type>
          <declname>psig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1315" column="1" bodyfile="src/pki.c" bodystart="1315" bodyend="1365"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga03fdd0bce9e259365736555abb0ed571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_pki_signature_verify_blob</definition>
        <argsstring>(ssh_session session, ssh_string sig_blob, const ssh_key key, unsigned char *digest, size_t dlen)</argsstring>
        <name>ssh_pki_signature_verify_blob</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>sig_blob</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>digest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1367" column="1" bodyfile="src/pki.c" bodystart="1367" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga7e1830d2e6eaf10d4fdfb5954bf718eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_string</type>
        <definition>ssh_string ssh_pki_do_sign</definition>
        <argsstring>(ssh_session session, ssh_buffer sigbuf, const ssh_key privkey)</argsstring>
        <name>ssh_pki_do_sign</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>ssh_buffer</type>
          <declname>sigbuf</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1429" column="1" bodyfile="src/pki.c" bodystart="1429" bodyend="1528"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga030b5e767d97bd26053a5644b083c133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_string</type>
        <definition>ssh_string ssh_pki_do_sign_agent</definition>
        <argsstring>(ssh_session session, struct ssh_buffer_struct *buf, const ssh_key pubkey)</argsstring>
        <name>ssh_pki_do_sign_agent</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>struct ssh_buffer_struct *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1531" column="1" bodyfile="src/pki.c" bodystart="1531" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga7f7b8ba203dc93fd0ffdfb4bacb0f0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_string</type>
        <definition>ssh_string ssh_srv_pki_do_sign_sessionid</definition>
        <argsstring>(ssh_session session, const ssh_key privkey)</argsstring>
        <name>ssh_srv_pki_do_sign_sessionid</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki.c" line="1583" column="1" bodyfile="src/pki.c" bodystart="1583" bodyend="1664"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/pki.c"/>
  </compounddef>
</doxygen>
