<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="apr__tables_8h" kind="file" language="C++">
    <compoundname>apr_tables.h</compoundname>
    <includes refid="apr_8h" local="yes">apr.h</includes>
    <includes refid="apr__pools_8h" local="yes">apr_pools.h</includes>
    <includes local="no">stdarg.h</includes>
    <includedby refid="apr__file__info_8h" local="yes">apr_file_info.h</includedby>
    <includedby refid="apr__fnmatch_8h" local="yes">apr_fnmatch.h</includedby>
    <incdepgraph>
      <node id="779">
        <label>stdarg.h</label>
      </node>
      <node id="767">
        <label>stdint.h</label>
      </node>
      <node id="772">
        <label>errno.h</label>
      </node>
      <node id="773">
        <label>apr_general.h</label>
        <link refid="apr__general_8h"/>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
        <childnode refid="771" relation="include">
        </childnode>
        <childnode refid="774" relation="include">
        </childnode>
      </node>
      <node id="769">
        <label>limits.h</label>
      </node>
      <node id="765">
        <label>sys/types.h</label>
      </node>
      <node id="776">
        <label>string.h</label>
      </node>
      <node id="778">
        <label>apr_thread_mutex.h</label>
        <link refid="apr__thread__mutex_8h"/>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="771" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
      </node>
      <node id="770">
        <label>apr_pools.h</label>
        <link refid="apr__pools_8h"/>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="771" relation="include">
        </childnode>
        <childnode refid="773" relation="include">
        </childnode>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="777" relation="include">
        </childnode>
      </node>
      <node id="777">
        <label>apr_allocator.h</label>
        <link refid="apr__allocator_8h"/>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="771" relation="include">
        </childnode>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
        <childnode refid="778" relation="include">
        </childnode>
      </node>
      <node id="774">
        <label>signal.h</label>
      </node>
      <node id="771">
        <label>apr_errno.h</label>
        <link refid="apr__errno_8h"/>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="772" relation="include">
        </childnode>
      </node>
      <node id="768">
        <label>sys/wait.h</label>
      </node>
      <node id="764">
        <label>apr.h</label>
        <link refid="apr_8h"/>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="768" relation="include">
        </childnode>
        <childnode refid="769" relation="include">
        </childnode>
      </node>
      <node id="766">
        <label>sys/socket.h</label>
      </node>
      <node id="775">
        <label>apr_want.h</label>
        <link refid="apr__want_8h"/>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
      </node>
      <node id="763">
        <label>apr_tables.h</label>
        <link refid="apr__tables_8h"/>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
        <childnode refid="779" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="781">
        <label>apr_file_info.h</label>
        <link refid="apr__file__info_8h"/>
        <childnode refid="782" relation="include">
        </childnode>
      </node>
      <node id="782">
        <label>apr_file_io.h</label>
        <link refid="apr__file__io_8h"/>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="784" relation="include">
        </childnode>
        <childnode refid="785" relation="include">
        </childnode>
        <childnode refid="789" relation="include">
        </childnode>
        <childnode refid="786" relation="include">
        </childnode>
        <childnode refid="788" relation="include">
        </childnode>
      </node>
      <node id="783">
        <label>apr_mmap.h</label>
        <link refid="apr__mmap_8h"/>
      </node>
      <node id="788">
        <label>apr_support.h</label>
        <link refid="apr__support_8h"/>
      </node>
      <node id="784">
        <label>apr_network_io.h</label>
        <link refid="apr__network__io_8h"/>
        <childnode refid="785" relation="include">
        </childnode>
        <childnode refid="786" relation="include">
        </childnode>
        <childnode refid="788" relation="include">
        </childnode>
      </node>
      <node id="785">
        <label>apr_poll.h</label>
        <link refid="apr__poll_8h"/>
      </node>
      <node id="786">
        <label>apr_portable.h</label>
        <link refid="apr__portable_8h"/>
        <childnode refid="787" relation="include">
        </childnode>
      </node>
      <node id="791">
        <label>apr_fnmatch.h</label>
        <link refid="apr__fnmatch_8h"/>
      </node>
      <node id="787">
        <label>apr_skiplist.h</label>
        <link refid="apr__skiplist_8h"/>
      </node>
      <node id="789">
        <label>apr_thread_proc.h</label>
        <link refid="apr__thread__proc_8h"/>
        <childnode refid="786" relation="include">
        </childnode>
        <childnode refid="790" relation="include">
        </childnode>
      </node>
      <node id="780">
        <label>apr_tables.h</label>
        <link refid="apr__tables_8h"/>
        <childnode refid="781" relation="include">
        </childnode>
        <childnode refid="791" relation="include">
        </childnode>
      </node>
      <node id="790">
        <label>apr_random.h</label>
        <link refid="apr__random_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structapr__array__header__t" prot="public">apr_array_header_t</innerclass>
    <innerclass refid="structapr__table__entry__t" prot="public">apr_table_entry_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__tables_1ga84066caaa4c7632671af18c229809fc4" prot="public" static="no">
        <name>APR_ARRAY_IDX</name>
        <param><defname>ary</defname></param>
        <param><defname>i</defname></param>
        <param><defname>type</defname></param>
        <initializer>(((type *)(ary)-&gt;elts)[i])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A helper macro for accessing a member of an APR array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ary</parametername>
</parameternamelist>
<parameterdescription>
<para>the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index into the array to return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the objects stored in the array</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the item at index i </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="141" column="9" bodyfile="include/apr_tables.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__tables_1ga1833b0f940ec03d0b95926812152e1ca" prot="public" static="no">
        <name>APR_ARRAY_PUSH</name>
        <param><defname>ary</defname></param>
        <param><defname>type</defname></param>
        <initializer>(*((type *)<ref refid="group__apr__tables_1gac08267b32905197dd02ffff3314d9603" kindref="member">apr_array_push</ref>(ary)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A helper macro for pushing elements into an APR array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ary</parametername>
</parameternamelist>
<parameterdescription>
<para>the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the objects stored in the array</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the location where the new object should be placed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="150" column="9" bodyfile="include/apr_tables.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__tables_1ga867455bb7008872e03b08c0742f9698c" prot="public" static="no">
        <name>APR_OVERLAP_TABLES_SET</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>flag for overlap to use apr_table_setn </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="436" column="9" bodyfile="include/apr_tables.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__tables_1ga553eea6eb6fea4bafaf4cbd7acafdf5f" prot="public" static="no">
        <name>APR_OVERLAP_TABLES_MERGE</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>flag for overlap to use apr_table_mergen </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="438" column="9" bodyfile="include/apr_tables.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" prot="public" static="no">
        <type>struct <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref></type>
        <definition>typedef struct apr_table_t apr_table_t</definition>
        <argsstring></argsstring>
        <name>apr_table_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the table abstract data type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="48" column="1" bodyfile="include/apr_tables.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__tables_1ga63e76617a1cd3828bbaefcbf93928ec2" prot="public" static="no">
        <type>struct <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref></type>
        <definition>typedef struct apr_array_header_t apr_array_header_t</definition>
        <argsstring></argsstring>
        <name>apr_array_header_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="48" column="1" bodyfile="include/apr_tables.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__tables_1gac7e0151b714e58b75c597dafed75df3f" prot="public" static="no">
        <type>struct <ref refid="structapr__table__entry__t" kindref="compound">apr_table_entry_t</ref></type>
        <definition>typedef struct apr_table_entry_t apr_table_entry_t</definition>
        <argsstring></argsstring>
        <name>apr_table_entry_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The (opaque) structure for string-content tables. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="48" column="1" bodyfile="include/apr_tables.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__tables_1ga633325e16f9e1f81adce476fb71cbd88" prot="public" static="no">
        <type>int()</type>
        <definition>typedef int() apr_table_do_callback_fn_t(void *rec, const char *key, const char *value)</definition>
        <argsstring>(void *rec, const char *key, const char *value)</argsstring>
        <name>apr_table_do_callback_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declaration prototype for the iterator callback function of <ref refid="group__apr__tables_1ga5917e542ae910961ee48b0ec2d09a879" kindref="member">apr_table_do()</ref> and <ref refid="group__apr__tables_1ga753c5247c9cd7f90c8958b64d9b6aeae" kindref="member">apr_table_vdo()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para>The data passed as the first argument to apr_table_[v]do() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key from this iteration of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value from this iteration of the table </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Iteration continues while this callback function returns non-zero. To export the callback function for apr_table_[v]do() it must be declared in the _NONSTD convention. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="384" column="1" bodyfile="include/apr_tables.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__tables_1gaea3005541cce67481f48ab201b5c0cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
        <definition>const apr_array_header_t* apr_table_elts</definition>
        <argsstring>(const apr_table_t *t)</argsstring>
        <name>apr_table_elts</name>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the elements from a table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array containing the contents of the table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga198e52683a86ecf8df9642990c220ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_is_empty_table</definition>
        <argsstring>(const apr_table_t *t)</argsstring>
        <name>apr_is_empty_table</name>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if the table is empty (either NULL or having no elements). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if empty, False otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gacae19f5b2182d5813f4ef3050f82ff29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_is_empty_array</definition>
        <argsstring>(const apr_array_header_t *a)</argsstring>
        <name>apr_is_empty_array</name>
        <param>
          <type>const <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if the array is empty (either NULL or having no elements). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if empty, False otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga8f4308b5a1636ec06544113a9c283304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
        <definition>apr_array_header_t* apr_array_make</definition>
        <argsstring>(apr_pool_t *p, int nelts, int elt_size)</argsstring>
        <name>apr_array_make</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nelts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elt_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the memory out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nelts</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements in the initial array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elt_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of each element in the array. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gac08267b32905197dd02ffff3314d9603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_array_push</definition>
        <argsstring>(apr_array_header_t *arr)</argsstring>
        <name>apr_array_push</name>
        <param>
          <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new element to an array (as a first-in, last-out stack). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to add an element to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Location for the new element in the array. </para></simplesect>
<simplesect kind="remark"><para>If there are no free spots in the array, then this function will allocate new space for the new element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gad1ab3e0ca2de25a7ff2fbed393380972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_array_pop</definition>
        <argsstring>(apr_array_header_t *arr)</argsstring>
        <name>apr_array_pop</name>
        <param>
          <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove an element from an array (as a first-in, last-out stack). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to remove an element from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Location of the element in the array. </para></simplesect>
<simplesect kind="remark"><para>If there are no elements in the array, NULL is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga6a6436840256ed8a47b5d6be4ea2ae03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_array_clear</definition>
        <argsstring>(apr_array_header_t *arr)</argsstring>
        <name>apr_array_clear</name>
        <param>
          <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all elements from an array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to remove all elements from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>As the underlying storage is allocated from a pool, no memory is freed by this operation, but is available for reuse. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga532e0f0e4d1e2b7243ebdb7eb1f783c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_array_cat</definition>
        <argsstring>(apr_array_header_t *dst, const apr_array_header_t *src)</argsstring>
        <name>apr_array_cat</name>
        <param>
          <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Concatenate two arrays together. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array, and the one to go first in the combined array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source array to add to the destination array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga327e2d5e29fa49d5a2a31295a6932950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
        <definition>apr_array_header_t* apr_array_copy</definition>
        <argsstring>(apr_pool_t *p, const apr_array_header_t *arr)</argsstring>
        <name>apr_array_copy</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the entire array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the copy of the array out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An exact copy of the array passed in </para></simplesect>
<simplesect kind="remark"><para>The alternate apr_array_copy_hdr copies only the header, and arranges for the elements to be copied if (and only if) the code subsequently does a push or arraycat. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga6203e9f731bf43e7373857c38d04397d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
        <definition>apr_array_header_t* apr_array_copy_hdr</definition>
        <argsstring>(apr_pool_t *p, const apr_array_header_t *arr)</argsstring>
        <name>apr_array_copy_hdr</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the headers of the array, and arrange for the elements to be copied if and only if the code subsequently does a push or arraycat. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the copy of the array out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An exact copy of the array passed in </para></simplesect>
<simplesect kind="remark"><para>The alternate apr_array_copy copies the <emphasis>entire</emphasis> array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga893cade58c5fabecb593cb4ffac7e9be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
        <definition>apr_array_header_t* apr_array_append</definition>
        <argsstring>(apr_pool_t *p, const apr_array_header_t *first, const apr_array_header_t *second)</argsstring>
        <name>apr_array_append</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append one array to the end of another, creating a new array in the process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the new array out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to put first in the new array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to put second in the new array. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new array containing the data from the two arrays passed in. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga6232817e4a32ee5619c99fe55e145c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_array_pstrcat</definition>
        <argsstring>(apr_pool_t *p, const apr_array_header_t *arr, const char sep)</argsstring>
        <name>apr_array_pstrcat</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a new string from the apr_pool_t containing the concatenated sequence of substrings referenced as elements within the array. The string will be empty if all substrings are empty or null, or if there are no elements in the array. If sep is non-NUL, it will be inserted between elements as a separator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the string out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to generate the string from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>The separator to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string containing all of the data in the array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga7b0a16a1388c68e66bff32190cf092f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
        <definition>apr_table_t* apr_table_make</definition>
        <argsstring>(apr_pool_t *p, int nelts)</argsstring>
        <name>apr_table_make</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nelts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a new table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the pool out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nelts</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the initial table. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new table. </para></simplesect>
<simplesect kind="warning"><para>This table can only store text data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gae69f2b0b593bcdbf4c678a0f3dfde5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
        <definition>apr_table_t* apr_table_copy</definition>
        <argsstring>(apr_pool_t *p, const apr_table_t *t)</argsstring>
        <name>apr_table_copy</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new table and copy another table into it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the new table out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the table passed in </para></simplesect>
<simplesect kind="warning"><para>The table keys and respective values are not copied </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga7e8bc16b272840302545ed4a6a082a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
        <definition>apr_table_t* apr_table_clone</definition>
        <argsstring>(apr_pool_t *p, const apr_table_t *t)</argsstring>
        <name>apr_table_clone</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new table whose contents are deep copied from the given table. A deep copy operation copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the new table out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to clone </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A deep copy of the table passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga03f03de545f9a18e25420f261938ffea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_clear</definition>
        <argsstring>(apr_table_t *t)</argsstring>
        <name>apr_table_clear</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete all of the elements from a table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga4db13e3915c6b9a3142b175d4c15d915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_table_get</definition>
        <argsstring>(const apr_table_t *t, const char *key)</argsstring>
        <name>apr_table_get</name>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value associated with a given key from the table. After this call, the data is still in the table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to search for the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to search for (case does not matter) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value associated with the key, or NULL if the key does not exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gaa52177e485731ec599d04f863872c5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_table_getm</definition>
        <argsstring>(apr_pool_t *p, const apr_table_t *t, const char *key)</argsstring>
        <name>apr_table_getm</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get values associated with a given key from the table. If more than one value exists, return a comma separated list of values. After this call, the data is still in the table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the combined value from, if necessary </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to search for the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to search for (case does not matter) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value associated with the key, or NULL if the key does not exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gaf101d92c2f6343cdf4ec062ff416f244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_set</definition>
        <argsstring>(apr_table_t *t, const char *key, const char *val)</argsstring>
        <name>apr_table_set</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a key/value pair to a table. If another element already exists with the same key, this will overwrite the old data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to add the data to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use (case does not matter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>When adding data, this function makes a copy of both the key and the value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga1fe7bb25d4027bb79d3c2bb41d8d8b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_setn</definition>
        <argsstring>(apr_table_t *t, const char *key, const char *val)</argsstring>
        <name>apr_table_setn</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a key/value pair to a table. If another element already exists with the same key, this will overwrite the old data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to add the data to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use (case does not matter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>When adding data, this function does not make a copy of the key or the value, so care should be taken to ensure that the values will not change after they have been added.. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gab0df7a237feb4cd9beed201f4e236127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_unset</definition>
        <argsstring>(apr_table_t *t, const char *key)</argsstring>
        <name>apr_table_unset</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove data from the table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to remove data from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key of the data being removed (case does not matter) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gad5d10eca30b76fb44d999b4dfda8d632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_merge</definition>
        <argsstring>(apr_table_t *t, const char *key, const char *val)</argsstring>
        <name>apr_table_merge</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add data to a table by merging the value with data that has already been stored. The merging is done by concatenating the two values, separated by the string &quot;, &quot;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to search for the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to merge data for (case does not matter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If the key is not found, then this function acts like apr_table_add </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga1d50805448114c476cfcd00d5ee3e3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_mergen</definition>
        <argsstring>(apr_table_t *t, const char *key, const char *val)</argsstring>
        <name>apr_table_mergen</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add data to a table by merging the value with data that has already been stored. The merging is done by concatenating the two values, separated by the string &quot;, &quot;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to search for the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to merge data for (case does not matter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If the key is not found, then this function acts like apr_table_addn </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gab2ea874754a0fbf139b7316c1f837f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_add</definition>
        <argsstring>(apr_table_t *t, const char *key, const char *val)</argsstring>
        <name>apr_table_add</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add data to a table, regardless of whether there is another element with the same key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to add to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>When adding data, this function makes a copy of both the key and the value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1gaff9fdbd8f499f0dfb07123230e19ea54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_addn</definition>
        <argsstring>(apr_table_t *t, const char *key, const char *val)</argsstring>
        <name>apr_table_addn</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add data to a table, regardless of whether there is another element with the same key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to add to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>When adding data, this function does not make a copy of the key or the value, so care should be taken to ensure that the values will not change after they have been added. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga783b5c439d46c109bb45e7bc1a6d7ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
        <definition>apr_table_t* apr_table_overlay</definition>
        <argsstring>(apr_pool_t *p, const apr_table_t *overlay, const apr_table_t *base)</argsstring>
        <name>apr_table_overlay</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>overlay</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge two tables into one new table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use for the new table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlay</parametername>
</parameternamelist>
<parameterdescription>
<para>The first table to put in the new table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to add at the end of the new table </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new table containing all of the data from the two passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga5917e542ae910961ee48b0ec2d09a879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_table_do</definition>
        <argsstring>(apr_table_do_callback_fn_t *comp, void *rec, const apr_table_t *t,...)</argsstring>
        <name>apr_table_do</name>
        <param>
          <type><ref refid="group__apr__tables_1ga633325e16f9e1f81adce476fb71cbd88" kindref="member">apr_table_do_callback_fn_t</ref> *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>rec</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over a table running the provided function once for every element in the table. The varargs array must be a list of zero or more (char *) keys followed by a NULL pointer. If zero keys are given, the <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>function will be invoked for every element in the table. Otherwise, the function is invoked only for those elements matching the keys specified.</para></parameterdescription>
</parameteritem>
</parameterlist>
If an invocation of the <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>function returns zero, iteration will continue using the next specified key, if any.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to run </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to pass as the first argument to the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to iterate over </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A varargs array of zero or more (char *) keys followed by NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FALSE if one of the comp() iterations returned zero; TRUE if all iterations returned non-zero </para></simplesect>
<simplesect kind="see"><para><ref refid="group__apr__tables_1ga633325e16f9e1f81adce476fb71cbd88" kindref="member">apr_table_do_callback_fn_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga753c5247c9cd7f90c8958b64d9b6aeae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_table_vdo</definition>
        <argsstring>(apr_table_do_callback_fn_t *comp, void *rec, const apr_table_t *t, va_list vp)</argsstring>
        <name>apr_table_vdo</name>
        <param>
          <type><ref refid="group__apr__tables_1ga633325e16f9e1f81adce476fb71cbd88" kindref="member">apr_table_do_callback_fn_t</ref> *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>rec</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterate over a table running the provided function once for every element in the table. The <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>varargs parameter must be a list of zero or more (char *) keys followed by a NULL pointer. If zero keys are given, the </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>function will be invoked for every element in the table. Otherwise, the function is invoked only for those elements matching the keys specified.</para></parameterdescription>
</parameteritem>
</parameterlist>
If an invocation of the <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>function returns zero, iteration will continue using the next specified key, if any.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to run </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to pass as the first argument to the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to iterate over </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>List of zero or more (char *) keys followed by NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FALSE if one of the comp() iterations returned zero; TRUE if all iterations returned non-zero </para></simplesect>
<simplesect kind="see"><para><ref refid="group__apr__tables_1ga633325e16f9e1f81adce476fb71cbd88" kindref="member">apr_table_do_callback_fn_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga603ebc9b97703b855f8ad77640165372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_overlap</definition>
        <argsstring>(apr_table_t *a, const apr_table_t *b, unsigned flags)</argsstring>
        <name>apr_table_overlap</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For each element in table b, either use setn or mergen to add the data to table a. Which method is used is determined by the flags passed in. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to add the data to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The table to iterate over, adding its data to table a </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>How to add the table to table a. One of: APR_OVERLAP_TABLES_SET Use apr_table_setn APR_OVERLAP_TABLES_MERGE Use apr_table_mergen </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>When merging duplicates, the two values are concatenated, separated by the string &quot;, &quot;. </para></simplesect>
<simplesect kind="remark"><para>This function is highly optimized, and uses less memory and CPU cycles than a function that just loops through table b calling other functions. Conceptually, apr_table_overlap does this:</para></simplesect>
<preformatted>
 <ref refid="structapr__array__header__t" kindref="compound">apr_array_header_t</ref> *barr = apr_table_elts(b);
 <ref refid="structapr__table__entry__t" kindref="compound">apr_table_entry_t</ref> *belt = (<ref refid="structapr__table__entry__t" kindref="compound">apr_table_entry_t</ref> *)barr-&gt;elts;
 int i;</preformatted></para><para><preformatted> for (i = 0; i &lt; barr-&gt;nelts; ++i) {
     if (flags &amp; APR_OVERLAP_TABLES_MERGE) {
         apr_table_mergen(a, belt[i].key, belt[i].val);
     }
     else {
         apr_table_setn(a, belt[i].key, belt[i].val);
     }
 }
</preformatted></para><para>Except that it is more efficient (less space and cpu-time) especially when b has many elements.</para><para>Notice the assumptions on the keys and values in b <ndash/> they must be in an ancestor of a&apos;s pool. In practice b and a are usually from the same pool. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__tables_1ga7f2a652a0cdaf8c20588823c97a3007f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_table_compress</definition>
        <argsstring>(apr_table_t *t, unsigned flags)</argsstring>
        <name>apr_table_compress</name>
        <param>
          <type><ref refid="group__apr__tables_1gad7ea82d6608a4a633fc3775694ab71e4" kindref="member">apr_table_t</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Eliminate redundant entries in a table by either overwriting or merging duplicates.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Table. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>APR_OVERLAP_TABLES_MERGE to merge, or APR_OVERLAP_TABLES_SET to overwrite </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>When merging duplicates, the two values are concatenated, separated by the string &quot;, &quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_tables.h" line="491" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>APR Table library. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/apr_tables.h"/>
  </compounddef>
</doxygen>
