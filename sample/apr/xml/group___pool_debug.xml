<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___pool_debug" kind="group">
    <compoundname>PoolDebug</compoundname>
    <title>Pool Debugging functions.</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___pool_debug_1gaecd956092f81c70117507ad8cbca8ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_join</definition>
        <argsstring>(apr_pool_t *p, apr_pool_t *sub)</argsstring>
        <name>apr_pool_join</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guarantee that a subpool has the same lifetime as the parent. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent pool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subpool </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_debug_1ga0bc40d9069709020e3643492dae2ccb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_pool_find</definition>
        <argsstring>(const void *mem)</argsstring>
        <name>apr_pool_find</name>
        <param>
          <type>const void *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a pool from something allocated in it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>The thing allocated in the pool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pool it is allocated in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_debug_1ga22462da23d70dfde389a370b131cd351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_size_t</type>
        <definition>apr_size_t apr_pool_num_bytes</definition>
        <argsstring>(apr_pool_t *p, int recurse)</argsstring>
        <name>apr_pool_num_bytes</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>recurse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Report the number of bytes currently in the pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to inspect </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recurse</parametername>
</parameternamelist>
<parameterdescription>
<para>Recurse/include the subpools&apos; sizes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="783" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_debug_1ga24f8f0287478fa71f77d0ce4ec035e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_lock</definition>
        <argsstring>(apr_pool_t *pool, int flag)</argsstring>
        <name>apr_pool_lock</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to lock </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="791" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>pools have nested lifetimes <ndash/> sub_pools are destroyed when the parent pool is cleared. We allow certain liberties with operations on things such as tables (and on other structures in a more general sense) where we allow the caller to insert values into a table which were not allocated from the table&apos;s pool. The table&apos;s data will remain valid as long as all the pools from which its values are allocated remain valid.</para><para>For example, if B is a sub pool of A, and you build a table T in pool B, then it&apos;s safe to insert data allocated in A or B into T (because B lives at most as long as A does, and T is destroyed when B is cleared/destroyed). On the other hand, if S is a table in pool A, it is safe to insert data allocated in A into S, but it is <emphasis>not safe</emphasis> to insert data allocated from B into S... because B can be cleared/destroyed before A is (which would leave dangling pointers in T&apos;s data structures).</para><para>In general we say that it is safe to insert data into a table T if the data is allocated in any ancestor of T&apos;s pool. This is the basis on which the APR_POOL_DEBUG code works <ndash/> it tests these ancestor relationships for all data inserted into tables. APR_POOL_DEBUG also provides tools (apr_pool_find, and apr_pool_is_ancestor) for other folks to implement similar restrictions for their own data structures.</para><para>However, sometimes this ancestor requirement is inconvenient <ndash/> sometimes it&apos;s necessary to create a sub pool where the sub pool is guaranteed to have the same lifetime as the parent pool. This is a guarantee implemented by the <emphasis>caller</emphasis>, not by the pool code. That is, the caller guarantees they won&apos;t destroy the sub pool individually prior to destroying the parent pool.</para><para>In this case the caller must call <ref refid="group___pool_debug_1gaecd956092f81c70117507ad8cbca8ea7" kindref="member">apr_pool_join()</ref> to indicate this guarantee to the APR_POOL_DEBUG code.</para><para>These functions are only implemented when #APR_POOL_DEBUG is set. </para>    </detaileddescription>
  </compounddef>
</doxygen>
