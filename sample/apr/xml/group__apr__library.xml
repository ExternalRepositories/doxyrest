<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__library" kind="group">
    <compoundname>apr_library</compoundname>
    <title>Library initialization and termination</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__library_1ga4a91a6b9ff457ead13e670950127761a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>apr_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup any APR internal data structures. This MUST be the first function called for any APR library. It is safe to call apr_initialize several times as long as apr_terminate is called the same number of times. <simplesect kind="remark"><para>See apr_app_initialize if this is an application, rather than a library consumer of apr. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_general.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__library_1gaa1c4fc2e1c814cc5d4cd3d8719288fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_app_initialize</definition>
        <argsstring>(int *argc, char const *const **argv, char const *const **env)</argsstring>
        <name>apr_app_initialize</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char const *const **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>char const *const **</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up an application with normalized argc, argv (and optionally env) in order to deal with platform-specific oddities, such as Win32 services, code pages and signals. This must be the first function called for any APR program. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the argc that may be corrected </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the argv that may be corrected </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the env that may be corrected, may be NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>See apr_initialize if this is a library consumer of apr. Otherwise, this call is identical to apr_initialize, and must be closed with a call to apr_terminate at the end of program execution. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_general.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__library_1ga8e96d45ee09fc7e7eb3646efef1424a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_terminate</definition>
        <argsstring>(void)</argsstring>
        <name>apr_terminate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tear down any APR internal data structures which aren&apos;t torn down automatically. apr_terminate must be called once for every call to <ref refid="group__apr__library_1ga4a91a6b9ff457ead13e670950127761a" kindref="member">apr_initialize()</ref> or <ref refid="group__apr__library_1gaa1c4fc2e1c814cc5d4cd3d8719288fc9" kindref="member">apr_app_initialize()</ref>. <simplesect kind="remark"><para>An APR program must call this function at termination once it has stopped using APR services. The APR developers suggest using atexit to ensure this is called. When using APR from a language other than C that has problems with the calling convention, use <ref refid="group__apr__library_1ga18667a60ff34d6209e519b4a4ce8cad1" kindref="member">apr_terminate2()</ref> instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_general.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__library_1ga18667a60ff34d6209e519b4a4ce8cad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_terminate2</definition>
        <argsstring>(void)</argsstring>
        <name>apr_terminate2</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tear down any APR internal data structures which aren&apos;t torn down automatically, same as apr_terminate <simplesect kind="remark"><para>An APR program must call either the apr_terminate or apr_terminate2 function once it it has finished using APR services. The APR developers suggest using atexit(apr_terminate) to ensure this is done. apr_terminate2 exists to allow non-c language apps to tear down apr, while apr_terminate is recommended from c language applications. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_general.h" line="216" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>String and memory functions </para>    </detaileddescription>
  </compounddef>
</doxygen>
