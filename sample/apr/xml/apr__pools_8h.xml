<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="apr__pools_8h" kind="file" language="C++">
    <compoundname>apr_pools.h</compoundname>
    <includes refid="apr_8h" local="yes">apr.h</includes>
    <includes refid="apr__errno_8h" local="yes">apr_errno.h</includes>
    <includes refid="apr__general_8h" local="yes">apr_general.h</includes>
    <includes refid="apr__want_8h" local="yes">apr_want.h</includes>
    <includes refid="apr__allocator_8h" local="yes">apr_allocator.h</includes>
    <includedby refid="apr__allocator_8h" local="yes">apr_allocator.h</includedby>
    <includedby refid="apr__general_8h" local="yes">apr_general.h</includedby>
    <includedby refid="apr__thread__mutex_8h" local="yes">apr_thread_mutex.h</includedby>
    <includedby refid="apr__atomic_8h" local="yes">apr_atomic.h</includedby>
    <includedby refid="apr__dso_8h" local="yes">apr_dso.h</includedby>
    <includedby refid="apr__env_8h" local="yes">apr_env.h</includedby>
    <includedby refid="apr__user_8h" local="yes">apr_user.h</includedby>
    <includedby refid="apr__file__info_8h" local="yes">apr_file_info.h</includedby>
    <includedby refid="apr__tables_8h" local="yes">apr_tables.h</includedby>
    <includedby refid="apr__time_8h" local="yes">apr_time.h</includedby>
    <includedby refid="apr__file__io_8h" local="yes">apr_file_io.h</includedby>
    <includedby refid="apr__getopt_8h" local="yes">apr_getopt.h</includedby>
    <includedby refid="apr__proc__mutex_8h" local="yes">apr_proc_mutex.h</includedby>
    <includedby refid="apr__global__mutex_8h" local="yes">apr_global_mutex.h</includedby>
    <includedby refid="apr__hash_8h" local="yes">apr_hash.h</includedby>
    <includedby refid="apr__mmap_8h" local="yes">apr_mmap.h</includedby>
    <includedby refid="apr__network__io_8h" local="yes">apr_network_io.h</includedby>
    <includedby refid="apr__poll_8h" local="yes">apr_poll.h</includedby>
    <includedby refid="apr__portable_8h" local="yes">apr_portable.h</includedby>
    <includedby refid="apr__thread__proc_8h" local="yes">apr_thread_proc.h</includedby>
    <includedby refid="apr__shm_8h" local="yes">apr_shm.h</includedby>
    <includedby refid="apr__random_8h" local="yes">apr_random.h</includedby>
    <includedby refid="apr__signal_8h" local="yes">apr_signal.h</includedby>
    <includedby refid="apr__strings_8h" local="yes">apr_strings.h</includedby>
    <includedby refid="apr__thread__cond_8h" local="yes">apr_thread_cond.h</includedby>
    <includedby refid="apr__thread__rwlock_8h" local="yes">apr_thread_rwlock.h</includedby>
    <incdepgraph>
      <node id="496">
        <label>stdint.h</label>
      </node>
      <node id="500">
        <label>errno.h</label>
      </node>
      <node id="501">
        <label>apr_general.h</label>
        <link refid="apr__general_8h"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="498">
        <label>limits.h</label>
      </node>
      <node id="494">
        <label>sys/types.h</label>
      </node>
      <node id="504">
        <label>string.h</label>
      </node>
      <node id="506">
        <label>apr_thread_mutex.h</label>
        <link refid="apr__thread__mutex_8h"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
      </node>
      <node id="492">
        <label>apr_pools.h</label>
        <link refid="apr__pools_8h"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="505" relation="include">
        </childnode>
      </node>
      <node id="505">
        <label>apr_allocator.h</label>
        <link refid="apr__allocator_8h"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="506" relation="include">
        </childnode>
      </node>
      <node id="502">
        <label>signal.h</label>
      </node>
      <node id="499">
        <label>apr_errno.h</label>
        <link refid="apr__errno_8h"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
      </node>
      <node id="497">
        <label>sys/wait.h</label>
      </node>
      <node id="493">
        <label>apr.h</label>
        <link refid="apr_8h"/>
        <childnode refid="494" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
        <childnode refid="496" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="498" relation="include">
        </childnode>
      </node>
      <node id="495">
        <label>sys/socket.h</label>
      </node>
      <node id="503">
        <label>apr_want.h</label>
        <link refid="apr__want_8h"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="521">
        <label>apr_file_info.h</label>
        <link refid="apr__file__info_8h"/>
        <childnode refid="522" relation="include">
        </childnode>
      </node>
      <node id="516">
        <label>apr_dso.h</label>
        <link refid="apr__dso_8h"/>
        <childnode refid="517" relation="include">
        </childnode>
      </node>
      <node id="537">
        <label>apr_strings.h</label>
        <link refid="apr__strings_8h"/>
      </node>
      <node id="534">
        <label>apr_hash.h</label>
        <link refid="apr__hash_8h"/>
      </node>
      <node id="535">
        <label>apr_shm.h</label>
        <link refid="apr__shm_8h"/>
        <childnode refid="517" relation="include">
        </childnode>
      </node>
      <node id="533">
        <label>apr_global_mutex.h</label>
        <link refid="apr__global__mutex_8h"/>
        <childnode refid="517" relation="include">
        </childnode>
      </node>
      <node id="530">
        <label>apr_time.h</label>
        <link refid="apr__time_8h"/>
        <childnode refid="521" relation="include">
        </childnode>
        <childnode refid="522" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
      </node>
      <node id="522">
        <label>apr_file_io.h</label>
        <link refid="apr__file__io_8h"/>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="523" relation="include">
        </childnode>
        <childnode refid="524" relation="include">
        </childnode>
        <childnode refid="526" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="525" relation="include">
        </childnode>
      </node>
      <node id="511">
        <label>apr_ring.h</label>
        <link refid="apr__ring_8h"/>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="512">
        <label>apr_mmap.h</label>
        <link refid="apr__mmap_8h"/>
      </node>
      <node id="525">
        <label>apr_support.h</label>
        <link refid="apr__support_8h"/>
      </node>
      <node id="509">
        <label>apr_general.h</label>
        <link refid="apr__general_8h"/>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
      </node>
      <node id="519">
        <label>apr_env.h</label>
        <link refid="apr__env_8h"/>
      </node>
      <node id="520">
        <label>apr_user.h</label>
        <link refid="apr__user_8h"/>
        <childnode refid="521" relation="include">
        </childnode>
      </node>
      <node id="523">
        <label>apr_network_io.h</label>
        <link refid="apr__network__io_8h"/>
        <childnode refid="524" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="525" relation="include">
        </childnode>
      </node>
      <node id="513">
        <label>apr_thread_mutex.h</label>
        <link refid="apr__thread__mutex_8h"/>
        <childnode refid="508" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
      </node>
      <node id="507">
        <label>apr_pools.h</label>
        <link refid="apr__pools_8h"/>
        <childnode refid="508" relation="include">
        </childnode>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="515" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="519" relation="include">
        </childnode>
        <childnode refid="520" relation="include">
        </childnode>
        <childnode refid="521" relation="include">
        </childnode>
        <childnode refid="528" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="522" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="533" relation="include">
        </childnode>
        <childnode refid="534" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="523" relation="include">
        </childnode>
        <childnode refid="524" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="526" relation="include">
        </childnode>
        <childnode refid="535" relation="include">
        </childnode>
        <childnode refid="527" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
      </node>
      <node id="508">
        <label>apr_allocator.h</label>
        <link refid="apr__allocator_8h"/>
        <childnode refid="507" relation="include">
        </childnode>
      </node>
      <node id="524">
        <label>apr_poll.h</label>
        <link refid="apr__poll_8h"/>
      </node>
      <node id="517">
        <label>apr_portable.h</label>
        <link refid="apr__portable_8h"/>
        <childnode refid="518" relation="include">
        </childnode>
      </node>
      <node id="529">
        <label>apr_fnmatch.h</label>
        <link refid="apr__fnmatch_8h"/>
      </node>
      <node id="531">
        <label>apr_getopt.h</label>
        <link refid="apr__getopt_8h"/>
      </node>
      <node id="518">
        <label>apr_skiplist.h</label>
        <link refid="apr__skiplist_8h"/>
      </node>
      <node id="526">
        <label>apr_thread_proc.h</label>
        <link refid="apr__thread__proc_8h"/>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="527" relation="include">
        </childnode>
      </node>
      <node id="510">
        <label>apr_escape.h</label>
        <link refid="apr__escape_8h"/>
      </node>
      <node id="538">
        <label>apr_thread_rwlock.h</label>
        <link refid="apr__thread__rwlock_8h"/>
      </node>
      <node id="528">
        <label>apr_tables.h</label>
        <link refid="apr__tables_8h"/>
        <childnode refid="521" relation="include">
        </childnode>
        <childnode refid="529" relation="include">
        </childnode>
      </node>
      <node id="515">
        <label>apr_atomic.h</label>
        <link refid="apr__atomic_8h"/>
      </node>
      <node id="532">
        <label>apr_proc_mutex.h</label>
        <link refid="apr__proc__mutex_8h"/>
        <childnode refid="533" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
      </node>
      <node id="536">
        <label>apr_signal.h</label>
        <link refid="apr__signal_8h"/>
      </node>
      <node id="527">
        <label>apr_random.h</label>
        <link refid="apr__random_8h"/>
      </node>
      <node id="514">
        <label>apr_thread_cond.h</label>
        <link refid="apr__thread__cond_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="apr__pools_8h_1a26faf43e3f61783d8b7aa928c0a41a11" prot="public" static="no">
        <name>APR_WANT_MEMFUNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>for no good reason? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="46" column="9" bodyfile="include/apr_pools.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__pools_1ga89ce1d55c7f0c39ea87c88eabd655394" prot="public" static="no">
        <name>APR_POOL_DECLARE_ACCESSOR</name>
        <param><defname>type</defname></param>
        <initializer><ref refid="group__apr__platform_1gad7b91b811a172bfa802603c2fb688f98" kindref="member">APR_DECLARE</ref>(<ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *) apr_##type##_pool_get \
        (const apr_##type##_t *the##type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declaration helper macro to construct apr_foo_pool_get()s.</para><para>This standardized macro is used by opaque (APR) data types to return the apr_pool_t that is associated with the data type.</para><para><ref refid="group__apr__pools_1ga89ce1d55c7f0c39ea87c88eabd655394" kindref="member">APR_POOL_DECLARE_ACCESSOR()</ref> is used in a header file to declare the accessor function. A typical usage and result would be: <preformatted>
   <ref refid="group__apr__pools_1ga89ce1d55c7f0c39ea87c88eabd655394" kindref="member">APR_POOL_DECLARE_ACCESSOR(file)</ref>;
becomes:
   <ref refid="group__apr__platform_1gad7b91b811a172bfa802603c2fb688f98" kindref="member">APR_DECLARE(apr_pool_t *)</ref> <ref refid="group__apr__file__io_1gab5950b3b0156097b0181394a37e03ede" kindref="member">apr_file_pool_get(const apr_file_t *thefile)</ref>;
</preformatted> <simplesect kind="remark"><para>Doxygen unwraps this macro (via doxygen.conf) to provide actual help for each specific occurrence of apr_foo_pool_get. </para></simplesect>
<simplesect kind="remark"><para>the linkage is specified for APR. It would be possible to expand the macros to support other linkages. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="81" column="9" bodyfile="include/apr_pools.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__pools_1ga43a8a52f68f8b7d3b7694c254da4a074" prot="public" static="no">
        <name>APR_POOL_IMPLEMENT_ACCESSOR</name>
        <param><defname>type</defname></param>
        <initializer><ref refid="group__apr__platform_1gad7b91b811a172bfa802603c2fb688f98" kindref="member">APR_DECLARE</ref>(<ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *) apr_##type##_pool_get \
            (const apr_##type##_t *the##type) \
        { return the##type-&gt;pool; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implementation helper macro to provide apr_foo_pool_get()s.</para><para>In the implementation, the <ref refid="group__apr__pools_1ga43a8a52f68f8b7d3b7694c254da4a074" kindref="member">APR_POOL_IMPLEMENT_ACCESSOR()</ref> is used to actually define the function. It assumes the field is named &quot;pool&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="91" column="9" bodyfile="include/apr_pools.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__pools_1gac81cff34d0ff4be52fa924663478eade" prot="public" static="no">
        <name>APR_POOL__FILE_LINE__</name>
        <initializer>__FILE__ &quot;:&quot; <ref refid="apr__version_8h_1ae90215615972dfa4108018304361ef0b" kindref="member">APR_STRINGIFY</ref>(__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pool debug levels</para><para><preformatted>
<heading level="2">| 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
</heading>
</preformatted></para><para><preformatted>
|   |   |   |   |   |   |   | x |  General debug code enabled (useful in
                                   combination with <ndash/>with-efence).</preformatted></para><para><preformatted>|   |   |   |   |   |   | x |   |  Verbose output on stderr (report
                                   CREATE, CLEAR, DESTROY).</preformatted></para><para><preformatted>|   |   |   | x |   |   |   |   |  Verbose output on stderr (report
                                   PALLOC, PCALLOC).</preformatted></para><para><preformatted>|   |   |   |   |   | x |   |   |  Lifetime checking. On each use of a
                                   pool, check its lifetime.  If the pool
                                   is out of scope, abort().
                                   In combination with the verbose flag
                                   above, it will output LIFE in such an
                                   event prior to aborting.</preformatted></para><para><preformatted>|   |   |   |   | x |   |   |   |  Pool owner checking.  On each use of a
                                   pool, check if the current thread is the
                                   pool&apos;s owner.  If not, abort().  In
                                   combination with the verbose flag above,
                                   it will output OWNER in such an event
                                   prior to aborting.  Use the debug
                                   function apr_pool_owner_set() to switch
                                   a pool&apos;s ownership.</preformatted></para><para><preformatted>When no debug level was specified, assume general debug mode.
If level 0 was specified, debugging is switched off.
</preformatted>the place in the code where the particular function was called </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="143" column="9" bodyfile="include/apr_pools.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" prot="public" static="no">
        <type>struct <ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref></type>
        <definition>typedef struct apr_pool_t apr_pool_t</definition>
        <argsstring></argsstring>
        <name>apr_pool_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The fundamental pool type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="123" column="1" bodyfile="include/apr_pools.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* apr_abortfunc_t) (int retcode)</definition>
        <argsstring>)(int retcode)</argsstring>
        <name>apr_abortfunc_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function that is called when allocation fails. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="148" column="1" bodyfile="include/apr_pools.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__pools_1gad64a6a29515621bc13f8a8da50366d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>apr_pool_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup all of the internal structures required to use pools <simplesect kind="remark"><para>Programs do NOT need to call this directly. APR will call this automatically from apr_initialize. </para></simplesect>
</para><internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga3728aacec227318cef973b8a33f3b430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_terminate</definition>
        <argsstring>(void)</argsstring>
        <name>apr_pool_terminate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tear down all of the internal structures required to use pools <simplesect kind="remark"><para>Programs do NOT need to call this directly. APR will call this automatically from apr_terminate. </para></simplesect>
</para><internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gab274bd29e4e4d4944b4618403148074f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_create_ex</definition>
        <argsstring>(apr_pool_t **newpool, apr_pool_t *parent, apr_abortfunc_t abort_fn, apr_allocator_t *allocator)</argsstring>
        <name>apr_pool_create_ex</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> **</type>
          <declname>newpool</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd" kindref="member">apr_abortfunc_t</ref></type>
          <declname>abort_fn</declname>
        </param>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newpool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool we have just created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent pool. If this is NULL, the new pool is a root pool. If it is non-NULL, the new pool will inherit all of its parent pool&apos;s attributes, except the apr_pool_t will be a sub-pool. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abort_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to use if the pool cannot allocate more memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to use with the new pool. If NULL the allocator of the parent pool will be used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is thread-safe, in the sense that multiple threads can safely create subpools of the same parent pool concurrently. Similarly, a subpool can be created by one thread at the same time that another thread accesses the parent pool. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga20e514c83555398acddc30c4dfa0c540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_create_core_ex</definition>
        <argsstring>(apr_pool_t **newpool, apr_abortfunc_t abort_fn, apr_allocator_t *allocator)</argsstring>
        <name>apr_pool_create_core_ex</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> **</type>
          <declname>newpool</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd" kindref="member">apr_abortfunc_t</ref></type>
          <declname>abort_fn</declname>
        </param>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new pool. <xrefsect id="deprecated_1_deprecated000033"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect><simplesect kind="see"><para><ref refid="group__apr__pools_1gaae7212db77bb57f86419cd594f73a92f" kindref="member">apr_pool_create_unmanaged_ex</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gaae7212db77bb57f86419cd594f73a92f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_create_unmanaged_ex</definition>
        <argsstring>(apr_pool_t **newpool, apr_abortfunc_t abort_fn, apr_allocator_t *allocator)</argsstring>
        <name>apr_pool_create_unmanaged_ex</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> **</type>
          <declname>newpool</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd" kindref="member">apr_abortfunc_t</ref></type>
          <declname>abort_fn</declname>
        </param>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new unmanaged pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newpool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool we have just created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abort_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to use if the pool cannot allocate more memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to use with the new pool. If NULL a new allocator will be created with the new pool as owner. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>An unmanaged pool is a special pool without a parent; it will NOT be destroyed upon apr_terminate. It must be explicitly destroyed by calling apr_pool_destroy, to prevent memory leaks. Use of this function is discouraged, think twice about whether you really really need it. </para></simplesect>
<simplesect kind="warning"><para>Any child cleanups registered against the new pool, or against sub-pools thereof, will not be executed during an invocation of <ref refid="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" kindref="member">apr_proc_create()</ref>, so resources created in an &quot;unmanaged&quot; pool hierarchy will leak to child processes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gacbea97ae5c0c861f6b7c147d46ac1d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_create_ex_debug</definition>
        <argsstring>(apr_pool_t **newpool, apr_pool_t *parent, apr_abortfunc_t abort_fn, apr_allocator_t *allocator, const char *file_line)</argsstring>
        <name>apr_pool_create_ex_debug</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> **</type>
          <declname>newpool</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd" kindref="member">apr_abortfunc_t</ref></type>
          <declname>abort_fn</declname>
        </param>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Debug version of apr_pool_create_ex. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newpool</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__apr__pools_1ga918adf3026c894efeae254a0446aed3b" kindref="member">apr_pool_create</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__apr__pools_1ga918adf3026c894efeae254a0446aed3b" kindref="member">apr_pool_create</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>abort_fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__apr__pools_1ga918adf3026c894efeae254a0446aed3b" kindref="member">apr_pool_create</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__apr__pools_1ga918adf3026c894efeae254a0446aed3b" kindref="member">apr_pool_create</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_line</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the function is called from. This is usually APR_POOL__FILE_LINE__. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Only available when APR_POOL_DEBUG is defined. Call this directly if you have your apr_pool_create_ex calls in a wrapper function and wish to override the file_line argument to reflect the caller of your wrapper function. If you do not have apr_pool_create_ex in a wrapper, trust the macro and don&apos;t call apr_pool_create_ex_debug directly. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gaa1c5bfc44188884bb439670f81448c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_create_core_ex_debug</definition>
        <argsstring>(apr_pool_t **newpool, apr_abortfunc_t abort_fn, apr_allocator_t *allocator, const char *file_line)</argsstring>
        <name>apr_pool_create_core_ex_debug</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> **</type>
          <declname>newpool</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd" kindref="member">apr_abortfunc_t</ref></type>
          <declname>abort_fn</declname>
        </param>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Debug version of apr_pool_create_core_ex. <xrefsect id="deprecated_1_deprecated000034"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect><simplesect kind="see"><para><ref refid="group__apr__pools_1gae220e572b14355f1aa7b21c8fb022524" kindref="member">apr_pool_create_unmanaged_ex_debug</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gae220e572b14355f1aa7b21c8fb022524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_create_unmanaged_ex_debug</definition>
        <argsstring>(apr_pool_t **newpool, apr_abortfunc_t abort_fn, apr_allocator_t *allocator, const char *file_line)</argsstring>
        <name>apr_pool_create_unmanaged_ex_debug</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> **</type>
          <declname>newpool</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd" kindref="member">apr_abortfunc_t</ref></type>
          <declname>abort_fn</declname>
        </param>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Debug version of apr_pool_create_unmanaged_ex. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newpool</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>apr_pool_create_unmanaged. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>abort_fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>apr_pool_create_unmanaged. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>apr_pool_create_unmanaged. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_line</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the function is called from. This is usually APR_POOL__FILE_LINE__. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Only available when APR_POOL_DEBUG is defined. Call this directly if you have your apr_pool_create_unmanaged_ex calls in a wrapper function and wish to override the file_line argument to reflect the caller of your wrapper function. If you do not have apr_pool_create_core_ex in a wrapper, trust the macro and don&apos;t call apr_pool_create_core_ex_debug directly. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga918adf3026c894efeae254a0446aed3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_create</definition>
        <argsstring>(apr_pool_t **newpool, apr_pool_t *parent)</argsstring>
        <name>apr_pool_create</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> **</type>
          <declname>newpool</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newpool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool we have just created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent pool. If this is NULL, the new pool is a root pool. If it is non-NULL, the new pool will inherit all of its parent pool&apos;s attributes, except the apr_pool_t will be a sub-pool. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is thread-safe, in the sense that multiple threads can safely create subpools of the same parent pool concurrently. Similarly, a subpool can be created by one thread at the same time that another thread accesses the parent pool. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gad3675378924bc9d98e46258c049f1761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_create_core</definition>
        <argsstring>(apr_pool_t **newpool)</argsstring>
        <name>apr_pool_create_core</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> **</type>
          <declname>newpool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new unmanaged pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newpool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool we have just created. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga72f86d699b4b2ec2aeb82c334ca3446b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_create_unmanaged</definition>
        <argsstring>(apr_pool_t **newpool)</argsstring>
        <name>apr_pool_create_unmanaged</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> **</type>
          <declname>newpool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gaf446fcf5da1fcd62d3f802a4c0c10f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
        <definition>apr_allocator_t* apr_pool_allocator_get</definition>
        <argsstring>(apr_pool_t *pool)</argsstring>
        <name>apr_pool_allocator_get</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the pool&apos;s allocator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to get the allocator from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gafa8a998cd660e82b62aecec09e239d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_clear</definition>
        <argsstring>(apr_pool_t *p)</argsstring>
        <name>apr_pool_clear</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear all memory in the pool and run all the cleanups. This also destroys all subpools. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This does not actually free the memory, it just allows the pool to re-use this memory for the next allocation. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__apr__pools_1ga54759954d2cba7cb649ab5680a33f9e3" kindref="member">apr_pool_destroy()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga9521870e42ec4395a0bf8388706a57b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_clear_debug</definition>
        <argsstring>(apr_pool_t *p, const char *file_line)</argsstring>
        <name>apr_pool_clear_debug</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Debug version of apr_pool_clear. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>See: apr_pool_clear. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_line</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the function is called from. This is usually APR_POOL__FILE_LINE__. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Only available when APR_POOL_DEBUG is defined. Call this directly if you have your apr_pool_clear calls in a wrapper function and wish to override the file_line argument to reflect the caller of your wrapper function. If you do not have apr_pool_clear in a wrapper, trust the macro and don&apos;t call apr_pool_destroy_clear directly. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga54759954d2cba7cb649ab5680a33f9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_destroy</definition>
        <argsstring>(apr_pool_t *p)</argsstring>
        <name>apr_pool_destroy</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the pool. This takes similar action as <ref refid="group__apr__pools_1gafa8a998cd660e82b62aecec09e239d0d" kindref="member">apr_pool_clear()</ref> and then frees all the memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to destroy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This will actually free the memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga7efe64dfcce883d7fad9df813d9259fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_destroy_debug</definition>
        <argsstring>(apr_pool_t *p, const char *file_line)</argsstring>
        <name>apr_pool_destroy_debug</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Debug version of apr_pool_destroy. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>See: apr_pool_destroy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_line</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the function is called from. This is usually APR_POOL__FILE_LINE__. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Only available when APR_POOL_DEBUG is defined. Call this directly if you have your apr_pool_destroy calls in a wrapper function and wish to override the file_line argument to reflect the caller of your wrapper function. If you do not have apr_pool_destroy in a wrapper, trust the macro and don&apos;t call apr_pool_destroy_debug directly. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga85f1e193c31d109affda72f9a92c6915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_palloc</definition>
        <argsstring>(apr_pool_t *p, apr_size_t size)</argsstring>
        <name>apr_palloc</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a block of memory from a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of memory to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga0ac211ac89be868b107776b4183a8174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_palloc_debug</definition>
        <argsstring>(apr_pool_t *p, apr_size_t size, const char *file_line)</argsstring>
        <name>apr_palloc_debug</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Debug version of apr_palloc <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>See: apr_palloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>See: apr_palloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_line</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the function is called from. This is usually APR_POOL__FILE_LINE__. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See: apr_palloc </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gaf61c098ad258069d64cdf8c0a9369f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_pcalloc</definition>
        <argsstring>(apr_pool_t *p, apr_size_t size)</argsstring>
        <name>apr_pcalloc</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a block of memory from a pool and set all of the memory to 0 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of memory to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga7b43035318ffdc57a6eddab07dc57cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_pcalloc_debug</definition>
        <argsstring>(apr_pool_t *p, apr_size_t size, const char *file_line)</argsstring>
        <name>apr_pcalloc_debug</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Debug version of apr_pcalloc <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>See: apr_pcalloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>See: apr_pcalloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_line</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the function is called from. This is usually APR_POOL__FILE_LINE__. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See: apr_pcalloc </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gaa658b1f10dd13967eaa7c4156d4c2174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_abort_set</definition>
        <argsstring>(apr_abortfunc_t abortfunc, apr_pool_t *pool)</argsstring>
        <name>apr_pool_abort_set</name>
        <param>
          <type><ref refid="group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd" kindref="member">apr_abortfunc_t</ref></type>
          <declname>abortfunc</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the function to be called when an allocation failure occurs. <simplesect kind="remark"><para>If the program wants APR to exit on a memory allocation error, then this function can be called to set the callback to use (for performing cleanup and then exiting). If this function is not called, then APR will return an error and expect the calling program to deal with the error accordingly. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gaf7610c30ef5f84a8742c0b3e63fdd7b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1ga370a939349adf6d1438068e2fc69a0dd" kindref="member">apr_abortfunc_t</ref></type>
        <definition>apr_abortfunc_t apr_pool_abort_get</definition>
        <argsstring>(apr_pool_t *pool)</argsstring>
        <name>apr_pool_abort_get</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the abort function associated with the specified pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for retrieving the abort function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The abort function for the given pool. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga94db31f40609b15b592ff47f989ca9ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_pool_parent_get</definition>
        <argsstring>(apr_pool_t *pool)</argsstring>
        <name>apr_pool_parent_get</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parent pool of the specified pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for retrieving the parent pool. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parent of the given pool. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga05d299f778659d1e0806140d8a7fea79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_pool_is_ancestor</definition>
        <argsstring>(apr_pool_t *a, apr_pool_t *b)</argsstring>
        <name>apr_pool_is_ancestor</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if pool a is an ancestor of pool b. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to search for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if a is an ancestor of b, NULL is considered an ancestor of all pools. </para></simplesect>
<simplesect kind="remark"><para>if compiled with APR_POOL_DEBUG, this function will also return true if A is a pool which has been guaranteed by the caller (using apr_pool_join) to have a lifetime at least as long as some ancestor of pool B. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gaeaa872f7999740a60803e95429890518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_tag</definition>
        <argsstring>(apr_pool_t *pool, const char *tag)</argsstring>
        <name>apr_pool_tag</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tag a pool (give it a name) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to tag </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga78d1aa2d9fa842d83eaffccb0f0c0c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_userdata_set</definition>
        <argsstring>(const void *data, const char *key, apr_status_t(*cleanup)(void *), apr_pool_t *pool)</argsstring>
        <name>apr_pool_userdata_set</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the data associated with the current pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data associated with the pool. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use for association </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The cleanup program to use to cleanup the data (NULL if none) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The current pool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>The data to be attached to the pool should have a life span at least as long as the pool it is being attached to.</para></simplesect>
Users of APR must take EXTREME care when choosing a key to use for their data. It is possible to accidentally overwrite data by choosing a key that another part of the program is using. Therefore it is advised that steps are taken to ensure that unique keys are used for all of the userdata objects in a particular pool (the same key in two different pools or a pool and one of its subpools is okay) at all times. Careful namespace prefixing of key names is a typical way to help ensure this uniqueness. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1ga435644c493dc5b10d80c4b99b8cd4589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_userdata_setn</definition>
        <argsstring>(const void *data, const char *key, apr_status_t(*cleanup)(void *), apr_pool_t *pool)</argsstring>
        <name>apr_pool_userdata_setn</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the data associated with the current pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data associated with the pool. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use for association </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The cleanup program to use to cleanup the data (NULL if none) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The current pool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>same as <ref refid="group__apr__pools_1ga78d1aa2d9fa842d83eaffccb0f0c0c5c" kindref="member">apr_pool_userdata_set()</ref>, except that this version doesn&apos;t make a copy of the key (this function is useful, for example, when the key is a string literal) </para></simplesect>
<simplesect kind="warning"><para>This should NOT be used if the key could change addresses by any means between the <ref refid="group__apr__pools_1ga435644c493dc5b10d80c4b99b8cd4589" kindref="member">apr_pool_userdata_setn()</ref> call and a subsequent <ref refid="group__apr__pools_1gaf930f1fad2cf92a2432c0814c8a0b86f" kindref="member">apr_pool_userdata_get()</ref> on that key, such as if a static string is used as a userdata key in a DSO and the DSO could be unloaded and reloaded between the _setn() and the _get(). You MUST use <ref refid="group__apr__pools_1ga78d1aa2d9fa842d83eaffccb0f0c0c5c" kindref="member">apr_pool_userdata_set()</ref> in such cases. </para></simplesect>
<simplesect kind="warning"><para>More generally, the key and the data to be attached to the pool should have a life span at least as long as the pool itself. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="588" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__pools_1gaf930f1fad2cf92a2432c0814c8a0b86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_userdata_get</definition>
        <argsstring>(void **data, const char *key, apr_pool_t *pool)</argsstring>
        <name>apr_pool_userdata_get</name>
        <param>
          <type>void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the data associated with the current pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data associated with the pool. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key for the data to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The current pool. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1ga6bdb28224dfe08160cbe3ba6b22dcbd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_cleanup_register</definition>
        <argsstring>(apr_pool_t *p, const void *data, apr_status_t(*plain_cleanup)(void *), apr_status_t(*child_cleanup)(void *))</argsstring>
        <name>apr_pool_cleanup_register</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>plain_cleanup</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>child_cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a function to be called when a pool is cleared or destroyed <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to register the cleanup with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to pass to the cleanup function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plain_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when the pool is cleared or destroyed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when a child process is about to exec - this function is called in the child, obviously! </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1ga64114542989d8872c7fd3c62f2a68678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_pre_cleanup_register</definition>
        <argsstring>(apr_pool_t *p, const void *data, apr_status_t(*plain_cleanup)(void *))</argsstring>
        <name>apr_pool_pre_cleanup_register</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>plain_cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a function to be called when a pool is cleared or destroyed.</para><para>Unlike apr_pool_cleanup_register which registers a cleanup that is called AFTER all subpools are destroyed, this function registers a function that will be called before any of the subpools are destroyed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to register the cleanup with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to pass to the cleanup function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plain_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when the pool is cleared or destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1gadc59bf32a0302e34fa0a2663f6e48a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_cleanup_kill</definition>
        <argsstring>(apr_pool_t *p, const void *data, apr_status_t(*cleanup)(void *))</argsstring>
        <name>apr_pool_cleanup_kill</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a previously registered cleanup function.</para><para>The cleanup most recently registered with <emphasis>p</emphasis> having the same values of <emphasis>data</emphasis> and <emphasis>cleanup</emphasis> will be removed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to remove the cleanup from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data of the registered cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to remove from cleanup </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>For some strange reason only the plain_cleanup is handled by this function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="663" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1ga7197fa6b43d9c5e99de17e0e900989ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_child_cleanup_set</definition>
        <argsstring>(apr_pool_t *p, const void *data, apr_status_t(*plain_cleanup)(void *), apr_status_t(*child_cleanup)(void *))</argsstring>
        <name>apr_pool_child_cleanup_set</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>plain_cleanup</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>child_cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the child cleanup function of a previously registered cleanup.</para><para>The cleanup most recently registered with <emphasis>p</emphasis> having the same values of <emphasis>data</emphasis> and <emphasis>plain_cleanup</emphasis> will have the registered child cleanup function replaced with <emphasis>child_cleanup</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool of the registered cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data of the registered cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plain_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The plain cleanup function of the registered cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to register as the child cleanup </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="679" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1gabf3913823af6015895a726ab738eaac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_cleanup_run</definition>
        <argsstring>(apr_pool_t *p, void *data, apr_status_t(*cleanup)(void *))</argsstring>
        <name>apr_pool_cleanup_run</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run the specified cleanup function immediately and unregister it.</para><para>The cleanup most recently registered with <emphasis>p</emphasis> having the same values of <emphasis>data</emphasis> and <emphasis>cleanup</emphasis> will be removed and <emphasis>cleanup</emphasis> will be called with <emphasis>data</emphasis> as the argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to remove the cleanup from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to remove from cleanup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to remove from cleanup </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="696" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1gaa211acee585df08f396a50b0ea489b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_pool_cleanup_null</definition>
        <argsstring>(void *data)</argsstring>
        <name>apr_pool_cleanup_null</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An empty cleanup function.</para><para>Passed to <ref refid="group___pool_cleanup_1ga6bdb28224dfe08160cbe3ba6b22dcbd7" kindref="member">apr_pool_cleanup_register()</ref> when no cleanup is required.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to cleanup, will not be used by this function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="707" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_cleanup_1ga1726cc585bda8997fcb0828f884be55b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_cleanup_for_exec</definition>
        <argsstring>(void)</argsstring>
        <name>apr_pool_cleanup_for_exec</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run all registered child cleanups, in preparation for an exec() call in a forked child <ndash/> close files, etc., but <emphasis>don&apos;t</emphasis> flush I/O buffers, <emphasis>don&apos;t</emphasis> wait for subprocesses, and <emphasis>don&apos;t</emphasis> free any memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="715" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_debug_1gaecd956092f81c70117507ad8cbca8ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_join</definition>
        <argsstring>(apr_pool_t *p, apr_pool_t *sub)</argsstring>
        <name>apr_pool_join</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guarantee that a subpool has the same lifetime as the parent. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent pool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subpool </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_debug_1ga0bc40d9069709020e3643492dae2ccb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_pool_find</definition>
        <argsstring>(const void *mem)</argsstring>
        <name>apr_pool_find</name>
        <param>
          <type>const void *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a pool from something allocated in it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>The thing allocated in the pool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pool it is allocated in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_debug_1ga22462da23d70dfde389a370b131cd351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_size_t</type>
        <definition>apr_size_t apr_pool_num_bytes</definition>
        <argsstring>(apr_pool_t *p, int recurse)</argsstring>
        <name>apr_pool_num_bytes</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>recurse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Report the number of bytes currently in the pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to inspect </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recurse</parametername>
</parameternamelist>
<parameterdescription>
<para>Recurse/include the subpools&apos; sizes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="783" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___pool_debug_1ga24f8f0287478fa71f77d0ce4ec035e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_pool_lock</definition>
        <argsstring>(apr_pool_t *pool, int flag)</argsstring>
        <name>apr_pool_lock</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to lock </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_pools.h" line="791" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>APR memory allocation. </para>    </briefdescription>
    <detaileddescription>
<para>Resource allocation routines...</para><para>designed so that we don&apos;t have to keep track of EVERYTHING so that it can be explicitly freed later (a fundamentally unsound strategy <mdash/> particularly in the presence of die()).</para><para>Instead, we maintain pools, and allocate items (both memory and I/O handlers) from the pools <mdash/> currently there are two, one for per-transaction info, and one for config info. When a transaction is over, we can delete everything in the per-transaction apr_pool_t without fear, and without thinking too hard about it either.</para><para>Note that most operations on pools are not thread-safe: a single pool should only be accessed by a single thread at any given time. The one exception to this rule is creating a subpool of a given pool: one or more threads can safely create subpools at the same time that another thread accesses the parent pool. </para>    </detaileddescription>
    <location file="include/apr_pools.h"/>
  </compounddef>
</doxygen>
