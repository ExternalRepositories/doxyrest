<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__shm" kind="group">
    <compoundname>apr_shm</compoundname>
    <title>Shared Memory Routines</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" prot="public" static="no">
        <type>struct <ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref></type>
        <definition>typedef struct apr_shm_t apr_shm_t</definition>
        <argsstring></argsstring>
        <name>apr_shm_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Private, platform-specific data struture representing a shared memory segment. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="53" column="1" bodyfile="include/apr_shm.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__shm_1gac370c4943c22505ce2b0d57c51805480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_shm_create</definition>
        <argsstring>(apr_shm_t **m, apr_size_t reqsize, const char *filename, apr_pool_t *pool)</argsstring>
        <name>apr_shm_create</name>
        <param>
          <type><ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref> **</type>
          <declname>m</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>reqsize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create and make accessible a shared memory segment with default properties. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared memory structure to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reqsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired size of the segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to use for shared memory on platforms that require it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool from which to allocate the shared memory structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>A note about Anonymous vs. Named shared memory segments: Not all plaforms support anonymous shared memory segments, but in some cases it is prefered over other types of shared memory implementations. Passing a NULL &apos;file&apos; parameter to this function will cause the subsystem to use anonymous shared memory segments. If such a system is not available, APR_ENOTIMPL is returned. </para></simplesect>
<simplesect kind="remark"><para>A note about allocation sizes: On some platforms it is necessary to store some metainformation about the segment within the actual segment. In order to supply the caller with the requested size it may be necessary for the implementation to request a slightly greater segment length from the subsystem. In all cases, the <ref refid="group__apr__shm_1gade739e1f5f4e88c93256a63ebfd47d4d" kindref="member">apr_shm_baseaddr_get()</ref> function will return the first usable byte of memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__shm_1ga21baaa66956641e06e072501f61882e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_shm_create_ex</definition>
        <argsstring>(apr_shm_t **m, apr_size_t reqsize, const char *filename, apr_pool_t *pool, apr_int32_t flags)</argsstring>
        <name>apr_shm_create_ex</name>
        <param>
          <type><ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref> **</type>
          <declname>m</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>reqsize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create and make accessible a shared memory segment with platform- specific processing. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared memory structure to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reqsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired size of the segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to use for shared memory on platforms that require it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool from which to allocate the shared memory structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>mask of APR_SHM_* (defined above) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>A note about Anonymous vs. Named shared memory segments: Not all plaforms support anonymous shared memory segments, but in some cases it is prefered over other types of shared memory implementations. Passing a NULL &apos;file&apos; parameter to this function will cause the subsystem to use anonymous shared memory segments. If such a system is not available, APR_ENOTIMPL is returned. </para></simplesect>
<simplesect kind="remark"><para>A note about allocation sizes: On some platforms it is necessary to store some metainformation about the segment within the actual segment. In order to supply the caller with the requested size it may be necessary for the implementation to request a slightly greater segment length from the subsystem. In all cases, the <ref refid="group__apr__shm_1gade739e1f5f4e88c93256a63ebfd47d4d" kindref="member">apr_shm_baseaddr_get()</ref> function will return the first usable byte of memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__shm_1gaee8b7d9b952ff6157ddbb00fabb477e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_shm_remove</definition>
        <argsstring>(const char *filename, apr_pool_t *pool)</argsstring>
        <name>apr_shm_remove</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove named resource associated with a shared memory segment, preventing attachments to the resource, but not destroying it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename associated with shared-memory segment which needs to be removed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool used for file operations </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is only supported on platforms which support name-based shared memory segments, and will return APR_ENOTIMPL on platforms without such support. Removing the file while the shm is in use is not entirely portable, caller may use this to enhance obscurity of the resource, but be prepared for the call to fail, and for concurrent attempts to create a resource of the same name to also fail. The pool cleanup of apr_shm_create (apr_shm_destroy) also removes the named resource. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__shm_1ga7de5b65a9c7d9840bfa289854f8d59d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_shm_destroy</definition>
        <argsstring>(apr_shm_t *m)</argsstring>
        <name>apr_shm_destroy</name>
        <param>
          <type><ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a shared memory segment and associated memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared memory segment structure to destroy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__shm_1ga0e542941c280cb72b78e30d452464759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_shm_attach</definition>
        <argsstring>(apr_shm_t **m, const char *filename, apr_pool_t *pool)</argsstring>
        <name>apr_shm_attach</name>
        <param>
          <type><ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref> **</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attach to a shared memory segment that was created by another process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared memory structure to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The file used to create the original segment. (This MUST match the original filename.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool from which to allocate the shared memory structure for this process. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__shm_1ga088260723c96815610ff628f358d3630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_shm_attach_ex</definition>
        <argsstring>(apr_shm_t **m, const char *filename, apr_pool_t *pool, apr_int32_t flags)</argsstring>
        <name>apr_shm_attach_ex</name>
        <param>
          <type><ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref> **</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attach to a shared memory segment that was created by another process, with platform-specific processing. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared memory structure to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The file used to create the original segment. (This MUST match the original filename.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool from which to allocate the shared memory structure for this process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>mask of APR_SHM_* (defined above) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__shm_1ga900095a06d3fdb4cdd04ca4449a9d42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_shm_detach</definition>
        <argsstring>(apr_shm_t *m)</argsstring>
        <name>apr_shm_detach</name>
        <param>
          <type><ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detach from a shared memory segment without destroying it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared memory structure representing the segment to detach from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__shm_1gade739e1f5f4e88c93256a63ebfd47d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_shm_baseaddr_get</definition>
        <argsstring>(const apr_shm_t *m)</argsstring>
        <name>apr_shm_baseaddr_get</name>
        <param>
          <type>const <ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the base address of the shared memory segment. NOTE: This address is only usable within the callers address space, since this API does not guarantee that other attaching processes will maintain the same address mapping. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared memory segment from which to retrieve the base address. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address, aligned by APR_ALIGN_DEFAULT. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__shm_1ga557ae85d3f225620a77ad80caeaacac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_size_t</type>
        <definition>apr_size_t apr_shm_size_get</definition>
        <argsstring>(const apr_shm_t *m)</argsstring>
        <name>apr_shm_size_get</name>
        <param>
          <type>const <ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the length of a shared memory segment in bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared memory segment from which to retrieve the segment length. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__shm_1ga072c40df7643e697885935ae65545098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_shm_pool_get</definition>
        <argsstring>(const apr_shm_t *theshm)</argsstring>
        <name>apr_shm_pool_get</name>
        <param>
          <type>const <ref refid="group__apr__shm_1ga79e8c16bdeaf7ade4ef0f935249e7c2f" kindref="member">apr_shm_t</ref> *</type>
          <declname>theshm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the pool used by this shared memory segment. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="200" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__shm_1ga47cc28ddc5f32cf904383b9e4f82825b" prot="public" static="no">
        <name>APR_SHM_NS_LOCAL</name>
        <initializer>1 /* Create or attach to named shared memory
                               * segment in the &quot;Local&quot; namespace on
                               * Windows.  (Ignored on other platforms.)
                               * By default, the &quot;Global&quot; namespace is
                               * used for privileged processes and the
                               * &quot;Local&quot; namespace is used otherwise.
                               */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Special processing flags for <ref refid="group__apr__shm_1ga21baaa66956641e06e072501f61882e7" kindref="member">apr_shm_create_ex()</ref> and <ref refid="group__apr__shm_1ga088260723c96815610ff628f358d3630" kindref="member">apr_shm_attach_ex()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="83" column="9" bodyfile="include/apr_shm.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__shm_1ga0de8e4acab42e7ff8e35e5ac9620f667" prot="public" static="no">
        <name>APR_SHM_NS_GLOBAL</name>
        <initializer>2 /* Create or attach to named shared memory
                               * segment in the &quot;Global&quot; namespace on
                               * Windows.  (Ignored on other platforms.)
                               */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_shm.h" line="87" column="9" bodyfile="include/apr_shm.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
