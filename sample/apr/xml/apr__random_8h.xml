<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="apr__random_8h" kind="file" language="C++">
    <compoundname>apr_random.h</compoundname>
    <includes refid="apr__pools_8h" local="yes">apr_pools.h</includes>
    <includes refid="apr__thread__proc_8h" local="yes">apr_thread_proc.h</includes>
    <incdepgraph>
      <node id="616">
        <label>apr_file_info.h</label>
        <link refid="apr__file__info_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
        <childnode refid="615" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
      </node>
      <node id="619">
        <label>stdarg.h</label>
      </node>
      <node id="602">
        <label>stdint.h</label>
      </node>
      <node id="606">
        <label>errno.h</label>
      </node>
      <node id="615">
        <label>apr_time.h</label>
        <link refid="apr__time_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
      </node>
      <node id="614">
        <label>apr_file_io.h</label>
        <link refid="apr__file__io_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="615" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="616" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="609" relation="include">
        </childnode>
      </node>
      <node id="607">
        <label>apr_general.h</label>
        <link refid="apr__general_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="608" relation="include">
        </childnode>
      </node>
      <node id="604">
        <label>limits.h</label>
      </node>
      <node id="623">
        <label>sys/resource.h</label>
      </node>
      <node id="617">
        <label>apr_user.h</label>
        <link refid="apr__user_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
      </node>
      <node id="600">
        <label>sys/types.h</label>
      </node>
      <node id="610">
        <label>string.h</label>
      </node>
      <node id="612">
        <label>apr_thread_mutex.h</label>
        <link refid="apr__thread__mutex_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
      </node>
      <node id="598">
        <label>apr_pools.h</label>
        <link refid="apr__pools_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="607" relation="include">
        </childnode>
        <childnode refid="609" relation="include">
        </childnode>
        <childnode refid="611" relation="include">
        </childnode>
      </node>
      <node id="611">
        <label>apr_allocator.h</label>
        <link refid="apr__allocator_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="609" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="612" relation="include">
        </childnode>
      </node>
      <node id="620">
        <label>sys/uio.h</label>
      </node>
      <node id="608">
        <label>signal.h</label>
      </node>
      <node id="605">
        <label>apr_errno.h</label>
        <link refid="apr__errno_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="606" relation="include">
        </childnode>
      </node>
      <node id="613">
        <label>apr_thread_proc.h</label>
        <link refid="apr__thread__proc_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="614" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
      </node>
      <node id="603">
        <label>sys/wait.h</label>
      </node>
      <node id="622">
        <label>sys/time.h</label>
      </node>
      <node id="599">
        <label>apr.h</label>
        <link refid="apr_8h"/>
        <childnode refid="600" relation="include">
        </childnode>
        <childnode refid="601" relation="include">
        </childnode>
        <childnode refid="602" relation="include">
        </childnode>
        <childnode refid="603" relation="include">
        </childnode>
        <childnode refid="604" relation="include">
        </childnode>
      </node>
      <node id="601">
        <label>sys/socket.h</label>
      </node>
      <node id="609">
        <label>apr_want.h</label>
        <link refid="apr__want_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="610" relation="include">
        </childnode>
      </node>
      <node id="618">
        <label>apr_tables.h</label>
        <link refid="apr__tables_8h"/>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
      </node>
      <node id="621">
        <label>apr_inherit.h</label>
        <link refid="apr__inherit_8h"/>
      </node>
      <node id="597">
        <label>apr_random.h</label>
        <link refid="apr__random_8h"/>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="613" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structapr__crypto__hash__t" prot="public">apr_crypto_hash_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__random_1ga30fbaf80424a9f1a0e9cc51072f65127" prot="public" static="no">
        <type>struct <ref refid="structapr__crypto__hash__t" kindref="compound">apr_crypto_hash_t</ref></type>
        <definition>typedef struct apr_crypto_hash_t apr_crypto_hash_t</definition>
        <argsstring></argsstring>
        <name>apr_crypto_hash_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="158" column="1" bodyfile="include/apr_random.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__random_1gad2775bc1cdb376d9dec0e97283b4bdd9" prot="public" static="no">
        <type>void</type>
        <definition>typedef void apr_crypto_hash_init_t(apr_crypto_hash_t *hash)</definition>
        <argsstring>(apr_crypto_hash_t *hash)</argsstring>
        <name>apr_crypto_hash_init_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="40" column="1" bodyfile="include/apr_random.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__random_1ga2f8a4fb18078a76357327ea55936c1ea" prot="public" static="no">
        <type>void</type>
        <definition>typedef void apr_crypto_hash_add_t(apr_crypto_hash_t *hash, const void *data, apr_size_t bytes)</definition>
        <argsstring>(apr_crypto_hash_t *hash, const void *data, apr_size_t bytes)</argsstring>
        <name>apr_crypto_hash_add_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="41" column="1" bodyfile="include/apr_random.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__random_1gab70ea9133870efdb5532d20d4bcf7442" prot="public" static="no">
        <type>void</type>
        <definition>typedef void apr_crypto_hash_finish_t(apr_crypto_hash_t *hash, unsigned char *result)</definition>
        <argsstring>(apr_crypto_hash_t *hash, unsigned char *result)</argsstring>
        <name>apr_crypto_hash_finish_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="43" column="1" bodyfile="include/apr_random.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" prot="public" static="no">
        <type>struct <ref refid="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" kindref="member">apr_random_t</ref></type>
        <definition>typedef struct apr_random_t apr_random_t</definition>
        <argsstring></argsstring>
        <name>apr_random_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque PRNG structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="60" column="1" bodyfile="include/apr_random.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__random_1gae992c6f642e9661d2417cd8f2df8d345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structapr__crypto__hash__t" kindref="compound">apr_crypto_hash_t</ref> *</type>
        <definition>apr_crypto_hash_t* apr_crypto_sha256_new</definition>
        <argsstring>(apr_pool_t *p)</argsstring>
        <name>apr_crypto_sha256_new</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate and initialize the SHA-256 context <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__random_1ga0184a90774212132f883c463811aacdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_random_init</definition>
        <argsstring>(apr_random_t *g, apr_pool_t *p, apr_crypto_hash_t *pool_hash, apr_crypto_hash_t *key_hash, apr_crypto_hash_t *prng_hash)</argsstring>
        <name>apr_random_init</name>
        <param>
          <type><ref refid="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" kindref="member">apr_random_t</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structapr__crypto__hash__t" kindref="compound">apr_crypto_hash_t</ref> *</type>
          <declname>pool_hash</declname>
        </param>
        <param>
          <type><ref refid="structapr__crypto__hash__t" kindref="compound">apr_crypto_hash_t</ref> *</type>
          <declname>key_hash</declname>
        </param>
        <param>
          <type><ref refid="structapr__crypto__hash__t" kindref="compound">apr_crypto_hash_t</ref> *</type>
          <declname>prng_hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a PRNG state <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The PRNG state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool hash functions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Key hash functions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prng_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>PRNG hash functions </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__random_1ga7a73c9bcf026b63847aeae483c53191f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" kindref="member">apr_random_t</ref> *</type>
        <definition>apr_random_t* apr_random_standard_new</definition>
        <argsstring>(apr_pool_t *p)</argsstring>
        <name>apr_random_standard_new</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate and initialize (apr_crypto_sha256_new) a new PRNG state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__random_1ga8cf2875644c1dffc0c336289bd370efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_random_add_entropy</definition>
        <argsstring>(apr_random_t *g, const void *entropy_, apr_size_t bytes)</argsstring>
        <name>apr_random_add_entropy</name>
        <param>
          <type><ref refid="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" kindref="member">apr_random_t</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>entropy_</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mix the randomness pools. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The PRNG state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entropy_</parametername>
</parameternamelist>
<parameterdescription>
<para>Entropy buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of entropy_ in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__random_1gab9a63359bb9543d746e6fd46933b7256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_random_insecure_bytes</definition>
        <argsstring>(apr_random_t *g, void *random, apr_size_t bytes)</argsstring>
        <name>apr_random_insecure_bytes</name>
        <param>
          <type><ref refid="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" kindref="member">apr_random_t</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate cryptographically insecure random bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>random</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to fill with random bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__random_1ga9f0607e06656a1c76cc5ee878fd94f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_random_secure_bytes</definition>
        <argsstring>(apr_random_t *g, void *random, apr_size_t bytes)</argsstring>
        <name>apr_random_secure_bytes</name>
        <param>
          <type><ref refid="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" kindref="member">apr_random_t</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate cryptographically secure random bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>random</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to fill with random bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__random_1ga37d8d7529cf972c605ebce97c57f8825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_random_barrier</definition>
        <argsstring>(apr_random_t *g)</argsstring>
        <name>apr_random_barrier</name>
        <param>
          <type><ref refid="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" kindref="member">apr_random_t</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ensures that E bits of conditional entropy are mixed into the PRNG before any further randomness is extracted. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG state </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__random_1ga99d0c0722eeef2951e8ccede2e1451fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_random_secure_ready</definition>
        <argsstring>(apr_random_t *r)</argsstring>
        <name>apr_random_secure_ready</name>
        <param>
          <type><ref refid="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" kindref="member">apr_random_t</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return APR_SUCCESS if the cryptographic PRNG has been seeded with enough data, APR_ENOTENOUGHENTROPY otherwise. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG state </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__random_1ga6465698bdc752d07abc8c515aac6e2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_random_insecure_ready</definition>
        <argsstring>(apr_random_t *r)</argsstring>
        <name>apr_random_insecure_ready</name>
        <param>
          <type><ref refid="group__apr__random_1ga33073741e56b1bafe52ba58cefcbbf96" kindref="member">apr_random_t</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return APR_SUCCESS if the PRNG has been seeded with enough data, APR_ENOTENOUGHENTROPY otherwise. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The PRNG state </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__random_1gaa1ab9b8adeeb6e37bb29def249ff9e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_random_after_fork</definition>
        <argsstring>(apr_proc_t *proc)</argsstring>
        <name>apr_random_after_fork</name>
        <param>
          <type><ref refid="structapr__proc__t" kindref="compound">apr_proc_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mix the randomness pools after forking. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>The resulting process handle from <ref refid="group__apr__thread__proc_1ga3d0415bf69b0a629a929833e82758b85" kindref="member">apr_proc_fork()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Call this in the child after forking to mix the randomness pools. Note that its generally a bad idea to fork a process with a real PRNG in it - better to have the PRNG externally and get the randomness from there. However, if you really must do it, then you should supply all your entropy to all the PRNGs - don&apos;t worry, they won&apos;t produce the same output. </para></simplesect>
<simplesect kind="remark"><para>Note that <ref refid="group__apr__thread__proc_1ga3d0415bf69b0a629a929833e82758b85" kindref="member">apr_proc_fork()</ref> calls this for you, so only weird applications need ever call it themselves. </para></simplesect>
</para><internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_random.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>APR PRNG routines. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/apr_random.h"/>
  </compounddef>
</doxygen>
