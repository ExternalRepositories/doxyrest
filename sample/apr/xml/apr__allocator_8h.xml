<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="apr__allocator_8h" kind="file" language="C++">
    <compoundname>apr_allocator.h</compoundname>
    <includes refid="apr_8h" local="yes">apr.h</includes>
    <includes refid="apr__errno_8h" local="yes">apr_errno.h</includes>
    <includes refid="apr__want_8h" local="yes">apr_want.h</includes>
    <includes refid="apr__pools_8h" local="yes">apr_pools.h</includes>
    <includes refid="apr__thread__mutex_8h" local="yes">apr_thread_mutex.h</includes>
    <includedby refid="apr__pools_8h" local="yes">apr_pools.h</includedby>
    <incdepgraph>
      <node id="48">
        <label>stdint.h</label>
      </node>
      <node id="52">
        <label>errno.h</label>
      </node>
      <node id="56">
        <label>apr_general.h</label>
        <link refid="apr__general_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>limits.h</label>
      </node>
      <node id="46">
        <label>sys/types.h</label>
      </node>
      <node id="54">
        <label>string.h</label>
      </node>
      <node id="58">
        <label>apr_thread_mutex.h</label>
        <link refid="apr__thread__mutex_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>apr_pools.h</label>
        <link refid="apr__pools_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>apr_allocator.h</label>
        <link refid="apr__allocator_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>signal.h</label>
      </node>
      <node id="51">
        <label>apr_errno.h</label>
        <link refid="apr__errno_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>sys/wait.h</label>
      </node>
      <node id="45">
        <label>apr.h</label>
        <link refid="apr_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>sys/socket.h</label>
      </node>
      <node id="53">
        <label>apr_want.h</label>
        <link refid="apr__want_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="73">
        <label>apr_file_info.h</label>
        <link refid="apr__file__info_8h"/>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>apr_dso.h</label>
        <link refid="apr__dso_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>apr_strings.h</label>
        <link refid="apr__strings_8h"/>
      </node>
      <node id="86">
        <label>apr_hash.h</label>
        <link refid="apr__hash_8h"/>
      </node>
      <node id="87">
        <label>apr_shm.h</label>
        <link refid="apr__shm_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>apr_global_mutex.h</label>
        <link refid="apr__global__mutex_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>apr_time.h</label>
        <link refid="apr__time_8h"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>apr_file_io.h</label>
        <link refid="apr__file__io_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>apr_ring.h</label>
        <link refid="apr__ring_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>apr_mmap.h</label>
        <link refid="apr__mmap_8h"/>
      </node>
      <node id="77">
        <label>apr_support.h</label>
        <link refid="apr__support_8h"/>
      </node>
      <node id="61">
        <label>apr_general.h</label>
        <link refid="apr__general_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>apr_env.h</label>
        <link refid="apr__env_8h"/>
      </node>
      <node id="72">
        <label>apr_user.h</label>
        <link refid="apr__user_8h"/>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>apr_network_io.h</label>
        <link refid="apr__network__io_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>apr_thread_mutex.h</label>
        <link refid="apr__thread__mutex_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>apr_pools.h</label>
        <link refid="apr__pools_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>apr_allocator.h</label>
        <link refid="apr__allocator_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>apr_poll.h</label>
        <link refid="apr__poll_8h"/>
      </node>
      <node id="69">
        <label>apr_portable.h</label>
        <link refid="apr__portable_8h"/>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>apr_fnmatch.h</label>
        <link refid="apr__fnmatch_8h"/>
      </node>
      <node id="83">
        <label>apr_getopt.h</label>
        <link refid="apr__getopt_8h"/>
      </node>
      <node id="70">
        <label>apr_skiplist.h</label>
        <link refid="apr__skiplist_8h"/>
      </node>
      <node id="78">
        <label>apr_thread_proc.h</label>
        <link refid="apr__thread__proc_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>apr_escape.h</label>
        <link refid="apr__escape_8h"/>
      </node>
      <node id="90">
        <label>apr_thread_rwlock.h</label>
        <link refid="apr__thread__rwlock_8h"/>
      </node>
      <node id="80">
        <label>apr_tables.h</label>
        <link refid="apr__tables_8h"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>apr_atomic.h</label>
        <link refid="apr__atomic_8h"/>
      </node>
      <node id="84">
        <label>apr_proc_mutex.h</label>
        <link refid="apr__proc__mutex_8h"/>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>apr_signal.h</label>
        <link refid="apr__signal_8h"/>
      </node>
      <node id="79">
        <label>apr_random.h</label>
        <link refid="apr__random_8h"/>
      </node>
      <node id="66">
        <label>apr_thread_cond.h</label>
        <link refid="apr__thread__cond_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structapr__memnode__t" prot="public">apr_memnode_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="apr__allocator_8h_1a26faf43e3f61783d8b7aa928c0a41a11" prot="public" static="no">
        <name>APR_WANT_MEMFUNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For no good reason? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="27" column="12" bodyfile="include/apr_allocator.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__allocator_1gaf382851817012929f4e2458b43f4482c" prot="public" static="no">
        <name>APR_MEMNODE_T_SIZE</name>
        <initializer><ref refid="group__apr__general_1gab484e98426221f3212fcb67af0467381" kindref="member">APR_ALIGN_DEFAULT</ref>(sizeof(<ref refid="structapr__memnode__t" kindref="compound">apr_memnode_t</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The base size of a memory node - aligned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="64" column="9" bodyfile="include/apr_allocator.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__allocator_1ga54f32b19d8dad59bc6364a7a6b8ebec9" prot="public" static="no">
        <name>APR_ALLOCATOR_MAX_FREE_UNLIMITED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Symbolic constants </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="67" column="9" bodyfile="include/apr_allocator.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" prot="public" static="no">
        <type>struct <ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref></type>
        <definition>typedef struct apr_allocator_t apr_allocator_t</definition>
        <argsstring></argsstring>
        <name>apr_allocator_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the allocator structure </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="363" column="1" bodyfile="include/apr_allocator.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__allocator_1ga3b6437036dfcdffbf87ad4677c818211" prot="public" static="no">
        <type>struct <ref refid="structapr__memnode__t" kindref="compound">apr_memnode_t</ref></type>
        <definition>typedef struct apr_memnode_t apr_memnode_t</definition>
        <argsstring></argsstring>
        <name>apr_memnode_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the structure which holds information about the allocation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="363" column="1" bodyfile="include/apr_allocator.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__allocator_1gaf834f409a34b7f8656c045cff02fd953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_allocator_create</definition>
        <argsstring>(apr_allocator_t **allocator)</argsstring>
        <name>apr_allocator_create</name>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> **</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new allocator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator we have just created. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__allocator_1ga704529f6b26279ad1c48d5e8372d859c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_allocator_destroy</definition>
        <argsstring>(apr_allocator_t *allocator)</argsstring>
        <name>apr_allocator_destroy</name>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an allocator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Any memnodes not given back to the allocator prior to destroying will <emphasis>not</emphasis> be free()d. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__allocator_1ga7452b0837c2148bd63109f89bbc0c3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structapr__memnode__t" kindref="compound">apr_memnode_t</ref> *</type>
        <definition>apr_memnode_t* apr_allocator_alloc</definition>
        <argsstring>(apr_allocator_t *allocator, apr_size_t size)</argsstring>
        <name>apr_allocator_alloc</name>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a block of mem from the allocator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the mem to allocate (excluding the memnode structure) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__allocator_1ga124e48339838213fd5e160a4125cb7e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_allocator_free</definition>
        <argsstring>(apr_allocator_t *allocator, apr_memnode_t *memnode)</argsstring>
        <name>apr_allocator_free</name>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="structapr__memnode__t" kindref="compound">apr_memnode_t</ref> *</type>
          <declname>memnode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free a list of blocks of mem, giving them back to the allocator. The list is typically terminated by a memnode with its next field set to NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to give the mem back to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memnode</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory node to return </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__allocator_1gadf38bbec37c29c24388e95b1c9acad28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_allocator_owner_set</definition>
        <argsstring>(apr_allocator_t *allocator, apr_pool_t *pool)</argsstring>
        <name>apr_allocator_owner_set</name>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the owner of the allocator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to set the owner for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool that is to own the allocator </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Typically pool is the highest level pool using the allocator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__allocator_1ga3cfe48c8717de6495480ce1479d262f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_allocator_owner_get</definition>
        <argsstring>(apr_allocator_t *allocator)</argsstring>
        <name>apr_allocator_owner_get</name>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current owner of the allocator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to get the owner from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__allocator_1ga1d45cb6dbe69ba25dee0ec5f4e031d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_allocator_max_free_set</definition>
        <argsstring>(apr_allocator_t *allocator, apr_size_t size)</argsstring>
        <name>apr_allocator_max_free_set</name>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the current threshold at which the allocator should start giving blocks back to the system. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to set the threshold on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The threshold. 0 == unlimited. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__allocator_1gab803d74f56683004f7ec384ced210dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apr_allocator_mutex_set</definition>
        <argsstring>(apr_allocator_t *allocator, apr_thread_mutex_t *mutex)</argsstring>
        <name>apr_allocator_mutex_set</name>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="group__apr__thread__mutex_1ga95712060ba3a192036416e1ccef1db75" kindref="member">apr_thread_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a mutex for the allocator to use <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator to set the mutex for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__allocator_1ga38599aa9f1330846a2d2b25ec5c8d9c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__thread__mutex_1ga95712060ba3a192036416e1ccef1db75" kindref="member">apr_thread_mutex_t</ref> *</type>
        <definition>apr_thread_mutex_t* apr_allocator_mutex_get</definition>
        <argsstring>(apr_allocator_t *allocator)</argsstring>
        <name>apr_allocator_mutex_get</name>
        <param>
          <type><ref refid="group__apr__allocator_1ga1ceabfd30fcfc455e47d052d2a24244b" kindref="member">apr_allocator_t</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the mutex currently set for the allocator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="157" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>APR Internal Memory Allocation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/apr_allocator.h"/>
  </compounddef>
</doxygen>
