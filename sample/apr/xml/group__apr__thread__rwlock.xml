<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__thread__rwlock" kind="group">
    <compoundname>apr_thread_rwlock</compoundname>
    <title>Reader/Writer Lock Routines</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" prot="public" static="no">
        <type>struct <ref refid="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" kindref="member">apr_thread_rwlock_t</ref></type>
        <definition>typedef struct apr_thread_rwlock_t apr_thread_rwlock_t</definition>
        <argsstring></argsstring>
        <name>apr_thread_rwlock_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opaque read-write thread-safe lock. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_rwlock.h" line="169" column="1" bodyfile="include/apr_thread_rwlock.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__thread__rwlock_1gadae9c87ad957112406b48947cb1f0e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_rwlock_create</definition>
        <argsstring>(apr_thread_rwlock_t **rwlock, apr_pool_t *pool)</argsstring>
        <name>apr_thread_rwlock_create</name>
        <param>
          <type><ref refid="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" kindref="member">apr_thread_rwlock_t</ref> **</type>
          <declname>rwlock</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Note: The following operations have undefined results: unlocking a read-write lock which is not locked in the calling thread; write locking a read-write lock which is already locked by the calling thread; destroying a read-write lock more than once; clearing or destroying the pool from which a <bold>locked</bold> read-write lock is allocated. Create and initialize a read-write lock that can be used to synchronize threads. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rwlock</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory address where the newly created readwrite lock will be stored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool from which to allocate the mutex. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_rwlock.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__rwlock_1gad44a106cd9a81eef362d31837ca7018f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_rwlock_rdlock</definition>
        <argsstring>(apr_thread_rwlock_t *rwlock)</argsstring>
        <name>apr_thread_rwlock_rdlock</name>
        <param>
          <type><ref refid="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" kindref="member">apr_thread_rwlock_t</ref> *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Acquire a shared-read lock on the given read-write lock. This will allow multiple threads to enter the same critical section while they have acquired the read lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rwlock</parametername>
</parameternamelist>
<parameterdescription>
<para>the read-write lock on which to acquire the shared read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_rwlock.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__rwlock_1ga2bbbc137f5c610e31bf87fd0a60c428e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_rwlock_tryrdlock</definition>
        <argsstring>(apr_thread_rwlock_t *rwlock)</argsstring>
        <name>apr_thread_rwlock_tryrdlock</name>
        <param>
          <type><ref refid="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" kindref="member">apr_thread_rwlock_t</ref> *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempt to acquire the shared-read lock on the given read-write lock. This is the same as <ref refid="group__apr__thread__rwlock_1gad44a106cd9a81eef362d31837ca7018f" kindref="member">apr_thread_rwlock_rdlock()</ref>, only that the function fails if there is another thread holding the write lock, or if there are any write threads blocking on the lock. If the function fails for this case, APR_EBUSY will be returned. Note: it is important that the <ref refid="group___a_p_r___s_t_a_t_u_s___i_s_1gabb92ad7b6ef304132de70e9e5cbaa896" kindref="member">APR_STATUS_IS_EBUSY(s)</ref> macro be used to determine if the return value was APR_EBUSY, for portability reasons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rwlock</parametername>
</parameternamelist>
<parameterdescription>
<para>the rwlock on which to attempt the shared read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_rwlock.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__rwlock_1ga91543c9f97a6a1265524a5a8f55fef31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_rwlock_wrlock</definition>
        <argsstring>(apr_thread_rwlock_t *rwlock)</argsstring>
        <name>apr_thread_rwlock_wrlock</name>
        <param>
          <type><ref refid="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" kindref="member">apr_thread_rwlock_t</ref> *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Acquire an exclusive-write lock on the given read-write lock. This will allow only one single thread to enter the critical sections. If there are any threads currently holding the read-lock, this thread is put to sleep until it can have exclusive access to the lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rwlock</parametername>
</parameternamelist>
<parameterdescription>
<para>the read-write lock on which to acquire the exclusive write. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_rwlock.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__rwlock_1ga54c04596f8a1f44630bdda5a25578d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_rwlock_trywrlock</definition>
        <argsstring>(apr_thread_rwlock_t *rwlock)</argsstring>
        <name>apr_thread_rwlock_trywrlock</name>
        <param>
          <type><ref refid="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" kindref="member">apr_thread_rwlock_t</ref> *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempt to acquire the exclusive-write lock on the given read-write lock. This is the same as <ref refid="group__apr__thread__rwlock_1ga91543c9f97a6a1265524a5a8f55fef31" kindref="member">apr_thread_rwlock_wrlock()</ref>, only that the function fails if there is any other thread holding the lock (for reading or writing), in which case the function will return APR_EBUSY. Note: it is important that the <ref refid="group___a_p_r___s_t_a_t_u_s___i_s_1gabb92ad7b6ef304132de70e9e5cbaa896" kindref="member">APR_STATUS_IS_EBUSY(s)</ref> macro be used to determine if the return value was APR_EBUSY, for portability reasons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rwlock</parametername>
</parameternamelist>
<parameterdescription>
<para>the rwlock on which to attempt the exclusive write. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_rwlock.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__rwlock_1gac7b31112d972abfcac30252e622eb040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_rwlock_unlock</definition>
        <argsstring>(apr_thread_rwlock_t *rwlock)</argsstring>
        <name>apr_thread_rwlock_unlock</name>
        <param>
          <type><ref refid="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" kindref="member">apr_thread_rwlock_t</ref> *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release either the read or write lock currently held by the calling thread associated with the given read-write lock. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rwlock</parametername>
</parameternamelist>
<parameterdescription>
<para>the read-write lock to be released (unlocked). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_rwlock.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__rwlock_1ga136118166f50091fb30011d837a4cdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_thread_rwlock_destroy</definition>
        <argsstring>(apr_thread_rwlock_t *rwlock)</argsstring>
        <name>apr_thread_rwlock_destroy</name>
        <param>
          <type><ref refid="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" kindref="member">apr_thread_rwlock_t</ref> *</type>
          <declname>rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the read-write lock and free the associated memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rwlock</parametername>
</parameternamelist>
<parameterdescription>
<para>the rwlock to destroy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_rwlock.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__thread__rwlock_1ga3e78c5d8f2e7f4cdad46e912e68edd33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_thread_rwlock_pool_get</definition>
        <argsstring>(const apr_thread_rwlock_t *thethread_rwlock)</argsstring>
        <name>apr_thread_rwlock_pool_get</name>
        <param>
          <type>const <ref refid="group__apr__thread__rwlock_1gaede9b908e3d9e6a8aed7bd10d0ae0498" kindref="member">apr_thread_rwlock_t</ref> *</type>
          <declname>thethread_rwlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the pool used by this thread_rwlock. <simplesect kind="return"><para>apr_pool_t the pool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_thread_rwlock.h" line="119" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
