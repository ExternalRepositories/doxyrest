<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structapr__memnode__t" kind="struct" language="C++" prot="public">
    <compoundname>apr_memnode_t</compoundname>
    <includes refid="apr__allocator_8h" local="no">apr_allocator.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structapr__memnode__t_1a07dd84ca152164d6bc283dbce99f8f78" prot="public" static="no" mutable="no">
        <type><ref refid="structapr__memnode__t" kindref="compound">apr_memnode_t</ref> *</type>
        <definition>apr_memnode_t* apr_memnode_t::next</definition>
        <argsstring></argsstring>
        <name>next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>next memnode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="55" column="1" bodyfile="include/apr_allocator.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structapr__memnode__t_1ac68a939c0c3d48498ec0c0fde409c502" prot="public" static="no" mutable="no">
        <type><ref refid="structapr__memnode__t" kindref="compound">apr_memnode_t</ref> **</type>
        <definition>apr_memnode_t** apr_memnode_t::ref</definition>
        <argsstring></argsstring>
        <name>ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reference to self </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="56" column="1" bodyfile="include/apr_allocator.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structapr__memnode__t_1a6188325f9e1cbcafcb0a65b7e41881a1" prot="public" static="no" mutable="no">
        <type>apr_uint32_t</type>
        <definition>apr_uint32_t apr_memnode_t::index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="57" column="1" bodyfile="include/apr_allocator.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structapr__memnode__t_1af63769f30f6eb9d72e4b24050bd7a9d9" prot="public" static="no" mutable="no">
        <type>apr_uint32_t</type>
        <definition>apr_uint32_t apr_memnode_t::free_index</definition>
        <argsstring></argsstring>
        <name>free_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>how much free </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="58" column="1" bodyfile="include/apr_allocator.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structapr__memnode__t_1a863e7980225e46678881271c4c803e4c" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* apr_memnode_t::first_avail</definition>
        <argsstring></argsstring>
        <name>first_avail</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pointer to first free memory </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="59" column="1" bodyfile="include/apr_allocator.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structapr__memnode__t_1a35c9bf71f1cc680929f857176b547a05" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* apr_memnode_t::endp</definition>
        <argsstring></argsstring>
        <name>endp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pointer to end of free memory </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_allocator.h" line="60" column="1" bodyfile="include/apr_allocator.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>basic memory node structure <simplesect kind="note"><para>The next, ref and first_avail fields are available for use by the caller of <ref refid="group__apr__allocator_1ga7452b0837c2148bd63109f89bbc0c3db" kindref="member">apr_allocator_alloc()</ref>, the remaining fields are read-only. The next field has to be used with caution and sensibly set when the memnode is passed back to <ref refid="group__apr__allocator_1ga124e48339838213fd5e160a4125cb7e8" kindref="member">apr_allocator_free()</ref>. See <ref refid="group__apr__allocator_1ga124e48339838213fd5e160a4125cb7e8" kindref="member">apr_allocator_free()</ref> for details. The ref and first_avail fields will be properly restored by <ref refid="group__apr__allocator_1ga124e48339838213fd5e160a4125cb7e8" kindref="member">apr_allocator_free()</ref>. </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="17">
        <label>apr_memnode_t</label>
        <link refid="structapr__memnode__t"/>
        <childnode refid="17" relation="usage">
          <edgelabel>next</edgelabel>
          <edgelabel>ref</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/apr_allocator.h" line="54" column="1" bodyfile="include/apr_allocator.h" bodystart="54" bodyend="61"/>
    <listofallmembers>
      <member refid="structapr__memnode__t_1a35c9bf71f1cc680929f857176b547a05" prot="public" virt="non-virtual"><scope>apr_memnode_t</scope><name>endp</name></member>
      <member refid="structapr__memnode__t_1a863e7980225e46678881271c4c803e4c" prot="public" virt="non-virtual"><scope>apr_memnode_t</scope><name>first_avail</name></member>
      <member refid="structapr__memnode__t_1af63769f30f6eb9d72e4b24050bd7a9d9" prot="public" virt="non-virtual"><scope>apr_memnode_t</scope><name>free_index</name></member>
      <member refid="structapr__memnode__t_1a6188325f9e1cbcafcb0a65b7e41881a1" prot="public" virt="non-virtual"><scope>apr_memnode_t</scope><name>index</name></member>
      <member refid="structapr__memnode__t_1a07dd84ca152164d6bc283dbce99f8f78" prot="public" virt="non-virtual"><scope>apr_memnode_t</scope><name>next</name></member>
      <member refid="structapr__memnode__t_1ac68a939c0c3d48498ec0c0fde409c502" prot="public" virt="non-virtual"><scope>apr_memnode_t</scope><name>ref</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
