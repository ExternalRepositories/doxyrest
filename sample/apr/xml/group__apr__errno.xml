<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__errno" kind="group">
    <compoundname>apr_errno</compoundname>
    <title>Error Codes</title>
    <innergroup refid="group___a_p_r___e_r_r_o_r__map">APR Error Space</innergroup>
    <innergroup refid="group___a_p_r___error">APR Error Values</innergroup>
    <innergroup refid="group___a_p_r___s_t_a_t_u_s___i_s">Status Value Tests</innergroup>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" prot="public" static="no">
        <type>int</type>
        <definition>typedef int apr_status_t</definition>
        <argsstring></argsstring>
        <name>apr_status_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type for specifying an error or status code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="44" column="1" bodyfile="include/apr_errno.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__errno_1gaf2edf92be162ab8fb1bbc6f22856a131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_strerror</definition>
        <argsstring>(apr_status_t statcode, char *buf, apr_size_t bufsize)</argsstring>
        <name>apr_strerror</name>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
          <declname>statcode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a human readable string describing the specified error. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code to get a string for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to hold the error string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer to hold the string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="52" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__apr__errno_1ga2096daff578ef301e060b80c7a4525bf" prot="public" static="no">
        <name>APR_FROM_OS_ERROR</name>
        <param><defname>e</defname></param>
        <initializer>(e == 0 ? <ref refid="group__apr__errno_1ga9ee311b7bf1c691dc521d721339ee2a6" kindref="member">APR_SUCCESS</ref> : e + <ref refid="group__apr__errno_1gad70a5cad6862a9abcc254d35e827ac8b" kindref="member">APR_OS_START_SYSERR</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fold a platform specific error into an apr_status_t code. <simplesect kind="return"><para>apr_status_t </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform os error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>macro implementation; the syserr argument may be evaluated multiple times. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="64" column="9" bodyfile="include/apr_errno.h" bodystart="1192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga2096daff578ef301e060b80c7a4525bf" prot="public" static="no">
        <name>APR_FROM_OS_ERROR</name>
        <param><defname>e</defname></param>
        <initializer>(e)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fold a platform specific error into an apr_status_t code. <simplesect kind="return"><para>apr_status_t </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform os error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>macro implementation; the syserr argument may be evaluated multiple times. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="1192" column="9" bodyfile="include/apr_errno.h" bodystart="1192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga2385cae04b04afbdcb65f1a45c4d8506" prot="public" static="no">
        <name>APR_TO_OS_ERROR</name>
        <param><defname>e</defname></param>
        <initializer>(e == 0 ? <ref refid="group__apr__errno_1ga9ee311b7bf1c691dc521d721339ee2a6" kindref="member">APR_SUCCESS</ref> : e - <ref refid="group__apr__errno_1gad70a5cad6862a9abcc254d35e827ac8b" kindref="member">APR_OS_START_SYSERR</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>os_err_type Fold an apr_status_t code back to the native platform defined error. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr_status_t folded platform os error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>macro implementation; the statcode argument may be evaluated multiple times. If the statcode was not created by apr_get_os_error or APR_FROM_OS_ERROR, the results are undefined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="75" column="9" bodyfile="include/apr_errno.h" bodystart="1193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga2385cae04b04afbdcb65f1a45c4d8506" prot="public" static="no">
        <name>APR_TO_OS_ERROR</name>
        <param><defname>e</defname></param>
        <initializer>(e)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>os_err_type Fold an apr_status_t code back to the native platform defined error. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr_status_t folded platform os error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>macro implementation; the statcode argument may be evaluated multiple times. If the statcode was not created by apr_get_os_error or APR_FROM_OS_ERROR, the results are undefined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="1193" column="9" bodyfile="include/apr_errno.h" bodystart="1193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1gaa76e122da00af0ce2e8c8d7ff538bdfa" prot="public" static="no">
        <name>apr_get_os_error</name>
        <param></param>
        <initializer>(errno)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>apr_status_t the last platform error, folded into apr_status_t, on most platforms </para></simplesect>
<simplesect kind="remark"><para>This retrieves errno, or calls a GetLastError() style function, and folds it with APR_FROM_OS_ERROR. Some platforms (such as OS2) have no such mechanism, so this call may be unsupported. Do NOT use this call for socket errors from socket, send, recv etc! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="1195" column="9" bodyfile="include/apr_errno.h" bodystart="1195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga9a2d9a03ad314b03a142574be6d7d8a7" prot="public" static="no">
        <name>apr_set_os_error</name>
        <param><defname>e</defname></param>
        <initializer>(errno = (e))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the last platform error, unfolded from an apr_status_t, on some platforms <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The OS error folded in a prior call to <ref refid="group__apr__errno_1ga2096daff578ef301e060b80c7a4525bf" kindref="member">APR_FROM_OS_ERROR()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This is a macro implementation; the statcode argument may be evaluated multiple times. If the statcode was not created by apr_get_os_error or APR_FROM_OS_ERROR, the results are undefined. This macro sets errno, or calls a SetLastError() style function, unfolding statcode with APR_TO_OS_ERROR. Some platforms (such as OS2) have no such mechanism, so this call may be unsupported. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="1196" column="9" bodyfile="include/apr_errno.h" bodystart="1196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga66e54f155b4a80ac7df9118af9bd896a" prot="public" static="no">
        <name>apr_get_netos_error</name>
        <param></param>
        <initializer>(errno)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the last socket error, folded into apr_status_t, on all platforms <simplesect kind="remark"><para>This retrieves errno or calls a GetLastSocketError() style function, and folds it with APR_FROM_OS_ERROR. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="1200" column="9" bodyfile="include/apr_errno.h" bodystart="1200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1gaafc38481621653ece6f592f9c5a9a09b" prot="public" static="no">
        <name>apr_set_netos_error</name>
        <param><defname>e</defname></param>
        <initializer>(errno = (e))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the last socket error, unfolded from an apr_status_t <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket error folded in a prior call to <ref refid="group__apr__errno_1ga2096daff578ef301e060b80c7a4525bf" kindref="member">APR_FROM_OS_ERROR()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This is a macro implementation; the statcode argument may be evaluated multiple times. If the statcode was not created by apr_get_os_error or APR_FROM_OS_ERROR, the results are undefined. This macro sets errno, or calls a WSASetLastError() style function, unfolding socketcode with APR_TO_OS_ERROR. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="1201" column="9" bodyfile="include/apr_errno.h" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga191894048b7bd0cca3cf0bdff1eb695b" prot="public" static="no">
        <name>APR_OS_START_ERROR</name>
        <initializer>20000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_OS_START_ERROR is where the APR specific error values start. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="117" column="9" bodyfile="include/apr_errno.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1gadb8d97e6836ccdc57b43b6119a5acccf" prot="public" static="no">
        <name>APR_OS_ERRSPACE_SIZE</name>
        <initializer>50000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_OS_ERRSPACE_SIZE is the maximum number of errors you can fit into one of the error/status ranges below <ndash/> except for APR_OS_START_USERERR, which see. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="123" column="9" bodyfile="include/apr_errno.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1gaef5e79630739f24d1512d0d044c2bae7" prot="public" static="no">
        <name>APR_UTIL_ERRSPACE_SIZE</name>
        <initializer>20000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_UTIL_ERRSPACE_SIZE is the size of the space that is reserved for use within apr-util. This space is reserved above that used by APR internally. <simplesect kind="note"><para>This number MUST be smaller than APR_OS_ERRSPACE_SIZE by a large enough amount that APR has sufficient room for its codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="132" column="9" bodyfile="include/apr_errno.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga450e1a5734732e092ddaa5b67414f69b" prot="public" static="no">
        <name>APR_OS_START_STATUS</name>
        <initializer>(<ref refid="group__apr__errno_1ga191894048b7bd0cca3cf0bdff1eb695b" kindref="member">APR_OS_START_ERROR</ref> + <ref refid="group__apr__errno_1gadb8d97e6836ccdc57b43b6119a5acccf" kindref="member">APR_OS_ERRSPACE_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_OS_START_STATUS is where the APR specific status codes start. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="136" column="9" bodyfile="include/apr_errno.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1gadf26297a72afa0ea224e7097fe59a1cd" prot="public" static="no">
        <name>APR_UTIL_START_STATUS</name>
        <initializer>(<ref refid="group__apr__errno_1ga450e1a5734732e092ddaa5b67414f69b" kindref="member">APR_OS_START_STATUS</ref> + \
                           (<ref refid="group__apr__errno_1gadb8d97e6836ccdc57b43b6119a5acccf" kindref="member">APR_OS_ERRSPACE_SIZE</ref> - <ref refid="group__apr__errno_1gaef5e79630739f24d1512d0d044c2bae7" kindref="member">APR_UTIL_ERRSPACE_SIZE</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_UTIL_START_STATUS is where APR-Util starts defining its status codes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="141" column="9" bodyfile="include/apr_errno.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1gacd35b2de1e38a1fa4717e38d5e153571" prot="public" static="no">
        <name>APR_OS_START_USERERR</name>
        <initializer>(<ref refid="group__apr__errno_1ga450e1a5734732e092ddaa5b67414f69b" kindref="member">APR_OS_START_STATUS</ref> + <ref refid="group__apr__errno_1gadb8d97e6836ccdc57b43b6119a5acccf" kindref="member">APR_OS_ERRSPACE_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_OS_START_USERERR are reserved for applications that use APR that layer their own error codes along with APR&apos;s. Note that the error immediately following this one is set ten times farther away than usual, so that users of apr have a lot of room in which to declare custom error codes.</para><para>In general applications should try and create unique error codes. To try and assist in finding suitable ranges of numbers to use, the following ranges are known to be used by the listed applications. If your application defines error codes please advise the range of numbers it uses to <ulink url="mailto:dev@apr.apache.org">dev@apr.apache.org</ulink> for inclusion in this list.</para><para>Ranges shown are in relation to APR_OS_START_USERERR</para><para>Subversion - Defined ranges, of less than 100, at intervals of 5000 starting at an offset of 5000, e.g. +5000 to 5100, +10000 to 10100</para><para>Apache HTTPD - +2000 to 2999 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="164" column="9" bodyfile="include/apr_errno.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga803b8badf8695bdfa4fbcf4d330371f0" prot="public" static="no">
        <name>APR_OS_START_USEERR</name>
        <initializer><ref refid="group__apr__errno_1gacd35b2de1e38a1fa4717e38d5e153571" kindref="member">APR_OS_START_USERERR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_OS_START_USEERR is obsolete, defined for compatibility only. Use APR_OS_START_USERERR instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="169" column="9" bodyfile="include/apr_errno.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga7bca957c11b80b31cb54b0d2cbe9e025" prot="public" static="no">
        <name>APR_OS_START_CANONERR</name>
        <initializer>(<ref refid="group__apr__errno_1gacd35b2de1e38a1fa4717e38d5e153571" kindref="member">APR_OS_START_USERERR</ref> \
                                 + (<ref refid="group__apr__errno_1gadb8d97e6836ccdc57b43b6119a5acccf" kindref="member">APR_OS_ERRSPACE_SIZE</ref> * 10))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_OS_START_CANONERR is where APR versions of errno values are defined on systems which don&apos;t have the corresponding errno. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="174" column="9" bodyfile="include/apr_errno.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga2d04991cb57c67a896e22125a1f22b49" prot="public" static="no">
        <name>APR_OS_START_EAIERR</name>
        <initializer>(<ref refid="group__apr__errno_1ga7bca957c11b80b31cb54b0d2cbe9e025" kindref="member">APR_OS_START_CANONERR</ref> + <ref refid="group__apr__errno_1gadb8d97e6836ccdc57b43b6119a5acccf" kindref="member">APR_OS_ERRSPACE_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_OS_START_EAIERR folds EAI_ error codes from getaddrinfo() into apr_status_t values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="180" column="9" bodyfile="include/apr_errno.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1gad70a5cad6862a9abcc254d35e827ac8b" prot="public" static="no">
        <name>APR_OS_START_SYSERR</name>
        <initializer>(<ref refid="group__apr__errno_1ga2d04991cb57c67a896e22125a1f22b49" kindref="member">APR_OS_START_EAIERR</ref> + <ref refid="group__apr__errno_1gadb8d97e6836ccdc57b43b6119a5acccf" kindref="member">APR_OS_ERRSPACE_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>APR_OS_START_SYSERR folds platform-specific system error values into apr_status_t values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="185" column="9" bodyfile="include/apr_errno.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__apr__errno_1ga9ee311b7bf1c691dc521d721339ee2a6" prot="public" static="no">
        <name>APR_SUCCESS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>no error. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_errno.h" line="225" column="9" bodyfile="include/apr_errno.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
