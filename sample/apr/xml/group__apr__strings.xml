<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__strings" kind="group">
    <compoundname>apr_strings</compoundname>
    <title>String routines</title>
    <innergroup refid="group___a_p_r___strings___snprintf">snprintf implementations</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__strings_1gabe7e226c26e1535d787a7836b9c8d0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_strnatcmp</definition>
        <argsstring>(char const *a, char const *b)</argsstring>
        <name>apr_strnatcmp</name>
        <param>
          <type>char const *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Do a natural order comparison of two strings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first string to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second string to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Either &lt;0, 0, or &gt;0. If the first string is less than the second this returns &lt;0, if they are equivalent it returns 0, and if the first string is greater than second string it retuns &gt;0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga1708d51c4989934fec663b23366430f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_strnatcasecmp</definition>
        <argsstring>(char const *a, char const *b)</argsstring>
        <name>apr_strnatcasecmp</name>
        <param>
          <type>char const *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Do a natural order comparison of two strings ignoring the case of the strings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first string to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second string to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Either &lt;0, 0, or &gt;0. If the first string is less than the second this returns &lt;0, if they are equivalent it returns 0, and if the first string is greater than second string it retuns &gt;0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1gabc79e99ff19abbd7cfd18308c5f85d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_pstrdup</definition>
        <argsstring>(apr_pool_t *p, const char *s)</argsstring>
        <name>apr_pstrdup</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>duplicate a string into memory allocated out of a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to duplicate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new string or NULL if s == NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga0eae1185559578c0f9792413305eca25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_pstrmemdup</definition>
        <argsstring>(apr_pool_t *p, const char *s, apr_size_t n)</argsstring>
        <name>apr_pstrmemdup</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a null-terminated string by making a copy of a sequence of characters and appending a null byte <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The block of characters to duplicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to duplicate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new string or NULL if s == NULL </para></simplesect>
<simplesect kind="remark"><para>This is a faster alternative to apr_pstrndup, for use when you know that the string being duplicated really has &apos;n&apos; or more characters. If the string might contain fewer characters, use apr_pstrndup. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1gad17053ffe6604d908ae7cac33543a6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_pstrndup</definition>
        <argsstring>(apr_pool_t *p, const char *s, apr_size_t n)</argsstring>
        <name>apr_pstrndup</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate at most n characters of a string into memory allocated out of a pool; the new string will be NUL-terminated <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to duplicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of characters to duplicate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new string or NULL if s == NULL </para></simplesect>
<simplesect kind="remark"><para>The amount of memory allocated from the pool is the length of the returned string including the NUL terminator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1gac3886f14ecf5aed8fe4493087799685c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* apr_pmemdup</definition>
        <argsstring>(apr_pool_t *p, const void *m, apr_size_t n)</argsstring>
        <name>apr_pmemdup</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate a block of memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory to duplicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to duplicate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new block of memory or NULL if m == NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga7bd80c95ffb7b3f96bc78e7b5b5b0045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_pstrcat</definition>
        <argsstring>(apr_pool_t *p,...)</argsstring>
        <name>apr_pstrcat</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Concatenate multiple strings, allocating memory out a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The strings to concatenate. The final string must be NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga15d0853af252a894e288c682b8f84309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_pstrcatv</definition>
        <argsstring>(apr_pool_t *p, const struct iovec *vec, apr_size_t nvec, apr_size_t *nbytes)</argsstring>
        <name>apr_pstrcatv</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>nvec</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Concatenate multiple strings specified in a writev-style vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The strings to concatenate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvec</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of strings to concatenate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) strlen of new string (pass in NULL to omit) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga05248544edebc71070140d2ce5969c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_pvsprintf</definition>
        <argsstring>(apr_pool_t *p, const char *fmt, va_list ap)</argsstring>
        <name>apr_pvsprintf</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>printf-style style printing routine. The data is output to a string allocated from a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to use while printing the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga3eca76b8d293c5c3f8021e45eda813d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_psprintf</definition>
        <argsstring>(apr_pool_t *p, const char *fmt,...)</argsstring>
        <name>apr_psprintf</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>printf-style style printing routine. The data is output to a string allocated from a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to use while printing the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga69700a825e82dd646f9f166599040431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_cpystrn</definition>
        <argsstring>(char *dst, const char *src, apr_size_t dst_size)</argsstring>
        <name>apr_cpystrn</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>dst_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy up to dst_size characters from src to dst; does not copy past a NUL terminator in src, but always terminates dst with a NUL regardless. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The space available in dst; dst always receives NUL termination, so if src is longer than dst_size, the actual number of characters copied is dst_size - 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the NUL terminator of the destination string, dst </para></simplesect>
<simplesect kind="remark"><para><preformatted>
Note the differences between this function and strncpy():
 1) strncpy() doesn&apos;t always NUL terminate; <ref refid="group__apr__strings_1ga69700a825e82dd646f9f166599040431" kindref="member">apr_cpystrn()</ref> does.
 2) strncpy() pads the destination string with NULs, which is often 
    unnecessary; <ref refid="group__apr__strings_1ga69700a825e82dd646f9f166599040431" kindref="member">apr_cpystrn()</ref> does not.
 3) strncpy() returns a pointer to the beginning of the dst string;
    <ref refid="group__apr__strings_1ga69700a825e82dd646f9f166599040431" kindref="member">apr_cpystrn()</ref> returns a pointer to the NUL terminator of dst, 
    to allow a check for truncation.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1gafd92441a5f4fa3b5f5aa49e1f9884bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_collapse_spaces</definition>
        <argsstring>(char *dest, const char *src)</argsstring>
        <name>apr_collapse_spaces</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all whitespace from a string <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination string. It is okay to modify the string in place. Namely dest == src </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to rid the spaces from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the destination string&apos;s null terminator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga5213cee7e8ba799df9dc2e57f71cd4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_tokenize_to_argv</definition>
        <argsstring>(const char *arg_str, char ***argv_out, apr_pool_t *token_context)</argsstring>
        <name>apr_tokenize_to_argv</name>
        <param>
          <type>const char *</type>
          <declname>arg_str</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>argv_out</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>token_context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert the arguments to a program from one string to an array of strings terminated by a NULL pointer <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output location. This is a pointer to an array of strings. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token_context</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga1cf7fcb5843707ece733e27aad85c516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_strtok</definition>
        <argsstring>(char *str, const char *sep, char **last)</argsstring>
        <name>apr_strtok</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sep</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Split a string into separate null-terminated tokens. The tokens are delimited in the string by one or more characters from the sep argument. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to separate; this should be specified on the first call to <ref refid="group__apr__strings_1ga1cf7fcb5843707ece733e27aad85c516" kindref="member">apr_strtok()</ref> for a given string, and NULL on subsequent calls. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of delimiters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>State saved by <ref refid="group__apr__strings_1ga1cf7fcb5843707ece733e27aad85c516" kindref="member">apr_strtok()</ref> between calls. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next token from the string </para></simplesect>
<simplesect kind="note"><para>the &apos;last&apos; state points to the trailing NUL char of the final token, otherwise it points to the character following the current token (all successive or empty occurances of sep are skiped on the subsequent call to apr_strtok). Therefore it is possible to avoid a strlen() determination, with the following logic; toklen = last - retval; if (*last) <ndash/>toklen; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1gae1c780f2d908a286a141e4b885254a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_itoa</definition>
        <argsstring>(apr_pool_t *p, int n)</argsstring>
        <name>apr_itoa</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a string representation of an int, allocated from a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation of the number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga578ea3fa78957c6b2e9b8ab4cbfd60b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_ltoa</definition>
        <argsstring>(apr_pool_t *p, long n)</argsstring>
        <name>apr_ltoa</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a string representation of a long, allocated from a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation of the number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1gabce9fb74bbad08d795389bfe859053d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_off_t_toa</definition>
        <argsstring>(apr_pool_t *p, apr_off_t n)</argsstring>
        <name>apr_off_t_toa</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>apr_off_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a string representation of an apr_off_t, allocated from a pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool from which to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation of the number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga1583688e0777398174f62e46a522ae8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_strtoff</definition>
        <argsstring>(apr_off_t *offset, const char *buf, char **end, int base)</argsstring>
        <name>apr_strtoff</name>
        <param>
          <type>apr_off_t *</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a numeric string into an apr_off_t numeric value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the parsed string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to parse. It may contain optional whitespace, followed by an optional &apos;+&apos; (positive, default) or &apos;-&apos; (negative) character, followed by an optional &apos;0x&apos; prefix if base is 0 or 16, followed by numeric digits appropriate for base. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the end of the valid character in buf. If not NULL, it is set to the first invalid character in buf. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>A numeric base in the range between 2 and 36 inclusive, or 0. If base is zero, buf will be treated as base ten unless its digits are prefixed with &apos;0x&apos;, in which case it will be treated as base 16. </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="bug_1_bug000005"><xreftitle>Bug</xreftitle><xrefdescription><para>*end breaks type safety; where *buf is const, *end needs to be declared as const in APR 2.0 </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1ga1da34829609e8976f498b235afd6cbe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_int64_t</type>
        <definition>apr_int64_t apr_strtoi64</definition>
        <argsstring>(const char *buf, char **end, int base)</argsstring>
        <name>apr_strtoi64</name>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>parse a numeric string into a 64-bit numeric value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to parse. It may contain optional whitespace, followed by an optional &apos;+&apos; (positive, default) or &apos;-&apos; (negative) character, followed by an optional &apos;0x&apos; prefix if base is 0 or 16, followed by numeric digits appropriate for base. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the end of the valid character in buf. If not NULL, it is set to the first invalid character in buf. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>A numeric base in the range between 2 and 36 inclusive, or 0. If base is zero, buf will be treated as base ten unless its digits are prefixed with &apos;0x&apos;, in which case it will be treated as base 16. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The numeric value of the string. On overflow, errno is set to ERANGE. On success, errno is set to 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1gaf0653577ee64efb5406d932db95cce3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_int64_t</type>
        <definition>apr_int64_t apr_atoi64</definition>
        <argsstring>(const char *buf)</argsstring>
        <name>apr_atoi64</name>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>parse a base-10 numeric string into a 64-bit numeric value. Equivalent to apr_strtoi64(buf, (char**)NULL, 10). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to parse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The numeric value of the string. On overflow, errno is set to ERANGE. On success, errno is set to 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__strings_1gaf66522fda6d2dfa540fdc58831405980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* apr_strfsize</definition>
        <argsstring>(apr_off_t size, char *buf)</argsstring>
        <name>apr_strfsize</name>
        <param>
          <type>apr_off_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Format a binary size (magnitiudes are 2^10 rather than 10^3) from an apr_off_t, as bytes, K, M, T, etc, to a four character compacted human readable string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size to format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The 5 byte text buffer (counting the trailing null) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The buf passed to <ref refid="group__apr__strings_1gaf66522fda6d2dfa540fdc58831405980" kindref="member">apr_strfsize()</ref> </para></simplesect>
<simplesect kind="remark"><para>All negative sizes report &apos; - &apos;, apr_strfsize only formats positive values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_strings.h" line="372" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
