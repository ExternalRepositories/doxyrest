<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__apr__file__io" kind="group">
    <compoundname>apr_file_io</compoundname>
    <title>File I/O Handling Functions</title>
    <innergroup refid="group__apr__file__open__flags">File Open Flags/Routines</innergroup>
    <innergroup refid="group__apr__file__seek__flags">File Seek Flags</innergroup>
    <innergroup refid="group__apr__file__attrs__set__flags">File Attribute Flags</innergroup>
    <innergroup refid="group__apr__file__writev">{_full} max iovec size</innergroup>
    <innergroup refid="group__apr__file__lock__types">File Lock Types</innergroup>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__apr__file__io_1ga11fbee5a7a3f3d45fff5c31df0db9737" prot="public" static="no">
        <type>apr_uint32_t</type>
        <definition>typedef apr_uint32_t apr_fileattrs_t</definition>
        <argsstring></argsstring>
        <name>apr_fileattrs_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>File attributes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="201" column="1" bodyfile="include/apr_file_io.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__file__io_1ga8eecd44975906042e0e369771802a145" prot="public" static="no">
        <type>int</type>
        <definition>typedef int apr_seek_where_t</definition>
        <argsstring></argsstring>
        <name>apr_seek_where_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type to pass as whence argument to apr_file_seek. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="204" column="1" bodyfile="include/apr_file_io.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" prot="public" static="no">
        <type>struct <ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref></type>
        <definition>typedef struct apr_file_t apr_file_t</definition>
        <argsstring></argsstring>
        <name>apr_file_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Structure for referencing files. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="204" column="1" bodyfile="include/apr_file_io.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__apr__file__io_1gabda14cbf242fb4fe99055434213e5446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_open</definition>
        <argsstring>(apr_file_t **newf, const char *fname, apr_int32_t flag, apr_fileperms_t perm, apr_pool_t *pool)</argsstring>
        <name>apr_file_open</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>newf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__info_1ga3af19c4c47007169064a70f9351bc7d8" kindref="member">apr_fileperms_t</ref></type>
          <declname>perm</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newf</parametername>
</parameternamelist>
<parameterdescription>
<para>The opened file descriptor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the file (using / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Or&apos;ed value of: <itemizedlist>
<listitem><para><ref refid="group__apr__file__open__flags_1gaf9e7303f028b130ff7d4b209d6662d7d" kindref="member">APR_FOPEN_READ</ref> open for reading </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gac598bb95fc9476b0bf2ed0b1c308842c" kindref="member">APR_FOPEN_WRITE</ref> open for writing </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gafe94f21ccbf411172e70e7f473af251a" kindref="member">APR_FOPEN_CREATE</ref> create the file if not there </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga45f353db9b71d4760a3f35cf3781cfc8" kindref="member">APR_FOPEN_APPEND</ref> file ptr is set to end prior to all writes </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga09b05a5bd5db534b93794f7657bcb146" kindref="member">APR_FOPEN_TRUNCATE</ref> set length to zero if file exists </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gacb20b3028864f34cb26314fe2cacc3fa" kindref="member">APR_FOPEN_BINARY</ref> not a text file </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gac48fd4c853c9f561632a2e8aaf5d8d97" kindref="member">APR_FOPEN_BUFFERED</ref> buffer the data. Default is non-buffered </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gabb7fb062cdf1d58faee8c7ea518496f1" kindref="member">APR_FOPEN_EXCL</ref> return error if <ref refid="group__apr__file__open__flags_1gafe94f21ccbf411172e70e7f473af251a" kindref="member">APR_FOPEN_CREATE</ref> and file exists </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga5d3756f6d242c667ed1d3f54af4916eb" kindref="member">APR_FOPEN_DELONCLOSE</ref> delete the file after closing </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga435cd9b2604b11796779c23ffa00a3dd" kindref="member">APR_FOPEN_XTHREAD</ref> Platform dependent tag to open the file for use across multiple threads </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga426f6e2a8457ab410d99248269059a18" kindref="member">APR_FOPEN_SHARELOCK</ref> Platform dependent support for higher level locked read/write access to support writes across process/machines </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga3fc9b5a7791d9f462997cd29de67eb80" kindref="member">APR_FOPEN_NOCLEANUP</ref> Do not register a cleanup with the pool passed in on the <emphasis>pool</emphasis> argument (see below) </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga60c21e28e4a612d58a874fe2cc71a6e4" kindref="member">APR_FOPEN_SENDFILE_ENABLED</ref> Open with appropriate platform semantics for sendfile operations. Advisory only, apr_socket_sendfile does not check this flag </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gaf6cfaa4789e6264afd186235f0adbc22" kindref="member">APR_FOPEN_LARGEFILE</ref> Platform dependent flag to enable large file support, see WARNING below </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga0d155e9bb7fbf1a5cd4e84b5ede059f4" kindref="member">APR_FOPEN_SPARSE</ref> Platform dependent flag to enable sparse file support, see WARNING below </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga31e4d14068147e43e1778bcf975dda62" kindref="member">APR_FOPEN_NONBLOCK</ref> Platform dependent flag to enable non blocking file io </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm</parametername>
</parameternamelist>
<parameterdescription>
<para>Access permissions for file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If perm is <ref refid="group__apr__file__permissions_1gad3c65a67ee6eb12ecc6a33857397900b" kindref="member">APR_FPROT_OS_DEFAULT</ref> and the file is being created, appropriate default permissions will be used. </para></simplesect>
<simplesect kind="remark"><para>By default, the returned file descriptor will not be inherited by child processes created by <ref refid="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" kindref="member">apr_proc_create()</ref>. This can be changed using <ref refid="group__apr__file__io_1ga137bee13d2c65fb8afd4b34e400187c7" kindref="member">apr_file_inherit_set()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga5607bce1c4c798ceb6c8475a998a81a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_close</definition>
        <argsstring>(apr_file_t *file)</argsstring>
        <name>apr_file_close</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to close. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga211c40be82f8bf8b8d7dce5afca5500b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_remove</definition>
        <argsstring>(const char *path, apr_pool_t *pool)</argsstring>
        <name>apr_file_remove</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the file (using / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If the file is open, it won&apos;t be removed until all instances are closed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga29b5633bb80226baa5de79a83c6999aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_rename</definition>
        <argsstring>(const char *from_path, const char *to_path, apr_pool_t *pool)</argsstring>
        <name>apr_file_rename</name>
        <param>
          <type>const char *</type>
          <declname>from_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>to_path</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rename the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the original file (using / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the new file (using / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>If a file exists at the new location, then it will be overwritten. Moving files or directories across devices may not be possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gaa7911275c0e97edc064b8167be658f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_link</definition>
        <argsstring>(const char *from_path, const char *to_path)</argsstring>
        <name>apr_file_link</name>
        <param>
          <type>const char *</type>
          <declname>from_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>to_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a hard link to the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the original file (using / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the new file (using / on all systems) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Both files must reside on the same device. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga2b82c441246cc4596795420b0a94a9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_copy</definition>
        <argsstring>(const char *from_path, const char *to_path, apr_fileperms_t perms, apr_pool_t *pool)</argsstring>
        <name>apr_file_copy</name>
        <param>
          <type>const char *</type>
          <declname>from_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>to_path</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__info_1ga3af19c4c47007169064a70f9351bc7d8" kindref="member">apr_fileperms_t</ref></type>
          <declname>perms</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the specified file to another file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the original file (using / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the new file (using / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perms</parametername>
</parameternamelist>
<parameterdescription>
<para>Access permissions for the new file if it is created. In place of the usual or&apos;d combination of file permissions, the value <ref refid="group__apr__file__permissions_1gac08d4e868c7c9532f7c97c70556663dc" kindref="member">APR_FPROT_FILE_SOURCE_PERMS</ref> may be given, in which case the source file&apos;s permissions are copied. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The new file does not need to exist, it will be created if required. </para></simplesect>
<simplesect kind="warning"><para>If the new file already exists, its contents will be overwritten. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga0b9bc41ffa4ac43cbea46b44eace939e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_append</definition>
        <argsstring>(const char *from_path, const char *to_path, apr_fileperms_t perms, apr_pool_t *pool)</argsstring>
        <name>apr_file_append</name>
        <param>
          <type>const char *</type>
          <declname>from_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>to_path</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__info_1ga3af19c4c47007169064a70f9351bc7d8" kindref="member">apr_fileperms_t</ref></type>
          <declname>perms</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append the specified file to another file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the source file (use / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the destination file (use / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perms</parametername>
</parameternamelist>
<parameterdescription>
<para>Access permissions for the destination file if it is created. In place of the usual or&apos;d combination of file permissions, the value <ref refid="group__apr__file__permissions_1gac08d4e868c7c9532f7c97c70556663dc" kindref="member">APR_FPROT_FILE_SOURCE_PERMS</ref> may be given, in which case the source file&apos;s permissions are copied. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The new file does not need to exist, it will be created if required. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga8efaff2f556b250fee1021541b782ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_eof</definition>
        <argsstring>(apr_file_t *fptr)</argsstring>
        <name>apr_file_eof</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>fptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Are we at the end of the file <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr file we are testing. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Returns <ref refid="group___a_p_r___error_1ga35d9dca2514c522a2840aca0f3e2ebd3" kindref="member">APR_EOF</ref> if we are at the end of file, <ref refid="group__apr__errno_1ga9ee311b7bf1c691dc521d721339ee2a6" kindref="member">APR_SUCCESS</ref> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gaf426d98943319acced2c9b52757f377f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_open_stderr</definition>
        <argsstring>(apr_file_t **thefile, apr_pool_t *pool)</argsstring>
        <name>apr_file_open_stderr</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open standard error as an apr file pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr file to use as stderr. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the file out of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The only reason that the apr_file_open_std* functions exist is that you may not always have a stderr/out/in on Windows. This is generally a problem with newer versions of Windows and services.</para></simplesect>
<simplesect kind="remark"><para>The other problem is that the C library functions generally work differently on Windows and Unix. So, by using apr_file_open_std* functions, you can get a handle to an APR struct that works with the APR functions which are supposed to work identically on all platforms. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga0d36922c0944ff9675cc820e68d56199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_open_stdout</definition>
        <argsstring>(apr_file_t **thefile, apr_pool_t *pool)</argsstring>
        <name>apr_file_open_stdout</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>open standard output as an apr file pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr file to use as stdout. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the file out of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>See remarks for <ref refid="group__apr__file__io_1gaf426d98943319acced2c9b52757f377f" kindref="member">apr_file_open_stderr()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga539454470148f9b22a31f85936a5f8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_open_stdin</definition>
        <argsstring>(apr_file_t **thefile, apr_pool_t *pool)</argsstring>
        <name>apr_file_open_stdin</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>open standard input as an apr file pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr file to use as stdin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the file out of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>See remarks for <ref refid="group__apr__file__io_1gaf426d98943319acced2c9b52757f377f" kindref="member">apr_file_open_stderr()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga6e87d695994e236dae3d428ed68886bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_open_flags_stderr</definition>
        <argsstring>(apr_file_t **thefile, apr_int32_t flags, apr_pool_t *pool)</argsstring>
        <name>apr_file_open_flags_stderr</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>open standard error as an apr file pointer, with flags. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr file to use as stderr. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to open the file with. Only the <itemizedlist>
<listitem><para><ref refid="group__apr__file__open__flags_1gabb7fb062cdf1d58faee8c7ea518496f1" kindref="member">APR_FOPEN_EXCL</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gac48fd4c853c9f561632a2e8aaf5d8d97" kindref="member">APR_FOPEN_BUFFERED</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga435cd9b2604b11796779c23ffa00a3dd" kindref="member">APR_FOPEN_XTHREAD</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga426f6e2a8457ab410d99248269059a18" kindref="member">APR_FOPEN_SHARELOCK</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga60c21e28e4a612d58a874fe2cc71a6e4" kindref="member">APR_FOPEN_SENDFILE_ENABLED</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gaf6cfaa4789e6264afd186235f0adbc22" kindref="member">APR_FOPEN_LARGEFILE</ref></para></listitem>
</itemizedlist>
flags should be used. The <ref refid="group__apr__file__open__flags_1gac598bb95fc9476b0bf2ed0b1c308842c" kindref="member">APR_FOPEN_WRITE</ref> flag will be set unconditionally. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the file out of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>See remarks for <ref refid="group__apr__file__io_1gaf426d98943319acced2c9b52757f377f" kindref="member">apr_file_open_stderr()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gaeda353505bc1dc46db93b0a80d0b1c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_open_flags_stdout</definition>
        <argsstring>(apr_file_t **thefile, apr_int32_t flags, apr_pool_t *pool)</argsstring>
        <name>apr_file_open_flags_stdout</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>open standard output as an apr file pointer, with flags. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr file to use as stdout. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to open the file with. Only the <itemizedlist>
<listitem><para><ref refid="group__apr__file__open__flags_1gabb7fb062cdf1d58faee8c7ea518496f1" kindref="member">APR_FOPEN_EXCL</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gac48fd4c853c9f561632a2e8aaf5d8d97" kindref="member">APR_FOPEN_BUFFERED</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga435cd9b2604b11796779c23ffa00a3dd" kindref="member">APR_FOPEN_XTHREAD</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga426f6e2a8457ab410d99248269059a18" kindref="member">APR_FOPEN_SHARELOCK</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga60c21e28e4a612d58a874fe2cc71a6e4" kindref="member">APR_FOPEN_SENDFILE_ENABLED</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gaf6cfaa4789e6264afd186235f0adbc22" kindref="member">APR_FOPEN_LARGEFILE</ref></para></listitem>
</itemizedlist>
flags should be used. The <ref refid="group__apr__file__open__flags_1gac598bb95fc9476b0bf2ed0b1c308842c" kindref="member">APR_FOPEN_WRITE</ref> flag will be set unconditionally. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the file out of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>See remarks for <ref refid="group__apr__file__io_1gaf426d98943319acced2c9b52757f377f" kindref="member">apr_file_open_stderr()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga3bde3e61454b5604077f297b1d1671c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_open_flags_stdin</definition>
        <argsstring>(apr_file_t **thefile, apr_int32_t flags, apr_pool_t *pool)</argsstring>
        <name>apr_file_open_flags_stdin</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>open standard input as an apr file pointer, with flags. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr file to use as stdin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to open the file with. Only the <itemizedlist>
<listitem><para><ref refid="group__apr__file__open__flags_1gabb7fb062cdf1d58faee8c7ea518496f1" kindref="member">APR_FOPEN_EXCL</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gac48fd4c853c9f561632a2e8aaf5d8d97" kindref="member">APR_FOPEN_BUFFERED</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga435cd9b2604b11796779c23ffa00a3dd" kindref="member">APR_FOPEN_XTHREAD</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga426f6e2a8457ab410d99248269059a18" kindref="member">APR_FOPEN_SHARELOCK</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1ga60c21e28e4a612d58a874fe2cc71a6e4" kindref="member">APR_FOPEN_SENDFILE_ENABLED</ref> </para></listitem>
<listitem><para><ref refid="group__apr__file__open__flags_1gaf6cfaa4789e6264afd186235f0adbc22" kindref="member">APR_FOPEN_LARGEFILE</ref></para></listitem>
</itemizedlist>
flags should be used. The <ref refid="group__apr__file__open__flags_1gac598bb95fc9476b0bf2ed0b1c308842c" kindref="member">APR_FOPEN_WRITE</ref> flag will be set unconditionally. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the file out of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>See remarks for <ref refid="group__apr__file__io_1gaf426d98943319acced2c9b52757f377f" kindref="member">apr_file_open_stderr()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gadd067ee0050dff0c03a9420c9d424466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_read</definition>
        <argsstring>(apr_file_t *thefile, void *buf, apr_size_t *nbytes)</argsstring>
        <name>apr_file_read</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data from the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to read from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to store the data to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, the number of bytes to read; on exit, the number of bytes read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><ref refid="group__apr__file__io_1gadd067ee0050dff0c03a9420c9d424466" kindref="member">apr_file_read()</ref> will read up to the specified number of bytes, but never more. If there isn&apos;t enough data to fill that number of bytes, all of the available data is read. The third argument is modified to reflect the number of bytes read. If a char was put back into the stream via ungetc, it will be the first character returned.</para></simplesect>
<simplesect kind="remark"><para>It is not possible for both bytes to be read and an <ref refid="group___a_p_r___error_1ga35d9dca2514c522a2840aca0f3e2ebd3" kindref="member">APR_EOF</ref> or other error to be returned. <ref refid="group___a_p_r___error_1gaee1ce306c0ebf1701b34172310aa1bd5" kindref="member">APR_EINTR</ref> is never returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga2e4baa94102c363fdca3c850375d3584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_write</definition>
        <argsstring>(apr_file_t *thefile, const void *buf, apr_size_t *nbytes)</argsstring>
        <name>apr_file_write</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write data to the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer which contains the data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, the number of bytes to write; on exit, the number of bytes written.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><ref refid="group__apr__file__io_1ga2e4baa94102c363fdca3c850375d3584" kindref="member">apr_file_write()</ref> will write up to the specified number of bytes, but never more. If the OS cannot write that many bytes, it will write as many as it can. The third argument is modified to reflect the * number of bytes written.</para></simplesect>
<simplesect kind="remark"><para>It is possible for both bytes to be written and an error to be returned. <ref refid="group___a_p_r___error_1gaee1ce306c0ebf1701b34172310aa1bd5" kindref="member">APR_EINTR</ref> is never returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gacc7924dd7af1c2948b5b2ea6e5f77984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_writev</definition>
        <argsstring>(apr_file_t *thefile, const struct iovec *vec, apr_size_t nvec, apr_size_t *nbytes)</argsstring>
        <name>apr_file_writev</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>nvec</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write data from iovec array to the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The array from which to get the data to write to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvec</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the struct iovec array. This must be smaller than <ref refid="group__apr__file__writev_1gae04a4721139b2b252ea20e68883da4b4" kindref="member">APR_MAX_IOVEC_SIZE</ref>. If it isn&apos;t, the function will fail with <ref refid="group___a_p_r___error_1gae3ffc41994444e71ce522c036ca1d9a4" kindref="member">APR_EINVAL</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes written.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>It is possible for both bytes to be written and an error to be returned. <ref refid="group___a_p_r___error_1gaee1ce306c0ebf1701b34172310aa1bd5" kindref="member">APR_EINTR</ref> is never returned.</para></simplesect>
<simplesect kind="remark"><para><ref refid="group__apr__file__io_1gacc7924dd7af1c2948b5b2ea6e5f77984" kindref="member">apr_file_writev()</ref> is available even if the underlying operating system doesn&apos;t provide writev(). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gaf39a17404e868808aff8e2e7ecaa87e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_read_full</definition>
        <argsstring>(apr_file_t *thefile, void *buf, apr_size_t nbytes, apr_size_t *bytes_read)</argsstring>
        <name>apr_file_read_full</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>bytes_read</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data from the specified file, ensuring that the buffer is filled before returning. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to read from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to store the data to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes_read</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, this will contain the number of bytes read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><ref refid="group__apr__file__io_1gaf39a17404e868808aff8e2e7ecaa87e0" kindref="member">apr_file_read_full()</ref> will read up to the specified number of bytes, but never more. If there isn&apos;t enough data to fill that number of bytes, then the process/thread will block until it is available or EOF is reached. If a char was put back into the stream via ungetc, it will be the first character returned.</para></simplesect>
<simplesect kind="remark"><para>It is possible for both bytes to be read and an error to be returned. And if *bytes_read is less than nbytes, an accompanying error is <emphasis>always</emphasis> returned.</para></simplesect>
<simplesect kind="remark"><para><ref refid="group___a_p_r___error_1gaee1ce306c0ebf1701b34172310aa1bd5" kindref="member">APR_EINTR</ref> is never returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga560d5c062d65e64c07d906d1207337d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_write_full</definition>
        <argsstring>(apr_file_t *thefile, const void *buf, apr_size_t nbytes, apr_size_t *bytes_written)</argsstring>
        <name>apr_file_write_full</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>bytes_written</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write data to the specified file, ensuring that all of the data is written before returning. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer which contains the data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes_written</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, set to the number of bytes written.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><ref refid="group__apr__file__io_1ga560d5c062d65e64c07d906d1207337d4" kindref="member">apr_file_write_full()</ref> will write up to the specified number of bytes, but never more. If the OS cannot write that many bytes, the process/thread will block until they can be written. Exceptional error such as &quot;out of space&quot; or &quot;pipe closed&quot; will terminate with an error.</para></simplesect>
<simplesect kind="remark"><para>It is possible for both bytes to be written and an error to be returned. And if *bytes_written is less than nbytes, an accompanying error is <emphasis>always</emphasis> returned.</para></simplesect>
<simplesect kind="remark"><para><ref refid="group___a_p_r___error_1gaee1ce306c0ebf1701b34172310aa1bd5" kindref="member">APR_EINTR</ref> is never returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga24457e11f0db908b21b7e1742db4ed7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_writev_full</definition>
        <argsstring>(apr_file_t *thefile, const struct iovec *vec, apr_size_t nvec, apr_size_t *nbytes)</argsstring>
        <name>apr_file_writev_full</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>nvec</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write data from iovec array to the specified file, ensuring that all of the data is written before returning. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The array from which to get the data to write to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvec</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the struct iovec array. This must be smaller than <ref refid="group__apr__file__writev_1gae04a4721139b2b252ea20e68883da4b4" kindref="member">APR_MAX_IOVEC_SIZE</ref>. If it isn&apos;t, the function will fail with <ref refid="group___a_p_r___error_1gae3ffc41994444e71ce522c036ca1d9a4" kindref="member">APR_EINVAL</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes written.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><ref refid="group__apr__file__io_1ga24457e11f0db908b21b7e1742db4ed7b" kindref="member">apr_file_writev_full()</ref> is available even if the underlying operating system doesn&apos;t provide writev(). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga33e51b53194e7c0dac513ca27ca18e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_putc</definition>
        <argsstring>(char ch, apr_file_t *thefile)</argsstring>
        <name>apr_file_putc</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a character into the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to write to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga852b9c77d4223af15d8d3674a0e2714d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_getc</definition>
        <argsstring>(char *ch, apr_file_t *thefile)</argsstring>
        <name>apr_file_getc</name>
        <param>
          <type>char *</type>
          <declname>ch</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a character from the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to read into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to read from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga9d06778e719d596ab96bca812b01cb3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_ungetc</definition>
        <argsstring>(char ch, apr_file_t *thefile)</argsstring>
        <name>apr_file_ungetc</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Put a character back onto a specified stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to write to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gaf9513b769c10b09e5f37d6d0b86bdce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_gets</definition>
        <argsstring>(char *str, int len, apr_file_t *thefile)</argsstring>
        <name>apr_file_gets</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a line from the specified file <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to store the string in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to read from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The buffer will be NUL-terminated if any characters are stored. The newline at the end of the line will not be stripped. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gacde81145cc38660a1512d469886ddb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_puts</definition>
        <argsstring>(const char *str, apr_file_t *thefile)</argsstring>
        <name>apr_file_puts</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the string into the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to write to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga68aba780b7fc53e47404bfd8def949bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_flush</definition>
        <argsstring>(apr_file_t *thefile)</argsstring>
        <name>apr_file_flush</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flush the file&apos;s buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to flush </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="629" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga4385e141c4bbb96294acd7d342f138da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_sync</definition>
        <argsstring>(apr_file_t *thefile)</argsstring>
        <name>apr_file_sync</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transfer all file modified data and metadata to disk. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to sync </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gaa4b4e5027c1d8dbe4e5cb47b8eebc03b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_datasync</definition>
        <argsstring>(apr_file_t *thefile)</argsstring>
        <name>apr_file_datasync</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transfer all file modified data to disk. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to sync </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="641" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga6e849af1b0fd31669c58a803fcb13837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_dup</definition>
        <argsstring>(apr_file_t **new_file, apr_file_t *old_file, apr_pool_t *p)</argsstring>
        <name>apr_file_dup</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>new_file</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>old_file</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate the specified file descriptor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_file</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure to duplicate into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to duplicate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use for the new file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>*new_file must point to a valid apr_file_t, or point to NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga602926aad867088297e8f59490ff939c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_dup2</definition>
        <argsstring>(apr_file_t *new_file, apr_file_t *old_file, apr_pool_t *p)</argsstring>
        <name>apr_file_dup2</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>new_file</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>old_file</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate the specified file descriptor and close the original <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_file</parametername>
</parameternamelist>
<parameterdescription>
<para>The old file that is to be closed and reused </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to duplicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use for the new file</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>new_file MUST point at a valid apr_file_t. It cannot be NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gadaf046ce39aa118dab921a407446355b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_setaside</definition>
        <argsstring>(apr_file_t **new_file, apr_file_t *old_file, apr_pool_t *p)</argsstring>
        <name>apr_file_setaside</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>new_file</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>old_file</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move the specified file descriptor to a new pool <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer in which to return the new apr_file_t </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to move </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to which the descriptor is to be moved </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Unlike <ref refid="group__apr__file__io_1ga602926aad867088297e8f59490ff939c" kindref="member">apr_file_dup2()</ref>, this function doesn&apos;t do an OS dup() operation on the underlying descriptor; it just moves the descriptor&apos;s apr_file_t wrapper to a new pool. </para></simplesect>
<simplesect kind="remark"><para>The new pool need not be an ancestor of old_file&apos;s pool. </para></simplesect>
<simplesect kind="remark"><para>After calling this function, old_file may not be used </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gafe4be8c3b62c42535b84d4237bf6e421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_buffer_set</definition>
        <argsstring>(apr_file_t *thefile, char *buffer, apr_size_t bufsize)</argsstring>
        <name>apr_file_buffer_set</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Give the specified apr file handle a new buffer <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file handle that is to be modified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>It is possible to add a buffer to previously unbuffered file handles, the <ref refid="group__apr__file__open__flags_1gac48fd4c853c9f561632a2e8aaf5d8d97" kindref="member">APR_FOPEN_BUFFERED</ref> flag will be added to the file handle&apos;s flags. Likewise, with buffer=NULL and bufsize=0 arguments it is possible to make a previously buffered file handle unbuffered. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga42bbb9227095686ea15eb79f99d248a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_size_t</type>
        <definition>apr_size_t apr_file_buffer_size_get</definition>
        <argsstring>(apr_file_t *thefile)</argsstring>
        <name>apr_file_buffer_size_get</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the size of any buffer for the specified apr file handle <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="700" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga9db84bec24db97a53890df1a6aff63a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_seek</definition>
        <argsstring>(apr_file_t *thefile, apr_seek_where_t where, apr_off_t *offset)</argsstring>
        <name>apr_file_seek</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1ga8eecd44975906042e0e369771802a145" kindref="member">apr_seek_where_t</ref></type>
          <declname>where</declname>
        </param>
        <param>
          <type>apr_off_t *</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move the read/write file offset to a specified byte within a file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>How to move the pointer, one of: <itemizedlist>
<listitem><para><ref refid="group__apr__file__seek__flags_1ga2fdf78845c897f69451d49e1e2b90ac9" kindref="member">APR_SET</ref> <ndash/> set the offset to offset </para></listitem>
<listitem><para><ref refid="group__apr__file__seek__flags_1gae17abc53fea00bfd51e184017113e250" kindref="member">APR_CUR</ref> <ndash/> add the offset to the current position </para></listitem>
<listitem><para><ref refid="group__apr__file__seek__flags_1ga438f3568be799d1e4bbd19492ca47d22" kindref="member">APR_END</ref> <ndash/> add the offset to the current file size </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset to move the pointer to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The third argument is modified to be the offset the pointer was actually moved to. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="713" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gaae3b81342d239c58c351cf11190740ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_pipe_create</definition>
        <argsstring>(apr_file_t **in, apr_file_t **out, apr_pool_t *pool)</argsstring>
        <name>apr_file_pipe_create</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an anonymous pipe. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>The newly created pipe&apos;s file for reading. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The newly created pipe&apos;s file for writing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to operate on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>By default, the returned file descriptors will be inherited by child processes created using <ref refid="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" kindref="member">apr_proc_create()</ref>. This can be changed using <ref refid="group__apr__file__io_1ga69fa72a6f77b96572248c2a6a347c02a" kindref="member">apr_file_inherit_unset()</ref>. </para></simplesect>
<xrefsect id="bug_1_bug000003"><xreftitle>Bug</xreftitle><xrefdescription><para>Some platforms cannot toggle between blocking and nonblocking, and when passing a pipe as a standard handle to an application which does not expect it, a non-blocking stream will fluxor the client app. </para></xrefdescription></xrefsect><xrefsect id="deprecated_1_deprecated000031"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect><simplesect kind="see"><para><ref refid="group__apr__file__io_1ga2fbbae715bee0e0ca9adadd66ac65e96" kindref="member">apr_file_pipe_create_ex()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga2fbbae715bee0e0ca9adadd66ac65e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_pipe_create_ex</definition>
        <argsstring>(apr_file_t **in, apr_file_t **out, apr_int32_t blocking, apr_pool_t *pool)</argsstring>
        <name>apr_file_pipe_create_ex</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>blocking</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an anonymous pipe which portably supports async timeout options. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>The newly created pipe&apos;s file for reading. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The newly created pipe&apos;s file for writing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>one of these values defined in <ref refid="apr__thread__proc_8h" kindref="compound">apr_thread_proc.h</ref>; <itemizedlist>
<listitem><para><ref refid="group__apr__thread__proc_1ga646af57314e71f4647243f36dd03e5ea" kindref="member">APR_FULL_BLOCK</ref> </para></listitem>
<listitem><para><ref refid="group__apr__thread__proc_1gaf8295548cb0821ee02249d6de8336bcb" kindref="member">APR_READ_BLOCK</ref> </para></listitem>
<listitem><para><ref refid="group__apr__thread__proc_1ga36ff2de9664ad6995bd488b4ac715c9c" kindref="member">APR_WRITE_BLOCK</ref> </para></listitem>
<listitem><para><ref refid="group__apr__thread__proc_1gae0707f76da785490830fc3491093767c" kindref="member">APR_FULL_NONBLOCK</ref> </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to operate on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>By default, the returned file descriptors will be inherited by child processes created using <ref refid="group__apr__thread__proc_1gab51dd90b98d365a969f0ec5c7bef4e14" kindref="member">apr_proc_create()</ref>. This can be changed using <ref refid="group__apr__file__io_1ga69fa72a6f77b96572248c2a6a347c02a" kindref="member">apr_file_inherit_unset()</ref>. </para></simplesect>
<simplesect kind="remark"><para>Some platforms cannot toggle between blocking and nonblocking, and when passing a pipe as a standard handle to an application which does not expect it, a non-blocking stream will fluxor the client app. Use this function rather than <ref refid="group__apr__file__io_1gaae3b81342d239c58c351cf11190740ed" kindref="member">apr_file_pipe_create()</ref> to create pipes where one or both ends require non-blocking semantics. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="753" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga60cec3e6717bab0f11577bd7c38b4c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_namedpipe_create</definition>
        <argsstring>(const char *filename, apr_fileperms_t perm, apr_pool_t *pool)</argsstring>
        <name>apr_file_namedpipe_create</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__info_1ga3af19c4c47007169064a70f9351bc7d8" kindref="member">apr_fileperms_t</ref></type>
          <declname>perm</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a named pipe. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename of the named pipe </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm</parametername>
</parameternamelist>
<parameterdescription>
<para>The permissions for the newly created pipe. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to operate on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="764" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga90e481207a38df04818a0c55883ee953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_pipe_timeout_get</definition>
        <argsstring>(apr_file_t *thepipe, apr_interval_time_t *timeout)</argsstring>
        <name>apr_file_pipe_timeout_get</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thepipe</declname>
        </param>
        <param>
          <type><ref refid="group__apr__time_1gaae2129185a395cc393f76fabf4f43e47" kindref="member">apr_interval_time_t</ref> *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the timeout value for a pipe or manipulate the blocking state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thepipe</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe we are getting a timeout for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The current timeout value in microseconds. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="773" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gaf88d2fca768e3fa9f28ea010e1bf602a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_pipe_timeout_set</definition>
        <argsstring>(apr_file_t *thepipe, apr_interval_time_t timeout)</argsstring>
        <name>apr_file_pipe_timeout_set</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thepipe</declname>
        </param>
        <param>
          <type><ref refid="group__apr__time_1gaae2129185a395cc393f76fabf4f43e47" kindref="member">apr_interval_time_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the timeout value for a pipe or manipulate the blocking state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thepipe</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipe we are setting a timeout on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout value in microseconds. Values &lt; 0 mean wait forever, 0 means do not wait at all. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="782" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga2d337e66c1fa0cd433164079bf542484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_lock</definition>
        <argsstring>(apr_file_t *thefile, int type)</argsstring>
        <name>apr_file_lock</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>file (un)locking functions. Establish a lock on the specified, open file. The lock may be advisory or mandatory, at the discretion of the platform. The lock applies to the file as a whole, rather than a specific range. Locks are established on a per-thread/process basis; a second lock by the same thread will not block. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to lock. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of lock to establish on the file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="796" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga3a255996fb439b6d66ed7cd65319525b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_unlock</definition>
        <argsstring>(apr_file_t *thefile)</argsstring>
        <name>apr_file_unlock</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove any outstanding locks on the file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to unlock. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="802" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga5c750a88fe1e032e1d85d3db40d9519f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_name_get</definition>
        <argsstring>(const char **new_path, apr_file_t *thefile)</argsstring>
        <name>apr_file_name_get</name>
        <param>
          <type>const char **</type>
          <declname>new_path</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>accessor and general file_io functions. return the file name of the current file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path of the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The currently open file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="811" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gafa13b7024748a7e45344d6998ddbd281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_data_get</definition>
        <argsstring>(void **data, const char *key, apr_file_t *file)</argsstring>
        <name>apr_file_data_get</name>
        <param>
          <type>void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the data associated with the current file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data associated with the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use for retrieving data associated with this file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The currently open file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga58c857162593d8b3aa999df5b7af0805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_data_set</definition>
        <argsstring>(apr_file_t *file, void *data, const char *key, apr_status_t(*cleanup)(void *))</argsstring>
        <name>apr_file_data_set</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref>(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the data associated with the current file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The currently open file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data to associate with the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use for associating data with the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>The cleanup routine to use when the file is destroyed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="830" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga29fca4b0201c236856fea5578f410c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apr_file_printf</definition>
        <argsstring>(apr_file_t *fptr, const char *format,...)</argsstring>
        <name>apr_file_printf</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>fptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a string to a file using a printf format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The values to substitute in the format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="841" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gac5fed6d75597476718c40fc603823b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_perms_set</definition>
        <argsstring>(const char *fname, apr_fileperms_t perms)</argsstring>
        <name>apr_file_perms_set</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__info_1ga3af19c4c47007169064a70f9351bc7d8" kindref="member">apr_fileperms_t</ref></type>
          <declname>perms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the specified file&apos;s permission bits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The file (name) to apply the permissions to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perms</parametername>
</parameternamelist>
<parameterdescription>
<para>The permission bits to apply to the file.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Some platforms may not be able to apply all of the available permission bits; <ref refid="group___a_p_r___error_1ga64dff43b83bcefd3f3c751be6b864ca1" kindref="member">APR_INCOMPLETE</ref> will be returned if some permissions are specified which could not be set.</para></simplesect>
<simplesect kind="warning"><para>Platforms which do not implement this feature will return <ref refid="group___a_p_r___error_1ga939ddb834a30bc9a5a0a329b13000161" kindref="member">APR_ENOTIMPL</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="857" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga96ceec3492ad0c75d2b58c167087ee6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_attrs_set</definition>
        <argsstring>(const char *fname, apr_fileattrs_t attributes, apr_fileattrs_t attr_mask, apr_pool_t *pool)</argsstring>
        <name>apr_file_attrs_set</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1ga11fbee5a7a3f3d45fff5c31df0db9737" kindref="member">apr_fileattrs_t</ref></type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1ga11fbee5a7a3f3d45fff5c31df0db9737" kindref="member">apr_fileattrs_t</ref></type>
          <declname>attr_mask</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set attributes of the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the file (using / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>Or&apos;d combination of <itemizedlist>
<listitem><para><ref refid="group__apr__file__attrs__set__flags_1ga333f2c798495cfb95ee624e11c862e38" kindref="member">APR_FILE_ATTR_READONLY</ref> - make the file readonly </para></listitem>
<listitem><para><ref refid="group__apr__file__attrs__set__flags_1ga51346f433e354f0bc8722388b6b275fd" kindref="member">APR_FILE_ATTR_EXECUTABLE</ref> - make the file executable </para></listitem>
<listitem><para><ref refid="group__apr__file__attrs__set__flags_1ga68c188c0e56b9abdef3c97ffd913c5aa" kindref="member">APR_FILE_ATTR_HIDDEN</ref> - make the file hidden </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of valid bits in attributes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function should be used in preference to explicit manipulation of the file permissions, because the operations to provide these attributes are platform specific and may involve more than simply setting permission bits. </para></simplesect>
<simplesect kind="warning"><para>Platforms which do not implement this feature will return <ref refid="group___a_p_r___error_1ga939ddb834a30bc9a5a0a329b13000161" kindref="member">APR_ENOTIMPL</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="876" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga79f58458a00a4072622005c09ed8f96f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_mtime_set</definition>
        <argsstring>(const char *fname, apr_time_t mtime, apr_pool_t *pool)</argsstring>
        <name>apr_file_mtime_set</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type><ref refid="group__apr__time_1gadb4bde16055748190eae190c55aa02bb" kindref="member">apr_time_t</ref></type>
          <declname>mtime</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mtime of the specified file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the file (using / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtime</parametername>
</parameternamelist>
<parameterdescription>
<para>The mtime to apply to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Platforms which do not implement this feature will return <ref refid="group___a_p_r___error_1ga939ddb834a30bc9a5a0a329b13000161" kindref="member">APR_ENOTIMPL</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="889" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga51e0b4703c7561f72587982808985d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_dir_make</definition>
        <argsstring>(const char *path, apr_fileperms_t perm, apr_pool_t *pool)</argsstring>
        <name>apr_dir_make</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__info_1ga3af19c4c47007169064a70f9351bc7d8" kindref="member">apr_fileperms_t</ref></type>
          <declname>perm</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new directory on the file system. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path for the directory to be created. (use / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm</parametername>
</parameternamelist>
<parameterdescription>
<para>Permissions for the new directory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="899" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga6a3b2602f57ff148cd64096da02adbd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_dir_make_recursive</definition>
        <argsstring>(const char *path, apr_fileperms_t perm, apr_pool_t *pool)</argsstring>
        <name>apr_dir_make_recursive</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__info_1ga3af19c4c47007169064a70f9351bc7d8" kindref="member">apr_fileperms_t</ref></type>
          <declname>perm</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new directory on the file system, but behaves like &apos;mkdir -p&apos;. Creates intermediate directories as required. No error will be reported if PATH already exists. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path for the directory to be created. (use / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm</parametername>
</parameternamelist>
<parameterdescription>
<para>Permissions for the new directory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="909" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga5487d02a62fba9444747ccb5838150ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_dir_remove</definition>
        <argsstring>(const char *path, apr_pool_t *pool)</argsstring>
        <name>apr_dir_remove</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove directory from the file system. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path for the directory to be removed. (use / on all systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Removing a directory which is in-use (e.g., the current working directory, or during apr_dir_read, or with an open file) is not portable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="920" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga39be7fe05d0dda4a28f4358b61a44ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_info_get</definition>
        <argsstring>(apr_finfo_t *finfo, apr_int32_t wanted, apr_file_t *thefile)</argsstring>
        <name>apr_file_info_get</name>
        <param>
          <type><ref refid="structapr__finfo__t" kindref="compound">apr_finfo_t</ref> *</type>
          <declname>finfo</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>wanted</declname>
        </param>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the specified file&apos;s stats. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>finfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the information about the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wanted</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired <ref refid="structapr__finfo__t" kindref="compound">apr_finfo_t</ref> fields, as a bit flag of APR_FINFO_* values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thefile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to get information about. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="928" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gac067fe5f208c927cf6d213197b9335a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_trunc</definition>
        <argsstring>(apr_file_t *fp, apr_off_t offset)</argsstring>
        <name>apr_file_trunc</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>apr_off_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Truncate the file&apos;s length to the specified offset <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to truncate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset to truncate to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The read/write file offset is repositioned to offset. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="939" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga023d6e4d2512382a9d4b1f881e105b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_int32_t</type>
        <definition>apr_int32_t apr_file_flags_get</definition>
        <argsstring>(apr_file_t *f)</argsstring>
        <name>apr_file_flags_get</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the flags that were passed into <ref refid="group__apr__file__io_1gabda14cbf242fb4fe99055434213e5446" kindref="member">apr_file_open()</ref> when the file was opened. <simplesect kind="return"><para>apr_int32_t the flags </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="946" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gab5950b3b0156097b0181394a37e03ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
        <definition>apr_pool_t* apr_file_pool_get</definition>
        <argsstring>(const apr_file_t *thefile)</argsstring>
        <name>apr_file_pool_get</name>
        <param>
          <type>const <ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the pool used by the file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="951" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga137bee13d2c65fb8afd4b34e400187c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_inherit_set</definition>
        <argsstring>(apr_file_t *thefile)</argsstring>
        <name>apr_file_inherit_set</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a file to be inherited by child processes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga69fa72a6f77b96572248c2a6a347c02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_inherit_unset</definition>
        <argsstring>(apr_file_t *thefile)</argsstring>
        <name>apr_file_inherit_unset</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> *</type>
          <declname>thefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset a file from being inherited by child processes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="962" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1gac34981f9ff41f85e4377a6dde185fe52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_file_mktemp</definition>
        <argsstring>(apr_file_t **fp, char *templ, apr_int32_t flags, apr_pool_t *p)</argsstring>
        <name>apr_file_mktemp</name>
        <param>
          <type><ref refid="group__apr__file__io_1gaa46e4763ac375ea3c7a43ba6f6099e22" kindref="member">apr_file_t</ref> **</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>templ</declname>
        </param>
        <param>
          <type>apr_int32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a temporary file <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>The apr file to use as a temporary file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>templ</parametername>
</parameternamelist>
<parameterdescription>
<para>The template to use when creating a temp file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to open the file with. If this is zero, the file is opened with <ref refid="group__apr__file__open__flags_1gafe94f21ccbf411172e70e7f473af251a" kindref="member">APR_FOPEN_CREATE</ref> | <ref refid="group__apr__file__open__flags_1gaf9e7303f028b130ff7d4b209d6662d7d" kindref="member">APR_FOPEN_READ</ref> | <ref refid="group__apr__file__open__flags_1gac598bb95fc9476b0bf2ed0b1c308842c" kindref="member">APR_FOPEN_WRITE</ref> | <ref refid="group__apr__file__open__flags_1gabb7fb062cdf1d58faee8c7ea518496f1" kindref="member">APR_FOPEN_EXCL</ref> | <ref refid="group__apr__file__open__flags_1ga5d3756f6d242c667ed1d3f54af4916eb" kindref="member">APR_FOPEN_DELONCLOSE</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate the file out of. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function generates a unique temporary file name from template. The last six characters of template must be XXXXXX and these are replaced with a string that makes the filename unique. Since it will be modified, template must not be a string constant, but should be declared as a character array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="981" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__apr__file__io_1ga5cc19828a668c362be0ad7a12b805cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_temp_dir_get</definition>
        <argsstring>(const char **temp_dir, apr_pool_t *p)</argsstring>
        <name>apr_temp_dir_get</name>
        <param>
          <type>const char **</type>
          <declname>temp_dir</declname>
        </param>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find an existing directory suitable as a temporary storage location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temp_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The temp directory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to use for any necessary allocations. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function uses an algorithm to search for a directory that an an application can use for temporary storage. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_file_io.h" line="994" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
