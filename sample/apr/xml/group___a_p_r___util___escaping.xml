<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___a_p_r___util___escaping" kind="group">
    <compoundname>APR_Util_Escaping</compoundname>
    <title>Escape functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___a_p_r___util___escaping_1gafdfca9adc06570fa6efd802e24dce6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_escape_shell</definition>
        <argsstring>(char *escaped, const char *str, apr_ssize_t slen, apr_size_t *len)</argsstring>
        <name>apr_escape_shell</name>
        <param>
          <type>char *</type>
          <declname>escaped</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform shell escaping on the provided string.</para><para>Shell escaping causes characters to be prefixed with a &apos;\&apos; character. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>escaped</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional buffer to write the encoded string, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original string, or APR_ESCAPE_STRING </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga81e97334f8033bfbc3acd5e15262323e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_pescape_shell</definition>
        <argsstring>(apr_pool_t *p, const char *str)</argsstring>
        <name>apr_pescape_shell</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform shell escaping on the provided string, returning the result from the pool.</para><para>Shell escaping causes characters to be prefixed with a &apos;\&apos; character.</para><para>If no characters were escaped, the original string is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the encoded string, allocated from the pool, or the original string if no escaping took place or the string was NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga9a6b08630ef5a605def1dfa4a54b026f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_unescape_url</definition>
        <argsstring>(char *escaped, const char *url, apr_ssize_t slen, const char *forbid, const char *reserved, int plus, apr_size_t *len)</argsstring>
        <name>apr_unescape_url</name>
        <param>
          <type>char *</type>
          <declname>escaped</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>url</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>forbid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>reserved</declname>
        </param>
        <param>
          <type>int</type>
          <declname>plus</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unescapes a URL, leaving reserved characters intact. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>escaped</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional buffer to write the encoded string, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be unescaped </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original url, or APR_ESCAPE_STRING </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forbid</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of forbidden characters, in addition to 0x00 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserved</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of reserved characters that will be left unescaped </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plus</parametername>
</parameternamelist>
<parameterdescription>
<para>If non zero, &apos;+&apos; is converted to &apos; &apos; as per application/x-www-form-urlencoded encoding </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If set, the length of the escaped string will be returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS on success, APR_NOTFOUND if no characters are decoded or the string is NULL, APR_EINVAL if a bad escape sequence is found, APR_BADCH if a character on the forbid list is found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1gac713d5687a00134cef5c795dbf4e6dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_punescape_url</definition>
        <argsstring>(apr_pool_t *p, const char *url, const char *forbid, const char *reserved, int plus)</argsstring>
        <name>apr_punescape_url</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>url</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>forbid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>reserved</declname>
        </param>
        <param>
          <type>int</type>
          <declname>plus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unescapes a URL, leaving reserved characters intact, returning the result from a pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be unescaped in place </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forbid</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of forbidden characters, in addition to 0x00 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserved</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of reserved characters that will be left unescaped </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plus</parametername>
</parameternamelist>
<parameterdescription>
<para>If non zero, &apos;+&apos; is converted to &apos; &apos; as per application/x-www-form-urlencoded encoding </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string allocated from the pool on success, the original string if no characters are decoded, or NULL if a bad escape sequence is found or if a character on the forbid list is found, or if the original string was NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga2fba5a28f4924f00f1ba9a56bc87f651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_escape_path_segment</definition>
        <argsstring>(char *escaped, const char *str, apr_ssize_t slen, apr_size_t *len)</argsstring>
        <name>apr_escape_path_segment</name>
        <param>
          <type>char *</type>
          <declname>escaped</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Escape a path segment, as defined in RFC1808. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>escaped</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional buffer to write the encoded string, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original string, or APR_ESCAPE_STRING </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga36bd45eb1f919fe61f04f5e9087c6242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_pescape_path_segment</definition>
        <argsstring>(apr_pool_t *p, const char *str)</argsstring>
        <name>apr_pescape_path_segment</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Escape a path segment, as defined in RFC1808, returning the result from a pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be escaped </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string allocated from the pool on success, the original string if no characters are encoded or the string is NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1gae67859a1d260f354c16e939d24d67058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_escape_path</definition>
        <argsstring>(char *escaped, const char *path, apr_ssize_t slen, int partial, apr_size_t *len)</argsstring>
        <name>apr_escape_path</name>
        <param>
          <type>char *</type>
          <declname>escaped</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>partial</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts an OS path to a URL, in an OS dependent way, as defined in RFC1808. In all cases if a &apos;:&apos; occurs before the first &apos;/&apos; in the URL, the URL should be prefixed with &quot;./&quot; (or the &apos;:&apos; escaped). In the case of Unix, this means leaving &apos;/&apos; alone, but otherwise doing what escape_path_segment() does. For efficiency reasons, we don&apos;t use escape_path_segment(), which is provided for reference. Again, RFC 1808 is where this stuff is defined.</para><para>If partial is set, os_escape_path() assumes that the path will be appended to something with a &apos;/&apos; in it (and thus does not prefix &quot;./&quot;). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>escaped</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional buffer to write the encoded string, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original string, or APR_ESCAPE_STRING </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partial</parametername>
</parameternamelist>
<parameterdescription>
<para>If non zero, suppresses the prepending of &quot;./&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or if the string was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1gacd4fc208448eb07af16350802077783a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_pescape_path</definition>
        <argsstring>(apr_pool_t *p, const char *str, int partial)</argsstring>
        <name>apr_pescape_path</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>partial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts an OS path to a URL, in an OS dependent way, as defined in RFC1808, returning the result from a pool.</para><para>In all cases if a &apos;:&apos; occurs before the first &apos;/&apos; in the URL, the URL should be prefixed with &quot;./&quot; (or the &apos;:&apos; escaped). In the case of Unix, this means leaving &apos;/&apos; alone, but otherwise doing what escape_path_segment() does. For efficiency reasons, we don&apos;t use escape_path_segment(), which is provided for reference. Again, RFC 1808 is where this stuff is defined.</para><para>If partial is set, os_escape_path() assumes that the path will be appended to something with a &apos;/&apos; in it (and thus does not prefix &quot;./&quot;). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>partial</parametername>
</parameternamelist>
<parameterdescription>
<para>If non zero, suppresses the prepending of &quot;./&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string allocated from the pool on success, the original string if no characters are encoded or if the string was NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga0a2cb4e99758afd5bed8fd62df05e16f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_escape_urlencoded</definition>
        <argsstring>(char *escaped, const char *str, apr_ssize_t slen, apr_size_t *len)</argsstring>
        <name>apr_escape_urlencoded</name>
        <param>
          <type>char *</type>
          <declname>escaped</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Urlencode a string, as defined in <ulink url="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1">http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1</ulink>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>escaped</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional buffer to write the encoded string, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original string, or APR_ESCAPE_STRING </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or if the stirng was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga9caffb30731e3a07a8e23fa6464d35b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_pescape_urlencoded</definition>
        <argsstring>(apr_pool_t *p, const char *str)</argsstring>
        <name>apr_pescape_urlencoded</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Urlencode a string, as defined in <ulink url="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1,">http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1,</ulink> returning the result from a pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be escaped </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string allocated from the pool on success, the original string if no characters are encoded or if the string was NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga6973ca9a596c8fc9fc34eab647cff11c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_escape_entity</definition>
        <argsstring>(char *escaped, const char *str, apr_ssize_t slen, int toasc, apr_size_t *len)</argsstring>
        <name>apr_escape_entity</name>
        <param>
          <type>char *</type>
          <declname>escaped</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>toasc</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply entity encoding to a string. Characters are replaced as follows: &apos;&lt;&apos; becomes &apos;&lt;&apos;, &apos;&gt;&apos; becomes &apos;&gt;&apos;, &apos;&amp;&apos; becomes &apos;&amp;&apos;, the double quote becomes &apos;"" and the single quote becomes &apos;'&apos;.</para><para>If toasc is not zero, any non ascii character will be encoded as &apos;%#ddd;&apos;, where ddd is the decimal code of the character. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>escaped</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional buffer to write the encoded string, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original string, or APR_ESCAPE_STRING </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toasc</parametername>
</parameternamelist>
<parameterdescription>
<para>If non zero, encode non ascii characters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1gad99b0f505645b63b5f552f5d35f174af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_pescape_entity</definition>
        <argsstring>(apr_pool_t *p, const char *str, int toasc)</argsstring>
        <name>apr_pescape_entity</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>toasc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply entity encoding to a string, returning the result from a pool. Characters are replaced as follows: &apos;&lt;&apos; becomes &apos;&lt;&apos;, &apos;&gt;&apos; becomes &apos;&gt;&apos;, &apos;&amp;&apos; becomes &apos;&amp;&apos;, the double quote becomes &apos;"" and the single quote becomes &apos;'&apos;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toasc</parametername>
</parameternamelist>
<parameterdescription>
<para>If non zero, encode non ascii characters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string allocated from the pool on success, the original string if no characters are encoded or the string is NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga9b835b2da5bf35c33f6c69e8e3100c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_unescape_entity</definition>
        <argsstring>(char *unescaped, const char *str, apr_ssize_t slen, apr_size_t *len)</argsstring>
        <name>apr_unescape_entity</name>
        <param>
          <type>char *</type>
          <declname>unescaped</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decodes html entities or numeric character references in a string. If the string to be unescaped is syntactically incorrect, then the following fixups will be made: unknown entities will be left undecoded; references to unused numeric characters will be deleted. In particular, &amp;#00; will not be decoded, but will be deleted. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unescaped</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional buffer to write the encoded string, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original string, or APR_ESCAPE_STRING </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1gabaaeff6e19e92cf1f138b21e87889e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_punescape_entity</definition>
        <argsstring>(apr_pool_t *p, const char *str)</argsstring>
        <name>apr_punescape_entity</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decodes html entities or numeric character references in a string. If the string to be unescaped is syntactically incorrect, then the following fixups will be made: unknown entities will be left undecoded; references to unused numeric characters will be deleted. In particular, &amp;#00; will not be decoded, but will be deleted. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string allocated from the pool on success, the original string if no characters are encoded or the string is NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga4ebbadaffa33c6aa34e92108c45cd38e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_escape_echo</definition>
        <argsstring>(char *escaped, const char *str, apr_ssize_t slen, int quote, apr_size_t *len)</argsstring>
        <name>apr_escape_echo</name>
        <param>
          <type>char *</type>
          <declname>escaped</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Escape control characters in a string, as performed by the shell&apos;s &apos;echo&apos; command. Characters are replaced as follows: \a alert (bell), \b backspace, \f form feed, \n new line, \r carriage return, \t horizontal tab, \v vertical tab, \ backslash.</para><para>Any non ascii character will be encoded as &apos;\xHH&apos;, where HH is the hex code of the character.</para><para>If quote is not zero, the double quote character will also be escaped. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>escaped</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional buffer to write the encoded string, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original string, or APR_ESCAPE_STRING </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>If non zero, encode double quotes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS, or APR_NOTFOUND if no changes to the string were detected or the string was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga1265c454e145b9fca52d2feafacd4a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_pescape_echo</definition>
        <argsstring>(apr_pool_t *p, const char *str, int quote)</argsstring>
        <name>apr_pescape_echo</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Escape control characters in a string, as performed by the shell&apos;s &apos;echo&apos; command, and return the results from a pool. Characters are replaced as follows: \a alert (bell), \b backspace, \f form feed, \n new line, \r carriage return, \t horizontal tab, \v vertical tab, \ backslash.</para><para>Any non ascii character will be encoded as &apos;\xHH&apos;, where HH is the hex code of the character.</para><para>If quote is not zero, the double quote character will also be escaped. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>If non zero, encode double quotes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string allocated from the pool on success, the original string if no characters are encoded or the string is NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1gac87b3c2f42fb60f6ea4d8321e60ce69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_escape_hex</definition>
        <argsstring>(char *dest, const void *src, apr_size_t srclen, int colon, apr_size_t *len)</argsstring>
        <name>apr_escape_hex</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>srclen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colon</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert binary data to a hex encoding. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The original buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srclen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colon</parametername>
</parameternamelist>
<parameterdescription>
<para>If not zero, insert colon characters between hex digits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS, or APR_NOTFOUND if the string was NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga2a12cd35230cc148da52ea983da4b211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* apr_pescape_hex</definition>
        <argsstring>(apr_pool_t *p, const void *src, apr_size_t slen, int colon)</argsstring>
        <name>apr_pescape_hex</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>apr_size_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert binary data to a hex encoding, and return the results from a pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The original buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colon</parametername>
</parameternamelist>
<parameterdescription>
<para>If not zero, insert colon characters between hex digits. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A zero padded buffer allocated from the pool on success, or NULL if src was NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga98c3558219d7ce3dd29420c0124ddd73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apr__errno_1gaf76ee4543247e9fb3f3546203e590a6c" kindref="member">apr_status_t</ref></type>
        <definition>apr_status_t apr_unescape_hex</definition>
        <argsstring>(void *dest, const char *str, apr_ssize_t slen, int colon, apr_size_t *len)</argsstring>
        <name>apr_unescape_hex</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>apr_ssize_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colon</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert hex encoded string to binary data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer, can be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the original buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colon</parametername>
</parameternamelist>
<parameterdescription>
<para>If not zero, ignore colon characters between hex digits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APR_SUCCESS, or APR_NOTFOUND if the string was NULL, or APR_BADCH if a non hex character is present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___a_p_r___util___escaping_1ga8cba37bcacb5e1c9440f2b35d44afc49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* apr_punescape_hex</definition>
        <argsstring>(apr_pool_t *p, const char *str, int colon, apr_size_t *len)</argsstring>
        <name>apr_punescape_hex</name>
        <param>
          <type><ref refid="group__apr__pools_1gaf137f28edcf9a086cd6bc36c20d7cdfb" kindref="member">apr_pool_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colon</declname>
        </param>
        <param>
          <type>apr_size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert hex encoding to binary data, and return the results from a pool. If the colon character appears between pairs of hex digits, it will be ignored. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pool to allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The original string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colon</parametername>
</parameternamelist>
<parameterdescription>
<para>If not zero, ignore colon characters between hex digits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, returns the length of the final buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A buffer allocated from the pool on success, or NULL if src was NULL, or a bad character was present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="366" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___a_p_r___util___escaping_1ga793ae1b187ce490c65eeee2eb59d2831" prot="public" static="no">
        <name>APR_ESCAPE_STRING</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When passing a string to one of the escape functions, this value can be passed to indicate a string-valued key, and have the length computed automatically. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/apr_escape.h" line="43" column="9" bodyfile="include/apr_escape.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
