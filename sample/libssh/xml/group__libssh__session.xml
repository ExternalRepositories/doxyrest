<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__libssh__session" kind="group">
    <compoundname>libssh_session</compoundname>
    <title>The SSH session functions.</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libssh__session_1gafa8d153635a261e97870ab71d570149a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ssh_client_connection_callback</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_client_connection_callback</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>A function to be called each time a step has been done in the connection. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="383" column="1" bodyfile="src/client.c" bodystart="383" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gabca86e5dcb03e23c150b16f9655cd782" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_connect_termination</definition>
        <argsstring>(void *user)</argsstring>
        <name>ssh_connect_termination</name>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>describe under which conditions the ssh_connect function may stop </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="504" column="1" bodyfile="src/client.c" bodystart="504" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga032e07cbd8bc3f14cb2dd375db0b03d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_connect</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_connect</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Connect to the ssh server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to connect.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
<simplesect kind="return"><para>SSH_AGAIN, if the session is in nonblocking mode, and call must be done again.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1gaadadc0f9601547c30db7c4d62017d32c" kindref="member">ssh_new()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1ga0f048a4c0dbe02cfb7e9c5b6d0db0f27" kindref="member">ssh_disconnect()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="528" column="1" bodyfile="src/client.c" bodystart="528" bodyend="634"/>
        <references refid="group__libssh_1ga3ebf8d6920e563f3b032e3cd5277598e" compoundref="init_8c" startline="53" endline="61">ssh_init</references>
        <referencedby refid="classssh_1_1_session_1a2a88d7dd524e81cb9152a87cb6fefc40" compoundref="libsshpp_8hpp" startline="170" endline="174">ssh::Session::connect</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga89864d4d5cc6d3d6ef1c39652f2a688f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_get_issue_banner</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_issue_banner</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the issue banner from the server. </para>        </briefdescription>
        <detaileddescription>
<para>This is the banner showing a disclaimer to users who log in, typically their right or the fact that they will be monitored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated string with the banner, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="646" column="1" bodyfile="src/client.c" bodystart="646" bodyend="652"/>
        <references refid="group__libssh__string_1ga65cbd5f2c5f02599c1c285efd1f06351" compoundref="string_8c" startline="176" endline="197">ssh_string_to_char</references>
        <referencedby refid="classssh_1_1_session_1a9969ed8dcaccef321ac519271758b406" compoundref="libsshpp_8hpp" startline="282" endline="287">ssh::Session::getIssueBanner</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gac55d2895467a1e898ee75b4710d836a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_get_openssh_version</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_openssh_version</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the version of the OpenSSH server, if it is not an OpenSSH server then 0 will be returned. </para>        </briefdescription>
        <detaileddescription>
<para>You can use the SSH_VERSION_INT macro to compare version numbers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The version number if available, 0 otherwise.</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>openssh<sp/>=<sp/>ssh_get_openssh_version();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(openssh<sp/>==<sp/>SSH_INT_VERSION(6,<sp/>1,<sp/>0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Version<sp/>match!\m&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="672" column="1" bodyfile="src/client.c" bodystart="672" bodyend="678"/>
        <referencedby refid="classssh_1_1_session_1a9e0af590062a73a0927bb513bc19dd8e" compoundref="libsshpp_8hpp" startline="292" endline="294">ssh::Session::getOpensshVersion</referencedby>
        <referencedby refid="group__libssh__sftp_1ga010212bcabdccf36a34befe14c04a472" compoundref="sftp_8c" startline="2498" endline="2583">sftp_symlink</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga0f048a4c0dbe02cfb7e9c5b6d0db0f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_disconnect</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_disconnect</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Disconnect from a session (client or server). </para>        </briefdescription>
        <detaileddescription>
<para>The session can then be reused to open a new session.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="686" column="1" bodyfile="src/client.c" bodystart="686" bodyend="754"/>
        <references refid="group__libssh__socket_1gaaf4853539d6ed1c3508cca5a45d557d6" compoundref="socket_8c" startline="425" endline="452">ssh_socket_close</references>
        <references refid="group__libssh__socket_1ga29176fb6f348985227454a3f5daec745" compoundref="socket_8c" startline="514" endline="516">ssh_socket_is_open</references>
        <references refid="group__libssh__socket_1ga4f4b2a1a8e54b3c6406a60c1b031de18" compoundref="socket_8c" startline="180" endline="192">ssh_socket_reset</references>
        <referencedby refid="classssh_1_1_session_1aaa6972fe2757370a0cf2b90576eb6edc" compoundref="libsshpp_8hpp" startline="246" endline="248">ssh::Session::disconnect</referencedby>
        <referencedby refid="group__libssh__session_1gae1bd16255ba373325adf76307d0c8c42" compoundref="session_8c" startline="434" endline="442">ssh_silent_disconnect</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaffbc8276ff57983966ce108998df40bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_copyright</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_copyright</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="756" column="1" bodyfile="src/client.c" bodystart="756" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaed7aa63089bc78f3827115f476badab5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_select_cb</definition>
        <argsstring>(socket_t fd, int revents, void *userdata)</argsstring>
        <name>ssh_select_cb</name>
        <param>
          <type>socket_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>revents</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/connect.c" line="414" column="1" bodyfile="src/connect.c" bodystart="414" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_select</definition>
        <argsstring>(ssh_channel *channels, ssh_channel *outchannels, socket_t maxfd, fd_set *readfds, struct timeval *timeout)</argsstring>
        <name>ssh_select</name>
        <param>
          <type>ssh_channel *</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>ssh_channel *</type>
          <declname>outchannels</declname>
        </param>
        <param>
          <type>socket_t</type>
          <declname>maxfd</declname>
        </param>
        <param>
          <type>fd_set *</type>
          <declname>readfds</declname>
        </param>
        <param>
          <type>struct timeval *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>A wrapper for the select syscall. </para>        </briefdescription>
        <detaileddescription>
<para>This functions acts more or less like the select(2) syscall.<linebreak/>
There is no support for writing or exceptions.<linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channels</parametername>
</parameternamelist>
<parameterdescription>
<para>Arrays of channels pointers terminated by a NULL. It is never rewritten.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outchannels</parametername>
</parameternamelist>
<parameterdescription>
<para>Arrays of same size that &quot;channels&quot;, there is no need to initialize it.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxfd</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum +1 file descriptor from readfds.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">readfds</parametername>
</parameternamelist>
<parameterdescription>
<para>A fd_set of file descriptors to be select&apos;ed for reading.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout in milliseconds.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error, SSH_EINTR if it was interrupted. In that case, just restart it.</para></simplesect>
<simplesect kind="warning"><para>libssh is not reentrant here. That means that if a signal is caught during the processing of this function, you cannot call libssh functions on sessions that are busy with <ref refid="group__libssh__session_1ga86cbf041bced56d18a2a5248c46cecb4" kindref="member">ssh_select()</ref>.</para></simplesect>
<simplesect kind="see"><para>select(2) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/connect.c" line="451" column="1" bodyfile="src/connect.c" bodystart="451" bodyend="518"/>
        <references refid="group__libssh__poll_1ga41d63ffe950a48e8b2c513877e0cd6b4" compoundref="poll_8c" startline="746" endline="776">ssh_event_add_fd</references>
        <references refid="group__libssh__poll_1ga51af38de4cc3adbd5566ec1f1b91983d" compoundref="poll_8c" startline="788" endline="824">ssh_event_add_session</references>
        <references refid="group__libssh__poll_1ga406895f99b6b486c4b65536e5399ff96" compoundref="poll_8c" startline="691" endline="716">ssh_event_new</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaf8ff0e2236d54d964a82f68d7323a741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_get_pubkey_hash</definition>
        <argsstring>(ssh_session session, unsigned char **hash)</argsstring>
        <name>ssh_get_pubkey_hash</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__libssh__session_1ga7a7b16a4bed6d8d58f10bdb269172ff7" kindref="member">ssh_get_publickey_hash()</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dh.c" line="901" column="1" bodyfile="src/dh.c" bodystart="901" bodyend="935"/>
        <references refid="group__libssh__string_1gaf01673d22adbff92c88bcb6e30946ea6" compoundref="string_8c" startline="259" endline="265">ssh_string_data</references>
        <references refid="group__libssh__string_1ga331553369afbfcb4f5300729ed65d0fe" compoundref="string_8c" startline="131" endline="144">ssh_string_len</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga07827fd70a51ddc4030364f220eb4c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_clean_pubkey_hash</definition>
        <argsstring>(unsigned char **hash)</argsstring>
        <name>ssh_clean_pubkey_hash</name>
        <param>
          <type>unsigned char **</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Deallocate the hash obtained by ssh_get_pubkey_hash. </para>        </briefdescription>
        <detaileddescription>
<para>This is required under Microsoft platform as this library might use a different C library than your software, hence a different heap.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to deallocate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__libssh__session_1gaf8ff0e2236d54d964a82f68d7323a741" kindref="member">ssh_get_pubkey_hash()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dh.c" line="947" column="1" bodyfile="src/dh.c" bodystart="947" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga839a93298aeff85adbaf4db815b58730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_get_publickey</definition>
        <argsstring>(ssh_session session, ssh_key *key)</argsstring>
        <name>ssh_get_publickey</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the server public key from a session. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to get the key from.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">key</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the allocated key. You need to free the key.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on errror.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" kindref="member">ssh_key_free()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dh.c" line="964" column="1" bodyfile="src/dh.c" bodystart="964" bodyend="974"/>
        <references refid="group__libssh__pki_1ga942b96ee72b13655952c87efe938e6ee" compoundref="pki_8c" startline="882" endline="929">ssh_pki_import_pubkey_blob</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga7a7b16a4bed6d8d58f10bdb269172ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_get_publickey_hash</definition>
        <argsstring>(const ssh_key key, enum ssh_publickey_hash_type type, unsigned char **hash, size_t *hlen)</argsstring>
        <name>ssh_get_publickey_hash</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>enum ssh_publickey_hash_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>hlen</declname>
        </param>
        <briefdescription>
<para>Allocates a buffer with the hash of the public key. </para>        </briefdescription>
        <detaileddescription>
<para>This function allows you to get a hash of the public key. You can then print this hash in a human-readable form to the user so that he is able to verify it. Use <ref refid="group__libssh__session_1ga6ebcfc53884fdc5afb1607c94f8007d4" kindref="member">ssh_get_hexa()</ref> or <ref refid="group__libssh__session_1ga39bf7936ed51361fe9cf3c3bbfc25514" kindref="member">ssh_print_hexa()</ref> to display it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The public key to create the hash for.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the hash you want.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hash</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the allocated buffer. It can be freed using <ref refid="group__libssh__session_1ga07827fd70a51ddc4030364f220eb4c9c" kindref="member">ssh_clean_pubkey_hash()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the hash.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 if an error occured.</para></simplesect>
<simplesect kind="warning"><para>It is very important that you verify at some moment that the hash matches a known server. If you don&apos;t do it, cryptography wont help you at making things secure. OpenSSH uses SHA1 to print public key digests.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1ga6f37e3d7bb6b938b44d6a34a76fdfa0b" kindref="member">ssh_is_server_known()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1ga6ebcfc53884fdc5afb1607c94f8007d4" kindref="member">ssh_get_hexa()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1ga39bf7936ed51361fe9cf3c3bbfc25514" kindref="member">ssh_print_hexa()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1ga07827fd70a51ddc4030364f220eb4c9c" kindref="member">ssh_clean_pubkey_hash()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dh.c" line="1004" column="1" bodyfile="src/dh.c" bodystart="1004" bodyend="1075"/>
        <references refid="group__libssh__pki_1gaadeaf6dc35e99214de0af82c3c431649" compoundref="pki_8c" startline="1137" endline="1153">ssh_pki_export_pubkey_blob</references>
        <references refid="group__libssh__string_1gaf01673d22adbff92c88bcb6e30946ea6" compoundref="string_8c" startline="259" endline="265">ssh_string_data</references>
        <references refid="group__libssh__string_1gacd9c4eb69f7ecfdcf709deb8dde6a5a8" compoundref="string_8c" startline="272" endline="274">ssh_string_free</references>
        <references refid="group__libssh__string_1ga331553369afbfcb4f5300729ed65d0fe" compoundref="string_8c" startline="131" endline="144">ssh_string_len</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga6ebcfc53884fdc5afb1607c94f8007d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_get_hexa</definition>
        <argsstring>(const unsigned char *what, size_t len)</argsstring>
        <name>ssh_get_hexa</name>
        <param>
          <type>const unsigned char *</type>
          <declname>what</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Convert a buffer into a colon separated hex string. </para>        </briefdescription>
        <detaileddescription>
<para>The caller has to free the memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>What should be converted to a hex string.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hex string or NULL on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__string_1gafc10700722d6cafc468c2ee97585449a" kindref="member">ssh_string_free_char()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dh.c" line="1089" column="1" bodyfile="src/dh.c" bodystart="1089" bodyend="1112"/>
        <referencedby refid="group__libssh__server_1gab9ca89e12e290a701dced5f7c91bb677" compoundref="gssapi_8c" startline="549" endline="553">ssh_gssapi_get_creds</referencedby>
        <referencedby refid="group__libssh__session_1ga39bf7936ed51361fe9cf3c3bbfc25514" compoundref="dh_8c" startline="1123" endline="1132">ssh_print_hexa</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga39bf7936ed51361fe9cf3c3bbfc25514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_print_hexa</definition>
        <argsstring>(const char *descr, const unsigned char *what, size_t len)</argsstring>
        <name>ssh_print_hexa</name>
        <param>
          <type>const char *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>what</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Print a buffer as colon separated hex string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Description printed in front of the hex string.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>What should be converted to a hex string.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dh.c" line="1123" column="1" bodyfile="src/dh.c" bodystart="1123" bodyend="1132"/>
        <references refid="group__libssh__session_1ga6ebcfc53884fdc5afb1607c94f8007d4" compoundref="dh_8c" startline="1089" endline="1112">ssh_get_hexa</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga1a06292da7667385acb7181c17fb2aaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int alldigits</definition>
        <argsstring>(const char *s)</argsstring>
        <name>alldigits</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/known_hosts.c" line="61" column="1" bodyfile="src/known_hosts.c" bodystart="61" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga4443531b37afa026f6a8cac3bf313166" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tokens_free</definition>
        <argsstring>(char **tokens)</argsstring>
        <name>tokens_free</name>
        <param>
          <type>char **</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
<para>Free a token array. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/known_hosts.c" line="78" column="1" bodyfile="src/known_hosts.c" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga3d5f65b5769fb17797618a60f2b78101" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>static char** ssh_get_knownhost_line</definition>
        <argsstring>(FILE **file, const char *filename, const char **found_type)</argsstring>
        <name>ssh_get_knownhost_line</name>
        <param>
          <type>FILE **</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>found_type</declname>
        </param>
        <briefdescription>
<para>Return one line of known host file. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This will return a token array containing (host|ip), keytype and key.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">file</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the known host file. Could be pointing to NULL at start.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The file name of the known host file.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">found_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a string to be set with the found key type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The found_type type of key (ie &quot;dsa&quot;,&quot;ssh-rsa1&quot;). Don&apos;t free that value. NULL if no match was found or the file was not found. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/known_hosts.c" line="109" column="1" bodyfile="src/known_hosts.c" bodystart="109" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga7c21df77bcd00b832e2f33c3afae64a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_public_key</definition>
        <argsstring>(ssh_session session, char **tokens)</argsstring>
        <name>check_public_key</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
<para>Check the public key in the known host line matches the public key of the currently connected server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of tokens in the known_hosts line.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the key matches, 0 if the key doesn&apos;t match and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/known_hosts.c" line="190" column="1" bodyfile="src/known_hosts.c" bodystart="190" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga8986fdab5f7b17935b21e96652f22cf8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int match_hashed_host</definition>
        <argsstring>(const char *host, const char *sourcehash)</argsstring>
        <name>match_hashed_host</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sourcehash</declname>
        </param>
        <briefdescription>
<para>Check if a hostname matches a openssh-style hashed known host. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">host</parametername>
</parameternamelist>
<parameterdescription>
<para>The host to check.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hashed</parametername>
</parameternamelist>
<parameterdescription>
<para>The hashed value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if it matches, 0 otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/known_hosts.c" line="292" column="1" bodyfile="src/known_hosts.c" bodystart="292" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga6f37e3d7bb6b938b44d6a34a76fdfa0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_is_server_known</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_is_server_known</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Check if the server is known. </para>        </briefdescription>
        <detaileddescription>
<para>Checks the user&apos;s known host file for a previous connection to the current server.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_SERVER_KNOWN_OK: The server is known and has not changed.<linebreak/>
 SSH_SERVER_KNOWN_CHANGED: The server key has changed. Either you are under attack or the administrator changed the key. You HAVE to warn the user about a possible attack.<linebreak/>
 SSH_SERVER_FOUND_OTHER: The server gave use a key of a type while we had an other type recorded. It is a possible attack.<linebreak/>
 SSH_SERVER_NOT_KNOWN: The server is unknown. User should confirm the MD5 is correct.<linebreak/>
 SSH_SERVER_FILE_NOT_FOUND: The known host file does not exist. The host is thus unknown. File will be created if host key is accepted.<linebreak/>
 SSH_SERVER_ERROR: Some error happened.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1gaf8ff0e2236d54d964a82f68d7323a741" kindref="member">ssh_get_pubkey_hash()</ref></para></simplesect>
<xrefsect id="bug_1_bug000003"><xreftitle>Bug</xreftitle><xrefdescription><para>There is no current way to remove or modify an entry into the known host table. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/known_hosts.c" line="406" column="1" bodyfile="src/known_hosts.c" bodystart="406" bodyend="514"/>
        <referencedby refid="classssh_1_1_session_1a0b7055cb236685a9c18cb79c5492b40f" compoundref="libsshpp_8hpp" startline="308" endline="312">ssh::Session::isServerKnown</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaf61a9cfdc40c76ffce9f9a8543755d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_write_knownhost</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_write_knownhost</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Write the current server as known in the known hosts file. </para>        </briefdescription>
        <detaileddescription>
<para>This will create the known hosts file if it does not exist. You generaly use it when <ref refid="group__libssh__session_1ga6f37e3d7bb6b938b44d6a34a76fdfa0b" kindref="member">ssh_is_server_known()</ref> answered SSH_SERVER_NOT_KNOWN.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/known_hosts.c" line="526" column="1" bodyfile="src/known_hosts.c" bodystart="526" bodyend="648"/>
        <referencedby refid="classssh_1_1_session_1ae55f054025dcbe4ceeaec87c9ca064c7" compoundref="libsshpp_8hpp" startline="351" endline="355">ssh::Session::writeKnownhost</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga0cdaf267ea18c4d7910864f7203842f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** ssh_knownhosts_algorithms</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_knownhosts_algorithms</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Check which kind of host keys should be preferred for connection by reading the known_hosts file. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>array of supported key types NULL on error </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/known_hosts.c" line="662" column="1" bodyfile="src/known_hosts.c" bodystart="662" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaead8cef1f39e785139bc510852ce1dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_copy</definition>
        <argsstring>(ssh_session src, ssh_session *dest)</argsstring>
        <name>ssh_options_copy</name>
        <param>
          <type>ssh_session</type>
          <declname>src</declname>
        </param>
        <param>
          <type>ssh_session *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Duplicate the options of a session structure. </para>        </briefdescription>
        <detaileddescription>
<para>If you make several sessions with the same options this is useful. You cannot use twice the same option structure in ssh_session_connect.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use to copy the options.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the allocated session with duplicated options. You have to free the memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on sucess, -1 on error with errno set.</para></simplesect>
<simplesect kind="see"><para>ssh_session_connect() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="64" column="1" bodyfile="src/options.c" bodystart="64" bodyend="163"/>
        <references refid="group__libssh__session_1gae5af27a98a7488e9f5ded6b37c274156" compoundref="session_8c" startline="184" endline="305">ssh_free</references>
        <references refid="group__libssh__session_1gaadadc0f9601547c30db7c4d62017d32c" compoundref="session_8c" startline="61" endline="174">ssh_new</references>
        <referencedby refid="classssh_1_1_session_1a05cbc79d7b3ef14499fe258f56031957" compoundref="libsshpp_8hpp" startline="327" endline="330">ssh::Session::optionsCopy</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga980c4ecd572fdb816d2f8b0a0479cea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_set_algo</definition>
        <argsstring>(ssh_session session, int algo, const char *list)</argsstring>
        <name>ssh_options_set_algo</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>algo</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="165" column="1" bodyfile="src/options.c" bodystart="165" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_set</definition>
        <argsstring>(ssh_session session, enum ssh_options_e type, const void *value)</argsstring>
        <name>ssh_options_set</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>enum ssh_options_e</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This function can set all possible ssh options. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated SSH session structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The option type to set. This could be one of the following:</para></parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>SSH_OPTIONS_HOST: The hostname or ip address to connect to (const char *).</para></listitem><listitem><para>SSH_OPTIONS_PORT: The port to connect to (unsigned int).</para></listitem><listitem><para>SSH_OPTIONS_PORT_STR: The port to connect to (const char *).</para></listitem><listitem><para>SSH_OPTIONS_FD: The file descriptor to use (socket_t).<linebreak/>
 <linebreak/>
 If you wish to open the socket yourself for a reason or another, set the file descriptor. Don&apos;t forget to set the hostname as the hostname is used as a key in the known_host mechanism.</para></listitem><listitem><para>SSH_OPTIONS_BINDADDR: The address to bind the client to (const char *).</para></listitem><listitem><para>SSH_OPTIONS_USER: The username for authentication (const char *).<linebreak/>
 <linebreak/>
 If the value is NULL, the username is set to the default username.</para></listitem><listitem><para>SSH_OPTIONS_SSH_DIR: Set the ssh directory (const char *,format string).<linebreak/>
 <linebreak/>
 If the value is NULL, the directory is set to the default ssh directory.<linebreak/>
 <linebreak/>
 The ssh directory is used for files like known_hosts and identity (private and public key). It may include &quot;%s&quot; which will be replaced by the user home directory.</para></listitem><listitem><para>SSH_OPTIONS_KNOWNHOSTS: Set the known hosts file name (const char *,format string).<linebreak/>
 <linebreak/>
 If the value is NULL, the directory is set to the default known hosts file, normally ~/.ssh/known_hosts.<linebreak/>
 <linebreak/>
 The known hosts file is used to certify remote hosts are genuine. It may include &quot;%s&quot; which will be replaced by the user home directory.</para></listitem><listitem><para>SSH_OPTIONS_IDENTITY: Set the identity file name (const char *,format string).<linebreak/>
 <linebreak/>
 By default identity, id_dsa and id_rsa are checked.<linebreak/>
 <linebreak/>
 The identity file used authenticate with public key. It may include &quot;%s&quot; which will be replaced by the user home directory.</para></listitem><listitem><para>SSH_OPTIONS_TIMEOUT: Set a timeout for the connection in seconds (long).</para></listitem><listitem><para>SSH_OPTIONS_TIMEOUT_USEC: Set a timeout for the connection in micro seconds (long).</para></listitem><listitem><para>SSH_OPTIONS_SSH1: Allow or deny the connection to SSH1 servers (int, 0 is false).</para></listitem><listitem><para>SSH_OPTIONS_SSH2: Allow or deny the connection to SSH2 servers (int, 0 is false).</para></listitem><listitem><para>SSH_OPTIONS_LOG_VERBOSITY: Set the session logging verbosity (int).<linebreak/>
 <linebreak/>
 The verbosity of the messages. Every log smaller or equal to verbosity will be shown.<itemizedlist>
<listitem><para>SSH_LOG_NOLOG: No logging</para></listitem><listitem><para>SSH_LOG_RARE: Rare conditions or warnings</para></listitem><listitem><para>SSH_LOG_ENTRY: API-accessible entrypoints</para></listitem><listitem><para>SSH_LOG_PACKET: Packet id and size</para></listitem><listitem><para>SSH_LOG_FUNCTIONS: Function entering and leaving</para></listitem></itemizedlist>
</para></listitem><listitem><para>SSH_OPTIONS_LOG_VERBOSITY_STR: Set the session logging verbosity (const char *).<linebreak/>
 <linebreak/>
 The verbosity of the messages. Every log smaller or equal to verbosity will be shown.<itemizedlist>
<listitem><para>SSH_LOG_NOLOG: No logging</para></listitem><listitem><para>SSH_LOG_RARE: Rare conditions or warnings</para></listitem><listitem><para>SSH_LOG_ENTRY: API-accessible entrypoints</para></listitem><listitem><para>SSH_LOG_PACKET: Packet id and size</para></listitem><listitem><para>SSH_LOG_FUNCTIONS: Function entering and leaving <linebreak/>
 See the corresponding numbers in <ref refid="libssh_8h_source" kindref="compound">libssh.h</ref>.</para></listitem></itemizedlist>
</para></listitem><listitem><para>SSH_OPTIONS_AUTH_CALLBACK: Set a callback to use your own authentication function (function pointer).</para></listitem><listitem><para>SSH_OPTIONS_AUTH_USERDATA: Set the user data passed to the authentication function (generic pointer).</para></listitem><listitem><para>SSH_OPTIONS_LOG_CALLBACK: Set a callback to use your own logging function (function pointer).</para></listitem><listitem><para>SSH_OPTIONS_LOG_USERDATA: Set the user data passed to the logging function (generic pointer).</para></listitem><listitem><para>SSH_OPTIONS_STATUS_CALLBACK: Set a callback to show connection status in realtime (function pointer).<linebreak/>
 <linebreak/>
<programlisting><codeline><highlight class="normal">fn(void<sp/>*arg,<sp/>float<sp/>status)</highlight></codeline>
</programlisting> <linebreak/>
 During <ref refid="group__libssh__session_1ga032e07cbd8bc3f14cb2dd375db0b03d7" kindref="member">ssh_connect()</ref>, libssh will call the callback with status from 0.0 to 1.0.</para></listitem><listitem><para>SSH_OPTIONS_STATUS_ARG: Set the status argument which should be passed to the status callback (generic pointer).</para></listitem><listitem><para>SSH_OPTIONS_CIPHERS_C_S: Set the symmetric cipher client to server (const char *, comma-separated list).</para></listitem><listitem><para>SSH_OPTIONS_CIPHERS_S_C: Set the symmetric cipher server to client (const char *, comma-separated list).</para></listitem><listitem><para>SSH_OPTIONS_KEY_EXCHANGE: Set the key exchange method to be used (const char *, comma-separated list). ex: &quot;ecdh-sha2-nistp256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1&quot;</para></listitem><listitem><para>SSH_OPTIONS_HOSTKEYS: Set the preferred server host key types (const char *, comma-separated list). ex: &quot;ssh-rsa,ssh-dss,ecdh-sha2-nistp256&quot;</para></listitem><listitem><para>SSH_OPTIONS_COMPRESSION_C_S: Set the compression to use for client to server communication (const char *, &quot;yes&quot;, &quot;no&quot; or a specific algorithm name if needed (&quot;zlib&quot;,&quot;zlib@openssh.com&quot;,&quot;none&quot;).</para></listitem><listitem><para>SSH_OPTIONS_COMPRESSION_S_C: Set the compression to use for server to client communication (const char *, &quot;yes&quot;, &quot;no&quot; or a specific algorithm name if needed (&quot;zlib&quot;,&quot;zlib@openssh.com&quot;,&quot;none&quot;).</para></listitem><listitem><para>SSH_OPTIONS_COMPRESSION: Set the compression to use for both directions communication (const char *, &quot;yes&quot;, &quot;no&quot; or a specific algorithm name if needed (&quot;zlib&quot;,&quot;zlib@openssh.com&quot;,&quot;none&quot;).</para></listitem><listitem><para>SSH_OPTIONS_COMPRESSION_LEVEL: Set the compression level to use for zlib functions. (int, value from 1 to 9, 9 being the most efficient but slower).</para></listitem><listitem><para>SSH_OPTIONS_STRICTHOSTKEYCHECK: Set the parameter StrictHostKeyChecking to avoid asking about a fingerprint (int, 0 = false).</para></listitem><listitem><para>SSH_OPTIONS_PROXYCOMMAND: Set the command to be executed in order to connect to server (const char *).</para></listitem><listitem><para>SSH_OPTIONS_GSSAPI_SERVER_IDENTITY Set it to specify the GSSAPI server identity that libssh should expect when connecting to the server (const char *).</para></listitem><listitem><para>SSH_OPTIONS_GSSAPI_CLIENT_IDENTITY Set it to specify the GSSAPI client identity that libssh should expect when connecting to the server (const char *).</para></listitem><listitem><para>SSH_OPTIONS_GSSAPI_DELEGATE_CREDENTIALS Set it to specify that GSSAPI should delegate credentials to the server (int, 0 = false).</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set. This is a generic pointer and the datatype which is used should be set according to the type set.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="382" column="1" bodyfile="src/options.c" bodystart="382" bodyend="868"/>
        <referencedby refid="classssh_1_1_session_1ad19ae4a0927094c12f383907cbf40ccc" compoundref="libsshpp_8hpp" startline="142" endline="145">ssh::Session::setOption</referencedby>
        <referencedby refid="group__libssh__session_1ga93f7f7159893f3ce62c9b178724eff75" compoundref="options_8c" startline="1012" endline="1182">ssh_options_getopt</referencedby>
        <referencedby refid="group__libssh__session_1ga82371e723260c7572ea061edecc2e9f1" compoundref="options_8c" startline="1200" endline="1241">ssh_options_parse_config</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaa298d8445355420d80f2d968477ba86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_get_port</definition>
        <argsstring>(ssh_session session, unsigned int *port_target)</argsstring>
        <name>ssh_options_get_port</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>port_target</declname>
        </param>
        <briefdescription>
<para>This function can get ssh the ssh port. </para>        </briefdescription>
        <detaileddescription>
<para>It must only be used on a valid ssh session. This function is useful when the session options have been automatically inferred from the environment or configuration files and one</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated SSH session structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port_target</parametername>
</parameternamelist>
<parameterdescription>
<para>An unsigned integer into which the port will be set from the ssh session.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="884" column="1" bodyfile="src/options.c" bodystart="884" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaaa9d400920cad4d6e4a0fb09ff8c7b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_get</definition>
        <argsstring>(ssh_session session, enum ssh_options_e type, char **value)</argsstring>
        <name>ssh_options_get</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>enum ssh_options_e</type>
          <declname>type</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This function can get ssh options, it does not support all options provided for ssh options set, but mostly those which a user-space program may care about having trusted the ssh driver to infer these values from underlaying configuration files. </para>        </briefdescription>
        <detaileddescription>
<para>It operates only on those SSH_OPTIONS_* which return char*. If you wish to receive the port then please use <ref refid="group__libssh__session_1gaa298d8445355420d80f2d968477ba86f" kindref="member">ssh_options_get_port()</ref> which returns an unsigned int.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated SSH session structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The option type to get. This could be one of the following:</para></parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>SSH_OPTIONS_HOST: The hostname or ip address to connect to (const char *).</para></listitem><listitem><para>SSH_OPTIONS_USER: The username for authentication (const char *).<linebreak/>
 <linebreak/>
 when not explicitly set this will be inferred from the ~/.ssh/config file.</para></listitem><listitem><para>SSH_OPTIONS_IDENTITY: Set the identity file name (const char *,format string).<linebreak/>
 <linebreak/>
 By default identity, id_dsa and id_rsa are checked.<linebreak/>
 <linebreak/>
 The identity file used authenticate with public key. It may include &quot;%s&quot; which will be replaced by the user home directory.</para></listitem><listitem><para>SSH_OPTIONS_PROXYCOMMAND: Get the proxycommand necessary to log into the remote host. When not explicitly set, it will be read from the ~/.ssh/config file.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to get into. As a char**, space will be allocated by the function for the value, it is your responsibility to free the memory using <ref refid="group__libssh__string_1gafc10700722d6cafc468c2ee97585449a" kindref="member">ssh_string_free_char()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="940" column="1" bodyfile="src/options.c" bodystart="940" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga93f7f7159893f3ce62c9b178724eff75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_getopt</definition>
        <argsstring>(ssh_session session, int *argcptr, char **argv)</argsstring>
        <name>ssh_options_getopt</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>argcptr</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Parse command line arguments. </para>        </briefdescription>
        <detaileddescription>
<para>This is a helper for your application to generate the appropriate options from the command line arguments.<linebreak/>
The argv array and argc value are changed so that the parsed arguments wont appear anymore in them.<linebreak/>
The single arguments (without switches) are not parsed. thus, myssh -l user localhost<linebreak/>
The command wont set the hostname value of options to localhost.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to configure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argcptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the argument count.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments list pointer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error.</para></simplesect>
<simplesect kind="see"><para>ssh_session_new() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="1012" column="1" bodyfile="src/options.c" bodystart="1012" bodyend="1182"/>
        <references refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" compoundref="options_8c" startline="382" endline="868">ssh_options_set</references>
        <references refid="group__libssh__log_1ga9719dabb8fab8a3ebeb4dc2ebcd2dd45" compoundref="log_8c" startline="178" endline="186">ssh_set_log_level</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga82371e723260c7572ea061edecc2e9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_parse_config</definition>
        <argsstring>(ssh_session session, const char *filename)</argsstring>
        <name>ssh_options_parse_config</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Parse the ssh config file. </para>        </briefdescription>
        <detaileddescription>
<para>This should be the last call of all options, it may overwrite options which are already set. It requires that the host name is already set with ssh_options_set_host().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>SSH session handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The options file to use, if NULL the default ~/.ssh/config will be used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error.</para></simplesect>
<simplesect kind="see"><para>ssh_options_set_host() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="1200" column="1" bodyfile="src/options.c" bodystart="1200" bodyend="1241"/>
        <references refid="group__libssh__session_1ga7a801b85800baa3f4e16f5b47db0a73d" compoundref="options_8c" startline="382" endline="868">ssh_options_set</references>
        <referencedby refid="classssh_1_1_session_1a0fe8a68c45f9f150bb306ae840f68f0f" compoundref="libsshpp_8hpp" startline="336" endline="339">ssh::Session::optionsParseConfig</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga882e56c9ac92b2e860f055ac903e9c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_options_apply</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_options_apply</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/options.c" line="1243" column="1" bodyfile="src/options.c" bodystart="1243" bodyend="1295"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaadadc0f9601547c30db7c4d62017d32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_session</type>
        <definition>ssh_session ssh_new</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new ssh session. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A new ssh_session pointer, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="61" column="1" bodyfile="src/session.c" bodystart="61" bodyend="174"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <references refid="group__libssh__session_1ga2a29cff08855611be84d050e5bec73bc" compoundref="session_8c" startline="451" endline="457">ssh_set_blocking</references>
        <references refid="group__libssh__socket_1gae616d257d1f37fcaf60f6d243fe4e964" compoundref="socket_8c" startline="141" endline="173">ssh_socket_new</references>
        <referencedby refid="group__libssh__session_1gaead8cef1f39e785139bc510852ce1dff" compoundref="options_8c" startline="64" endline="163">ssh_options_copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gae5af27a98a7488e9f5ded6b37c274156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_free</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_free</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Deallocate a SSH session handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to free.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__libssh__session_1ga0f048a4c0dbe02cfb7e9c5b6d0db0f27" kindref="member">ssh_disconnect()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1gaadadc0f9601547c30db7c4d62017d32c" kindref="member">ssh_new()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="184" column="1" bodyfile="src/session.c" bodystart="184" bodyend="305"/>
        <referencedby refid="group__libssh__session_1gaead8cef1f39e785139bc510852ce1dff" compoundref="options_8c" startline="64" endline="163">ssh_options_copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga1e76a1fc03d1d16fb59b0bd5e9978aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_get_clientbanner</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_clientbanner</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>get the client banner </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the client banner string or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="314" column="1" bodyfile="src/session.c" bodystart="314" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gac89bcc9f438d031a32260926b04ea6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_get_serverbanner</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_serverbanner</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>get the server banner </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the server banner string or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="329" column="1" bodyfile="src/session.c" bodystart="329" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga3870bf9e03a2ac470ab202424224b15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_get_kex_algo</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_kex_algo</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>get the name of the current key exchange algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the key exchange algorithm string or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="343" column="1" bodyfile="src/session.c" bodystart="343" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga81d8525f77c58d93ed0d320c38e62009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_get_cipher_in</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_cipher_in</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>get the name of the input cipher for the given session. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns cipher name or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="372" column="1" bodyfile="src/session.c" bodystart="372" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga0a0b33868aec5337ba1d9aee8fee26d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_get_cipher_out</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_cipher_out</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>get the name of the output cipher for the given session. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns cipher name or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="388" column="1" bodyfile="src/session.c" bodystart="388" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga293196b7f1b1653ff970b8206671def9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_get_hmac_in</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_hmac_in</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>get the name of the input HMAC algorithm for the given session. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns HMAC algorithm name or NULL if unknown. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="404" column="1" bodyfile="src/session.c" bodystart="404" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga2fc37631d6a350d9c31dcb336b98a836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_get_hmac_out</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_hmac_out</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>get the name of the output HMAC algorithm for the given session. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns HMAC algorithm name or NULL if unknown. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="419" column="1" bodyfile="src/session.c" bodystart="419" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gae1bd16255ba373325adf76307d0c8c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_silent_disconnect</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_silent_disconnect</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Disconnect impolitely from a remote host by closing the socket. </para>        </briefdescription>
        <detaileddescription>
<para>Suitable if you forked and want to destroy this session.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to disconnect. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="434" column="1" bodyfile="src/session.c" bodystart="434" bodyend="442"/>
        <references refid="group__libssh__session_1ga0f048a4c0dbe02cfb7e9c5b6d0db0f27" compoundref="client_8c" startline="686" endline="754">ssh_disconnect</references>
        <references refid="group__libssh__socket_1gaaf4853539d6ed1c3508cca5a45d557d6" compoundref="socket_8c" startline="425" endline="452">ssh_socket_close</references>
        <referencedby refid="classssh_1_1_session_1a15b2a58607cc42628e17c94c8f7eb793" compoundref="libsshpp_8hpp" startline="343" endline="345">ssh::Session::silentDisconnect</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga2a29cff08855611be84d050e5bec73bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_set_blocking</definition>
        <argsstring>(ssh_session session, int blocking)</argsstring>
        <name>ssh_set_blocking</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
<para>Set the session in blocking/nonblocking mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to change.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero for nonblocking mode. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="451" column="1" bodyfile="src/session.c" bodystart="451" bodyend="457"/>
        <referencedby refid="group__libssh__channel_1gaaca5a3fbe9839c3ffb37b746afc35f4c" compoundref="channels_8c" startline="2737" endline="2773">ssh_channel_read_nonblocking</referencedby>
        <referencedby refid="group__libssh__channel_1ga1c00ed18679d9a8c5b971260b5df13a2" compoundref="channels_8c" startline="1437" endline="1442">ssh_channel_set_blocking</referencedby>
        <referencedby refid="group__libssh__session_1gaadadc0f9601547c30db7c4d62017d32c" compoundref="session_8c" startline="61" endline="174">ssh_new</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga0c959bde817801ac5de2db1e64b52f26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_is_blocking</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_is_blocking</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Return the blocking mode of libssh. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the session is nonblocking, </para></simplesect>
<simplesect kind="return"><para>1 if the functions may block. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="465" column="1" bodyfile="src/session.c" bodystart="465" bodyend="467"/>
        <referencedby refid="group__libssh__channel_1gaaca5a3fbe9839c3ffb37b746afc35f4c" compoundref="channels_8c" startline="2737" endline="2773">ssh_channel_read_nonblocking</referencedby>
        <referencedby refid="group__libssh__session_1gaa0e04dc9e24d5112a5ca2b7bd68031d0" compoundref="session_8c" startline="600" endline="636">ssh_handle_packets</referencedby>
        <referencedby refid="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" compoundref="session_8c" startline="661" endline="705">ssh_handle_packets_termination</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gac06e77d8cc7d3c9b3ce54cfd8db35afa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_flush_termination</definition>
        <argsstring>(void *c)</argsstring>
        <name>ssh_flush_termination</name>
        <param>
          <type>void *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="470" column="1" bodyfile="src/session.c" bodystart="470" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga60da8e2c47897a209a455923c35d52d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_blocking_flush</definition>
        <argsstring>(ssh_session session, int timeout)</argsstring>
        <name>ssh_blocking_flush</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Blocking flush of the outgoing buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Set an upper limit on the time for which this function will block, in milliseconds. Specifying -1 means an infinite timeout. This parameter is passed to the poll() function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_AGAIN if timeout occurred, SSH_ERROR otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="490" column="1" bodyfile="src/session.c" bodystart="490" bodyend="506"/>
        <references refid="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" compoundref="session_8c" startline="661" endline="705">ssh_handle_packets_termination</references>
        <referencedby refid="group__libssh__channel_1gae61fe034965d58e1fb6da1bee98de191" compoundref="channels_8c" startline="1199" endline="1201">ssh_channel_flush</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga49d8f413a3c7879070a112703de1d6e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_is_connected</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_is_connected</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Check if we are connected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to check if it is connected.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if we are connected, 0 if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="515" column="1" bodyfile="src/session.c" bodystart="515" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gafe509fcea47714b5cd277d1e35e83276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>socket_t</type>
        <definition>socket_t ssh_get_fd</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_fd</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the fd of a connection. </para>        </briefdescription>
        <detaileddescription>
<para>In case you&apos;d need the file descriptor of the connection to the server/client.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The file descriptor of the connection, or -1 if it is not connected </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="533" column="1" bodyfile="src/session.c" bodystart="533" bodyend="539"/>
        <references refid="group__libssh__socket_1ga9456febc100d6b3cd0a82eaff5a26ae0" compoundref="socket_8c" startline="507" endline="509">ssh_socket_get_fd_in</references>
        <referencedby refid="classssh_1_1_session_1a30c021f6138124d785f151583e5656bd" compoundref="libsshpp_8hpp" startline="275" endline="277">ssh::Session::getSocket</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga0e05c91c6f475eabc8d221914d25a425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_set_fd_toread</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_set_fd_toread</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Tell the session it has data to read on the file descriptor without blocking. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="547" column="1" bodyfile="src/session.c" bodystart="547" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga3f1b3c59662464eec3649d3d72a40543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_set_fd_towrite</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_set_fd_towrite</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Tell the session it may write to the file descriptor without blocking. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="560" column="1" bodyfile="src/session.c" bodystart="560" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga06453278350fd9e940c5c1b0d5225f19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_set_fd_except</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_set_fd_except</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Tell the session it has an exception to catch on the file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="573" column="1" bodyfile="src/session.c" bodystart="573" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaa0e04dc9e24d5112a5ca2b7bd68031d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_handle_packets</definition>
        <argsstring>(ssh_session session, int timeout)</argsstring>
        <name>ssh_handle_packets</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Poll the current session for an event and call the appropriate callbacks. This function will not loop until the timeout is expired. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This will block until one event happens.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session handle to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Set an upper limit on the time for which this function will block, in milliseconds. Specifying SSH_TIMEOUT_INFINITE (-1) means an infinite timeout. Specifying SSH_TIMEOUT_USER means to use the timeout specified in options. 0 means poll will return immediately. This parameter is passed to the poll() function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR otherwise. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="600" column="1" bodyfile="src/session.c" bodystart="600" bodyend="636"/>
        <references refid="group__libssh__session_1ga0c959bde817801ac5de2db1e64b52f26" compoundref="session_8c" startline="465" endline="467">ssh_is_blocking</references>
        <references refid="group__libssh__misc_1ga7178af941c118949a8a7f34e3b5c815e" compoundref="misc_8c" startline="926" endline="934">ssh_make_milliseconds</references>
        <references refid="group__libssh__poll_1ga26ad689751420b91bf002f616e8bf4f7" compoundref="poll_8c" startline="376" endline="378">ssh_poll_add_events</references>
        <references refid="group__libssh__poll_1ga2c9eca31ff21406f13c1b7472ae8c85b" compoundref="poll_8c" startline="507" endline="529">ssh_poll_ctx_add</references>
        <references refid="group__libssh__poll_1ga6c0f6d3c677838181df5cd03a755fd7c" compoundref="poll_8c" startline="599" endline="652">ssh_poll_ctx_dopoll</references>
        <references refid="group__libssh__poll_1gaca05fcf77e6c4b5e55a9cfd2c9690ea5" compoundref="poll_8c" startline="325" endline="327">ssh_poll_get_ctx</references>
        <references refid="group__libssh__poll_1ga8ad007907f642d4aa2c25e5209bf337a" compoundref="poll_8c" startline="661" endline="667">ssh_poll_get_default_ctx</references>
        <references refid="group__libssh__socket_1ga370170e973dd150a297db4525713752e" compoundref="socket_8c" startline="351" endline="358">ssh_socket_get_poll_handle_in</references>
        <references refid="group__libssh__socket_1ga22e0c80420370cd8beded9cdf6f7da73" compoundref="socket_8c" startline="365" endline="372">ssh_socket_get_poll_handle_out</references>
        <referencedby refid="group__libssh__channel_1gab391f5c978cb1bc8df3ebd061f38e8c5" compoundref="channels_8c" startline="2499" endline="2558">channel_read_buffer</referencedby>
        <referencedby refid="group__libssh__channel_1ga157f7d1df5de07ec6c6976e2034ba6e2" compoundref="channels_8c" startline="2789" endline="2820">ssh_channel_poll</referencedby>
        <referencedby refid="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" compoundref="session_8c" startline="661" endline="705">ssh_handle_packets_termination</referencedby>
        <referencedby refid="group__libssh__session_1ga5ffa2201152e29cc680c4b8e4a3f4fdf" compoundref="session_8c" startline="874" endline="907">ssh_send_debug</referencedby>
        <referencedby refid="group__libssh__session_1gab8827415fd19cf6cb64e7fc83c09e423" compoundref="session_8c" startline="835" endline="861">ssh_send_ignore</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_handle_packets_termination</definition>
        <argsstring>(ssh_session session, int timeout, ssh_termination_function fct, void *user)</argsstring>
        <name>ssh_handle_packets_termination</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>ssh_termination_function</type>
          <declname>fct</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Poll the current session for an event and call the appropriate callbacks. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This will block until termination function returns true, or timeout expired.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session handle to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Set an upper limit on the time for which this function will block, in milliseconds. Specifying SSH_TIMEOUT_INFINITE (-1) means an infinite timeout. Specifying SSH_TIMEOUT_USER means to use the timeout specified in options. 0 means poll will return immediately. SSH_TIMEOUT_DEFAULT uses blocking parameters of the session. This parameter is passed to the poll() function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fct</parametername>
</parameternamelist>
<parameterdescription>
<para>Termination function to be used to determine if it is possible to stop polling. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">user</parametername>
</parameternamelist>
<parameterdescription>
<para>User parameter to be passed to fct termination function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR otherwise. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="661" column="1" bodyfile="src/session.c" bodystart="661" bodyend="705"/>
        <references refid="group__libssh__session_1gaa0e04dc9e24d5112a5ca2b7bd68031d0" compoundref="session_8c" startline="600" endline="636">ssh_handle_packets</references>
        <references refid="group__libssh__session_1ga0c959bde817801ac5de2db1e64b52f26" compoundref="session_8c" startline="465" endline="467">ssh_is_blocking</references>
        <references refid="group__libssh__misc_1ga7178af941c118949a8a7f34e3b5c815e" compoundref="misc_8c" startline="926" endline="934">ssh_make_milliseconds</references>
        <references refid="group__libssh__misc_1ga1a6abbb2da16c6543f7de29b5c98f086" compoundref="misc_8c" startline="946" endline="968">ssh_timeout_elapsed</references>
        <references refid="group__libssh__misc_1gad1c4b29e2421eb8f9ca111d98b0c2976" compoundref="misc_8c" startline="977" endline="989">ssh_timeout_update</references>
        <references refid="group__libssh__misc_1gaaa0c97f49044d29f2a3b5b3ae82979ff" compoundref="misc_8c" startline="882" endline="893">ssh_timestamp_init</references>
        <referencedby refid="group__libssh__session_1ga60da8e2c47897a209a455923c35d52d8" compoundref="session_8c" startline="490" endline="506">ssh_blocking_flush</referencedby>
        <referencedby refid="group__libssh__channel_1ga9eea019dd0bbaa8a817fff2c762d1a2d" compoundref="channels_8c" startline="2918" endline="2931">ssh_channel_get_exit_status</referencedby>
        <referencedby refid="group__libssh__channel_1gab56c7b7959e4c23959f2989468811661" compoundref="channels_8c" startline="2841" endline="2873">ssh_channel_poll_timeout</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gac199314d1646372c566ef14b9b6dca53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_get_status</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_status</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get session status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitmask including SSH_CLOSED, SSH_READ_PENDING, SSH_WRITE_PENDING or SSH_CLOSED_ERROR which respectively means the session is closed, has data to read on the connection socket and session was closed due to an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="717" column="1" bodyfile="src/session.c" bodystart="717" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gae9d0104fbeca17bcfb0659ad718c4606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_get_poll_flags</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_poll_flags</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get poll flags for an external mainloop. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitmask including SSH_READ_PENDING or SSH_WRITE_PENDING. For SSH_READ_PENDING, your invocation of poll() should include POLLIN. For SSH_WRITE_PENDING, your invocation of poll() should include POLLOUT. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="755" column="1" bodyfile="src/session.c" bodystart="755" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gad19e368e35d48e02ba95970a7d1e87f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_get_disconnect_message</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_disconnect_message</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the disconnect message from the server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The message sent by the server along with the disconnect, or NULL in which case the reason of the disconnect may be found with ssh_get_error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__error_1ga9241586665bf21f823806473fc386258" kindref="member">ssh_get_error()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="775" column="1" bodyfile="src/session.c" bodystart="775" bodyend="791"/>
        <referencedby refid="classssh_1_1_session_1a4e0c0bcc2cc0d129e049b5b51bf1cbe8" compoundref="libsshpp_8hpp" startline="253" endline="256">ssh::Session::getDisconnectMessage</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga8467735e4735165336f68ee82e24de0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_get_version</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_version</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the protocol version of the session. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 or 2, for ssh1 or ssh2, &lt; 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="800" column="1" bodyfile="src/session.c" bodystart="800" bodyend="806"/>
        <referencedby refid="classssh_1_1_session_1a5d7b4df57ed97f2592893b0493336b88" compoundref="libsshpp_8hpp" startline="299" endline="301">ssh::Session::getVersion</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga2635562d4c0bb8507e9a9f7274ff4729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_socket_exception_callback</definition>
        <argsstring>(int code, int errno_code, void *user)</argsstring>
        <name>ssh_socket_exception_callback</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>errno_code</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Callback to be called when the socket received an exception code. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to session </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="813" column="1" bodyfile="src/session.c" bodystart="813" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gab8827415fd19cf6cb64e7fc83c09e423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_send_ignore</definition>
        <argsstring>(ssh_session session, const char *data)</argsstring>
        <name>ssh_send_ignore</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Send a message that should be ignored. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be sent</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="835" column="1" bodyfile="src/session.c" bodystart="835" bodyend="861"/>
        <references refid="group__libssh__buffer_1gad877da63fd8d9a0ee00859bfbacf1eda" compoundref="buffer_8c" startline="195" endline="208">ssh_buffer_reinit</references>
        <references refid="group__libssh__session_1gaa0e04dc9e24d5112a5ca2b7bd68031d0" compoundref="session_8c" startline="600" endline="636">ssh_handle_packets</references>
        <references refid="group__libssh__socket_1ga29176fb6f348985227454a3f5daec745" compoundref="socket_8c" startline="514" endline="516">ssh_socket_is_open</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga5ffa2201152e29cc680c4b8e4a3f4fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_send_debug</definition>
        <argsstring>(ssh_session session, const char *message, int always_display)</argsstring>
        <name>ssh_send_debug</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>always_display</declname>
        </param>
        <briefdescription>
<para>Send a debug message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">message</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">always_display</parametername>
</parameternamelist>
<parameterdescription>
<para>Message SHOULD be displayed by the server. It SHOULD NOT be displayed unless debugging information has been explicitly requested.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="874" column="1" bodyfile="src/session.c" bodystart="874" bodyend="907"/>
        <references refid="group__libssh__buffer_1gad877da63fd8d9a0ee00859bfbacf1eda" compoundref="buffer_8c" startline="195" endline="208">ssh_buffer_reinit</references>
        <references refid="group__libssh__session_1gaa0e04dc9e24d5112a5ca2b7bd68031d0" compoundref="session_8c" startline="600" endline="636">ssh_handle_packets</references>
        <references refid="group__libssh__socket_1ga29176fb6f348985227454a3f5daec745" compoundref="socket_8c" startline="514" endline="516">ssh_socket_is_open</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga84d4ac53ac8582b70da9b63739df61ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_set_counters</definition>
        <argsstring>(ssh_session session, ssh_counter scounter, ssh_counter rcounter)</argsstring>
        <name>ssh_set_counters</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>ssh_counter</type>
          <declname>scounter</declname>
        </param>
        <param>
          <type>ssh_counter</type>
          <declname>rcounter</declname>
        </param>
        <briefdescription>
<para>Set the session data counters. </para>        </briefdescription>
        <detaileddescription>
<para>This functions sets the counter structures to be used to calculate data which comes in and goes out through the session at different levels.</para><para><programlisting><codeline><highlight class="normal">struct<sp/>ssh_counter_struct<sp/>scounter<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.in_bytes<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.out_bytes<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.in_packets<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.out_packets<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">struct<sp/>ssh_counter_struct<sp/>rcounter<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.in_bytes<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.out_bytes<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.in_packets<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.out_packets<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ssh_set_counters(session,<sp/>&amp;scounter,<sp/>&amp;rcounter);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scounter</parametername>
</parameternamelist>
<parameterdescription>
<para>Counter for byte data handled by the session sockets.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rcounter</parametername>
</parameternamelist>
<parameterdescription>
<para>Counter for byte and packet data handled by the session, prior compression and SSH overhead. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/session.c" line="940" column="1" bodyfile="src/session.c" bodystart="940" bodyend="946"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__libssh__session_1gaf973d65853ac2ac2b0eb78b48c51e925" prot="public" static="no">
        <name>KNOWNHOSTS_MAXTYPES</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/known_hosts.c" line="650" column="9" bodyfile="src/known_hosts.c" bodystart="650" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions that manage a session. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
