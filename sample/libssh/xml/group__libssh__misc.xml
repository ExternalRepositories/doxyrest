<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__libssh__misc" kind="group">
    <compoundname>libssh_misc</compoundname>
    <title>The SSH helper functions.</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libssh__misc_1gad6effc9fcc3529ae5d7301fb096aa71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_getpass</definition>
        <argsstring>(const char *prompt, char *buf, size_t len, int echo, int verify)</argsstring>
        <name>ssh_getpass</name>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>echo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verify</declname>
        </param>
        <briefdescription>
<para>Get a password from the console. </para>        </briefdescription>
        <detaileddescription>
<para>You should make sure that the buffer is an empty string!</para><para>You can also use this function to ask for a username. Then you can fill the buffer with the username and it is shows to the users. If the users just presses enter the buffer will be untouched.</para><para><programlisting><codeline><highlight class="normal">char<sp/>username[128];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">snprintf(username,<sp/>sizeof(username),<sp/>&quot;john&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ssh_getpass(&quot;Username:&quot;,<sp/>username,<sp/>sizeof(username),<sp/>1,<sp/>0);</highlight></codeline>
</programlisting></para><para>The prompt will look like this:</para><para>Username: [john]</para><para>If you press enter then john is used as the username, or you can type it in to change it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">prompt</parametername>
</parameternamelist>
<parameterdescription>
<para>The prompt to show to ask for the password.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer the password should be stored. It NEEDS to be empty or filled out.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">echo</parametername>
</parameternamelist>
<parameterdescription>
<para>Should we echo what you type.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">verify</parametername>
</parameternamelist>
<parameterdescription>
<para>Should we ask for the password twice.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/getpass.c" line="214" column="1" bodyfile="src/getpass.c" bodystart="214" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga894753441a2150b0599fdb283bf02c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_get_user_home_dir</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_get_user_home_dir</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="209" column="1" bodyfile="src/misc.c" bodystart="209" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga8077c07f3f7ca5bc62ac7ba807f30476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_file_readaccess_ok</definition>
        <argsstring>(const char *file)</argsstring>
        <name>ssh_file_readaccess_ok</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="234" column="1" bodyfile="src/misc.c" bodystart="234" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaa9b6cc5a03233cde110bc394a9cc1a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_get_local_username</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_get_local_username</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="242" column="1" bodyfile="src/misc.c" bodystart="242" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga6b7c4da7c95d8122de1d4f9c12d1a809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_is_ipaddr_v4</definition>
        <argsstring>(const char *str)</argsstring>
        <name>ssh_is_ipaddr_v4</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="263" column="1" bodyfile="src/misc.c" bodystart="263" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga1c673445ca02a6f30ba5940682b5e7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_is_ipaddr</definition>
        <argsstring>(const char *str)</argsstring>
        <name>ssh_is_ipaddr</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="275" column="1" bodyfile="src/misc.c" bodystart="275" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga88c3547781e8d80983e1ad1fe3cb70ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_lowercase</definition>
        <argsstring>(const char *str)</argsstring>
        <name>ssh_lowercase</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="293" column="1" bodyfile="src/misc.c" bodystart="293" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaa8ec4fa8a47283d9a7fd8920e84f8fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_hostport</definition>
        <argsstring>(const char *host, int port)</argsstring>
        <name>ssh_hostport</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="312" column="1" bodyfile="src/misc.c" bodystart="312" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaeda71ed34a62fa332762f25b14dac6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_version</definition>
        <argsstring>(int req_version)</argsstring>
        <name>ssh_version</name>
        <param>
          <type>int</type>
          <declname>req_version</declname>
        </param>
        <briefdescription>
<para>Check if libssh is the required version or get the version string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">req_version</parametername>
</parameternamelist>
<parameterdescription>
<para>The version required.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the version of libssh is newer than the version required it will return a version string. NULL if the version is older.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">if<sp/>(ssh_version(SSH_VERSION_INT(0,2,1))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/>&quot;libssh<sp/>version<sp/>is<sp/>too<sp/>old!\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>exit(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(debug)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;libssh<sp/>%s\n&quot;,<sp/>ssh_version(0));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="349" column="1" bodyfile="src/misc.c" bodystart="349" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga4c696e6fd38257737962971fa0362435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct ssh_list *</type>
        <definition>struct ssh_list* ssh_list_new</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_list_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="358" column="1" bodyfile="src/misc.c" bodystart="358" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga069155e0b5924eb930022b8d566f6d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_list_free</definition>
        <argsstring>(struct ssh_list *list)</argsstring>
        <name>ssh_list_free</name>
        <param>
          <type>struct ssh_list *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="366" column="1" bodyfile="src/misc.c" bodystart="366" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gad36d247bfcae7965d6aca8245d061e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct ssh_iterator *</type>
        <definition>struct ssh_iterator* ssh_list_get_iterator</definition>
        <argsstring>(const struct ssh_list *list)</argsstring>
        <name>ssh_list_get_iterator</name>
        <param>
          <type>const struct ssh_list *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="379" column="1" bodyfile="src/misc.c" bodystart="379" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga7a929a68f02650d474604a10252afd68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct ssh_iterator *</type>
        <definition>struct ssh_iterator* ssh_list_find</definition>
        <argsstring>(const struct ssh_list *list, void *value)</argsstring>
        <name>ssh_list_find</name>
        <param>
          <type>const struct ssh_list *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="385" column="1" bodyfile="src/misc.c" bodystart="385" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga4c467539707d0cee932840c3134ef15d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct ssh_iterator *</type>
        <definition>static struct ssh_iterator* ssh_iterator_new</definition>
        <argsstring>(const void *data)</argsstring>
        <name>ssh_iterator_new</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="393" column="1" bodyfile="src/misc.c" bodystart="393" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga4590c6ff62f0e6feb59e2e3152a6721f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_list_append</definition>
        <argsstring>(struct ssh_list *list, const void *data)</argsstring>
        <name>ssh_list_append</name>
        <param>
          <type>struct ssh_list *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="402" column="1" bodyfile="src/misc.c" bodystart="402" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga7f1c23a518f3ca0b63189763b64141c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_list_prepend</definition>
        <argsstring>(struct ssh_list *list, const void *data)</argsstring>
        <name>ssh_list_prepend</name>
        <param>
          <type>struct ssh_list *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="417" column="1" bodyfile="src/misc.c" bodystart="417" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gac862429660a1f93dcf625d08f407b85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_list_remove</definition>
        <argsstring>(struct ssh_list *list, struct ssh_iterator *iterator)</argsstring>
        <name>ssh_list_remove</name>
        <param>
          <type>struct ssh_list *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>struct ssh_iterator *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="436" column="1" bodyfile="src/misc.c" bodystart="436" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga7a36607f228dfde10db885d03b89c32e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* _ssh_list_pop_head</definition>
        <argsstring>(struct ssh_list *list)</argsstring>
        <name>_ssh_list_pop_head</name>
        <param>
          <type>struct ssh_list *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Removes the top element of the list and returns the data value attached to it. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="471" column="1" bodyfile="src/misc.c" bodystart="471" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gad36f0f8dbde59aefedd385dff76384fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_dirname</definition>
        <argsstring>(const char *path)</argsstring>
        <name>ssh_dirname</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Parse directory component. </para>        </briefdescription>
        <detaileddescription>
<para>dirname breaks a null-terminated pathname string into a directory component. In the usual case, <ref refid="group__libssh__misc_1gad36f0f8dbde59aefedd385dff76384fa" kindref="member">ssh_dirname()</ref> returns the string up to, but not including, the final &apos;/&apos;. Trailing &apos;/&apos; characters are not counted as part of the pathname. The caller must free the memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to parse.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dirname of path or NULL if we can&apos;t allocate memory. If path does not contain a slash, c_dirname() returns the string &quot;.&quot;. If path is the string &quot;/&quot;, it returns the string &quot;/&quot;. If path is NULL or an empty string, &quot;.&quot; is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="500" column="1" bodyfile="src/misc.c" bodystart="500" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga83b053a8bdf80eea5ebc662e5098a52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_basename</definition>
        <argsstring>(const char *path)</argsstring>
        <name>ssh_basename</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>basename - parse filename component. </para>        </briefdescription>
        <detaileddescription>
<para>basename breaks a null-terminated pathname string into a filename component. <ref refid="group__libssh__misc_1ga83b053a8bdf80eea5ebc662e5098a52b" kindref="member">ssh_basename()</ref> returns the component following the final &apos;/&apos;. Trailing &apos;/&apos; characters are not counted as part of the pathname.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to parse.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The filename of path or NULL if we can&apos;t allocate memory. If path is a the string &quot;/&quot;, basename returns the string &quot;/&quot;. If path is NULL or an empty string, &quot;.&quot; is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="555" column="1" bodyfile="src/misc.c" bodystart="555" bodyend="593"/>
        <referencedby refid="group__libssh__scp_1gaa584f03d4e3d582ac10a3a19818ec56d" compoundref="scp_8c" startline="227" endline="261">ssh_scp_push_directory</referencedby>
        <referencedby refid="group__libssh__scp_1ga50b701b9c8923011d4fc6489c9c7eaae" compoundref="scp_8c" startline="317" endline="355">ssh_scp_push_file64</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga5e15e93beecaef3af67d02b7ba55309f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_mkdir</definition>
        <argsstring>(const char *pathname, mode_t mode)</argsstring>
        <name>ssh_mkdir</name>
        <param>
          <type>const char *</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Attempts to create a directory with the given pathname. </para>        </briefdescription>
        <detaileddescription>
<para>This is the portable version of mkdir, mode is ignored on Windows systems.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pathname</parametername>
</parameternamelist>
<parameterdescription>
<para>The path name to create the directory.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The permissions to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error with errno set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="606" column="1" bodyfile="src/misc.c" bodystart="606" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga85622306848fd7e735d5843747f6eb28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_path_expand_tilde</definition>
        <argsstring>(const char *d)</argsstring>
        <name>ssh_path_expand_tilde</name>
        <param>
          <type>const char *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Expand a directory starting with a tilde &apos;~&apos;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">d</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory to expand.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expanded directory, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="625" column="1" bodyfile="src/misc.c" bodystart="625" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gabee03cec7d5ba668885bd1a47e9650ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_path_expand_escape</definition>
        <argsstring>(ssh_session session, const char *s)</argsstring>
        <name>ssh_path_expand_escape</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="683" column="1" bodyfile="src/misc.c" bodystart="683" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga37f393d573c9692e87b5a838bef7ebe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_analyze_banner</definition>
        <argsstring>(ssh_session session, int server, int *ssh1, int *ssh2)</argsstring>
        <name>ssh_analyze_banner</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>server</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ssh1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ssh2</declname>
        </param>
        <briefdescription>
<para>Analyze the SSH banner to find out if we have a SSHv1 or SSHv2 server. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to analyze the banner from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>server</parametername>
</parameternamelist>
<parameterdescription>
<para>0 means we are a client, 1 a server. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssh1</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable which is set if it is a SSHv1 server. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssh2</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable which is set if it is a SSHv2 server.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error.</para></simplesect>
<simplesect kind="see"><para>ssh_get_banner() </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="795" column="1" bodyfile="src/misc.c" bodystart="795" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaaa0c97f49044d29f2a3b5b3ae82979ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_timestamp_init</definition>
        <argsstring>(struct ssh_timestamp *ts)</argsstring>
        <name>ssh_timestamp_init</name>
        <param>
          <type>struct ssh_timestamp *</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>initializes a timestamp to the current time </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ts</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an allocated ssh_timestamp structure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="882" column="1" bodyfile="src/misc.c" bodystart="882" bodyend="893"/>
        <referencedby refid="group__libssh__channel_1ga1026cfa48ecfc0b4898d4ea443acfc5d" compoundref="channels_8c" startline="3021" endline="3135">ssh_channel_select</referencedby>
        <referencedby refid="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" compoundref="session_8c" startline="661" endline="705">ssh_handle_packets_termination</referencedby>
        <referencedby refid="group__libssh__poll_1ga6c0f6d3c677838181df5cd03a755fd7c" compoundref="poll_8c" startline="599" endline="652">ssh_poll_ctx_dopoll</referencedby>
        <referencedby refid="group__libssh__misc_1ga1a6abbb2da16c6543f7de29b5c98f086" compoundref="misc_8c" startline="946" endline="968">ssh_timeout_elapsed</referencedby>
        <referencedby refid="group__libssh__misc_1gad1c4b29e2421eb8f9ca111d98b0c2976" compoundref="misc_8c" startline="977" endline="989">ssh_timeout_update</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga8252b2c061fd7e0f75a00696e4edf12d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_timestamp_difference</definition>
        <argsstring>(struct ssh_timestamp *old, struct ssh_timestamp *new)</argsstring>
        <name>ssh_timestamp_difference</name>
        <param>
          <type>struct ssh_timestamp *</type>
          <declname>old</declname>
        </param>
        <param>
          <type>struct ssh_timestamp *</type>
          <declname>new</declname>
        </param>
        <briefdescription>
<para>gets the time difference between two timestamps in ms </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">old</parametername>
</parameternamelist>
<parameterdescription>
<para>older value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">new</parametername>
</parameternamelist>
<parameterdescription>
<para>newer value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>difference in milliseconds </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="905" column="1" bodyfile="src/misc.c" bodystart="905" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga7178af941c118949a8a7f34e3b5c815e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_make_milliseconds</definition>
        <argsstring>(long sec, long usec)</argsstring>
        <name>ssh_make_milliseconds</name>
        <param>
          <type>long</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>long</type>
          <declname>usec</declname>
        </param>
        <briefdescription>
<para>turn seconds and microseconds pair (as provided by user-set options) into millisecond value </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sec</parametername>
</parameternamelist>
<parameterdescription>
<para>number of seconds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">usec</parametername>
</parameternamelist>
<parameterdescription>
<para>number of microseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>milliseconds, or 10000 if user supplied values are equal to zero </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="926" column="1" bodyfile="src/misc.c" bodystart="926" bodyend="934"/>
        <referencedby refid="group__libssh__session_1gaa0e04dc9e24d5112a5ca2b7bd68031d0" compoundref="session_8c" startline="600" endline="636">ssh_handle_packets</referencedby>
        <referencedby refid="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" compoundref="session_8c" startline="661" endline="705">ssh_handle_packets_termination</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1ga1a6abbb2da16c6543f7de29b5c98f086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_timeout_elapsed</definition>
        <argsstring>(struct ssh_timestamp *ts, int timeout)</argsstring>
        <name>ssh_timeout_elapsed</name>
        <param>
          <type>struct ssh_timestamp *</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Checks if a timeout is elapsed, in function of a previous timestamp and an assigned timeout. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ts</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an existing timestamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds. Negative values mean infinite timeout </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if timeout is elapsed 0 otherwise </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="946" column="1" bodyfile="src/misc.c" bodystart="946" bodyend="968"/>
        <references refid="group__libssh__misc_1gaaa0c97f49044d29f2a3b5b3ae82979ff" compoundref="misc_8c" startline="882" endline="893">ssh_timestamp_init</references>
        <referencedby refid="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" compoundref="session_8c" startline="661" endline="705">ssh_handle_packets_termination</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gad1c4b29e2421eb8f9ca111d98b0c2976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_timeout_update</definition>
        <argsstring>(struct ssh_timestamp *ts, int timeout)</argsstring>
        <name>ssh_timeout_update</name>
        <param>
          <type>struct ssh_timestamp *</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>updates a timeout value so it reflects the remaining time </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ts</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an existing timestamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds. Negative values mean infinite timeout </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>remaining time in milliseconds, 0 if elapsed, -1 if never. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="977" column="1" bodyfile="src/misc.c" bodystart="977" bodyend="989"/>
        <references refid="group__libssh__misc_1gaaa0c97f49044d29f2a3b5b3ae82979ff" compoundref="misc_8c" startline="882" endline="893">ssh_timestamp_init</references>
        <referencedby refid="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" compoundref="session_8c" startline="661" endline="705">ssh_handle_packets_termination</referencedby>
        <referencedby refid="group__libssh__poll_1ga6c0f6d3c677838181df5cd03a755fd7c" compoundref="poll_8c" startline="599" endline="652">ssh_poll_ctx_dopoll</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__misc_1gaf3cfcc97538c099a8f3d2a8b9ac8c258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_match_group</definition>
        <argsstring>(const char *group, const char *object)</argsstring>
        <name>ssh_match_group</name>
        <param>
          <type>const char *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="992" column="1" bodyfile="src/misc.c" bodystart="992" bodyend="1015"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__libssh__misc_1ga89cd34ceafacdb777878d4bf68da7a7e" prot="public" static="no">
        <name>NSS_BUFLEN_PASSWD</name>
        <initializer>4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="206" column="9" bodyfile="src/misc.c" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__misc_1ga3be7ef61d339af381862a81d4b363efb" prot="public" static="no">
        <name>CLOCK</name>
        <initializer>CLOCK_REALTIME</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/misc.c" line="874" column="10" bodyfile="src/misc.c" bodystart="874" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Different helper functions used in the SSH Library. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
