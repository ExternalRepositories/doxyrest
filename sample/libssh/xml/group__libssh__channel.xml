<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__libssh__channel" kind="group">
    <compoundname>libssh_channel</compoundname>
    <title>The SSH channel functions</title>
    <innerclass refid="structssh__channel__read__termination__struct" prot="public">ssh_channel_read_termination_struct</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libssh__channel_1ga41254c9dd24ac1ae9ad9c0edd3825dee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_channel</type>
        <definition>static ssh_channel channel_from_msg</definition>
        <argsstring>(ssh_session session, ssh_buffer packet)</argsstring>
        <name>channel_from_msg</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>ssh_buffer</type>
          <declname>packet</declname>
        </param>
        <briefdescription>
<para>Parse a channel-related packet to resolve it to a ssh_channel. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This works on SSH1 sessions too.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The current SSH session.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">packet</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to parse packet from. The read pointer will be moved after the call.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The related ssh_channel, or NULL if the channel is unknown or the packet is invalid. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="70" column="1" bodyfile="src/channels.c" bodystart="411" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gada8ccda7bf65165fe145d3096a252dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_channel</type>
        <definition>ssh_channel ssh_channel_new</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_channel_new</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Allocate a new channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a newly allocated channel, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="79" column="1" bodyfile="src/channels.c" bodystart="79" bodyend="118"/>
        <references refid="group__libssh__buffer_1ga608cf73226454f21e8b2f9f1d838c5fc" compoundref="buffer_8c" startline="102" endline="115">ssh_buffer_free</references>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="group__libssh__sftp_1ga32c8e182e97352e1aa8a20443c320d7f" compoundref="sftp_8c" startline="104" endline="151">sftp_new</referencedby>
        <referencedby refid="group__libssh__scp_1ga1db56dcb9dee01dd0b679b3b11151110" compoundref="scp_8c" startline="95" endline="150">ssh_scp_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gabb9c8cd95c0aab1a293e91d7b05f8fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ssh_channel_new_id</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_channel_new_id</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Create a new channel identifier. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new channel identifier. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="129" column="1" bodyfile="src/channels.c" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga1f817e943f01e76843f60f9f9ca970f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_packet_channel_open_conf)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_packet_channel_open_conf</type>
        </param>
        <briefdescription>
<para>Handle a SSH_PACKET_CHANNEL_OPEN_CONFIRMATION packet. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Constructs the channel object. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="140" column="1" bodyfile="src/channels.c" bodystart="140" bodyend="185"/>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba6445dfe21592d69d9741d319538b6673" compoundref="libssh_8h" startline="289">SSH_LOG_PACKET</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga18df7b076dd041ef43e8f174eecdc02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_packet_channel_open_fail)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_packet_channel_open_fail</type>
        </param>
        <briefdescription>
<para>Handle a SSH_CHANNEL_OPEN_FAILURE and set the state of the channel. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="192" column="1" bodyfile="src/channels.c" bodystart="192" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga3c2fe7cf69c947046bbfae132afa7ff4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_channel_open_termination</definition>
        <argsstring>(void *c)</argsstring>
        <name>ssh_channel_open_termination</name>
        <param>
          <type>void *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="223" column="1" bodyfile="src/channels.c" bodystart="223" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga8056ce5726220396565a77a1cca940f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int channel_open</definition>
        <argsstring>(ssh_channel channel, const char *type, int window, int maxpacket, ssh_buffer payload)</argsstring>
        <name>channel_open</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxpacket</declname>
        </param>
        <param>
          <type>ssh_buffer</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Open a channel by sending a SSH_OPEN_CHANNEL message and wait for the reply. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The current channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>A C string describing the kind of channel (e.g. &quot;exec&quot;).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The receiving window of the channel. The window is the maximum size of data that can stay in buffers and network.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxpacket</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum packet size allowed (like MTU).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">payload</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing additional payload for the query. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="250" column="1" bodyfile="src/channels.c" bodystart="250" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga4c25383c95b09d1b583ef0a9db4b08e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_channel</type>
        <definition>ssh_channel ssh_channel_from_local</definition>
        <argsstring>(ssh_session session, uint32_t id)</argsstring>
        <name>ssh_channel_from_local</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="321" column="1" bodyfile="src/channels.c" bodystart="321" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gae37f8913e91ce15bcdc07d663e3fa9b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int grow_window</definition>
        <argsstring>(ssh_session session, ssh_channel channel, int minimumsize)</argsstring>
        <name>grow_window</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minimumsize</declname>
        </param>
        <briefdescription>
<para>grows the local window and send a packet to the other party </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>SSH session </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>SSH channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum acceptable size for the new window. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="345" column="1" bodyfile="src/channels.c" bodystart="345" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga9ddc86ac082a2b8992426c70c0b9e2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(channel_rcv_change_window)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>channel_rcv_change_window</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="437" column="1" bodyfile="src/channels.c" bodystart="437" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga2a1924f01a292478aaf2f140a8a107e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(channel_rcv_data)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>channel_rcv_data</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="470" column="1" bodyfile="src/channels.c" bodystart="470" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga21f963dbe5ac591cc181244f00a6a396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(channel_rcv_eof)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>channel_rcv_eof</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="569" column="1" bodyfile="src/channels.c" bodystart="569" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga174d7f6268abeab5bc5d427d3ba0fc90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(channel_rcv_close)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>channel_rcv_close</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="597" column="1" bodyfile="src/channels.c" bodystart="597" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga04a182f13550058a18b9ba97d8d63ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(channel_rcv_request)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>channel_rcv_request</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="644" column="1" bodyfile="src/channels.c" bodystart="644" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga6d4c7ef18a63d8b64bba2dc22d59b450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int channel_default_bufferize</definition>
        <argsstring>(ssh_channel channel, void *data, int len, int is_stderr)</argsstring>
        <name>channel_default_bufferize</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_stderr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="791" column="1" bodyfile="src/channels.c" bodystart="791" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gaf051dd30d75bf6dc45d1a5088cf970bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_open_session</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_open_session</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Open a session channel (suited for a shell, not TCP forwarding). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated channel.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gae86b0704a1f2bdebb268b55567f7f47b" kindref="member">ssh_channel_open_forward()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1ga7aede2f9af4c494ff9e41fc08a4572f1" kindref="member">ssh_channel_request_env()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gaed4c5fb30c9df2b2548421ccf4e81bf1" kindref="member">ssh_channel_request_shell()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1ga567d509183ade0a77190f390e2b5747d" kindref="member">ssh_channel_request_exec()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="860" column="1" bodyfile="src/channels.c" bodystart="860" bodyend="876"/>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
        <referencedby refid="group__libssh__sftp_1ga32c8e182e97352e1aa8a20443c320d7f" compoundref="sftp_8c" startline="104" endline="151">sftp_new</referencedby>
        <referencedby refid="group__libssh__scp_1ga1db56dcb9dee01dd0b679b3b11151110" compoundref="scp_8c" startline="95" endline="150">ssh_scp_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga6c4d4f5436dd5be58973606c6bcd8bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_open_auth_agent</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_open_auth_agent</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Open an agent authentication forwarding channel. </para>        </briefdescription>
        <detaileddescription>
<para>This type of channel can be opened by a server towards a client in order to provide SSH-Agent services to the server-side process. This channel can only be opened if the client claimed support by sending a channel request beforehand.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated channel.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gae86b0704a1f2bdebb268b55567f7f47b" kindref="member">ssh_channel_open_forward()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="893" column="1" bodyfile="src/channels.c" bodystart="893" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gae86b0704a1f2bdebb268b55567f7f47b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_open_forward</definition>
        <argsstring>(ssh_channel channel, const char *remotehost, int remoteport, const char *sourcehost, int localport)</argsstring>
        <name>ssh_channel_open_forward</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>remotehost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>remoteport</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sourcehost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>localport</declname>
        </param>
        <briefdescription>
<para>Open a TCP/IP forwarding channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">remotehost</parametername>
</parameternamelist>
<parameterdescription>
<para>The remote host to connected (host name or IP).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">remoteport</parametername>
</parameternamelist>
<parameterdescription>
<para>The remote port.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sourcehost</parametername>
</parameternamelist>
<parameterdescription>
<para>The numeric IP address of the machine from where the connection request originates. This is mostly for logging purposes.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">localport</parametername>
</parameternamelist>
<parameterdescription>
<para>The port on the host from where the connection originated. This is mostly for logging purposes.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.</para></simplesect>
<simplesect kind="warning"><para>This function does not bind the local port and does not automatically forward the content of a socket to the channel. You still have to use channel_read and channel_write for this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="937" column="1" bodyfile="src/channels.c" bodystart="937" bodyend="983"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gad1417f9eae8928fed20faafe2d9dbfff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_channel_free</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_free</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Close and free a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to free.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Any data unread on this channel will be lost. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="993" column="1" bodyfile="src/channels.c" bodystart="993" bodyend="1015"/>
        <references refid="group__libssh__channel_1ga238f07e0455456a5bfd8a49ead917732" compoundref="channels_8c" startline="1117" endline="1163">ssh_channel_close</references>
        <references refid="group__libssh__channel_1ga1e7211251562c5e1ec64647236caa745" compoundref="channels_8c" startline="1022" endline="1035">ssh_channel_do_free</references>
        <referencedby refid="group__libssh__sftp_1ga155c66639cb3342c7e02a96c8dbf7501" compoundref="sftp_8c" startline="258" endline="283">sftp_free</referencedby>
        <referencedby refid="group__libssh__sftp_1ga32c8e182e97352e1aa8a20443c320d7f" compoundref="sftp_8c" startline="104" endline="151">sftp_new</referencedby>
        <referencedby refid="group__libssh__scp_1ga14d31059dcf6fb2325fb960da8e4474e" compoundref="scp_8c" startline="161" endline="190">ssh_scp_close</referencedby>
        <referencedby refid="group__libssh__scp_1gac29000cdb07c74d54251fbd838c0c661" compoundref="scp_8c" startline="199" endline="211">ssh_scp_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga1e7211251562c5e1ec64647236caa745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_channel_do_free</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_do_free</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Effectively free a channel, without caring about flags. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1022" column="1" bodyfile="src/channels.c" bodystart="1022" bodyend="1035"/>
        <referencedby refid="group__libssh__channel_1gad1417f9eae8928fed20faafe2d9dbfff" compoundref="channels_8c" startline="993" endline="1015">ssh_channel_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga072f82fdf3e50514f747653af2c99004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_send_eof</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_send_eof</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Send an end of file on the channel. </para>        </briefdescription>
        <detaileddescription>
<para>This doesn&apos;t close the channel. You may still read from it but not write.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the eof to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred.</para></simplesect>
Example: <programlisting><codeline><highlight class="normal">rc<sp/>=<sp/>ssh_channel_send_eof(channel);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(rc<sp/>==<sp/>SSH_ERROR)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">while(!ssh_channel_is_eof(channel))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>ssh_channel_read(channel,<sp/>buf,<sp/>sizeof(buf),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(rc<sp/>==<sp/>SSH_ERROR)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">ssh_channel_close(channel);</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="group__libssh__channel_1ga238f07e0455456a5bfd8a49ead917732" kindref="member">ssh_channel_close()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gad1417f9eae8928fed20faafe2d9dbfff" kindref="member">ssh_channel_free()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gab535264029443d77214c0615a0788b0a" kindref="member">ssh_channel_is_eof()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1065" column="1" bodyfile="src/channels.c" bodystart="1065" bodyend="1102"/>
        <references refid="group__libssh__buffer_1gad877da63fd8d9a0ee00859bfbacf1eda" compoundref="buffer_8c" startline="195" endline="208">ssh_buffer_reinit</references>
        <references refid="group__libssh__channel_1gae61fe034965d58e1fb6da1bee98de191" compoundref="channels_8c" startline="1199" endline="1201">ssh_channel_flush</references>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba6445dfe21592d69d9741d319538b6673" compoundref="libssh_8h" startline="289">SSH_LOG_PACKET</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
        <referencedby refid="group__libssh__sftp_1ga155c66639cb3342c7e02a96c8dbf7501" compoundref="sftp_8c" startline="258" endline="283">sftp_free</referencedby>
        <referencedby refid="group__libssh__channel_1ga238f07e0455456a5bfd8a49ead917732" compoundref="channels_8c" startline="1117" endline="1163">ssh_channel_close</referencedby>
        <referencedby refid="group__libssh__scp_1ga14d31059dcf6fb2325fb960da8e4474e" compoundref="scp_8c" startline="161" endline="190">ssh_scp_close</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga238f07e0455456a5bfd8a49ead917732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_close</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_close</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Close a channel. </para>        </briefdescription>
        <detaileddescription>
<para>This sends an end of file and then closes the channel. You won&apos;t be able to recover any data the server was going to send or was in buffers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to close.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gad1417f9eae8928fed20faafe2d9dbfff" kindref="member">ssh_channel_free()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gab535264029443d77214c0615a0788b0a" kindref="member">ssh_channel_is_eof()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1117" column="1" bodyfile="src/channels.c" bodystart="1117" bodyend="1163"/>
        <references refid="group__libssh__buffer_1gad877da63fd8d9a0ee00859bfbacf1eda" compoundref="buffer_8c" startline="195" endline="208">ssh_buffer_reinit</references>
        <references refid="group__libssh__channel_1gae61fe034965d58e1fb6da1bee98de191" compoundref="channels_8c" startline="1199" endline="1201">ssh_channel_flush</references>
        <references refid="group__libssh__channel_1ga072f82fdf3e50514f747653af2c99004" compoundref="channels_8c" startline="1065" endline="1102">ssh_channel_send_eof</references>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba6445dfe21592d69d9741d319538b6673" compoundref="libssh_8h" startline="289">SSH_LOG_PACKET</references>
        <referencedby refid="classssh_1_1_channel_1ad14405b4e8c3a8e3d37a49ed793aadde" compoundref="libsshpp_8hpp" startline="437" endline="440">ssh::Channel::close</referencedby>
        <referencedby refid="group__libssh__channel_1gad1417f9eae8928fed20faafe2d9dbfff" compoundref="channels_8c" startline="993" endline="1015">ssh_channel_free</referencedby>
        <referencedby refid="group__libssh__scp_1ga14d31059dcf6fb2325fb960da8e4474e" compoundref="scp_8c" startline="161" endline="190">ssh_scp_close</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gac85f6c47b96159e7e912f25c7ba5f2a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_channel_waitwindow_termination</definition>
        <argsstring>(void *c)</argsstring>
        <name>ssh_channel_waitwindow_termination</name>
        <param>
          <type>void *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1166" column="1" bodyfile="src/channels.c" bodystart="1166" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gae8a61c46f07fc2b242a8b8cee0c50596" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_waitsession_unblocked</definition>
        <argsstring>(void *s)</argsstring>
        <name>ssh_waitsession_unblocked</name>
        <param>
          <type>void *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1179" column="1" bodyfile="src/channels.c" bodystart="1179" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gae61fe034965d58e1fb6da1bee98de191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_flush</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_flush</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Flushes a channel (and its session) until the output buffer is empty, or timeout elapsed. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>SSH channel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK On success, SSH_ERROR on error SSH_AGAIN Timeout elapsed (or in nonblocking mode) </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1199" column="1" bodyfile="src/channels.c" bodystart="1199" bodyend="1201"/>
        <references refid="group__libssh__session_1ga60da8e2c47897a209a455923c35d52d8" compoundref="session_8c" startline="490" endline="506">ssh_blocking_flush</references>
        <referencedby refid="group__libssh__channel_1ga238f07e0455456a5bfd8a49ead917732" compoundref="channels_8c" startline="1117" endline="1163">ssh_channel_close</referencedby>
        <referencedby refid="group__libssh__channel_1ga072f82fdf3e50514f747653af2c99004" compoundref="channels_8c" startline="1065" endline="1102">ssh_channel_send_eof</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga918e9bde297309e977a872bc62c0d260" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int channel_write_common</definition>
        <argsstring>(ssh_channel channel, const void *data, uint32_t len, int is_stderr)</argsstring>
        <name>channel_write_common</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_stderr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1203" column="1" bodyfile="src/channels.c" bodystart="1203" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gadf53c5a5b501086af26d06cba3f1491f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ssh_channel_window_size</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_window_size</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1352" column="1" bodyfile="src/channels.c" bodystart="1352" bodyend="1354"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga5d658df773ba854b35ff9f905341e2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_write</definition>
        <argsstring>(ssh_channel channel, const void *data, uint32_t len)</argsstring>
        <name>ssh_channel_write</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Blocking write on a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to write to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the data to write.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer to write to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written, SSH_ERROR on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" kindref="member">ssh_channel_read()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1369" column="1" bodyfile="src/channels.c" bodystart="1369" bodyend="1371"/>
        <referencedby refid="group__libssh__scp_1gad3bb38b15f02597cc1e155c526a51e51" compoundref="scp_8c" startline="673" endline="691">ssh_scp_accept_request</referencedby>
        <referencedby refid="group__libssh__scp_1gad36438c6b1e235d96cec43ca350e9b4f" compoundref="scp_8c" startline="644" endline="662">ssh_scp_deny_request</referencedby>
        <referencedby refid="group__libssh__scp_1ga1db56dcb9dee01dd0b679b3b11151110" compoundref="scp_8c" startline="95" endline="150">ssh_scp_init</referencedby>
        <referencedby refid="group__libssh__scp_1ga2ca698c1e49612c083d9f8a72df52188" compoundref="scp_8c" startline="271" endline="298">ssh_scp_leave_directory</referencedby>
        <referencedby refid="group__libssh__scp_1gaba59cd8cc77d219cac93f865445c6e47" compoundref="scp_8c" startline="547" endline="631">ssh_scp_pull_request</referencedby>
        <referencedby refid="group__libssh__scp_1gaa584f03d4e3d582ac10a3a19818ec56d" compoundref="scp_8c" startline="227" endline="261">ssh_scp_push_directory</referencedby>
        <referencedby refid="group__libssh__scp_1ga50b701b9c8923011d4fc6489c9c7eaae" compoundref="scp_8c" startline="317" endline="355">ssh_scp_push_file64</referencedby>
        <referencedby refid="group__libssh__scp_1ga10bf627407959b51a7c39b37e8d46460" compoundref="scp_8c" startline="703" endline="745">ssh_scp_read</referencedby>
        <referencedby refid="group__libssh__scp_1ga11f48e2cf62bcec20d9232ed3ca41752" compoundref="scp_8c" startline="437" endline="488">ssh_scp_write</referencedby>
        <referencedby refid="classssh_1_1_channel_1a06cf7ffd971eff87783a169444fa09a2" compoundref="libsshpp_8hpp" startline="577" endline="586">ssh::Channel::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gaaafcda943c96ddb91e5c28c0bdee7045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_is_open</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_is_open</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Check if the channel is open or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to check.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if channel is closed, nonzero otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gab2720b44cb7f1dfe2b38ffe07c2f45c7" kindref="member">ssh_channel_is_closed()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1382" column="1" bodyfile="src/channels.c" bodystart="1382" bodyend="1387"/>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gab2720b44cb7f1dfe2b38ffe07c2f45c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_is_closed</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_is_closed</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Check if the channel is closed or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to check.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if channel is opened, nonzero otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gaaafcda943c96ddb91e5c28c0bdee7045" kindref="member">ssh_channel_is_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1398" column="1" bodyfile="src/channels.c" bodystart="1398" bodyend="1403"/>
        <referencedby refid="classssh_1_1_channel_1a38880d18d0fc357be0f4f8b8ef1c92ef" compoundref="libsshpp_8hpp" startline="451" endline="453">ssh::Channel::isClosed</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gab535264029443d77214c0615a0788b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_is_eof</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_is_eof</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Check if remote has sent an EOF. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to check.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if there is no EOF, nonzero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1412" column="1" bodyfile="src/channels.c" bodystart="1412" bodyend="1424"/>
        <references refid="group__libssh__buffer_1ga12c1bc319d0117da2b6100f46ab96194" compoundref="buffer_8c" startline="494" endline="497">buffer_get_rest_len</references>
        <referencedby refid="group__libssh__channel_1gab391f5c978cb1bc8df3ebd061f38e8c5" compoundref="channels_8c" startline="2499" endline="2558">channel_read_buffer</referencedby>
        <referencedby refid="classssh_1_1_channel_1a3bb4131d82cc033d75f65a5137053532" compoundref="libsshpp_8hpp" startline="457" endline="459">ssh::Channel::isEof</referencedby>
        <referencedby refid="group__libssh__scp_1ga14d31059dcf6fb2325fb960da8e4474e" compoundref="scp_8c" startline="161" endline="190">ssh_scp_close</referencedby>
        <referencedby refid="group__libssh__scp_1gaba59cd8cc77d219cac93f865445c6e47" compoundref="scp_8c" startline="547" endline="631">ssh_scp_pull_request</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga1c00ed18679d9a8c5b971260b5df13a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_channel_set_blocking</definition>
        <argsstring>(ssh_channel channel, int blocking)</argsstring>
        <name>ssh_channel_set_blocking</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
<para>Put the channel into blocking or nonblocking mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean for blocking or nonblocking.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>A side-effect of this is to put the whole session in non-blocking mode. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1ga2a29cff08855611be84d050e5bec73bc" kindref="member">ssh_set_blocking()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1437" column="1" bodyfile="src/channels.c" bodystart="1437" bodyend="1442"/>
        <references refid="group__libssh__session_1ga2a29cff08855611be84d050e5bec73bc" compoundref="session_8c" startline="451" endline="457">ssh_set_blocking</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga198e96d111ee3dd2a0551fe10bd3ce16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_packet_channel_success)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_packet_channel_success</type>
        </param>
        <briefdescription>
<para>handle a SSH_CHANNEL_SUCCESS packet and set the channel state. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This works on SSH1 sessions too. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1451" column="1" bodyfile="src/channels.c" bodystart="1451" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gad05566d70f79b960a8ffdddbd65600cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_packet_channel_failure)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_packet_channel_failure</type>
        </param>
        <briefdescription>
<para>Handle a SSH_CHANNEL_FAILURE packet and set the channel state. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This works on SSH1 sessions too. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1483" column="1" bodyfile="src/channels.c" bodystart="1483" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gae3eefab282bb408e096fdeeeba676618" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_channel_request_termination</definition>
        <argsstring>(void *c)</argsstring>
        <name>ssh_channel_request_termination</name>
        <param>
          <type>void *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1509" column="1" bodyfile="src/channels.c" bodystart="1509" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gaee35ccabe6998568d138d35f538765d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int channel_request</definition>
        <argsstring>(ssh_channel channel, const char *request, ssh_buffer buffer, int reply)</argsstring>
        <name>channel_request</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>ssh_buffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reply</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1518" column="1" bodyfile="src/channels.c" bodystart="1518" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gabb175414352256e1602286e0ab50886c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_pty_size</definition>
        <argsstring>(ssh_channel channel, const char *terminal, int col, int row)</argsstring>
        <name>ssh_channel_request_pty_size</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>terminal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Request a pty with a specific type and size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to sent the request.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">terminal</parametername>
</parameternamelist>
<parameterdescription>
<para>The terminal type (&quot;vt100, xterm,...&quot;).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">col</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">row</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1618" column="1" bodyfile="src/channels.c" bodystart="1618" bodyend="1674"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
        <referencedby refid="group__libssh__channel_1ga37c1cec33fe5a2f184768aba52e3a0db" compoundref="channels_8c" startline="1688" endline="1690">ssh_channel_request_pty</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga37c1cec33fe5a2f184768aba52e3a0db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_pty</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_request_pty</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Request a PTY. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the request.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gabb175414352256e1602286e0ab50886c" kindref="member">ssh_channel_request_pty_size()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1688" column="1" bodyfile="src/channels.c" bodystart="1688" bodyend="1690"/>
        <references refid="group__libssh__channel_1gabb175414352256e1602286e0ab50886c" compoundref="channels_8c" startline="1618" endline="1674">ssh_channel_request_pty_size</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gaf5d55c90f3d98c583df23d21905c1127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_change_pty_size</definition>
        <argsstring>(ssh_channel channel, int cols, int rows)</argsstring>
        <name>ssh_channel_change_pty_size</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <briefdescription>
<para>Change the size of the terminal associated to a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to change the size.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cols</parametername>
</parameternamelist>
<parameterdescription>
<para>The new number of columns.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rows</parametername>
</parameternamelist>
<parameterdescription>
<para>The new number of rows.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred.</para></simplesect>
<simplesect kind="warning"><para>Do not call it from a signal handler if you are not sure any other libssh function using the same channel/session is running at same time (not 100% threadsafe). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1707" column="1" bodyfile="src/channels.c" bodystart="1707" bodyend="1742"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_channel_1a196b0eab10bf168330f569ff3881562c" compoundref="libsshpp_8hpp" startline="427" endline="431">ssh::Channel::changePtySize</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gaed4c5fb30c9df2b2548421ccf4e81bf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_shell</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_request_shell</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Request a shell. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the request.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1754" column="1" bodyfile="src/channels.c" bodystart="1754" bodyend="1764"/>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga06024b070f9b2a3d6964b79ae36695b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_subsystem</definition>
        <argsstring>(ssh_channel channel, const char *subsys)</argsstring>
        <name>ssh_channel_request_subsystem</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>subsys</declname>
        </param>
        <briefdescription>
<para>Request a subsystem (for example &quot;sftp&quot;). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the request.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subsys</parametername>
</parameternamelist>
<parameterdescription>
<para>The subsystem to request (for example &quot;sftp&quot;).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.</para></simplesect>
<simplesect kind="warning"><para>You normally don&apos;t have to call it for sftp, see <ref refid="group__libssh__sftp_1ga32c8e182e97352e1aa8a20443c320d7f" kindref="member">sftp_new()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1780" column="1" bodyfile="src/channels.c" bodystart="1780" bodyend="1815"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga3d2a402cddd799036006294eb61649fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_sftp</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_request_sftp</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1817" column="1" bodyfile="src/channels.c" bodystart="1817" bodyend="1822"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gad14fc6d15d825654af4312764a970d04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* generate_cookie</definition>
        <argsstring>(void)</argsstring>
        <name>generate_cookie</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1824" column="1" bodyfile="src/channels.c" bodystart="1824" bodyend="1837"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gadfa34624c28164bd73453cd04aa64c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_x11</definition>
        <argsstring>(ssh_channel channel, int single_connection, const char *protocol, const char *cookie, int screen_number)</argsstring>
        <name>ssh_channel_request_x11</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>single_connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>int</type>
          <declname>screen_number</declname>
        </param>
        <briefdescription>
<para>Sends the &quot;x11-req&quot; channel request over an existing session channel. </para>        </briefdescription>
        <detaileddescription>
<para>This will enable redirecting the display of the remote X11 applications to local X server over an secure tunnel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>An existing session channel where the remote X11 applications are going to be executed.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">single_connection</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean to mark only one X11 app will be redirected.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>A x11 authentication protocol. Pass NULL to use the default value MIT-MAGIC-COOKIE-1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>A x11 authentication cookie. Pass NULL to generate a random cookie.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">screen_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The screen number.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1864" column="1" bodyfile="src/channels.c" bodystart="1864" bodyend="1913"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gac43bae56048b912205d102249b436eec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_channel</type>
        <definition>static ssh_channel ssh_channel_accept</definition>
        <argsstring>(ssh_session session, int channeltype, int timeout_ms, int *destination_port)</argsstring>
        <name>ssh_channel_accept</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channeltype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>destination_port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1915" column="1" bodyfile="src/channels.c" bodystart="1915" bodyend="1968"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga548bd0f77a50b7c8180942544b375866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_channel</type>
        <definition>ssh_channel ssh_channel_accept_x11</definition>
        <argsstring>(ssh_channel channel, int timeout_ms)</argsstring>
        <name>ssh_channel_accept_x11</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Accept an X11 forwarding channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>An x11-enabled session channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created channel, or NULL if no X11 request from the server. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1980" column="1" bodyfile="src/channels.c" bodystart="1980" bodyend="1982"/>
        <referencedby refid="classssh_1_1_channel_1a62000c16999e74525d296f0a1cb19c95" compoundref="libsshpp_8hpp" startline="415" endline="420">ssh::Channel::acceptX11</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gadf43d7b10268fb16127d1dc441bbd226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_request_success)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_request_success</type>
        </param>
        <briefdescription>
<para>Handle a SSH_REQUEST_SUCCESS packet normally sent after a global request. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="1990" column="1" bodyfile="src/channels.c" bodystart="1990" bodyend="2005"/>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba6445dfe21592d69d9741d319538b6673" compoundref="libssh_8h" startline="289">SSH_LOG_PACKET</references>
        <references refid="group__libssh__callbacks_1gac29df803aa1295d6a498c1b081f3b494" compoundref="callbacks_8h" startline="436">SSH_PACKET_USED</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga8518f0b33a413a4b6d55d78816fb092d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SSH_PACKET_CALLBACK</definition>
        <argsstring>(ssh_request_denied)</argsstring>
        <name>SSH_PACKET_CALLBACK</name>
        <param>
          <type>ssh_request_denied</type>
        </param>
        <briefdescription>
<para>Handle a SSH_REQUEST_DENIED packet normally sent after a global request. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2013" column="1" bodyfile="src/channels.c" bodystart="2013" bodyend="2029"/>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba6445dfe21592d69d9741d319538b6673" compoundref="libssh_8h" startline="289">SSH_LOG_PACKET</references>
        <references refid="group__libssh__callbacks_1gac29df803aa1295d6a498c1b081f3b494" compoundref="callbacks_8h" startline="436">SSH_PACKET_USED</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gad181aa43648dc1a380051d55f53855ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_global_request_termination</definition>
        <argsstring>(void *s)</argsstring>
        <name>ssh_global_request_termination</name>
        <param>
          <type>void *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2031" column="1" bodyfile="src/channels.c" bodystart="2031" bodyend="2038"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gafd84abedd8ecc1f15a5f997434ef4368" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int global_request</definition>
        <argsstring>(ssh_session session, const char *request, ssh_buffer buffer, int reply)</argsstring>
        <name>global_request</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>ssh_buffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reply</declname>
        </param>
        <briefdescription>
<para>Send a global request (needed for forward listening) and wait for the result. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">request</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of request (defined in RFC).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional data to put in packet.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reply</parametername>
</parameternamelist>
<parameterdescription>
<para>Set if you expect a reply from server.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2059" column="1" bodyfile="src/channels.c" bodystart="2059" bodyend="2141"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga758cda957227751870c8772df46e5b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_listen_forward</definition>
        <argsstring>(ssh_session session, const char *address, int port, int *bound_port)</argsstring>
        <name>ssh_channel_listen_forward</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>bound_port</declname>
        </param>
        <briefdescription>
<para>Sends the &quot;tcpip-forward&quot; global request to ask the server to begin listening for inbound connections. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to send the request.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to bind to on the server. Pass NULL to bind to all available addresses on all protocol families supported by the server.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port to bind to on the server. Pass 0 to ask the server to allocate the next available unprivileged port number</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bound_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to get actual bound port. Pass NULL to ignore.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2165" column="1" bodyfile="src/channels.c" bodystart="2165" bodyend="2204"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_session_1ae55f054025dcbe4ceeaec87c9ca064c7" compoundref="libsshpp_8hpp" startline="351" endline="355">ssh::Session::writeKnownhost</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga041a495f0230bb017cdf7459e6773664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_forward_listen</definition>
        <argsstring>(ssh_session session, const char *address, int port, int *bound_port)</argsstring>
        <name>ssh_forward_listen</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>bound_port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2207" column="1" bodyfile="src/channels.c" bodystart="2207" bodyend="2209"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga205d5ea76fb140075ebb1c20b8f193d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_channel</type>
        <definition>ssh_channel ssh_forward_accept</definition>
        <argsstring>(ssh_session session, int timeout_ms)</argsstring>
        <name>ssh_forward_accept</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2212" column="1" bodyfile="src/channels.c" bodystart="2212" bodyend="2214"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga490e4b0a7adc022507b7f165b336afe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_channel</type>
        <definition>ssh_channel ssh_channel_accept_forward</definition>
        <argsstring>(ssh_session session, int timeout_ms, int *destination_port)</argsstring>
        <name>ssh_channel_accept_forward</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>destination_port</declname>
        </param>
        <briefdescription>
<para>Accept an incoming TCP/IP forwarding channel and get information about incomming connection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>A timeout in milliseconds.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destination_port</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to destination port or NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created channel, or NULL if no incoming channel request from the server </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2228" column="1" bodyfile="src/channels.c" bodystart="2228" bodyend="2230"/>
        <referencedby refid="classssh_1_1_session_1a6cd5318d71a3850a87b87bdfd89a5983" compoundref="libsshpp_8hpp" startline="603" endline="609">ssh::Session::acceptForward</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga3bff751afc5ecb5bbf9d6447e4e5370f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_cancel_forward</definition>
        <argsstring>(ssh_session session, const char *address, int port)</argsstring>
        <name>ssh_channel_cancel_forward</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Sends the &quot;cancel-tcpip-forward&quot; global request to ask the server to cancel the tcpip-forward request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to send the request.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>The bound address on the server.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>The bound port on the server.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2247" column="1" bodyfile="src/channels.c" bodystart="2247" bodyend="2276"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_session_1ae55f054025dcbe4ceeaec87c9ca064c7" compoundref="libsshpp_8hpp" startline="351" endline="355">ssh::Session::writeKnownhost</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gac474d071d80e725c8b5633cb1d35c010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_forward_cancel</definition>
        <argsstring>(ssh_session session, const char *address, int port)</argsstring>
        <name>ssh_forward_cancel</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2279" column="1" bodyfile="src/channels.c" bodystart="2279" bodyend="2281"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga7aede2f9af4c494ff9e41fc08a4572f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_env</definition>
        <argsstring>(ssh_channel channel, const char *name, const char *value)</argsstring>
        <name>ssh_channel_request_env</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set environment variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to set the environment variables.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the variable.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again. </para></simplesect>
<simplesect kind="warning"><para>Some environment variables may be refused by security reasons. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2298" column="1" bodyfile="src/channels.c" bodystart="2298" bodyend="2335"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga567d509183ade0a77190f390e2b5747d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_exec</definition>
        <argsstring>(ssh_channel channel, const char *cmd)</argsstring>
        <name>ssh_channel_request_exec</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Run a shell command without an interactive shell. </para>        </briefdescription>
        <detaileddescription>
<para>This is similar to &apos;sh -c command&apos;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to execute the command.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to execute (e.g. &quot;ls ~/ -al | grep -i reports&quot;).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.</para></simplesect>
Example: <programlisting><codeline><highlight class="normal">rc<sp/>=<sp/>channel_request_exec(channel,<sp/>&quot;ps<sp/>aux&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(rc<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while<sp/>((rc<sp/>=<sp/>channel_read(channel,<sp/>buffer,<sp/>sizeof(buffer),<sp/>0))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fwrite(buffer,<sp/>1,<sp/>rc,<sp/>stdout)<sp/>!=<sp/>(unsigned<sp/>int)<sp/>rc)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="group__libssh__channel_1gaed4c5fb30c9df2b2548421ccf4e81bf1" kindref="member">ssh_channel_request_shell()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2368" column="1" bodyfile="src/channels.c" bodystart="2368" bodyend="2408"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
        <referencedby refid="group__libssh__scp_1ga1db56dcb9dee01dd0b679b3b11151110" compoundref="scp_8c" startline="95" endline="150">ssh_scp_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gaa98315fca818b561970a6950683f4053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_send_signal</definition>
        <argsstring>(ssh_channel channel, const char *sig)</argsstring>
        <name>ssh_channel_request_send_signal</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Send a signal to remote process (as described in RFC 4254, section 6.9). </para>        </briefdescription>
        <detaileddescription>
<para>Sends a signal &apos;sig&apos; to the remote process. Note, that remote system may not support signals concept. In such a case this request will be silently ignored. Only SSH-v2 is supported (I&apos;m not sure about SSH-v1).</para><para>OpenSSH doesn&apos;t support signals yet, see: <ulink url="https://bugzilla.mindrot.org/show_bug.cgi?id=1424">https://bugzilla.mindrot.org/show_bug.cgi?id=1424</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send signal.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to send (without SIG prefix) <linebreak/>
<linebreak/>
 SIGABRT -&gt; ABRT <linebreak/>
 SIGALRM -&gt; ALRM <linebreak/>
 SIGFPE -&gt; FPE <linebreak/>
 SIGHUP -&gt; HUP <linebreak/>
 SIGILL -&gt; ILL <linebreak/>
 SIGINT -&gt; INT <linebreak/>
 SIGKILL -&gt; KILL <linebreak/>
 SIGPIPE -&gt; PIPE <linebreak/>
 SIGQUIT -&gt; QUIT <linebreak/>
 SIGSEGV -&gt; SEGV <linebreak/>
 SIGTERM -&gt; TERM <linebreak/>
 SIGUSR1 -&gt; USR1 <linebreak/>
 SIGUSR2 -&gt; USR2 <linebreak/>
 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred (including attempts to send signal via SSH-v1 session). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2443" column="1" bodyfile="src/channels.c" bodystart="2443" bodyend="2477"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gab391f5c978cb1bc8df3ebd061f38e8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int channel_read_buffer</definition>
        <argsstring>(ssh_channel channel, ssh_buffer buffer, uint32_t count, int is_stderr)</argsstring>
        <name>channel_read_buffer</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>ssh_buffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_stderr</declname>
        </param>
        <briefdescription>
<para>Read data from a channel into a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to read from.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer which will get the data.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The count of bytes to be read. If it is bigger than 0, the exact size will be read, else (bytes=0) it will return once anything is available.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_stderr</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean value to mark reading from the stderr stream.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, 0 on end of file or SSH_ERROR on error. </para></simplesect>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please use ssh_channel_read instead </para></xrefdescription></xrefsect><simplesect kind="warning"><para>This function doesn&apos;t work in nonblocking/timeout mode </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" kindref="member">ssh_channel_read</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2499" column="1" bodyfile="src/channels.c" bodystart="2499" bodyend="2558"/>
        <references refid="group__libssh__buffer_1ga3bf82f0f310311432410f9393ebab528" compoundref="buffer_8c" startline="223" endline="247">ssh_buffer_add_data</references>
        <references refid="group__libssh__buffer_1gad877da63fd8d9a0ee00859bfbacf1eda" compoundref="buffer_8c" startline="195" endline="208">ssh_buffer_reinit</references>
        <references refid="group__libssh__channel_1gab535264029443d77214c0615a0788b0a" compoundref="channels_8c" startline="1412" endline="1424">ssh_channel_is_eof</references>
        <references refid="group__libssh__channel_1ga157f7d1df5de07ec6c6976e2034ba6e2" compoundref="channels_8c" startline="2789" endline="2820">ssh_channel_poll</references>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__session_1gaa0e04dc9e24d5112a5ca2b7bd68031d0" compoundref="session_8c" startline="600" endline="636">ssh_handle_packets</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga7e90618e682963ae420321a16102d213" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_channel_read_termination</definition>
        <argsstring>(void *s)</argsstring>
        <name>ssh_channel_read_termination</name>
        <param>
          <type>void *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2566" column="1" bodyfile="src/channels.c" bodystart="2566" bodyend="2574"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_read</definition>
        <argsstring>(ssh_channel channel, void *dest, uint32_t count, int is_stderr)</argsstring>
        <name>ssh_channel_read</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_stderr</declname>
        </param>
        <briefdescription>
<para>Reads data from a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to read from.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer which will get the data.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The count of bytes to be read.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_stderr</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean value to mark reading from the stderr flow.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, 0 on end of file or SSH_ERROR on error. In nonblocking mode it Can return 0 if no data is available or SSH_AGAIN.</para></simplesect>
<simplesect kind="warning"><para>This function may return less than count bytes of data, and won&apos;t block until count bytes have been read. </para></simplesect>
<simplesect kind="warning"><para>The read function using a buffer has been renamed to <ref refid="group__libssh__channel_1gab391f5c978cb1bc8df3ebd061f38e8c5" kindref="member">channel_read_buffer()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2599" column="1" bodyfile="src/channels.c" bodystart="2599" bodyend="2602"/>
        <references refid="group__libssh__channel_1ga3c1aa2ea4197626af7bf224b6a5aaff5" compoundref="channels_8c" startline="2627" endline="2714">ssh_channel_read_timeout</references>
        <referencedby refid="group__libssh__channel_1gab391f5c978cb1bc8df3ebd061f38e8c5" compoundref="channels_8c" startline="2499" endline="2558">channel_read_buffer</referencedby>
        <referencedby refid="group__libssh__channel_1gaaca5a3fbe9839c3ffb37b746afc35f4c" compoundref="channels_8c" startline="2737" endline="2773">ssh_channel_read_nonblocking</referencedby>
        <referencedby refid="group__libssh__scp_1ga14d31059dcf6fb2325fb960da8e4474e" compoundref="scp_8c" startline="161" endline="190">ssh_scp_close</referencedby>
        <referencedby refid="group__libssh__scp_1ga1db56dcb9dee01dd0b679b3b11151110" compoundref="scp_8c" startline="95" endline="150">ssh_scp_init</referencedby>
        <referencedby refid="group__libssh__scp_1ga2ca698c1e49612c083d9f8a72df52188" compoundref="scp_8c" startline="271" endline="298">ssh_scp_leave_directory</referencedby>
        <referencedby refid="group__libssh__scp_1gaa584f03d4e3d582ac10a3a19818ec56d" compoundref="scp_8c" startline="227" endline="261">ssh_scp_push_directory</referencedby>
        <referencedby refid="group__libssh__scp_1ga50b701b9c8923011d4fc6489c9c7eaae" compoundref="scp_8c" startline="317" endline="355">ssh_scp_push_file64</referencedby>
        <referencedby refid="group__libssh__scp_1ga10bf627407959b51a7c39b37e8d46460" compoundref="scp_8c" startline="703" endline="745">ssh_scp_read</referencedby>
        <referencedby refid="group__libssh__scp_1ga0be44d8a450767d92668d36d1beb43b9" compoundref="scp_8c" startline="504" endline="525">ssh_scp_read_string</referencedby>
        <referencedby refid="group__libssh__scp_1gab713864881af7ebda7e1e9c609fdf604" compoundref="scp_8c" startline="388" endline="423">ssh_scp_response</referencedby>
        <referencedby refid="group__libssh__scp_1ga11f48e2cf62bcec20d9232ed3ca41752" compoundref="scp_8c" startline="437" endline="488">ssh_scp_write</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga3c1aa2ea4197626af7bf224b6a5aaff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_read_timeout</definition>
        <argsstring>(ssh_channel channel, void *dest, uint32_t count, int is_stderr, int timeout)</argsstring>
        <name>ssh_channel_read_timeout</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_stderr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Reads data from a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to read from.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer which will get the data.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The count of bytes to be read.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_stderr</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean value to mark reading from the stderr flow.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>A timeout in milliseconds. A value of -1 means infinite timeout.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, 0 on end of file or SSH_ERROR on error. In nonblocking mode it Can return 0 if no data is available or SSH_AGAIN.</para></simplesect>
<simplesect kind="warning"><para>This function may return less than count bytes of data, and won&apos;t block until count bytes have been read. </para></simplesect>
<simplesect kind="warning"><para>The read function using a buffer has been renamed to <ref refid="group__libssh__channel_1gab391f5c978cb1bc8df3ebd061f38e8c5" kindref="member">channel_read_buffer()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2627" column="1" bodyfile="src/channels.c" bodystart="2627" bodyend="2714"/>
        <references refid="group__libssh__buffer_1ga12c1bc319d0117da2b6100f46ab96194" compoundref="buffer_8c" startline="494" endline="497">buffer_get_rest_len</references>
        <references refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba6445dfe21592d69d9741d319538b6673" compoundref="libssh_8h" startline="289">SSH_LOG_PACKET</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
        <referencedby refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gaaca5a3fbe9839c3ffb37b746afc35f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_read_nonblocking</definition>
        <argsstring>(ssh_channel channel, void *dest, uint32_t count, int is_stderr)</argsstring>
        <name>ssh_channel_read_nonblocking</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_stderr</declname>
        </param>
        <briefdescription>
<para>Do a nonblocking read on the channel. </para>        </briefdescription>
        <detaileddescription>
<para>A nonblocking read on the specified channel. it will return &lt;= count bytes of data read atomically.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to read from.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a destination buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The count of bytes of data to be read.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_stderr</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean to select the stderr stream.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, 0 if nothing is available or SSH_ERROR on error.</para></simplesect>
<simplesect kind="warning"><para>Don&apos;t forget to check for EOF as it would return 0 here.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gab535264029443d77214c0615a0788b0a" kindref="member">ssh_channel_is_eof()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2737" column="1" bodyfile="src/channels.c" bodystart="2737" bodyend="2773"/>
        <references refid="group__libssh__channel_1ga157f7d1df5de07ec6c6976e2034ba6e2" compoundref="channels_8c" startline="2789" endline="2820">ssh_channel_poll</references>
        <references refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" compoundref="channels_8c" startline="2599" endline="2602">ssh_channel_read</references>
        <references refid="group__libssh__session_1ga0c959bde817801ac5de2db1e64b52f26" compoundref="session_8c" startline="465" endline="467">ssh_is_blocking</references>
        <references refid="group__libssh__session_1ga2a29cff08855611be84d050e5bec73bc" compoundref="session_8c" startline="451" endline="457">ssh_set_blocking</references>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga157f7d1df5de07ec6c6976e2034ba6e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_poll</definition>
        <argsstring>(ssh_channel channel, int is_stderr)</argsstring>
        <name>ssh_channel_poll</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_stderr</declname>
        </param>
        <briefdescription>
<para>Polls a channel for data to read. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to poll.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_stderr</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean to select the stderr stream.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes available for reading, 0 if nothing is available or SSH_ERROR on error.</para></simplesect>
<simplesect kind="warning"><para>When the channel is in EOF state, the function returns SSH_EOF.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gab535264029443d77214c0615a0788b0a" kindref="member">ssh_channel_is_eof()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2789" column="1" bodyfile="src/channels.c" bodystart="2789" bodyend="2820"/>
        <references refid="group__libssh__buffer_1ga12c1bc319d0117da2b6100f46ab96194" compoundref="buffer_8c" startline="494" endline="497">buffer_get_rest_len</references>
        <references refid="group__libssh__session_1gaa0e04dc9e24d5112a5ca2b7bd68031d0" compoundref="session_8c" startline="600" endline="636">ssh_handle_packets</references>
        <referencedby refid="group__libssh__channel_1gab391f5c978cb1bc8df3ebd061f38e8c5" compoundref="channels_8c" startline="2499" endline="2558">channel_read_buffer</referencedby>
        <referencedby refid="classssh_1_1_channel_1aa2794c09f819f3132b241aa6b72b0664" compoundref="libsshpp_8hpp" startline="463" endline="465">ssh::Channel::isOpen</referencedby>
        <referencedby refid="group__libssh__sftp_1ga4399c7ccd8b39a460265047f9d7bc9b1" compoundref="sftp_8c" startline="1869" endline="1949">sftp_async_read</referencedby>
        <referencedby refid="group__libssh__channel_1gaaca5a3fbe9839c3ffb37b746afc35f4c" compoundref="channels_8c" startline="2737" endline="2773">ssh_channel_read_nonblocking</referencedby>
        <referencedby refid="group__libssh__scp_1ga11f48e2cf62bcec20d9232ed3ca41752" compoundref="scp_8c" startline="437" endline="488">ssh_scp_write</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gab56c7b7959e4c23959f2989468811661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_poll_timeout</definition>
        <argsstring>(ssh_channel channel, int timeout, int is_stderr)</argsstring>
        <name>ssh_channel_poll_timeout</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_stderr</declname>
        </param>
        <briefdescription>
<para>Polls a channel for data to read, waiting for a certain timeout. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to poll. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Set an upper limit on the time for which this function will block, in milliseconds. Specifying a negative value means an infinite timeout. This parameter is passed to the poll() function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_stderr</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean to select the stderr stream.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes available for reading, 0 if nothing is available (timeout elapsed), SSH_EOF on end of file, SSH_ERROR on error.</para></simplesect>
<simplesect kind="warning"><para>When the channel is in EOF state, the function returns SSH_EOF.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gab535264029443d77214c0615a0788b0a" kindref="member">ssh_channel_is_eof()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2841" column="1" bodyfile="src/channels.c" bodystart="2841" bodyend="2873"/>
        <references refid="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" compoundref="session_8c" startline="661" endline="705">ssh_handle_packets_termination</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga747aa5315575aa7ac9d8367c7372d8dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_session</type>
        <definition>ssh_session ssh_channel_get_session</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_get_session</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Recover the session in which belongs a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to recover the session from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The session pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2882" column="1" bodyfile="src/channels.c" bodystart="2882" bodyend="2888"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gae6aa1eaafbacaa66577600e0c811ffd2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_channel_exit_status_termination</definition>
        <argsstring>(void *c)</argsstring>
        <name>ssh_channel_exit_status_termination</name>
        <param>
          <type>void *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2890" column="1" bodyfile="src/channels.c" bodystart="2890" bodyend="2900"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga9eea019dd0bbaa8a817fff2c762d1a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_get_exit_status</definition>
        <argsstring>(ssh_channel channel)</argsstring>
        <name>ssh_channel_get_exit_status</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get the exit status of the channel (error code from the executed instruction). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to get the status from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The exit status, -1 if no exit status has been returned (yet). </para></simplesect>
<simplesect kind="warning"><para>This function may block until a timeout (or never) if the other side is not willing to close the channel.</para></simplesect>
If you&apos;re looking for an async handling of this register a callback for the exit status.</para><para><simplesect kind="see"><para><ref refid="group__libssh__callbacks_1ga6f834b43c812f871c7252bfbbb4ef6f4" kindref="member">ssh_channel_exit_status_callback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2918" column="1" bodyfile="src/channels.c" bodystart="2918" bodyend="2931"/>
        <references refid="group__libssh__session_1gab3686ad27fa79078da6ad919ccff0fd5" compoundref="session_8c" startline="661" endline="705">ssh_handle_packets_termination</references>
        <referencedby refid="classssh_1_1_channel_1ad14405b4e8c3a8e3d37a49ed793aadde" compoundref="libsshpp_8hpp" startline="437" endline="440">ssh::Channel::close</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga3a106d0c860b8ada098b4ed317c3cce4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int channel_protocol_select</definition>
        <argsstring>(ssh_channel *rchans, ssh_channel *wchans, ssh_channel *echans, ssh_channel *rout, ssh_channel *wout, ssh_channel *eout)</argsstring>
        <name>channel_protocol_select</name>
        <param>
          <type>ssh_channel *</type>
          <declname>rchans</declname>
        </param>
        <param>
          <type>ssh_channel *</type>
          <declname>wchans</declname>
        </param>
        <param>
          <type>ssh_channel *</type>
          <declname>echans</declname>
        </param>
        <param>
          <type>ssh_channel *</type>
          <declname>rout</declname>
        </param>
        <param>
          <type>ssh_channel *</type>
          <declname>wout</declname>
        </param>
        <param>
          <type>ssh_channel *</type>
          <declname>eout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2942" column="1" bodyfile="src/channels.c" bodystart="2942" bodyend="2988"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga160a55e20b7f7849e7e35b8df464eba0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int count_ptrs</definition>
        <argsstring>(ssh_channel *ptrs)</argsstring>
        <name>count_ptrs</name>
        <param>
          <type>ssh_channel *</type>
          <declname>ptrs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="2991" column="1" bodyfile="src/channels.c" bodystart="2991" bodyend="2997"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga1026cfa48ecfc0b4898d4ea443acfc5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_select</definition>
        <argsstring>(ssh_channel *readchans, ssh_channel *writechans, ssh_channel *exceptchans, struct timeval *timeout)</argsstring>
        <name>ssh_channel_select</name>
        <param>
          <type>ssh_channel *</type>
          <declname>readchans</declname>
        </param>
        <param>
          <type>ssh_channel *</type>
          <declname>writechans</declname>
        </param>
        <param>
          <type>ssh_channel *</type>
          <declname>exceptchans</declname>
        </param>
        <param>
          <type>struct timeval *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Act like the standard select(2) on channels. </para>        </briefdescription>
        <detaileddescription>
<para>The list of pointers are then actualized and will only contain pointers to channels that are respectively readable, writable or have an exception to trap.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">readchans</parametername>
</parameternamelist>
<parameterdescription>
<para>A NULL pointer or an array of channel pointers, terminated by a NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">writechans</parametername>
</parameternamelist>
<parameterdescription>
<para>A NULL pointer or an array of channel pointers, terminated by a NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exceptchans</parametername>
</parameternamelist>
<parameterdescription>
<para>A NULL pointer or an array of channel pointers, terminated by a NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout as defined by select(2).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on a successful operation, SSH_EINTR if the select(2) syscall was interrupted, then relaunch the function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="3021" column="1" bodyfile="src/channels.c" bodystart="3021" bodyend="3135"/>
        <references refid="group__libssh__misc_1gaaa0c97f49044d29f2a3b5b3ae82979ff" compoundref="misc_8c" startline="882" endline="893">ssh_timestamp_init</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gab0649fe21b7a900b4a8e10ecb3401395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_channel_set_counter</definition>
        <argsstring>(ssh_channel channel, ssh_counter counter)</argsstring>
        <name>ssh_channel_set_counter</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>ssh_counter</type>
          <declname>counter</declname>
        </param>
        <briefdescription>
<para>Set the channel data counter. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">struct<sp/>ssh_counter_struct<sp/>counter<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.in_bytes<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.out_bytes<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.in_packets<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.out_packets<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ssh_channel_set_counter(channel,<sp/>&amp;counter);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Counter for bytes handled by the channel. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="3155" column="1" bodyfile="src/channels.c" bodystart="3155" bodyend="3160"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga7ebd0ed490ee4485c6d5feb7d22bc162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_write_stderr</definition>
        <argsstring>(ssh_channel channel, const void *data, uint32_t len)</argsstring>
        <name>ssh_channel_write_stderr</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Blocking write on a channel stderr. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to write to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the data to write.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer to write to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written, SSH_ERROR on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__channel_1gac92381c4c5d4a7eab35f6e84686f033d" kindref="member">ssh_channel_read()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="3176" column="1" bodyfile="src/channels.c" bodystart="3176" bodyend="3178"/>
        <referencedby refid="classssh_1_1_channel_1a06cf7ffd971eff87783a169444fa09a2" compoundref="libsshpp_8hpp" startline="577" endline="586">ssh::Channel::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1ga9f66bf86a741ba17fe097dcb0594260e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_open_reverse_forward</definition>
        <argsstring>(ssh_channel channel, const char *remotehost, int remoteport, const char *sourcehost, int localport)</argsstring>
        <name>ssh_channel_open_reverse_forward</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>remotehost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>remoteport</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sourcehost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>localport</declname>
        </param>
        <briefdescription>
<para>Open a TCP/IP reverse forwarding channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">remotehost</parametername>
</parameternamelist>
<parameterdescription>
<para>The remote host to connected (host name or IP).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">remoteport</parametername>
</parameternamelist>
<parameterdescription>
<para>The remote port.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sourcehost</parametername>
</parameternamelist>
<parameterdescription>
<para>The source host (your local computer). It&apos;s optional and for logging purpose.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">localport</parametername>
</parameternamelist>
<parameterdescription>
<para>The source port (your local computer). It&apos;s optional and for logging purpose.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.</para></simplesect>
<simplesect kind="warning"><para>This function does not bind the local port and does not automatically forward the content of a socket to the channel. You still have to use channel_read and channel_write for this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="3204" column="1" bodyfile="src/channels.c" bodystart="3204" bodyend="3248"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gae4aa2cb2a96cfe13712150517d6a90da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_open_x11</definition>
        <argsstring>(ssh_channel channel, const char *orig_addr, int orig_port)</argsstring>
        <name>ssh_channel_open_x11</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>orig_addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>orig_port</declname>
        </param>
        <briefdescription>
<para>Open a X11 channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>An allocated channel.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">orig_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The source host (the local server).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">orig_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The source port (the local server).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again. </para></simplesect>
<simplesect kind="warning"><para>This function does not bind the local port and does not automatically forward the content of a socket to the channel. You still have to use channel_read and channel_write for this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="3267" column="1" bodyfile="src/channels.c" bodystart="3267" bodyend="3310"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gadc35e456e45b92c1e1da0fff8b6dfec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_send_exit_status</definition>
        <argsstring>(ssh_channel channel, int exit_status)</argsstring>
        <name>ssh_channel_request_send_exit_status</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exit_status</declname>
        </param>
        <briefdescription>
<para>Send the exit status to the remote process. </para>        </briefdescription>
        <detaileddescription>
<para>Sends the exit status to the remote process (as described in RFC 4254, section 6.10). Only SSH-v2 is supported (I&apos;m not sure about SSH-v1).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send exit status.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exit_status</parametername>
</parameternamelist>
<parameterdescription>
<para>The exit status to send</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred. (including attempts to send exit status via SSH-v1 session). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="3326" column="1" bodyfile="src/channels.c" bodystart="3326" bodyend="3356"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__channel_1gabd3a5c8ef800f6c6ffdcc5f62557434c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_channel_request_send_exit_signal</definition>
        <argsstring>(ssh_channel channel, const char *sig, int core, const char *errmsg, const char *lang)</argsstring>
        <name>ssh_channel_request_send_exit_signal</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>int</type>
          <declname>core</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>errmsg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>lang</declname>
        </param>
        <briefdescription>
<para>Send an exit signal to remote process (RFC 4254, section 6.10). </para>        </briefdescription>
        <detaileddescription>
<para>This sends the exit status of the remote process. Note, that remote system may not support signals concept. In such a case this request will be silently ignored. Only SSH-v2 is supported (I&apos;m not sure about SSH-v1).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send signal.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal to send (without SIG prefix) (e.g. &quot;TERM&quot; or &quot;KILL&quot;). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">core</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean to tell if a core was dumped </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">errmsg</parametername>
</parameternamelist>
<parameterdescription>
<para>A CRLF explanation text about the error condition </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lang</parametername>
</parameternamelist>
<parameterdescription>
<para>The language used in the message (format: RFC 3066)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR if an error occurred (including attempts to send signal via SSH-v1 session). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/channels.c" line="3377" column="1" bodyfile="src/channels.c" bodystart="3377" bodyend="3416"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions that manage a SSH channel. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
