<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="libssh_tutor_threads" kind="page">
    <compoundname>libssh_tutor_threads</compoundname>
    <title>Chapter 8: Threads with libssh</title>
    <detaileddescription>
<sect1 id="libssh_tutor_threads_1threads_with_libssh">
<title>How to use libssh with threads</title>
<para>libssh may be used in multithreaded applications, but under several conditions :<itemizedlist>
<listitem><para>Threading must be initialized during the initialization of libssh. This initialization must be done outside of any threading context.</para></listitem><listitem><para>If pthreads is being used by your application (or your framework&apos;s backend), you must link with libssh_threads dynamic library and initialize threading with the ssh_threads_pthreads threading object.</para></listitem><listitem><para>If an other threading library is being used by your application, you must implement all the methods of the ssh_threads_callbacks_struct structure and initialize libssh with it.</para></listitem><listitem><para>At all times, you may use different sessions inside threads, make parallel connections, read/write on different sessions and so on. You <emphasis>cannot</emphasis> use a single session (or channels for a single session) in several threads at the same time. This will most likely lead to internal state corruption. This limitation is being worked out and will maybe disappear later.</para></listitem></itemizedlist>
</para><sect2 id="libssh_tutor_threads_1threads_init">
<title>Initialization of threads</title>
<para>To initialize threading, you must first select the threading model you want to use, using <ref refid="group__libssh__threads_1gaf473af3fbae6f1bb0e249fd1d079ff68" kindref="member">ssh_threads_set_callbacks()</ref>, then call <ref refid="group__libssh_1ga3ebf8d6920e563f3b032e3cd5277598e" kindref="member">ssh_init()</ref>.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;libssh/callbacks.h&gt;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">ssh_threads_set_callbacks(ssh_threads_get_noop());</highlight></codeline>
<codeline><highlight class="normal">ssh_init();</highlight></codeline>
</programlisting></para><para>ssh_threads_noop is the threading structure that does nothing. It&apos;s the threading callbacks being used by default when you&apos;re not using threading.</para></sect2>
<sect2 id="libssh_tutor_threads_1threads_pthread">
<title>Using libpthread with libssh</title>
<para>If your application is using libpthread, you may simply use the libpthread threading backend:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;libssh/callbacks.h&gt;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">ssh_threads_set_callbacks(ssh_threads_get_pthread());</highlight></codeline>
<codeline><highlight class="normal">ssh_init();</highlight></codeline>
</programlisting></para><para>However, you must be sure to link with the library ssh_threads. If you&apos;re using gcc, you must use the commandline <programlisting><codeline><highlight class="normal">gcc<sp/>-o<sp/>output<sp/>input.c<sp/>-lssh<sp/>-lssh_threads</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="libssh_tutor_threads_1threads_other">
<title>Using another threading library</title>
<para>You must find your way in the ssh_threads_callbacks_struct structure. You must implement the following methods :<itemizedlist>
<listitem><para>mutex_lock</para></listitem><listitem><para>mutex_unlock</para></listitem><listitem><para>mutex_init</para></listitem><listitem><para>mutex_destroy</para></listitem><listitem><para>thread_id</para></listitem></itemizedlist>
</para><para>libgcrypt 1.6 and bigger backend does not support custom callback. Using anything else than pthreads (ssh_threads_get_pthread()) here will fail. Good luck ! </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
