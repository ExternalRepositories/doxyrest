<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pki__container__openssh_8c" kind="file" language="C++">
    <compoundname>pki_container_openssh.c</compoundname>
    <includes local="yes">config.h</includes>
    <includes local="no">ctype.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes refid="libssh_8h" local="yes">libssh/libssh.h</includes>
    <includes refid="priv_8h" local="yes">libssh/priv.h</includes>
    <includes refid="pki_8h" local="yes">libssh/pki.h</includes>
    <includes refid="pki__priv_8h" local="yes">libssh/pki_priv.h</includes>
    <includes refid="buffer_8h" local="yes">libssh/buffer.h</includes>
    <incdepgraph>
      <node id="1962">
        <label>libssh/buffer.h</label>
        <link refid="buffer_8h_source"/>
        <childnode refid="1963" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
      </node>
      <node id="1963">
        <label>stdarg.h</label>
      </node>
      <node id="1959">
        <label>libssh/curve25519.h</label>
        <link refid="curve25519_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
      </node>
      <node id="1948">
        <label>sys/select.h</label>
      </node>
      <node id="1943">
        <label>libssh/priv.h</label>
        <link refid="priv_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
      </node>
      <node id="1945">
        <label>libssh/libssh.h</label>
        <link refid="libssh_8h_source"/>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1947" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1949" relation="include">
        </childnode>
        <childnode refid="1950" relation="include">
        </childnode>
      </node>
      <node id="1942">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="1943" relation="include">
        </childnode>
      </node>
      <node id="1952">
        <label>libssh/pki.h</label>
        <link refid="pki_8h_source"/>
        <childnode refid="1943" relation="include">
        </childnode>
        <childnode refid="1953" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
      </node>
      <node id="1950">
        <label>libssh/legacy.h</label>
        <link refid="legacy_8h_source"/>
      </node>
      <node id="1953">
        <label>libssh/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1954" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1958" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
      </node>
      <node id="1949">
        <label>netdb.h</label>
      </node>
      <node id="1951">
        <label>libssh/callbacks.h</label>
        <link refid="callbacks_8h_source"/>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1942" relation="include">
        </childnode>
      </node>
      <node id="1960">
        <label>libssh/ed25519.h</label>
        <link refid="ed25519_8h_source"/>
        <childnode refid="1943" relation="include">
        </childnode>
      </node>
      <node id="1947">
        <label>sys/types.h</label>
      </node>
      <node id="1939">
        <label>src/pki_container_openssh.c</label>
        <link refid="pki__container__openssh_8c"/>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1943" relation="include">
        </childnode>
        <childnode refid="1952" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
      </node>
      <node id="1944">
        <label>unistd.h</label>
      </node>
      <node id="1957">
        <label>libssh/ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
      </node>
      <node id="1954">
        <label>libssh/wrapper.h</label>
        <link refid="wrapper_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
      </node>
      <node id="1941">
        <label>ctype.h</label>
      </node>
      <node id="1955">
        <label>libssh/libcrypto.h</label>
        <link refid="libcrypto_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
      </node>
      <node id="1958">
        <label>libssh/kex.h</label>
        <link refid="kex_8h_source"/>
        <childnode refid="1943" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
      </node>
      <node id="1956">
        <label>libssh/libgcrypt.h</label>
        <link refid="libgcrypt_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
      </node>
      <node id="1940">
        <label>config.h</label>
      </node>
      <node id="1961">
        <label>libssh/pki_priv.h</label>
        <link refid="pki__priv_8h_source"/>
        <childnode refid="1952" relation="include">
        </childnode>
      </node>
      <node id="1946">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__libssh__pki_1ga5a513e1a553cbfc5301138f52bcd5881" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int pki_openssh_import_privkey_blob</definition>
        <argsstring>(ssh_buffer key_blob_buffer, ssh_key *pkey)</argsstring>
        <name>pki_openssh_import_privkey_blob</name>
        <param>
          <type>ssh_buffer</type>
          <declname>key_blob_buffer</declname>
        </param>
        <param>
          <type>ssh_key *</type>
          <declname>pkey</declname>
        </param>
        <briefdescription>
<para><itemizedlist>
<listitem></listitem></itemizedlist>
</para>        </briefdescription>
        <detaileddescription>
<internal><para>Import a private key from a ssh buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key_blob_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The key blob to import as specified in key.c:key_private_serialize in OpenSSH source code.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pkey</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where the allocated key can be stored. You need to free the memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__pki_1ga08808beb83a42ccd6f1c710ddeb1b4c2" kindref="member">ssh_key_free()</ref> </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki_container_openssh.c" line="57" column="1" bodyfile="src/pki_container_openssh.c" bodystart="57" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gae8b8a710eea5b5c36c9e2416cc0734d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int pki_private_key_decrypt</definition>
        <argsstring>(ssh_string blob, const char *passphrase, const char *ciphername, const char *kdfname, ssh_string kdfoptions, ssh_auth_callback auth_fn, void *auth_data)</argsstring>
        <name>pki_private_key_decrypt</name>
        <param>
          <type>ssh_string</type>
          <declname>blob</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ciphername</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>kdfname</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>kdfoptions</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <briefdescription>
<para>decrypts an encrypted ed25519 private key blob </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki_container_openssh.c" line="147" column="1" bodyfile="src/pki_container_openssh.c" bodystart="147" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gaf157c1df451c718d42a3db69443acf12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_key</type>
        <definition>ssh_key ssh_pki_openssh_privkey_import</definition>
        <argsstring>(const char *text_key, const char *passphrase, ssh_auth_callback auth_fn, void *auth_data)</argsstring>
        <name>ssh_pki_openssh_privkey_import</name>
        <param>
          <type>const char *</type>
          <declname>text_key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <briefdescription>
<para>Import a private key in OpenSSH (new) format. This format is typically used with ed25519 keys but can be used for others. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki_container_openssh.c" line="272" column="1" bodyfile="src/pki_container_openssh.c" bodystart="272" bodyend="406"/>
        <referencedby refid="group__libssh__pki_1ga5f2a2ca4b9b711d1c1af8020dfbd4a53" compoundref="pki_8c" startline="398" endline="439">ssh_pki_import_privkey_base64</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gae31fc9d1d7202ca99b444d6b8159cabb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int pki_openssh_export_privkey_blob</definition>
        <argsstring>(const ssh_key privkey, ssh_buffer buffer)</argsstring>
        <name>pki_openssh_export_privkey_blob</name>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>ssh_buffer</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>exports a private key to a string blob. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">privkey</parametername>
</parameternamelist>
<parameterdescription>
<para>private key to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write the blob in. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success </para></simplesect>
<simplesect kind="warning"><para>only supports ed25519 key type at the moment. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki_container_openssh.c" line="416" column="1" bodyfile="src/pki_container_openssh.c" bodystart="416" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1gad2addfee75214413f07493a89638350f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int pki_private_key_encrypt</definition>
        <argsstring>(ssh_buffer privkey_buffer, const char *passphrase, const char *ciphername, const char *kdfname, ssh_auth_callback auth_fn, void *auth_data, uint32_t rounds, ssh_string salt)</argsstring>
        <name>pki_private_key_encrypt</name>
        <param>
          <type>ssh_buffer</type>
          <declname>privkey_buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ciphername</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>kdfname</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rounds</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>salt</declname>
        </param>
        <briefdescription>
<para>encrypts an ed25519 private key blob </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki_container_openssh.c" line="443" column="1" bodyfile="src/pki_container_openssh.c" bodystart="443" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga0a1b01b666de3e4f433660761c7658ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_string</type>
        <definition>ssh_string ssh_pki_openssh_privkey_export</definition>
        <argsstring>(const ssh_key privkey, const char *passphrase, ssh_auth_callback auth_fn, void *auth_data)</argsstring>
        <name>ssh_pki_openssh_privkey_export</name>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>generate an OpenSSH private key (defined in PROTOCOL.key) and output it in text format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>privkey[in]</parametername>
</parameternamelist>
<parameterdescription>
<para>private key to export </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an SSH string containing the text representation of the exported key. </para></simplesect>
<simplesect kind="warning"><para>currently only supports ED25519 key types. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pki_container_openssh.c" line="554" column="1" bodyfile="src/pki_container_openssh.c" bodystart="554" bodyend="718"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="group__libssh__pki_1ga3b294c44e2280c935cb0b82ede5c42ee" compoundref="pki_8c" startline="548" endline="595">ssh_pki_export_privkey_file</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/pki_container_openssh.c"/>
  </compounddef>
</doxygen>
