<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pki__priv_8h" kind="file" language="C++">
    <compoundname>pki_priv.h</compoundname>
    <includes refid="pki_8h" local="yes">libssh/pki.h</includes>
    <includedby refid="bcrypt__pbkdf_8c" local="yes">src/external/bcrypt_pbkdf.c</includedby>
    <includedby refid="legacy_8c" local="yes">src/legacy.c</includedby>
    <includedby refid="pki_8c" local="yes">src/pki.c</includedby>
    <includedby refid="pki__container__openssh_8c" local="yes">src/pki_container_openssh.c</includedby>
    <includedby refid="pki__crypto_8c" local="yes">src/pki_crypto.c</includedby>
    <includedby refid="pki__ed25519_8c" local="yes">src/pki_ed25519.c</includedby>
    <incdepgraph>
      <node id="487">
        <label>libssh/curve25519.h</label>
        <link refid="curve25519_8h_source"/>
        <childnode refid="471" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
      </node>
      <node id="476">
        <label>sys/select.h</label>
      </node>
      <node id="470">
        <label>libssh/priv.h</label>
        <link refid="priv_8h_source"/>
        <childnode refid="471" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
      </node>
      <node id="473">
        <label>libssh/libssh.h</label>
        <link refid="libssh_8h_source"/>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="474" relation="include">
        </childnode>
        <childnode refid="475" relation="include">
        </childnode>
        <childnode refid="476" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="478" relation="include">
        </childnode>
      </node>
      <node id="480">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="470" relation="include">
        </childnode>
      </node>
      <node id="469">
        <label>libssh/pki.h</label>
        <link refid="pki_8h_source"/>
        <childnode refid="470" relation="include">
        </childnode>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
      </node>
      <node id="478">
        <label>libssh/legacy.h</label>
        <link refid="legacy_8h_source"/>
      </node>
      <node id="481">
        <label>libssh/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="471" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="487" relation="include">
        </childnode>
      </node>
      <node id="477">
        <label>netdb.h</label>
      </node>
      <node id="479">
        <label>libssh/callbacks.h</label>
        <link refid="callbacks_8h_source"/>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="480" relation="include">
        </childnode>
      </node>
      <node id="488">
        <label>libssh/ed25519.h</label>
        <link refid="ed25519_8h_source"/>
        <childnode refid="470" relation="include">
        </childnode>
      </node>
      <node id="475">
        <label>sys/types.h</label>
      </node>
      <node id="472">
        <label>unistd.h</label>
      </node>
      <node id="485">
        <label>libssh/ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="471" relation="include">
        </childnode>
      </node>
      <node id="482">
        <label>libssh/wrapper.h</label>
        <link refid="wrapper_8h_source"/>
        <childnode refid="471" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="483">
        <label>libssh/libcrypto.h</label>
        <link refid="libcrypto_8h_source"/>
        <childnode refid="471" relation="include">
        </childnode>
      </node>
      <node id="486">
        <label>libssh/kex.h</label>
        <link refid="kex_8h_source"/>
        <childnode refid="470" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
      </node>
      <node id="484">
        <label>libssh/libgcrypt.h</label>
        <link refid="libgcrypt_8h_source"/>
        <childnode refid="471" relation="include">
        </childnode>
      </node>
      <node id="471">
        <label>config.h</label>
      </node>
      <node id="468">
        <label>include/libssh/pki_priv.h</label>
        <link refid="pki__priv_8h"/>
        <childnode refid="469" relation="include">
        </childnode>
      </node>
      <node id="474">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="pki__priv_8h_1af0b299544ae6fa4273ebe95b0d999a06" prot="public" static="no">
        <name>RSA_HEADER_BEGIN</name>
        <initializer>&quot;-----BEGIN RSA PRIVATE KEY-----&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="35" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pki__priv_8h_1a641b643acf23c83514bdd7e9a4f40d18" prot="public" static="no">
        <name>RSA_HEADER_END</name>
        <initializer>&quot;-----END RSA PRIVATE KEY-----&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="36" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pki__priv_8h_1a7eafd5630d2579082463d589b6149031" prot="public" static="no">
        <name>DSA_HEADER_BEGIN</name>
        <initializer>&quot;-----BEGIN DSA PRIVATE KEY-----&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="37" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pki__priv_8h_1a5c0aa46d0cf67596e265b85d8dc2c978" prot="public" static="no">
        <name>DSA_HEADER_END</name>
        <initializer>&quot;-----END DSA PRIVATE KEY-----&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="38" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pki__priv_8h_1a8fa2ef0face26edf667ef9c1acf81449" prot="public" static="no">
        <name>ECDSA_HEADER_BEGIN</name>
        <initializer>&quot;-----BEGIN EC PRIVATE KEY-----&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="39" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pki__priv_8h_1a32a526c9abec80e9b47cb1564d483c80" prot="public" static="no">
        <name>ECDSA_HEADER_END</name>
        <initializer>&quot;-----END EC PRIVATE KEY-----&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="40" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pki__priv_8h_1aadb3742cd3148d51fa140e5de1216683" prot="public" static="no">
        <name>OPENSSH_HEADER_BEGIN</name>
        <initializer>&quot;-----BEGIN OPENSSH PRIVATE KEY-----&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="41" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pki__priv_8h_1ac9bb41f7c6bb8885ec1c964df64354bf" prot="public" static="no">
        <name>OPENSSH_HEADER_END</name>
        <initializer>&quot;-----END OPENSSH PRIVATE KEY-----&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="42" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pki__priv_8h_1afe0585f2b3698f9bc5ca576399a5192a" prot="public" static="no">
        <name>OPENSSH_AUTH_MAGIC</name>
        <initializer>&quot;openssh-key-v1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="44" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pki__priv_8h_1a9fbe82aa83dd27fb41ad7dd01d3df7a7" prot="public" static="no">
        <name>ssh_pki_log</name>
        <param><defname>...</defname></param>
        <initializer>_ssh_log(<ref refid="group__libssh__log_1gga06fc87d81c62e9abb8790b6e5713c55ba926c933f61d1afa64003c1cc66f6a01c" kindref="member">SSH_LOG_FUNCTIONS</ref>, __func__, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="46" column="9" bodyfile="include/libssh/pki_priv.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pki__priv_8h_1ab650514d50b19a9f4ebd5322a9b0fc5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bcrypt_pbkdf</definition>
        <argsstring>(const char *pass, size_t passlen, const uint8_t *salt, size_t saltlen, uint8_t *key, size_t keylen, unsigned int rounds)</argsstring>
        <name>bcrypt_pbkdf</name>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>passlen</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>salt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>saltlen</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>keylen</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>rounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="27" column="1" bodyfile="src/external/bcrypt_pbkdf.c" bodystart="105" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a4456c0624415c3b23bd5ba8a866fab7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ssh_pki_log</definition>
        <argsstring>(const char *function, const char *format,...) PRINTF_ATTRIBUTE(2</argsstring>
        <name>_ssh_pki_log</name>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a2fad70b37502371e735f711700994c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void int</type>
        <definition>void int pki_key_ecdsa_nid_from_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>pki_key_ecdsa_nid_from_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a9986708bce7617f77e12270c16eec1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* pki_key_ecdsa_nid_to_name</definition>
        <argsstring>(int nid)</argsstring>
        <name>pki_key_ecdsa_nid_to_name</name>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a2a05d9c8b3df5f3fde1bbbe7b957bf9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_key</type>
        <definition>ssh_key pki_key_dup</definition>
        <argsstring>(const ssh_key key, int demote)</argsstring>
        <name>pki_key_dup</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>demote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="55" column="1" bodyfile="src/pki_crypto.c" bodystart="214" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1ab4af7536f875cbe11b17084a0e8da6b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_key_generate_rsa</definition>
        <argsstring>(ssh_key key, int parameter)</argsstring>
        <name>pki_key_generate_rsa</name>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="56" column="1" bodyfile="src/pki_crypto.c" bodystart="393" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1aab6d729d737db52f84616ecfa1e9737e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_key_generate_dss</definition>
        <argsstring>(ssh_key key, int parameter)</argsstring>
        <name>pki_key_generate_dss</name>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="57" column="1" bodyfile="src/pki_crypto.c" bodystart="410" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a19bd191fe2d2cfdb40d2d2cd7f9fe558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_key_generate_ecdsa</definition>
        <argsstring>(ssh_key key, int parameter)</argsstring>
        <name>pki_key_generate_ecdsa</name>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a08830f907d6f7ca2a577c51cab017cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_key_generate_ed25519</definition>
        <argsstring>(ssh_key key)</argsstring>
        <name>pki_key_generate_ed25519</name>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="59" column="1" bodyfile="src/pki_ed25519.c" bodystart="29" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1ad0a4df50bbb89e4c7d1989caded21b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_key_compare</definition>
        <argsstring>(const ssh_key k1, const ssh_key k2, enum ssh_keycmp_e what)</argsstring>
        <name>pki_key_compare</name>
        <param>
          <type>const ssh_key</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>k2</declname>
        </param>
        <param>
          <type>enum ssh_keycmp_e</type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="61" column="1" bodyfile="src/pki_crypto.c" bodystart="464" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__pki_1ga7e7a133a35452b9ffe494848aa347cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum ssh_keytypes_e</type>
        <definition>enum ssh_keytypes_e pki_privatekey_type_from_string</definition>
        <argsstring>(const char *privkey)</argsstring>
        <name>pki_privatekey_type_from_string</name>
        <param>
          <type>const char *</type>
          <declname>privkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="61" column="1" bodyfile="src/pki.c" bodystart="85" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a8ea7e9b10062403fef0a1885a0572b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_key</type>
        <definition>ssh_key pki_private_key_from_base64</definition>
        <argsstring>(const char *b64_key, const char *passphrase, ssh_auth_callback auth_fn, void *auth_data)</argsstring>
        <name>pki_private_key_from_base64</name>
        <param>
          <type>const char *</type>
          <declname>b64_key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="67" column="1" bodyfile="src/pki_crypto.c" bodystart="676" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a2f0ca491f398b914b0125e6be5c59d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_string</type>
        <definition>ssh_string pki_private_key_to_pem</definition>
        <argsstring>(const ssh_key key, const char *passphrase, ssh_auth_callback auth_fn, void *auth_data)</argsstring>
        <name>pki_private_key_to_pem</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="72" column="1" bodyfile="src/pki_crypto.c" bodystart="554" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a44ea17f443978628be6498fed45f4f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_pubkey_build_dss</definition>
        <argsstring>(ssh_key key, ssh_string p, ssh_string q, ssh_string g, ssh_string pubkey)</argsstring>
        <name>pki_pubkey_build_dss</name>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>p</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>q</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>g</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="78" column="1" bodyfile="src/pki_crypto.c" bodystart="817" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1ae2aeca92ffa38cd14e96fabba963389e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_pubkey_build_rsa</definition>
        <argsstring>(ssh_key key, ssh_string e, ssh_string n)</argsstring>
        <name>pki_pubkey_build_rsa</name>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>e</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="83" column="1" bodyfile="src/pki_crypto.c" bodystart="842" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a9a6c6c2372ec48697dffc9adbd338a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_pubkey_build_ecdsa</definition>
        <argsstring>(ssh_key key, int nid, ssh_string e)</argsstring>
        <name>pki_pubkey_build_ecdsa</name>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nid</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1aa2d53615fe67402faa649f5cb6160e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_string</type>
        <definition>ssh_string pki_publickey_to_blob</definition>
        <argsstring>(const ssh_key key)</argsstring>
        <name>pki_publickey_to_blob</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="87" column="1" bodyfile="src/pki_crypto.c" bodystart="861" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1ad45dec473fda54fc0b656cd896d44566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_export_pubkey_rsa1</definition>
        <argsstring>(const ssh_key key, const char *host, char *rsa1, size_t rsa1_len)</argsstring>
        <name>pki_export_pubkey_rsa1</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>rsa1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rsa1_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="88" column="1" bodyfile="src/pki_crypto.c" bodystart="1060" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a04b75ad3d5e8ad230b61610dde29a159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_string</type>
        <definition>ssh_string pki_signature_to_blob</definition>
        <argsstring>(const ssh_signature sign)</argsstring>
        <name>pki_signature_to_blob</name>
        <param>
          <type>const ssh_signature</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="94" column="1" bodyfile="src/pki_crypto.c" bodystart="1185" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1afac9cbaa7d7413054b187375aac5132f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_signature</type>
        <definition>ssh_signature pki_signature_from_blob</definition>
        <argsstring>(const ssh_key pubkey, const ssh_string sig_blob, enum ssh_keytypes_e type)</argsstring>
        <name>pki_signature_from_blob</name>
        <param>
          <type>const ssh_key</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>const ssh_string</type>
          <declname>sig_blob</declname>
        </param>
        <param>
          <type>enum ssh_keytypes_e</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="95" column="1" bodyfile="src/pki_crypto.c" bodystart="1318" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a1fca00b734a2974194fbc6c4901614dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_signature_verify</definition>
        <argsstring>(ssh_session session, const ssh_signature sig, const ssh_key key, const unsigned char *hash, size_t hlen)</argsstring>
        <name>pki_signature_verify</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const ssh_signature</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="98" column="1" bodyfile="src/pki_crypto.c" bodystart="1487" bodyend="1556"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a614c144390274c1557d68c0601a28bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_signature</type>
        <definition>ssh_signature pki_do_sign</definition>
        <argsstring>(const ssh_key privkey, const unsigned char *hash, size_t hlen)</argsstring>
        <name>pki_do_sign</name>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="105" column="1" bodyfile="src/pki_crypto.c" bodystart="1558" bodyend="1624"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1aea37a816e895a9750444e9c56c1b1253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_signature</type>
        <definition>ssh_signature pki_do_sign_sessionid</definition>
        <argsstring>(const ssh_key key, const unsigned char *hash, size_t hlen)</argsstring>
        <name>pki_do_sign_sessionid</name>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="108" column="1" bodyfile="src/pki_crypto.c" bodystart="1627" bodyend="1674"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a456b31fe92a5fc2fabcd8a5ec2c87e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_ed25519_sign</definition>
        <argsstring>(const ssh_key privkey, ssh_signature sig, const unsigned char *hash, size_t hlen)</argsstring>
        <name>pki_ed25519_sign</name>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>ssh_signature</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="111" column="1" bodyfile="src/pki_ed25519.c" bodystart="57" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1abb580d92eaeac82f200b332bb09043dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_ed25519_verify</definition>
        <argsstring>(const ssh_key pubkey, ssh_signature sig, const unsigned char *hash, size_t hlen)</argsstring>
        <name>pki_ed25519_verify</name>
        <param>
          <type>const ssh_key</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>ssh_signature</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="113" column="1" bodyfile="src/pki_ed25519.c" bodystart="97" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a67af06aa379757806849d41cd3db55fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_ed25519_key_cmp</definition>
        <argsstring>(const ssh_key k1, const ssh_key k2, enum ssh_keycmp_e what)</argsstring>
        <name>pki_ed25519_key_cmp</name>
        <param>
          <type>const ssh_key</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>k2</declname>
        </param>
        <param>
          <type>enum ssh_keycmp_e</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Compare ed25519 keys if they are equal. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">k1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first key to compare.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">k2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second key to compare.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">what</parametername>
</parameternamelist>
<parameterdescription>
<para>What part or type of the key do you want to compare.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if equal, 1 if not. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="115" column="1" bodyfile="src/pki_ed25519.c" bodystart="160" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1afbaf5e9b84075895fb97f95d0824af53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_ed25519_key_dup</definition>
        <argsstring>(ssh_key new, const ssh_key key)</argsstring>
        <name>pki_ed25519_key_dup</name>
        <param>
          <type>ssh_key</type>
          <declname>new</declname>
        </param>
        <param>
          <type>const ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>duplicate an ed25519 key </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="118" column="1" bodyfile="src/pki_ed25519.c" bodystart="200" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1aa3663627890dacf870e2b9874c51e712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_ed25519_public_key_to_blob</definition>
        <argsstring>(ssh_buffer buffer, ssh_key key)</argsstring>
        <name>pki_ed25519_public_key_to_blob</name>
        <param>
          <type>ssh_buffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssh_key</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>outputs an ed25519 public key in a blob buffer. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key to output</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_ERROR on error, SSH_OK on success </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="119" column="1" bodyfile="src/pki_ed25519.c" bodystart="234" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a334977209cb25bd9bce6db54440563cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_string</type>
        <definition>ssh_string pki_ed25519_sig_to_blob</definition>
        <argsstring>(ssh_signature sig)</argsstring>
        <name>pki_ed25519_sig_to_blob</name>
        <param>
          <type>ssh_signature</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>output a signature blob from an ed25519 signature </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sig</parametername>
</parameternamelist>
<parameterdescription>
<para>signature to convert</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Signature blob in SSH string, or NULL on error </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="120" column="1" bodyfile="src/pki_ed25519.c" bodystart="259" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a8809cfbc0b8835f016fcbee6fd55d094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pki_ed25519_sig_from_blob</definition>
        <argsstring>(ssh_signature sig, ssh_string sig_blob)</argsstring>
        <name>pki_ed25519_sig_from_blob</name>
        <param>
          <type>ssh_signature</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>ssh_string</type>
          <declname>sig_blob</declname>
        </param>
        <briefdescription>
<para>Convert a signature blob in an ed25519 signature. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">sig</parametername>
</parameternamelist>
<parameterdescription>
<para>a preinitialized signature</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sig_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>a signature blob</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_ERROR on error, SSH_OK on success </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="121" column="1" bodyfile="src/pki_ed25519.c" bodystart="287" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1af157c1df451c718d42a3db69443acf12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_key</type>
        <definition>ssh_key ssh_pki_openssh_privkey_import</definition>
        <argsstring>(const char *text_key, const char *passphrase, ssh_auth_callback auth_fn, void *auth_data)</argsstring>
        <name>ssh_pki_openssh_privkey_import</name>
        <param>
          <type>const char *</type>
          <declname>text_key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <briefdescription>
<para>Import a private key in OpenSSH (new) format. This format is typically used with ed25519 keys but can be used for others. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="124" column="1" bodyfile="src/pki_container_openssh.c" bodystart="272" bodyend="406"/>
        <referencedby refid="group__libssh__pki_1ga5f2a2ca4b9b711d1c1af8020dfbd4a53" compoundref="pki_8c" startline="398" endline="439">ssh_pki_import_privkey_base64</referencedby>
      </memberdef>
      <memberdef kind="function" id="pki__priv_8h_1a0a1b01b666de3e4f433660761c7658ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssh_string</type>
        <definition>ssh_string ssh_pki_openssh_privkey_export</definition>
        <argsstring>(const ssh_key privkey, const char *passphrase, ssh_auth_callback auth_fn, void *auth_data)</argsstring>
        <name>ssh_pki_openssh_privkey_export</name>
        <param>
          <type>const ssh_key</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type>ssh_auth_callback</type>
          <declname>auth_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>auth_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>generate an OpenSSH private key (defined in PROTOCOL.key) and output it in text format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>privkey[in]</parametername>
</parameternamelist>
<parameterdescription>
<para>private key to export </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an SSH string containing the text representation of the exported key. </para></simplesect>
<simplesect kind="warning"><para>currently only supports ED25519 key types. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/pki_priv.h" line="126" column="1" bodyfile="src/pki_container_openssh.c" bodystart="554" bodyend="718"/>
        <references refid="group__libssh__buffer_1ga7ecc914104a5bf0da485d3e42f6a7d3b" compoundref="buffer_8c" startline="86" endline="95">ssh_buffer_new</references>
        <referencedby refid="group__libssh__pki_1ga3b294c44e2280c935cb0b82ede5c42ee" compoundref="pki_8c" startline="548" endline="595">ssh_pki_export_privkey_file</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/libssh/pki_priv.h"/>
  </compounddef>
</doxygen>
