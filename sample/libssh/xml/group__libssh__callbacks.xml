<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__libssh__callbacks" kind="group">
    <compoundname>libssh_callbacks</compoundname>
    <title>The libssh callbacks</title>
    <innerclass refid="structssh__callbacks__struct" prot="public">ssh_callbacks_struct</innerclass>
    <innerclass refid="structssh__server__callbacks__struct" prot="public">ssh_server_callbacks_struct</innerclass>
    <innerclass refid="structssh__socket__callbacks__struct" prot="public">ssh_socket_callbacks_struct</innerclass>
    <innerclass refid="structssh__packet__callbacks__struct" prot="public">ssh_packet_callbacks_struct</innerclass>
    <innerclass refid="structssh__channel__callbacks__struct" prot="public">ssh_channel_callbacks_struct</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga47b833f21a2b7145e421e63cad14b3d4" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_callback_int) (int code, void *user)</definition>
        <argsstring>)(int code, void *user)</argsstring>
        <name>ssh_callback_int</name>
        <briefdescription>
<para>callback to process simple codes </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>value to transmit </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to pass in callback </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="49" column="1" bodyfile="include/libssh/callbacks.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gaf06fe7d0b8cd8a5aab0a19ad7c6140b9" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_callback_data) (const void *data, size_t len, void *user)</definition>
        <argsstring>)(const void *data, size_t len, void *user)</argsstring>
        <name>ssh_callback_data</name>
        <briefdescription>
<para>callback for data received messages. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data retrieved from the socket or stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes available from this stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied pointer sent along with all callback messages </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes processed by the callee. The remaining bytes will be sent in the next callback message, when more data is available. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="59" column="1" bodyfile="include/libssh/callbacks.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gaec19974b49541c787f7825e523849436" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_callback_int_int) (int code, int errno_code, void *user)</definition>
        <argsstring>)(int code, int errno_code, void *user)</argsstring>
        <name>ssh_callback_int_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="61" column="1" bodyfile="include/libssh/callbacks.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gaf6fd77dd8566d8bd0d87be9d4b7c4243" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_message_callback) (ssh_session, ssh_message message, void *user)</definition>
        <argsstring>)(ssh_session, ssh_message message, void *user)</argsstring>
        <name>ssh_message_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="63" column="1" bodyfile="include/libssh/callbacks.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gabb4a1fe7cde149c5064f3b36d0a3a94f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_channel_callback_int) (ssh_channel channel, int code, void *user)</definition>
        <argsstring>)(ssh_channel channel, int code, void *user)</argsstring>
        <name>ssh_channel_callback_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="64" column="1" bodyfile="include/libssh/callbacks.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gaa1b8a1768e5bb4904c74e9a0ba0b6874" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_channel_callback_data) (ssh_channel channel, int code, void *data, size_t len, void *user)</definition>
        <argsstring>)(ssh_channel channel, int code, void *data, size_t len, void *user)</argsstring>
        <name>ssh_channel_callback_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="65" column="1" bodyfile="include/libssh/callbacks.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga9057cbb0dc4ad1939cf6e03f36eaae9f" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_log_callback) (ssh_session session, int priority, const char *message, void *userdata)</definition>
        <argsstring>)(ssh_session session, int priority, const char *message, void *userdata)</argsstring>
        <name>ssh_log_callback</name>
        <briefdescription>
<para>SSH log callback. </para>        </briefdescription>
        <detaileddescription>
<para>All logging messages will go through this callback <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority of the log, the smaller being the more important </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="74" column="1" bodyfile="include/libssh/callbacks.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gab6eedc77c07dde0c6baf9c29e7700a99" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_logging_callback) (int priority, const char *function, const char *buffer, void *userdata)</definition>
        <argsstring>)(int priority, const char *function, const char *buffer, void *userdata)</argsstring>
        <name>ssh_logging_callback</name>
        <briefdescription>
<para>SSH log callback. </para>        </briefdescription>
        <detaileddescription>
<para>All logging messages will go through this callback.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority of the log, the smaller being the more important.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>The function name calling the the logging fucntions.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The actual message</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="90" column="1" bodyfile="include/libssh/callbacks.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gabd1e46f073ad992ae8642d8ebcde45a3" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_status_callback) (ssh_session session, float status, void *userdata)</definition>
        <argsstring>)(ssh_session session, float status, void *userdata)</argsstring>
        <name>ssh_status_callback</name>
        <briefdescription>
<para>SSH Connection status callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Percentage of connection status, going from 0.0 to 1.0 once connection is done. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="102" column="1" bodyfile="include/libssh/callbacks.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gaeeb75ac372db669157bba96c22e6df85" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_global_request_callback) (ssh_session session, ssh_message message, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_message message, void *userdata)</argsstring>
        <name>ssh_global_request_callback</name>
        <briefdescription>
<para>SSH global request callback. </para>        </briefdescription>
        <detaileddescription>
<para>All global request will go through this callback. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="112" column="1" bodyfile="include/libssh/callbacks.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga6fc88f06d2eaa263d3336621edea0dcc" prot="public" static="no">
        <type>ssh_channel(*</type>
        <definition>typedef ssh_channel(* ssh_channel_open_request_x11_callback) (ssh_session session, const char *originator_address, int originator_port, void *userdata)</definition>
        <argsstring>)(ssh_session session, const char *originator_address, int originator_port, void *userdata)</argsstring>
        <name>ssh_channel_open_request_x11_callback</name>
        <briefdescription>
<para>Handles an SSH new channel open X11 request. </para>        </briefdescription>
        <detaileddescription>
<para>This happens when the server sends back an X11 connection attempt. This is a client-side API <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a valid ssh_channel handle if the request is to be allowed </para></simplesect>
<simplesect kind="return"><para>NULL if the request should not be allowed </para></simplesect>
<simplesect kind="warning"><para>The channel pointer returned by this callback must be closed by the application. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="124" column="1" bodyfile="include/libssh/callbacks.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gad32c421f392ad47275446378339f59c6" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_auth_password_callback) (ssh_session session, const char *user, const char *password, void *userdata)</definition>
        <argsstring>)(ssh_session session, const char *user, const char *password, void *userdata)</argsstring>
        <name>ssh_auth_password_callback</name>
        <briefdescription>
<para>These are callbacks used specifically in SSH servers. </para>        </briefdescription>
        <detaileddescription>
<para>SSH authentication callback. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>User that wants to authenticate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>Password used for authentication </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_SUCCESS Authentication is accepted. </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed. </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_DENIED Authentication failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="173" column="1" bodyfile="include/libssh/callbacks.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga8d98e68f8a2362bbcb5490211a4a62de" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_auth_none_callback) (ssh_session session, const char *user, void *userdata)</definition>
        <argsstring>)(ssh_session session, const char *user, void *userdata)</argsstring>
        <name>ssh_auth_none_callback</name>
        <briefdescription>
<para>SSH authentication callback. </para>        </briefdescription>
        <detaileddescription>
<para>Tries to authenticates user with the &quot;none&quot; method which is anonymous or passwordless. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>User that wants to authenticate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_SUCCESS Authentication is accepted. </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed. </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_DENIED Authentication failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="186" column="1" bodyfile="include/libssh/callbacks.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gaadd49614879c70e0aaab096fd52cf2ab" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_auth_gssapi_mic_callback) (ssh_session session, const char *user, const char *principal, void *userdata)</definition>
        <argsstring>)(ssh_session session, const char *user, const char *principal, void *userdata)</argsstring>
        <name>ssh_auth_gssapi_mic_callback</name>
        <briefdescription>
<para>SSH authentication callback. </para>        </briefdescription>
        <detaileddescription>
<para>Tries to authenticates user with the &quot;gssapi-with-mic&quot; method <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>Username of the user (can be spoofed) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>principal</parametername>
</parameternamelist>
<parameterdescription>
<para>Authenticated principal of the user, including realm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_SUCCESS Authentication is accepted. </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed. </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_DENIED Authentication failed. </para></simplesect>
<simplesect kind="warning"><para>Implementations should verify that parameter user matches in some way the principal. user and principal can be different. Only the latter is guaranteed to be safe. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="200" column="1" bodyfile="include/libssh/callbacks.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga68f74aa25d6a193c5fcf016d6d1bdc51" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_auth_pubkey_callback) (ssh_session session, const char *user, struct ssh_key_struct *pubkey, char signature_state, void *userdata)</definition>
        <argsstring>)(ssh_session session, const char *user, struct ssh_key_struct *pubkey, char signature_state, void *userdata)</argsstring>
        <name>ssh_auth_pubkey_callback</name>
        <briefdescription>
<para>SSH authentication callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>User that wants to authenticate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubkey</parametername>
</parameternamelist>
<parameterdescription>
<para>public key used for authentication </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature_state</parametername>
</parameternamelist>
<parameterdescription>
<para>SSH_PUBLICKEY_STATE_NONE if the key is not signed (simple public key probe), SSH_PUBLICKEY_STATE_VALID if the signature is valid. Others values should be replied with a SSH_AUTH_DENIED. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_AUTH_SUCCESS Authentication is accepted. </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed. </para></simplesect>
<simplesect kind="return"><para>SSH_AUTH_DENIED Authentication failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="216" column="1" bodyfile="include/libssh/callbacks.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gaa1866ffc041b50c341f9cba866a8055c" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_service_request_callback) (ssh_session session, const char *service, void *userdata)</definition>
        <argsstring>)(ssh_session session, const char *service, void *userdata)</argsstring>
        <name>ssh_service_request_callback</name>
        <briefdescription>
<para>Handles an SSH service request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>service</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the service (e.g. &quot;ssh-userauth&quot;) requested </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the request is to be allowed </para></simplesect>
<simplesect kind="return"><para>-1 if the request should not be allowed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="229" column="1" bodyfile="include/libssh/callbacks.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gac63a4cc91d8c2a1465770ca5f6c0a436" prot="public" static="no">
        <type>ssh_channel(*</type>
        <definition>typedef ssh_channel(* ssh_channel_open_request_session_callback) (ssh_session session, void *userdata)</definition>
        <argsstring>)(ssh_session session, void *userdata)</argsstring>
        <name>ssh_channel_open_request_session_callback</name>
        <briefdescription>
<para>Handles an SSH new channel open session request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a valid ssh_channel handle if the request is to be allowed </para></simplesect>
<simplesect kind="return"><para>NULL if the request should not be allowed </para></simplesect>
<simplesect kind="warning"><para>The channel pointer returned by this callback must be closed by the application. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="239" column="1" bodyfile="include/libssh/callbacks.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gaf5fa4522517284e010b4e3624356e4a4" prot="public" static="no">
        <type>ssh_string(*</type>
        <definition>typedef ssh_string(* ssh_gssapi_select_oid_callback) (ssh_session session, const char *user, int n_oid, ssh_string *oids, void *userdata)</definition>
        <argsstring>)(ssh_session session, const char *user, int n_oid, ssh_string *oids, void *userdata)</argsstring>
        <name>ssh_gssapi_select_oid_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="252" column="1" bodyfile="include/libssh/callbacks.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gaacc4a1270f919717917e8960dabd1af3" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_gssapi_accept_sec_ctx_callback) (ssh_session session, ssh_string input_token, ssh_string *output_token, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_string input_token, ssh_string *output_token, void *userdata)</argsstring>
        <name>ssh_gssapi_accept_sec_ctx_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="267" column="1" bodyfile="include/libssh/callbacks.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga043d34d7436d150a9b8cd5ceb70ec19e" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_gssapi_verify_mic_callback) (ssh_session session, ssh_string mic, void *mic_buffer, size_t mic_buffer_size, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_string mic, void *mic_buffer, size_t mic_buffer_size, void *userdata)</argsstring>
        <name>ssh_gssapi_verify_mic_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="281" column="1" bodyfile="include/libssh/callbacks.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga6b8722467c98b73a7d78c0ec055e740d" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_packet_callback) (ssh_session session, uint8_t type, ssh_buffer packet, void *user)</definition>
        <argsstring>)(ssh_session session, uint8_t type, ssh_buffer packet, void *user)</argsstring>
        <name>ssh_packet_callback</name>
        <briefdescription>
<para>Prototype for a packet callback, to be called when a new packet arrives. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The current session of the packet </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>packet type (see <ref refid="ssh2_8h_source" kindref="compound">ssh2.h</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer containing the packet, excluding size, type and padding fields </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>user argument to the callback and are called each time a packet shows up </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_PACKET_USED Packet was parsed and used </para></simplesect>
<simplesect kind="return"><para>SSH_PACKET_NOT_USED Packet was not used or understood, processing must continue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="432" column="1" bodyfile="include/libssh/callbacks.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga4f34cc77aa9d47e506cbae679ddd54a5" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_channel_data_callback) (ssh_session session, ssh_channel channel, void *data, uint32_t len, int is_stderr, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, void *data, uint32_t len, int is_stderr, void *userdata)</argsstring>
        <name>ssh_channel_data_callback</name>
        <briefdescription>
<para>SSH channel data callback. </para>        </briefdescription>
        <detaileddescription>
<para>Called when data is available on a channel <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data that has been read on the channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_stderr</parametername>
</parameternamelist>
<parameterdescription>
<para>is 0 for stdout or 1 for stderr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes processed by the callee. The remaining bytes will be sent in the next callback message, when more data is available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="501" column="1" bodyfile="include/libssh/callbacks.h" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga54351aff7adba9f84621069aff982c27" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_channel_eof_callback) (ssh_session session, ssh_channel channel, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, void *userdata)</argsstring>
        <name>ssh_channel_eof_callback</name>
        <briefdescription>
<para>SSH channel eof callback. </para>        </briefdescription>
        <detaileddescription>
<para>Called when a channel receives EOF <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="514" column="1" bodyfile="include/libssh/callbacks.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga58672dfbf52812e72946a3d6d8c74279" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_channel_close_callback) (ssh_session session, ssh_channel channel, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, void *userdata)</argsstring>
        <name>ssh_channel_close_callback</name>
        <briefdescription>
<para>SSH channel close callback. </para>        </briefdescription>
        <detaileddescription>
<para>Called when a channel is closed by remote peer <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="524" column="1" bodyfile="include/libssh/callbacks.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga62cc19678bef2caa53808ef5776e08fa" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_channel_signal_callback) (ssh_session session, ssh_channel channel, const char *signal, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, const char *signal, void *userdata)</argsstring>
        <name>ssh_channel_signal_callback</name>
        <briefdescription>
<para>SSH channel signal callback. </para>        </briefdescription>
        <detaileddescription>
<para>Called when a channel has received a signal <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>the signal name (without the SIG prefix) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="535" column="1" bodyfile="include/libssh/callbacks.h" bodystart="535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga6f834b43c812f871c7252bfbbb4ef6f4" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_channel_exit_status_callback) (ssh_session session, ssh_channel channel, int exit_status, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, int exit_status, void *userdata)</argsstring>
        <name>ssh_channel_exit_status_callback</name>
        <briefdescription>
<para>SSH channel exit status callback. </para>        </briefdescription>
        <detaileddescription>
<para>Called when a channel has received an exit status <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="546" column="1" bodyfile="include/libssh/callbacks.h" bodystart="546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gace982803d01abe445379b9c360a1a43d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_channel_exit_signal_callback) (ssh_session session, ssh_channel channel, const char *signal, int core, const char *errmsg, const char *lang, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, const char *signal, int core, const char *errmsg, const char *lang, void *userdata)</argsstring>
        <name>ssh_channel_exit_signal_callback</name>
        <briefdescription>
<para>SSH channel exit signal callback. </para>        </briefdescription>
        <detaileddescription>
<para>Called when a channel has received an exit signal <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>Current session handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>the signal name (without the SIG prefix) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean telling wether a core has been dumped or not </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errmsg</parametername>
</parameternamelist>
<parameterdescription>
<para>the description of the exception </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lang</parametername>
</parameternamelist>
<parameterdescription>
<para>the language of the description (format: RFC 3066) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="561" column="1" bodyfile="include/libssh/callbacks.h" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga2c740320a613c207ee4032f8ee93fde8" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_channel_pty_request_callback) (ssh_session session, ssh_channel channel, const char *term, int width, int height, int pxwidth, int pwheight, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, const char *term, int width, int height, int pxwidth, int pwheight, void *userdata)</argsstring>
        <name>ssh_channel_pty_request_callback</name>
        <briefdescription>
<para>SSH channel PTY request from a client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of terminal emulation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width of the terminal, in characters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>height of the terminal, in characters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>width of the terminal, in pixels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxheight</parametername>
</parameternamelist>
<parameterdescription>
<para>height of the terminal, in pixels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the pty request is accepted </para></simplesect>
<simplesect kind="return"><para>-1 if the request is denied </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="581" column="1" bodyfile="include/libssh/callbacks.h" bodystart="581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga4d93fd06cb58478c40c9d1d1627881d9" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_channel_shell_request_callback) (ssh_session session, ssh_channel channel, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, void *userdata)</argsstring>
        <name>ssh_channel_shell_request_callback</name>
        <briefdescription>
<para>SSH channel Shell request from a client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the shell request is accepted </para></simplesect>
<simplesect kind="return"><para>1 if the request is denied </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="595" column="1" bodyfile="include/libssh/callbacks.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gafbbd34a8b28db875055485e24d2149d0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_channel_auth_agent_req_callback) (ssh_session session, ssh_channel channel, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, void *userdata)</argsstring>
        <name>ssh_channel_auth_agent_req_callback</name>
        <briefdescription>
<para>SSH auth-agent-request from the client. </para>        </briefdescription>
        <detaileddescription>
<para>This request is sent by a client when agent forwarding is available. Server is free to ignore this callback, no answer is expected. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="605" column="1" bodyfile="include/libssh/callbacks.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga4a0df3bb8a201fc52925595356806852" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ssh_channel_x11_req_callback) (ssh_session session, ssh_channel channel, int single_connection, const char *auth_protocol, const char *auth_cookie, uint32_t screen_number, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, int single_connection, const char *auth_protocol, const char *auth_cookie, uint32_t screen_number, void *userdata)</argsstring>
        <name>ssh_channel_x11_req_callback</name>
        <briefdescription>
<para>SSH X11 request from the client. </para>        </briefdescription>
        <detaileddescription>
<para>This request is sent by a client when X11 forwarding is requested(and available). Server is free to ignore this callback, no answer is expected. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="616" column="1" bodyfile="include/libssh/callbacks.h" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga3614f21f6afbe6f498cdaa9b28c0f003" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_channel_pty_window_change_callback) (ssh_session session, ssh_channel channel, int width, int height, int pxwidth, int pwheight, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, int width, int height, int pxwidth, int pwheight, void *userdata)</argsstring>
        <name>ssh_channel_pty_window_change_callback</name>
        <briefdescription>
<para>SSH channel PTY windows change (terminal size) from a client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width of the terminal, in characters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>height of the terminal, in characters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>width of the terminal, in pixels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxheight</parametername>
</parameternamelist>
<parameterdescription>
<para>height of the terminal, in pixels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the pty request is accepted </para></simplesect>
<simplesect kind="return"><para>-1 if the request is denied </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="634" column="1" bodyfile="include/libssh/callbacks.h" bodystart="634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1ga41ccf4a20d30e7c5ccd87ac25f580f9d" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_channel_exec_request_callback) (ssh_session session, ssh_channel channel, const char *command, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, const char *command, void *userdata)</argsstring>
        <name>ssh_channel_exec_request_callback</name>
        <briefdescription>
<para>SSH channel Exec request from a client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>the shell command to be executed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the exec request is accepted </para></simplesect>
<simplesect kind="return"><para>1 if the request is denied </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="648" column="1" bodyfile="include/libssh/callbacks.h" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gae816543864b633ab89d20cdf39d69225" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_channel_env_request_callback) (ssh_session session, ssh_channel channel, const char *env_name, const char *env_value, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, const char *env_name, const char *env_value, void *userdata)</argsstring>
        <name>ssh_channel_env_request_callback</name>
        <briefdescription>
<para>SSH channel environment request from a client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>env_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the environment value to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>env_value</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the environment value to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the env request is accepted </para></simplesect>
<simplesect kind="return"><para>1 if the request is denied </para></simplesect>
<simplesect kind="warning"><para>some environment variables can be dangerous if changed (e.g. LD_PRELOAD) and should not be fulfilled. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="664" column="1" bodyfile="include/libssh/callbacks.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__libssh__callbacks_1gafeee5298cbdb0ed0b607560322448bfd" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssh_channel_subsystem_request_callback) (ssh_session session, ssh_channel channel, const char *subsystem, void *userdata)</definition>
        <argsstring>)(ssh_session session, ssh_channel channel, const char *subsystem, void *userdata)</argsstring>
        <name>ssh_channel_subsystem_request_callback</name>
        <briefdescription>
<para>SSH channel subsystem request from a client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subsystem</parametername>
</parameternamelist>
<parameterdescription>
<para>the subsystem required </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Userdata to be passed to the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the subsystem request is accepted </para></simplesect>
<simplesect kind="return"><para>1 if the request is denied </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="677" column="1" bodyfile="include/libssh/callbacks.h" bodystart="677" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libssh__callbacks_1gaa321f33172cfa54eb50baaa963457a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LIBSSH_API int</type>
        <definition>LIBSSH_API int ssh_set_server_callbacks</definition>
        <argsstring>(ssh_session session, ssh_server_callbacks cb)</argsstring>
        <name>ssh_set_server_callbacks</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>ssh_server_callbacks</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Set the session server callback functions. </para>        </briefdescription>
        <detaileddescription>
<para>This functions sets the callback structure to use your own callback functions for user authentication, new channels and requests.</para><para><programlisting><codeline><highlight class="normal">struct<sp/>ssh_server_callbacks_struct<sp/>cb<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.userdata<sp/>=<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.auth_password_function<sp/>=<sp/>my_auth_function</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">ssh_callbacks_init(&amp;cb);</highlight></codeline>
<codeline><highlight class="normal">ssh_set_server_callbacks(session,<sp/>&amp;cb);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to set the callback structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback structure itself.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="357" column="1" bodyfile="src/callbacks.c" bodystart="85" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__callbacks_1ga2e4b0507c738748a3f10e43fe201fe09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LIBSSH_API int</type>
        <definition>LIBSSH_API int ssh_set_callbacks</definition>
        <argsstring>(ssh_session session, ssh_callbacks cb)</argsstring>
        <name>ssh_set_callbacks</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>ssh_callbacks</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Set the session callback functions. </para>        </briefdescription>
        <detaileddescription>
<para>This functions sets the callback structure to use your own callback functions for auth, logging and status.</para><para><programlisting><codeline><highlight class="normal">struct<sp/>ssh_callbacks_struct<sp/>cb<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.userdata<sp/>=<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.auth_function<sp/>=<sp/>my_auth_function</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">ssh_callbacks_init(&amp;cb);</highlight></codeline>
<codeline><highlight class="normal">ssh_set_callbacks(session,<sp/>&amp;cb);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to set the callback structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback structure itself.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="488" column="1" bodyfile="src/callbacks.c" bodystart="45" bodyend="65"/>
        <references refid="group__libssh__log_1ga0f795c820547d058dbbfa80cd4fe9a4e" compoundref="log_8c" startline="207" endline="209">ssh_get_log_callback</references>
        <references refid="group__libssh__log_1ga6accdc08b7d8c4234750ef30c4854b9e" compoundref="log_8c" startline="197" endline="205">ssh_set_log_callback</references>
        <references refid="group__libssh__log_1ga0addd5c29922f40e9f842a43e0cb0b27" compoundref="log_8c" startline="232" endline="237">ssh_set_log_userdata</references>
      </memberdef>
      <memberdef kind="function" id="group__libssh__callbacks_1gacea52d1373970a4922bf60e6b1680919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LIBSSH_API int</type>
        <definition>LIBSSH_API int ssh_set_channel_callbacks</definition>
        <argsstring>(ssh_channel channel, ssh_channel_callbacks cb)</argsstring>
        <name>ssh_set_channel_callbacks</name>
        <param>
          <type>ssh_channel</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>ssh_channel_callbacks</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Set the channel callback functions. </para>        </briefdescription>
        <detaileddescription>
<para>This functions sets the callback structure to use your own callback functions for channel data and exceptions</para><para><programlisting><codeline><highlight class="normal">struct<sp/>ssh_channel_callbacks_struct<sp/>cb<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.userdata<sp/>=<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.channel_data<sp/>=<sp/>my_channel_data_function</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">ssh_callbacks_init(&amp;cb);</highlight></codeline>
<codeline><highlight class="normal">ssh_set_channel_callbacks(channel,<sp/>&amp;cb);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to set the callback structure.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback structure itself.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="771" column="1" bodyfile="src/callbacks.c" bodystart="67" bodyend="83"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__libssh__callbacks_1ga1f68a25a8da56bb1b930cec98d539f4d" prot="public" static="no">
        <name>SSH_SOCKET_FLOW_WRITEWILLBLOCK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="388" column="9" bodyfile="include/libssh/callbacks.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1gab50359ff09370deb71808b135af21961" prot="public" static="no">
        <name>SSH_SOCKET_FLOW_WRITEWONTBLOCK</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="389" column="9" bodyfile="include/libssh/callbacks.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1gadc333c5dedfa61e2a0725428bd3aab89" prot="public" static="no">
        <name>SSH_SOCKET_EXCEPTION_EOF</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="391" column="9" bodyfile="include/libssh/callbacks.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1ga37ab1ae01d34ff9b5a2b1b4ae334fd6f" prot="public" static="no">
        <name>SSH_SOCKET_EXCEPTION_ERROR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="392" column="9" bodyfile="include/libssh/callbacks.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1ga777321b241841b09620e4c948520b753" prot="public" static="no">
        <name>SSH_SOCKET_CONNECTED_OK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="394" column="9" bodyfile="include/libssh/callbacks.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1ga3121a6449b4f59f96dd1196e8fd87b2b" prot="public" static="no">
        <name>SSH_SOCKET_CONNECTED_ERROR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="395" column="9" bodyfile="include/libssh/callbacks.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1ga17ef78f0410af7b1c4d52e4bfacffcfa" prot="public" static="no">
        <name>SSH_SOCKET_CONNECTED_TIMEOUT</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="396" column="9" bodyfile="include/libssh/callbacks.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1gafe09b81e5346f0babe288dc38113d289" prot="public" static="no">
        <name>ssh_callbacks_init</name>
        <param><defname>p</defname></param>
        <initializer>do {\
	(p)-&gt;size=sizeof(*(p)); \
} while(0);</initializer>
        <briefdescription>
<para>Initializes an <ref refid="structssh__callbacks__struct" kindref="compound">ssh_callbacks_struct</ref> A call to this macro is mandatory when you have set a new ssh_callback_struct structure. </para>        </briefdescription>
        <detaileddescription>
<para>Its goal is to maintain the binary compatibility with future versions of libssh as the structure evolves with time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="405" column="9" bodyfile="include/libssh/callbacks.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1ga60a6fe85408a17ce8ef24c31a76d4a46" prot="public" static="no">
        <name>ssh_callbacks_exists</name>
        <param><defname>p</defname></param>
        <param><defname>c</defname></param>
        <initializer>(\
  (p != NULL) &amp;&amp; ( (char *)&amp;((p)-&gt; c) &lt; (char *)(p) + (p)-&gt;size ) &amp;&amp; \
  ((p)-&gt; c != NULL) \
  )</initializer>
        <briefdescription>
<para>tests if a callback can be called without crash verifies that the struct size if big enough verifies that the callback pointer exists </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>callback pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>callback name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nonzero if callback can be called </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="418" column="9" bodyfile="include/libssh/callbacks.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1gac29df803aa1295d6a498c1b081f3b494" prot="public" static="no">
        <name>SSH_PACKET_USED</name>
        <initializer>1</initializer>
        <briefdescription>
<para>return values for a ssh_packet_callback </para>        </briefdescription>
        <detaileddescription>
<para>Packet was used and should not be parsed by another callback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="436" column="9" bodyfile="include/libssh/callbacks.h" bodystart="436" bodyend="-1"/>
        <referencedby refid="group__libssh__server_1gab9ca89e12e290a701dced5f7c91bb677" compoundref="gssapi_8c" startline="549" endline="553">ssh_gssapi_get_creds</referencedby>
        <referencedby refid="group__libssh__auth_1ga1fc1f11c7ba0469c866c42956450ebf7" compoundref="auth_8c" startline="156" endline="174">SSH_PACKET_CALLBACK</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1ga4766917128a12b646a8aee7ebc019f8c" prot="public" static="no">
        <name>SSH_PACKET_NOT_USED</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Packet was not used and should be passed to any other callback available. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="439" column="9" bodyfile="include/libssh/callbacks.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__libssh__callbacks_1ga8fd26956f4e2b9bc57cfef26c50e321b" prot="public" static="no">
        <name>SSH_PACKET_CALLBACK</name>
        <param><defname>name</defname></param>
        <initializer>int name (ssh_session session, uint8_t type, ssh_buffer packet, void *user)</initializer>
        <briefdescription>
<para>This macro declares a packet callback handler. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">SSH_PACKET_CALLBACK(mycallback){</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/libssh/callbacks.h" line="449" column="9" bodyfile="include/libssh/callbacks.h" bodystart="449" bodyend="-1"/>
        <referencedby refid="group__libssh__server_1gab9ca89e12e290a701dced5f7c91bb677" compoundref="gssapi_8c" startline="549" endline="553">ssh_gssapi_get_creds</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Callback which can be replaced in libssh. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
