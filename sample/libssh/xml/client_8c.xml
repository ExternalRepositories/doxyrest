<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="client_8c" kind="file" language="C++">
    <compoundname>client.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes local="no">netinet/in.h</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes refid="priv_8h" local="yes">libssh/priv.h</includes>
    <includes refid="ssh2_8h" local="yes">libssh/ssh2.h</includes>
    <includes refid="buffer_8h" local="yes">libssh/buffer.h</includes>
    <includes refid="packet_8h" local="yes">libssh/packet.h</includes>
    <includes refid="options_8h" local="yes">libssh/options.h</includes>
    <includes refid="socket_8h" local="yes">libssh/socket.h</includes>
    <includes refid="session_8h" local="yes">libssh/session.h</includes>
    <includes refid="dh_8h" local="yes">libssh/dh.h</includes>
    <includes refid="ecdh_8h" local="yes">libssh/ecdh.h</includes>
    <includes refid="threads_8h" local="yes">libssh/threads.h</includes>
    <includes refid="misc_8h" local="yes">libssh/misc.h</includes>
    <includes refid="pki_8h" local="yes">libssh/pki.h</includes>
    <includes refid="kex_8h" local="yes">libssh/kex.h</includes>
    <incdepgraph>
      <node id="960">
        <label>libssh/buffer.h</label>
        <link refid="buffer_8h_source"/>
        <childnode refid="961" relation="include">
        </childnode>
        <childnode refid="950" relation="include">
        </childnode>
      </node>
      <node id="961">
        <label>stdarg.h</label>
      </node>
      <node id="977">
        <label>libssh/curve25519.h</label>
        <link refid="curve25519_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="950" relation="include">
        </childnode>
      </node>
      <node id="953">
        <label>sys/select.h</label>
      </node>
      <node id="957">
        <label>netinet/in.h</label>
      </node>
      <node id="958">
        <label>arpa/inet.h</label>
      </node>
      <node id="947">
        <label>libssh/priv.h</label>
        <link refid="priv_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="949" relation="include">
        </childnode>
        <childnode refid="950" relation="include">
        </childnode>
        <childnode refid="956" relation="include">
        </childnode>
      </node>
      <node id="979">
        <label>libssh/misc.h</label>
        <link refid="misc_8h_source"/>
      </node>
      <node id="950">
        <label>libssh/libssh.h</label>
        <link refid="libssh_8h_source"/>
        <childnode refid="949" relation="include">
        </childnode>
        <childnode refid="951" relation="include">
        </childnode>
        <childnode refid="952" relation="include">
        </childnode>
        <childnode refid="953" relation="include">
        </childnode>
        <childnode refid="954" relation="include">
        </childnode>
        <childnode refid="955" relation="include">
        </childnode>
      </node>
      <node id="962">
        <label>libssh/packet.h</label>
        <link refid="packet_8h_source"/>
        <childnode refid="963" relation="include">
        </childnode>
      </node>
      <node id="945">
        <label>stdlib.h</label>
      </node>
      <node id="946">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="947" relation="include">
        </childnode>
      </node>
      <node id="980">
        <label>libssh/pki.h</label>
        <link refid="pki_8h_source"/>
        <childnode refid="947" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
      </node>
      <node id="955">
        <label>libssh/legacy.h</label>
        <link refid="legacy_8h_source"/>
      </node>
      <node id="975">
        <label>libssh/crypto.h</label>
        <link refid="crypto_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="969" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="967">
        <label>libssh/socket.h</label>
        <link refid="socket_8h_source"/>
        <childnode refid="956" relation="include">
        </childnode>
      </node>
      <node id="978">
        <label>libssh/threads.h</label>
        <link refid="threads_8h_source"/>
        <childnode refid="950" relation="include">
        </childnode>
        <childnode refid="956" relation="include">
        </childnode>
      </node>
      <node id="954">
        <label>netdb.h</label>
      </node>
      <node id="959">
        <label>libssh/ssh2.h</label>
        <link refid="ssh2_8h_source"/>
      </node>
      <node id="956">
        <label>libssh/callbacks.h</label>
        <link refid="callbacks_8h_source"/>
        <childnode refid="950" relation="include">
        </childnode>
        <childnode refid="946" relation="include">
        </childnode>
      </node>
      <node id="981">
        <label>libssh/ed25519.h</label>
        <link refid="ed25519_8h_source"/>
        <childnode refid="947" relation="include">
        </childnode>
      </node>
      <node id="952">
        <label>sys/types.h</label>
      </node>
      <node id="973">
        <label>libssh/poll.h</label>
        <link refid="poll_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
      </node>
      <node id="966">
        <label>libssh/options.h</label>
        <link refid="options_8h_source"/>
      </node>
      <node id="949">
        <label>unistd.h</label>
      </node>
      <node id="943">
        <label>src/client.c</label>
        <link refid="client_8c"/>
        <childnode refid="944" relation="include">
        </childnode>
        <childnode refid="945" relation="include">
        </childnode>
        <childnode refid="946" relation="include">
        </childnode>
        <childnode refid="957" relation="include">
        </childnode>
        <childnode refid="958" relation="include">
        </childnode>
        <childnode refid="947" relation="include">
        </childnode>
        <childnode refid="959" relation="include">
        </childnode>
        <childnode refid="960" relation="include">
        </childnode>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="966" relation="include">
        </childnode>
        <childnode refid="967" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="974" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="969" relation="include">
        </childnode>
      </node>
      <node id="976">
        <label>libssh/ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
      </node>
      <node id="972">
        <label>libssh/channels.h</label>
        <link refid="channels_8h_source"/>
        <childnode refid="947" relation="include">
        </childnode>
      </node>
      <node id="974">
        <label>libssh/dh.h</label>
        <link refid="dh_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
      </node>
      <node id="971">
        <label>libssh/auth.h</label>
        <link refid="auth_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="956" relation="include">
        </childnode>
      </node>
      <node id="963">
        <label>libssh/wrapper.h</label>
        <link refid="wrapper_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="950" relation="include">
        </childnode>
        <childnode refid="964" relation="include">
        </childnode>
        <childnode refid="965" relation="include">
        </childnode>
      </node>
      <node id="964">
        <label>libssh/libcrypto.h</label>
        <link refid="libcrypto_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
      </node>
      <node id="969">
        <label>libssh/kex.h</label>
        <link refid="kex_8h_source"/>
        <childnode refid="947" relation="include">
        </childnode>
        <childnode refid="956" relation="include">
        </childnode>
      </node>
      <node id="965">
        <label>libssh/libgcrypt.h</label>
        <link refid="libgcrypt_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
      </node>
      <node id="970">
        <label>libssh/pcap.h</label>
        <link refid="pcap_8h_source"/>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="950" relation="include">
        </childnode>
      </node>
      <node id="948">
        <label>config.h</label>
      </node>
      <node id="944">
        <label>stdio.h</label>
      </node>
      <node id="968">
        <label>libssh/session.h</label>
        <link refid="session_8h_source"/>
        <childnode refid="947" relation="include">
        </childnode>
        <childnode refid="969" relation="include">
        </childnode>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="970" relation="include">
        </childnode>
        <childnode refid="971" relation="include">
        </childnode>
        <childnode refid="972" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
      </node>
      <node id="951">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="client_8c_1ae999fe5d95dd5d737af376462d2c59c5" prot="public" static="no">
        <name>set_status</name>
        <param><defname>session</defname></param>
        <param><defname>status</defname></param>
        <initializer>do {\
        if (session-&gt;common.callbacks &amp;&amp; session-&gt;common.callbacks-&gt;connect_status_function) \
            session-&gt;common.callbacks-&gt;connect_status_function(session-&gt;common.callbacks-&gt;userdata, status); \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="47" column="9" bodyfile="src/client.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="client_8c_1a60373cf7aa31f7df6bee34eb6103af14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void socket_callback_connected</definition>
        <argsstring>(int code, int errno_code, void *user)</argsstring>
        <name>socket_callback_connected</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>errno_code</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Callback to be called when the socket is connected or had a connection error. Changes the state of the session and updates the error message. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>one of SSH_SOCKET_CONNECTED_OK or SSH_SOCKET_CONNECTED_ERROR </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to session </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="60" column="1" bodyfile="src/client.c" bodystart="60" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="client_8c_1a4c4c9ace93a9791515090ebc197dd736" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int callback_receive_banner</definition>
        <argsstring>(const void *data, size_t len, void *user)</argsstring>
        <name>callback_receive_banner</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Gets the banner from socket and saves it in session. Updates the session state. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the beginning of header </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the banner </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to session </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes processed, or zero if the banner is not complete. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="93" column="1" bodyfile="src/client.c" bodystart="93" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="client_8c_1ac4704ca12ecb7fa26c5bee9b02ed63fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_send_banner</definition>
        <argsstring>(ssh_session session, int server)</argsstring>
        <name>ssh_send_banner</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>int</type>
          <declname>server</declname>
        </param>
        <briefdescription>
<para>Sends a SSH banner to the server. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>server</parametername>
</parameternamelist>
<parameterdescription>
<para>Send client or server banner.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, &lt; 0 on error. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="172" column="1" bodyfile="src/client.c" bodystart="172" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="client_8c_1a473363c862d0bf3433aa43eb7276e865" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int dh_handshake</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>dh_handshake</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>launches the DH handshake state machine </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>session handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK or SSH_ERROR </para></simplesect>
<simplesect kind="warning"><para>this function returning is no proof that DH handshake is completed </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="250" column="1" bodyfile="src/client.c" bodystart="250" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="client_8c_1a326e54a6c281a97fc1e4fedacaa8997e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_service_request_termination</definition>
        <argsstring>(void *s)</argsstring>
        <name>ssh_service_request_termination</name>
        <param>
          <type>void *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="298" column="1" bodyfile="src/client.c" bodystart="298" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="client_8c_1a933eaa4065b3536242c2237a6095329e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_service_request</definition>
        <argsstring>(ssh_session session, const char *service)</argsstring>
        <name>ssh_service_request</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>service</declname>
        </param>
        <briefdescription>
<para>Request a service from the SSH server. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Service requests are for example: ssh-userauth, ssh-connection, etc.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to use to ask for a service request. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>service</parametername>
</parameternamelist>
<parameterdescription>
<para>The service request.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success </para></simplesect>
<simplesect kind="return"><para>SSH_ERROR on error </para></simplesect>
<simplesect kind="return"><para>SSH_AGAIN No response received yet </para></simplesect>
<xrefsect id="bug_1_bug000002"><xreftitle>Bug</xreftitle><xrefdescription><para>actually only works with ssh-userauth </para></xrefdescription></xrefsect></para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="322" column="1" bodyfile="src/client.c" bodystart="322" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gafa8d153635a261e97870ab71d570149a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ssh_client_connection_callback</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_client_connection_callback</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>A function to be called each time a step has been done in the connection. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="383" column="1" bodyfile="src/client.c" bodystart="383" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gabca86e5dcb03e23c150b16f9655cd782" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ssh_connect_termination</definition>
        <argsstring>(void *user)</argsstring>
        <name>ssh_connect_termination</name>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>describe under which conditions the ssh_connect function may stop </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="504" column="1" bodyfile="src/client.c" bodystart="504" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga032e07cbd8bc3f14cb2dd375db0b03d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_connect</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_connect</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Connect to the ssh server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The ssh session to connect.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SSH_OK on success, SSH_ERROR on error. </para></simplesect>
<simplesect kind="return"><para>SSH_AGAIN, if the session is in nonblocking mode, and call must be done again.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1gaadadc0f9601547c30db7c4d62017d32c" kindref="member">ssh_new()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libssh__session_1ga0f048a4c0dbe02cfb7e9c5b6d0db0f27" kindref="member">ssh_disconnect()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="528" column="1" bodyfile="src/client.c" bodystart="528" bodyend="634"/>
        <references refid="group__libssh_1ga3ebf8d6920e563f3b032e3cd5277598e" compoundref="init_8c" startline="53" endline="61">ssh_init</references>
        <referencedby refid="classssh_1_1_session_1a2a88d7dd524e81cb9152a87cb6fefc40" compoundref="libsshpp_8hpp" startline="170" endline="174">ssh::Session::connect</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga89864d4d5cc6d3d6ef1c39652f2a688f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* ssh_get_issue_banner</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_issue_banner</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the issue banner from the server. </para>        </briefdescription>
        <detaileddescription>
<para>This is the banner showing a disclaimer to users who log in, typically their right or the fact that they will be monitored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated string with the banner, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="646" column="1" bodyfile="src/client.c" bodystart="646" bodyend="652"/>
        <references refid="group__libssh__string_1ga65cbd5f2c5f02599c1c285efd1f06351" compoundref="string_8c" startline="176" endline="197">ssh_string_to_char</references>
        <referencedby refid="classssh_1_1_session_1a9969ed8dcaccef321ac519271758b406" compoundref="libsshpp_8hpp" startline="282" endline="287">ssh::Session::getIssueBanner</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gac55d2895467a1e898ee75b4710d836a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ssh_get_openssh_version</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_get_openssh_version</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Get the version of the OpenSSH server, if it is not an OpenSSH server then 0 will be returned. </para>        </briefdescription>
        <detaileddescription>
<para>You can use the SSH_VERSION_INT macro to compare version numbers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The version number if available, 0 otherwise.</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>openssh<sp/>=<sp/>ssh_get_openssh_version();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(openssh<sp/>==<sp/>SSH_INT_VERSION(6,<sp/>1,<sp/>0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Version<sp/>match!\m&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="672" column="1" bodyfile="src/client.c" bodystart="672" bodyend="678"/>
        <referencedby refid="classssh_1_1_session_1a9e0af590062a73a0927bb513bc19dd8e" compoundref="libsshpp_8hpp" startline="292" endline="294">ssh::Session::getOpensshVersion</referencedby>
        <referencedby refid="group__libssh__sftp_1ga010212bcabdccf36a34befe14c04a472" compoundref="sftp_8c" startline="2498" endline="2583">sftp_symlink</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1ga0f048a4c0dbe02cfb7e9c5b6d0db0f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssh_disconnect</definition>
        <argsstring>(ssh_session session)</argsstring>
        <name>ssh_disconnect</name>
        <param>
          <type>ssh_session</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Disconnect from a session (client or server). </para>        </briefdescription>
        <detaileddescription>
<para>The session can then be reused to open a new session.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">session</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSH session to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="686" column="1" bodyfile="src/client.c" bodystart="686" bodyend="754"/>
        <references refid="group__libssh__socket_1gaaf4853539d6ed1c3508cca5a45d557d6" compoundref="socket_8c" startline="425" endline="452">ssh_socket_close</references>
        <references refid="group__libssh__socket_1ga29176fb6f348985227454a3f5daec745" compoundref="socket_8c" startline="514" endline="516">ssh_socket_is_open</references>
        <references refid="group__libssh__socket_1ga4f4b2a1a8e54b3c6406a60c1b031de18" compoundref="socket_8c" startline="180" endline="192">ssh_socket_reset</references>
        <referencedby refid="classssh_1_1_session_1aaa6972fe2757370a0cf2b90576eb6edc" compoundref="libsshpp_8hpp" startline="246" endline="248">ssh::Session::disconnect</referencedby>
        <referencedby refid="group__libssh__session_1gae1bd16255ba373325adf76307d0c8c42" compoundref="session_8c" startline="434" endline="442">ssh_silent_disconnect</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__libssh__session_1gaffbc8276ff57983966ce108998df40bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ssh_copyright</definition>
        <argsstring>(void)</argsstring>
        <name>ssh_copyright</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/client.c" line="756" column="1" bodyfile="src/client.c" bodystart="756" bodyend="760"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/client.c"/>
  </compounddef>
</doxygen>
