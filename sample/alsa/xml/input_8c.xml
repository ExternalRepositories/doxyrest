<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="input_8c" kind="file" language="C++">
    <compoundname>input.c</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="yes">local.h</includes>
    <incdepgraph>
      <node id="258">
        <label>stdarg.h</label>
      </node>
      <node id="260">
        <label>stdlib.h</label>
      </node>
      <node id="261">
        <label>unistd.h</label>
      </node>
      <node id="262">
        <label>local.h</label>
      </node>
      <node id="257">
        <label>/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c</label>
        <link refid="input_8c"/>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___input_1ga4c86d6c288e2b1be3fe2efca6859cdd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_input_close</definition>
        <argsstring>(snd_input_t *input)</argsstring>
        <name>snd_input_close</name>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Closes an input handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input handle to be closed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" line="58" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group___input_1ga079ba3d8ad9cfba4003c28520c2f8121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_input_scanf</definition>
        <argsstring>(snd_input_t *input, const char *format,...)</argsstring>
        <name>snd_input_scanf</name>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Reads formatted input (like <computeroutput>fscanf(3)</computeroutput>) from an input handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string in <computeroutput>fscanf</computeroutput> format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Other <computeroutput>fscanf</computeroutput> arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of input items assigned, or <computeroutput>EOF</computeroutput>.</para></simplesect>
<xrefsect id="bug_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>Reading from a memory buffer doesn&apos;t work. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" line="74" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" bodystart="74" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="group___input_1gabc17742247f4733f1891c2caec453988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* snd_input_gets</definition>
        <argsstring>(snd_input_t *input, char *str, size_t size)</argsstring>
        <name>snd_input_gets</name>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reads a line from an input handle (like <computeroutput>fgets(3)</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the destination buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the destination buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the buffer if successful, otherwise <computeroutput>NULL</computeroutput>.</para></simplesect>
Like <computeroutput>fgets</computeroutput>, the returned string is zero-terminated, and contains the new-line character <computeroutput>&apos;\n&apos;</computeroutput> if the line fits into the buffer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" line="94" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group___input_1gafb9476884661a2d685e59e58740cc9e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_input_getc</definition>
        <argsstring>(snd_input_t *input)</argsstring>
        <name>snd_input_getc</name>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Reads a character from an input handle (like <computeroutput>fgetc(3)</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input handle. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The character read, or <computeroutput>EOF</computeroutput> on end of file or error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" line="104" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group___input_1gad665d319d2d0a4127110c141ef99a02b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_input_ungetc</definition>
        <argsstring>(snd_input_t *input, int c)</argsstring>
        <name>snd_input_ungetc</name>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Puts the last character read back to an input handle (like <computeroutput>ungetc(3)</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to push back. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The character pushed back, or <computeroutput>EOF</computeroutput> on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" line="115" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group___input_1ga70e6704164f80072bfa118160ff81d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_input_stdio_attach</definition>
        <argsstring>(snd_input_t **inputp, FILE *fp, int _close)</argsstring>
        <name>snd_input_stdio_attach</name>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> **</type>
          <declname>inputp</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_close</declname>
        </param>
        <briefdescription>
<para>Creates a new input object using an existing stdio <computeroutput>FILE</computeroutput> pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputp</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the pointer to the new input object at the address specified by <computeroutput>inputp</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>FILE</computeroutput> pointer to read from. Reading begins at the current file position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_close</parametername>
</parameternamelist>
<parameterdescription>
<para>Close flag. Set this to 1 if <ref refid="group___input_1ga4c86d6c288e2b1be3fe2efca6859cdd6" kindref="member">snd_input_close</ref> should close <computeroutput>fp</computeroutput> by calling <computeroutput>fclose</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" line="179" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" bodystart="179" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="group___input_1ga68ff91aaa391b39f5a3082e202fdd2ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_input_stdio_open</definition>
        <argsstring>(snd_input_t **inputp, const char *file, const char *mode)</argsstring>
        <name>snd_input_stdio_open</name>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> **</type>
          <declname>inputp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Creates a new input object reading from a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputp</parametername>
</parameternamelist>
<parameterdescription>
<para>The functions puts the pointer to the new input object at the address specified by <computeroutput>inputp</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to read from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The open mode, like <computeroutput>fopen(3)</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" line="209" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" bodystart="209" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="group___input_1ga3c7947884b1caf50117bcecd23a3cc22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_input_buffer_open</definition>
        <argsstring>(snd_input_t **inputp, const char *buf, ssize_t size)</argsstring>
        <name>snd_input_buffer_open</name>
        <param>
          <type><ref refid="group___input_1ga39165553a2907c5a27f325e3ce4e8301" kindref="member">snd_input_t</ref> **</type>
          <declname>inputp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Creates a new input object from a memory buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputp</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the pointer to the new input object at the address specified by <computeroutput>inputp</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the input buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the input buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code.</para></simplesect>
This functions creates a copy of the input buffer, so the application is not required to preserve the buffer after this function has been called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" line="306" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c" bodystart="306" bodyend="336"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic stdio-like input interface. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Abramo Bagnara <ulink url="mailto:abramo@alsa-project.org">abramo@alsa-project.org</ulink> </para></simplesect>
<simplesect kind="date"><para>2000</para></simplesect>
Generic stdio-like input interface </para>    </detaileddescription>
    <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/input.c"/>
  </compounddef>
</doxygen>
