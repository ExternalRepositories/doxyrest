<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___control" kind="group">
    <compoundname>Control</compoundname>
    <title>Control Interface</title>
    <innerclass refid="structsnd__aes__iec958__t" prot="public">snd_aes_iec958_t</innerclass>
    <innergroup refid="group___h_control">High level Control Interface</innergroup>
    <innergroup refid="group___s_control">Setup Control Interface</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___control_1gac42e0ed6713b62711af5e80b4b3bcfec" prot="public" static="no">
        <name>snd_ctl_elem_type_t</name>
        <enumvalue id="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca4721b8bec7a22580ce81b91c6b7a0ae1" prot="public">
          <name>SND_CTL_ELEM_TYPE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalid type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfecaa4ff1a96936c11b81e12ecd5a9dfa307" prot="public">
          <name>SND_CTL_ELEM_TYPE_BOOLEAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boolean contents </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca4248a1a1ea07ebfaf61f3b6675868519" prot="public">
          <name>SND_CTL_ELEM_TYPE_INTEGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Integer contents </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfecabfb38dcb8ca021f3f3a09261b3b8cb43" prot="public">
          <name>SND_CTL_ELEM_TYPE_ENUMERATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enumerated contents </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfecade553acbddf022bcdd9123e71c942be9" prot="public">
          <name>SND_CTL_ELEM_TYPE_BYTES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bytes contents </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca7fb78bfbbfb14c7653e1dcc3c5706454" prot="public">
          <name>SND_CTL_ELEM_TYPE_IEC958</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEC958 (S/PDIF) setting content </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca49b30ff41d10d784a98b9bb8636dce81" prot="public">
          <name>SND_CTL_ELEM_TYPE_INTEGER64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>64-bit integer contents </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca257de96b57bae6f291b36eff3ab0ecb5" prot="public">
          <name>SND_CTL_ELEM_TYPE_LAST</name>
          <initializer>= SND_CTL_ELEM_TYPE_INTEGER64</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL element type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="72" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="72" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" prot="public" static="no">
        <name>snd_ctl_elem_iface_t</name>
        <enumvalue id="group___control_1gga14baa0febb91cc4c5d72dcc825acf518a13ed37a91e6ea81175f9bf61411eccca" prot="public">
          <name>SND_CTL_ELEM_IFACE_CARD</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Card level </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga14baa0febb91cc4c5d72dcc825acf518aebbef1ae0db15ec3c2f4f2afd63c4a82" prot="public">
          <name>SND_CTL_ELEM_IFACE_HWDEP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hardware dependent device </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga14baa0febb91cc4c5d72dcc825acf518af7d7a7f5af771a7cdbec7424b2510060" prot="public">
          <name>SND_CTL_ELEM_IFACE_MIXER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mixer </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga14baa0febb91cc4c5d72dcc825acf518a701d786e4a50e0931c27660a877ee7ae" prot="public">
          <name>SND_CTL_ELEM_IFACE_PCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga14baa0febb91cc4c5d72dcc825acf518aeb930ace203532c3a8ca399a3f3b03a7" prot="public">
          <name>SND_CTL_ELEM_IFACE_RAWMIDI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RawMidi </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga14baa0febb91cc4c5d72dcc825acf518aed953d644672e4e2d36e5d77607cea28" prot="public">
          <name>SND_CTL_ELEM_IFACE_TIMER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Timer </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga14baa0febb91cc4c5d72dcc825acf518a86942df032bda20d3b14d8d32d95ca6e" prot="public">
          <name>SND_CTL_ELEM_IFACE_SEQUENCER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sequencer </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga14baa0febb91cc4c5d72dcc825acf518ad923e429ee1fe8233094ecd7d49fc499" prot="public">
          <name>SND_CTL_ELEM_IFACE_LAST</name>
          <initializer>= SND_CTL_ELEM_IFACE_SEQUENCER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL related interface </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="91" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="91" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group___control_1ga76f2458eb5cde785a8fcdb555ed7fd57" prot="public" static="no">
        <name>snd_ctl_event_type_t</name>
        <enumvalue id="group___control_1gga76f2458eb5cde785a8fcdb555ed7fd57a184c89f6a16a9b9e9a5ffd94b0aa9c31" prot="public">
          <name>SND_CTL_EVENT_ELEM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Elements related event </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga76f2458eb5cde785a8fcdb555ed7fd57a01ef98fccb7b418caf8c3e55fbb0254b" prot="public">
          <name>SND_CTL_EVENT_LAST</name>
          <initializer>= SND_CTL_EVENT_ELEM</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event class </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="110" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="group___control_1ga9d0e18b3c1b8cb729d4561b968296a76" prot="public" static="no">
        <name>snd_ctl_type_t</name>
        <enumvalue id="group___control_1gga9d0e18b3c1b8cb729d4561b968296a76a94bec3f8cfcb14bd7dd5b0f243e039f9" prot="public">
          <name>SND_CTL_TYPE_HW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Kernel level CTL </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga9d0e18b3c1b8cb729d4561b968296a76ab304ede71aad4a331d3532bc9dc39668" prot="public">
          <name>SND_CTL_TYPE_SHM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shared memory client CTL </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga9d0e18b3c1b8cb729d4561b968296a76a7697d758fab4cb3c23aa87ce4149a621" prot="public">
          <name>SND_CTL_TYPE_INET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>INET client CTL (not yet implemented) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___control_1gga9d0e18b3c1b8cb729d4561b968296a76a7c74ac3b8c063b460a5e1f74ae8a377c" prot="public">
          <name>SND_CTL_TYPE_EXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External control plugin </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="193" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="193" bodyend="202"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___control_1ga61aa15d40e16100bbb980bd062f5f220" prot="public" static="no">
        <type>struct _snd_ctl_card_info</type>
        <definition>typedef struct _snd_ctl_card_info snd_ctl_card_info_t</definition>
        <argsstring></argsstring>
        <name>snd_ctl_card_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL card info container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="200" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" prot="public" static="no">
        <type>struct _snd_ctl_elem_id</type>
        <definition>typedef struct _snd_ctl_elem_id snd_ctl_elem_id_t</definition>
        <argsstring></argsstring>
        <name>snd_ctl_elem_id_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL element identifier container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="200" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" prot="public" static="no">
        <type>struct _snd_ctl_elem_list</type>
        <definition>typedef struct _snd_ctl_elem_list snd_ctl_elem_list_t</definition>
        <argsstring></argsstring>
        <name>snd_ctl_elem_list_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL element identifier list container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="200" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" prot="public" static="no">
        <type>struct _snd_ctl_elem_info</type>
        <definition>typedef struct _snd_ctl_elem_info snd_ctl_elem_info_t</definition>
        <argsstring></argsstring>
        <name>snd_ctl_elem_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL element info container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="200" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" prot="public" static="no">
        <type>struct _snd_ctl_elem_value</type>
        <definition>typedef struct _snd_ctl_elem_value snd_ctl_elem_value_t</definition>
        <argsstring></argsstring>
        <name>snd_ctl_elem_value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL element value container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="200" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" prot="public" static="no">
        <type>struct _snd_ctl_event</type>
        <definition>typedef struct _snd_ctl_event snd_ctl_event_t</definition>
        <argsstring></argsstring>
        <name>snd_ctl_event_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL event container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="200" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___control_1ga06628f38def84a0fe3da74041db9d51f" prot="public" static="no">
        <type>struct _snd_ctl</type>
        <definition>typedef struct _snd_ctl snd_ctl_t</definition>
        <argsstring></argsstring>
        <name>snd_ctl_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="200" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___control_1ga89e065287b9deb65125cc5f1cfb48e07" prot="public" static="no">
        <type>struct _snd_sctl</type>
        <definition>typedef struct _snd_sctl snd_sctl_t</definition>
        <argsstring></argsstring>
        <name>snd_sctl_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SCTL type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="200" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___control_1gabb7a76fa905fbae6481f78d1eea4feb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_card_load</definition>
        <argsstring>(int card)</argsstring>
        <name>snd_card_load</name>
        <param>
          <type>int</type>
          <declname>card</declname>
        </param>
        <briefdescription>
<para>Try to load the driver for a card. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>card</parametername>
</parameternamelist>
<parameterdescription>
<para>Card number. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if driver is present, zero if driver is not present </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="222" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/cards.c" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6fccc8a2d7d5ebd072a552a05855c145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_card_next</definition>
        <argsstring>(int *card)</argsstring>
        <name>snd_card_next</name>
        <param>
          <type>int *</type>
          <declname>card</declname>
          <defname>rcard</defname>
        </param>
        <briefdescription>
<para>Try to determine the next card. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rcard</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to card number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if success, otherwise a negative error code</para></simplesect>
Tries to determine the next card from given card number. If card number is -1, then the first available card is returned. If the result card number is -1, no more cards are available. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="223" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/cards.c" bodystart="98" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga1881c5c04a532f5b9397745731ce7730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_card_get_index</definition>
        <argsstring>(const char *name)</argsstring>
        <name>snd_card_get_index</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defname>string</defname>
        </param>
        <briefdescription>
<para>Convert card string to an integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing card identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if success, otherwise a negative error code</para></simplesect>
The accepted format is an integer value in ASCII representation or the card identifier (the id parameter for sound-card drivers). The control device name like /dev/snd/controlC0 is accepted, too. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="224" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/cards.c" bodystart="125" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gad48d44da8e3bfe150e928267008b8ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_card_get_name</definition>
        <argsstring>(int card, char **name)</argsstring>
        <name>snd_card_get_name</name>
        <param>
          <type>int</type>
          <declname>card</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Obtain the card name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>card</parametername>
</parameternamelist>
<parameterdescription>
<para>Card number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Result - card name corresponding to card number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if success, otherwise a negative error code</para></simplesect>
The value returned in name is allocated with strdup and should be freed when no longer used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="225" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/cards.c" bodystart="173" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga547dcead4a72f24db4a0f9f530f75228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_card_get_longname</definition>
        <argsstring>(int card, char **name)</argsstring>
        <name>snd_card_get_longname</name>
        <param>
          <type>int</type>
          <declname>card</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Obtain the card long name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>card</parametername>
</parameternamelist>
<parameterdescription>
<para>Card number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Result - card long name corresponding to card number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if success, otherwise a negative error code</para></simplesect>
The value returned in name is allocated with strdup and should be freed when no longer used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="226" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/cards.c" bodystart="203" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gadf4ce9117fcfa454c523ed6e6bd8b353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_device_name_hint</definition>
        <argsstring>(int card, const char *iface, void ***hints)</argsstring>
        <name>snd_device_name_hint</name>
        <param>
          <type>int</type>
          <declname>card</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>void ***</type>
          <declname>hints</declname>
        </param>
        <briefdescription>
<para>Get a set of device name hints. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>card</parametername>
</parameternamelist>
<parameterdescription>
<para>Card number or -1 (means all cards) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface identification (like &quot;pcm&quot;, &quot;rawmidi&quot;, &quot;timer&quot;, &quot;seq&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hints</parametername>
</parameternamelist>
<parameterdescription>
<para>Result - array of device name hints </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if success, otherwise a negative error code</para></simplesect>
hints will receive a NULL-terminated array of device name hints, which can be passed to <ref refid="group___control_1ga8546500ca828392f03f5bba2e7813874" kindref="member">snd_device_name_get_hint</ref> to extract usable values. When no longer needed, hints should be passed to <ref refid="group___control_1gad4cacf29df4616c2458fc84c1fde708c" kindref="member">snd_device_name_free_hint</ref> to release resources.</para><para>User-defined hints are gathered from namehint.IFACE tree like:</para><para><computeroutput> namehint.pcm {<linebreak/>
 myfile &quot;file:FILE=/tmp/soundwave.raw|Save sound output to /tmp/soundwave.raw&quot;<linebreak/>
 myplug &quot;plug:front:Do all conversions for front speakers&quot;<linebreak/>
 } </computeroutput></para><para>Note: The device description is separated with &apos;|&apos; char.</para><para>Special variables: defaults.namehint.showall specifies if all device definitions are accepted (boolean type). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="228" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/namehint.c" bodystart="548" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gad4cacf29df4616c2458fc84c1fde708c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_device_name_free_hint</definition>
        <argsstring>(void **hints)</argsstring>
        <name>snd_device_name_free_hint</name>
        <param>
          <type>void **</type>
          <declname>hints</declname>
        </param>
        <briefdescription>
<para>Free a list of device name hints. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hints</parametername>
</parameternamelist>
<parameterdescription>
<para>List to free </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if success, otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="229" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/namehint.c" bodystart="651" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga8546500ca828392f03f5bba2e7813874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* snd_device_name_get_hint</definition>
        <argsstring>(const void *hint, const char *id)</argsstring>
        <name>snd_device_name_get_hint</name>
        <param>
          <type>const void *</type>
          <declname>hint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Extract a value from a hint. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hint</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to hint </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Hint value to extract (&quot;NAME&quot;, &quot;DESC&quot;, or &quot;IOID&quot;, see below) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an allocated ASCII string if success, otherwise NULL</para></simplesect>
List of valid IDs: NAME - name of device DESC - description of device IOID - input / output identification (&quot;Input&quot; or &quot;Output&quot;), NULL means both</para><para>The return value should be freed when no longer needed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="230" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/namehint.c" bodystart="679" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga58537f5b74c9c1f51699f9908a0d7f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_open</definition>
        <argsstring>(snd_ctl_t **ctl, const char *name, int mode)</argsstring>
        <name>snd_ctl_open</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> **</type>
          <declname>ctl</declname>
          <defname>ctlp</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Opens a CTL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctlp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII identifier of the CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Open mode (see <ref refid="group___control_1gae8a46558414be5b5b3b7bed127ad4574" kindref="member">SND_CTL_NONBLOCK</ref>, <ref refid="group___control_1gadcbc5a476ffaf2b8d4dfd29a2cfaab3d" kindref="member">SND_CTL_ASYNC</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="232" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1388" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga4a49cc71db1a7021be6ad880fcdbe4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_open_lconf</definition>
        <argsstring>(snd_ctl_t **ctl, const char *name, int mode, snd_config_t *lconf)</argsstring>
        <name>snd_ctl_open_lconf</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> **</type>
          <declname>ctl</declname>
          <defname>ctlp</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>lconf</declname>
        </param>
        <briefdescription>
<para>Opens a CTL using local configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctlp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII identifier of the CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Open mode (see <ref refid="group___control_1gae8a46558414be5b5b3b7bed127ad4574" kindref="member">SND_CTL_NONBLOCK</ref>, <ref refid="group___control_1gadcbc5a476ffaf2b8d4dfd29a2cfaab3d" kindref="member">SND_CTL_ASYNC</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lconf</parametername>
</parameternamelist>
<parameterdescription>
<para>Local configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="233" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1410" bodyend="1415"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga016fcf47dc9c17c06d6e0846ac0bba17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_open_fallback</definition>
        <argsstring>(snd_ctl_t **ctl, snd_config_t *root, const char *name, const char *orig_name, int mode)</argsstring>
        <name>snd_ctl_open_fallback</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> **</type>
          <declname>ctl</declname>
          <defname>ctlp</defname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>orig_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Opens a fallback CTL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctlp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration root </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII identifier of the CTL handle used as fallback </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orig_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The original ASCII name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Open mode (see <ref refid="group___control_1gae8a46558414be5b5b3b7bed127ad4574" kindref="member">SND_CTL_NONBLOCK</ref>, <ref refid="group___control_1gadcbc5a476ffaf2b8d4dfd29a2cfaab3d" kindref="member">SND_CTL_ASYNC</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="234" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1426" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaf8510057afd178d7206221d85440ba5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_close</definition>
        <argsstring>(snd_ctl_t *ctl)</argsstring>
        <name>snd_ctl_close</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
<para>close CTL handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Closes the specified CTL handle and frees all associated resources. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="235" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="132" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga0898e6fe7a63a1c301794357a160587b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_nonblock</definition>
        <argsstring>(snd_ctl_t *ctl, int nonblock)</argsstring>
        <name>snd_ctl_nonblock</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonblock</declname>
        </param>
        <briefdescription>
<para>set nonblock mode </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonblock</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = block, 1 = nonblock mode, 2 = abort </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="236" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="152" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6ff193775dfbaa5afade6320b77a756f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__inline__ int</type>
        <definition>static __inline__ int snd_ctl_abort</definition>
        <argsstring>(snd_ctl_t *ctl)</argsstring>
        <name>snd_ctl_abort</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="237" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga23813430fb81fecb0e95d1dfd688337d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_async_add_ctl_handler</definition>
        <argsstring>(snd_async_handler_t **handler, snd_ctl_t *ctl, snd_async_callback_t callback, void *private_data)</argsstring>
        <name>snd_async_add_ctl_handler</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> **</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___global_1gaf8937eadd968df14b64e54f49c29821c" kindref="member">snd_async_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>private_data</declname>
        </param>
        <briefdescription>
<para>Add an async handler for a CTL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned handler handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback private data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="238" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1206" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa693260ccd944d874229257e54dee404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
        <definition>snd_ctl_t* snd_async_handler_get_ctl</definition>
        <argsstring>(snd_async_handler_t *handler)</argsstring>
        <name>snd_async_handler_get_ctl</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Return CTL handle related to an async handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Async handler handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="240" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1236" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gad7761be890b679d7e7bb3a3e4453818b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_poll_descriptors_count</definition>
        <argsstring>(snd_ctl_t *ctl)</argsstring>
        <name>snd_ctl_poll_descriptors_count</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
<para>get count of poll descriptors for CTL handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of poll descriptors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="241" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="204" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaae9e775c251024e253a4314b76c3c1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_poll_descriptors</definition>
        <argsstring>(snd_ctl_t *ctl, struct pollfd *pfds, unsigned int space)</argsstring>
        <name>snd_ctl_poll_descriptors</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>struct pollfd *</type>
          <declname>pfds</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>get poll descriptors </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfds</parametername>
</parameternamelist>
<parameterdescription>
<para>array of poll descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>space</parametername>
</parameternamelist>
<parameterdescription>
<para>space in the poll descriptor array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of filled descriptors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="242" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="221" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gab4f2ac44c01f4ec3c02dca1945bf9155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_poll_descriptors_revents</definition>
        <argsstring>(snd_ctl_t *ctl, struct pollfd *pfds, unsigned int nfds, unsigned short *revents)</argsstring>
        <name>snd_ctl_poll_descriptors_revents</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>struct pollfd *</type>
          <declname>pfds</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nfds</declname>
        </param>
        <param>
          <type>unsigned short *</type>
          <declname>revents</declname>
        </param>
        <briefdescription>
<para>get returned events from poll descriptors </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfds</parametername>
</parameternamelist>
<parameterdescription>
<para>array of poll descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nfds</parametername>
</parameternamelist>
<parameterdescription>
<para>count of poll descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>revents</parametername>
</parameternamelist>
<parameterdescription>
<para>returned events </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if success, otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="243" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="244" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gab56450393817e8ee1959fc4bcf5d2d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_subscribe_events</definition>
        <argsstring>(snd_ctl_t *ctl, int subscribe)</argsstring>
        <name>snd_ctl_subscribe_events</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>subscribe</declname>
        </param>
        <briefdescription>
<para>Ask to be informed about events (poll, <ref refid="group___control_1ga23813430fb81fecb0e95d1dfd688337d" kindref="member">snd_async_add_ctl_handler</ref>, <ref refid="group___control_1ga392a8f4afa2ba60e0ce6817f2a4f5e74" kindref="member">snd_ctl_read</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subscribe</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = unsubscribe, 1 = subscribe, -1 = check subscribe or not </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="244" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaaa78539d04df0f1642d00c07a86d0fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_card_info</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_card_info_t *info)</argsstring>
        <name>snd_ctl_card_info</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get card related information. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Card info pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="245" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="275" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gab631f366b743f5afa0bb0344b42aad4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_list</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_list_t *list)</argsstring>
        <name>snd_ctl_elem_list</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Get a list of element identifiers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifiers list pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="246" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="287" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa41caec9e14ea618fecfacfe68f1f7d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_info_t *info)</argsstring>
        <name>snd_ctl_elem_info</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get CTL element information. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/information pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="247" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="300" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6577ee280d090136288fc5dd734867b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_read</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_value_t *data)</argsstring>
        <name>snd_ctl_elem_read</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Get CTL element value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="248" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="866" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gac98376a37556e0d878b6aa43e7e64e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_write</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_value_t *data)</argsstring>
        <name>snd_ctl_elem_write</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set CTL element value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success when value was changed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>a negative error code </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="249" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="880" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga1fba1f7e08ab11505a617af5d54f4580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_lock</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_id_t *id)</argsstring>
        <name>snd_ctl_elem_lock</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Lock CTL element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="250" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1003" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaf8b3191516b8b7debeb57192b71abf66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_unlock</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_id_t *id)</argsstring>
        <name>snd_ctl_elem_unlock</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Unlock CTL element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="251" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1015" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga56f9ce14ec4227de4f3a6b573f069481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_tlv_read</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, unsigned int *tlv, unsigned int tlv_size)</argsstring>
        <name>snd_ctl_elem_tlv_read</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>tlv</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>tlv_size</declname>
        </param>
        <briefdescription>
<para>Read structured data from an element set to given buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle of backend module for control interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlv</parametername>
</parameternamelist>
<parameterdescription>
<para>An array with members of unsigned int type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlv_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the array. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The format of an array of <emphasis>tlv</emphasis> argument is: tlv[0]: Type. One of SND_CTL_TLVT_XXX. tlv[1]: Length. The length of value in units of byte. tlv[2..]: Value. Depending on the type.</para><para>Details are described in &lt;sound/tlv.h&gt;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="252" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="929" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaaa2c2da0a41904db5809dd4eade24c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_tlv_write</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, const unsigned int *tlv)</argsstring>
        <name>snd_ctl_elem_tlv_write</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>tlv</declname>
        </param>
        <briefdescription>
<para>Write structured data from given buffer to an element set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle of backend module for control interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlv</parametername>
</parameternamelist>
<parameterdescription>
<para>An array with members of unsigned int type. The second member must represent total bytes of the rest of array. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success when value was changed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>a negative error code</para></parameterdescription>
</parameteritem>
</parameterlist>
The format of an array of <emphasis>tlv</emphasis> argument is: tlv[0]: Type. One of SND_CTL_TLVT_XXX. tlv[1]: Length. The length of value in units of byte. tlv[2..]: Value. Depending on the type.</para><para>Details are described in &lt;sound/tlv.h&gt;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="254" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="966" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga34d5e31c5ff25ab780893ab7534ab2d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_tlv_command</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, const unsigned int *tlv)</argsstring>
        <name>snd_ctl_elem_tlv_command</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>tlv</declname>
        </param>
        <briefdescription>
<para>Process structured data from given buffer for an element set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle of backend module for control interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlv</parametername>
</parameternamelist>
<parameterdescription>
<para>An array with members of unsigned int type. The second member must represent total bytes of the rest of array. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success when value was changed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>a negative error code</para></parameterdescription>
</parameteritem>
</parameterlist>
The format of an array of <emphasis>tlv</emphasis> argument is: tlv[0]: Type. One of SND_CTL_TLVT_XXX. tlv[1]: Length. The length of value in units of byte. tlv[2..]: Value. Depending on the type.</para><para>Details are described in &lt;sound/tlv.h&gt;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="256" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="990" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga11ec9933829235513853f89bffdfd4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_set_power_state</definition>
        <argsstring>(snd_ctl_t *ctl, unsigned int state)</argsstring>
        <name>snd_ctl_set_power_state</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Set Power State to given SND_CTL_POWER_* value and do the power management. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired Power State </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="272" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1123" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gae554fc52f0371161471520aa60e970c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_get_power_state</definition>
        <argsstring>(snd_ctl_t *ctl, unsigned int *state)</argsstring>
        <name>snd_ctl_get_power_state</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Get actual Power State. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="273" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1137" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga392a8f4afa2ba60e0ce6817f2a4f5e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_read</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_event_t *event)</argsstring>
        <name>snd_ctl_read</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Read an event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of events read otherwise a negative error code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="275" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1151" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga7df5807d1853b39781078793afa7b895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_wait</definition>
        <argsstring>(snd_ctl_t *ctl, int timeout)</argsstring>
        <name>snd_ctl_wait</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for a CTL to become ready (i.e. at least one event pending) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum time in milliseconds to wait </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="276" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1163" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga202bfd5f82126770a2a7f79fe75501b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_name</definition>
        <argsstring>(snd_ctl_t *ctl)</argsstring>
        <name>snd_ctl_name</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
<para>get identifier of CTL handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii identifier of CTL handle</para></simplesect>
Returns the ASCII identifier of given CTL handle. It&apos;s the same identifier specified in <ref refid="group___control_1ga58537f5b74c9c1f51699f9908a0d7f56" kindref="member">snd_ctl_open()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="277" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gafc6b41bf8de224f7b961cff768e41cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___control_1ga9d0e18b3c1b8cb729d4561b968296a76" kindref="member">snd_ctl_type_t</ref></type>
        <definition>snd_ctl_type_t snd_ctl_type</definition>
        <argsstring>(snd_ctl_t *ctl)</argsstring>
        <name>snd_ctl_type</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
<para>get type of CTL handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>type of CTL handle</para></simplesect>
Returns the type <ref refid="group___control_1ga9d0e18b3c1b8cb729d4561b968296a76" kindref="member">snd_ctl_type_t</ref> of given CTL handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="278" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaca10189720995695e836e7bf39cce570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_elem_type_name</definition>
        <argsstring>(snd_ctl_elem_type_t type)</argsstring>
        <name>snd_ctl_elem_type_name</name>
        <param>
          <type><ref refid="group___control_1gac42e0ed6713b62711af5e80b4b3bcfec" kindref="member">snd_ctl_elem_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>get name of a CTL element type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of CTL element type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="280" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1475" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6e85042ad0ecb60292c3d06cfe7b2a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_elem_iface_name</definition>
        <argsstring>(snd_ctl_elem_iface_t iface)</argsstring>
        <name>snd_ctl_elem_iface_name</name>
        <param>
          <type><ref refid="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" kindref="member">snd_ctl_elem_iface_t</ref></type>
          <declname>iface</declname>
        </param>
        <briefdescription>
<para>get name of a CTL element related interface </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element related interface </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of CTL element related interface </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="281" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1486" bodyend="1490"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gab06ee7470afa8d6ae55296d19bff1455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_event_type_name</definition>
        <argsstring>(snd_ctl_event_type_t type)</argsstring>
        <name>snd_ctl_event_type_name</name>
        <param>
          <type><ref refid="group___control_1ga76f2458eb5cde785a8fcdb555ed7fd57" kindref="member">snd_ctl_event_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>get name of a CTL event type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of CTL event type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="282" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1497" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga1a71c2546aef7d240185fd203240d890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_event_elem_get_mask</definition>
        <argsstring>(const snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_elem_get_mask</name>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get event mask for an element related event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>event mask for element related event </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="284" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1537" bodyend="1542"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gae1ecf3bdec2397722eaebbb2730de9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_event_elem_get_numid</definition>
        <argsstring>(const snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_elem_get_numid</name>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get element numeric identifier for an element related event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>element numeric identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="285" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1561" bodyend="1566"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga84bad7e515406d566484e4faaa41962b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_event_elem_get_id</definition>
        <argsstring>(const snd_ctl_event_t *obj, snd_ctl_elem_id_t *ptr)</argsstring>
        <name>snd_ctl_event_elem_get_id</name>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get CTL element identifier for an element related event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="286" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1549" bodyend="1554"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaed43a3e150a98463b99993c8a4646595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" kindref="member">snd_ctl_elem_iface_t</ref></type>
        <definition>snd_ctl_elem_iface_t snd_ctl_event_elem_get_interface</definition>
        <argsstring>(const snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_elem_get_interface</name>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get interface part of CTL element identifier for an element related event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>interface part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="287" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1573" bodyend="1578"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaf96e6732e7d7d7d95e868518b7c47316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_event_elem_get_device</definition>
        <argsstring>(const snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_elem_get_device</name>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get device part of CTL element identifier for an element related event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>device part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="288" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1585" bodyend="1590"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaaa0de2acc99d1aa07aff9e0542134a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_event_elem_get_subdevice</definition>
        <argsstring>(const snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_elem_get_subdevice</name>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get subdevice part of CTL element identifier for an element related event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>subdevice part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="289" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1597" bodyend="1602"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga79ef06a1957ccd0b784e1153e23ce25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_event_elem_get_name</definition>
        <argsstring>(const snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_elem_get_name</name>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get name part of CTL element identifier for an element related event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>name part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="290" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1609" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gae69f9ba6fd89ac22af2421b801e69bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_event_elem_get_index</definition>
        <argsstring>(const snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_elem_get_index</name>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get index part of CTL element identifier for an element related event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="291" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1621" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga504ad392b797b7f5277cd184aee96e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_list_alloc_space</definition>
        <argsstring>(snd_ctl_elem_list_t *obj, unsigned int entries)</argsstring>
        <name>snd_ctl_elem_list_alloc_space</name>
        <param>
          <type><ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>entries</declname>
        </param>
        <briefdescription>
<para>allocate space for CTL element identifiers list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifiers list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entries</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="293" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1509" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga7e8106e3e2f64d84d1c03ffe36bed388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_list_free_space</definition>
        <argsstring>(snd_ctl_elem_list_t *obj)</argsstring>
        <name>snd_ctl_elem_list_free_space</name>
        <param>
          <type><ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>free previously allocated space for CTL element identifiers list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifiers list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="294" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1525" bodyend="1530"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga4e4f251147f558bc2ad044e836e449d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* snd_ctl_ascii_elem_id_get</definition>
        <argsstring>(snd_ctl_elem_id_t *id)</argsstring>
        <name>snd_ctl_ascii_elem_id_get</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>return ASCII CTL element identifier name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii identifier of CTL element</para></simplesect>
The string is allocated using strdup(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="296" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/ctlparse.c" bodystart="114" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga2f530217bd896e3c0498b3e46624977a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_ascii_elem_id_parse</definition>
        <argsstring>(snd_ctl_elem_id_t *dst, const char *str)</argsstring>
        <name>snd_ctl_ascii_elem_id_parse</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>parse ASCII string as CTL element identifier </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination CTL identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>source ASCII string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success, otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="297" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/ctlparse.c" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga05d994f242e8a524a94ea482689fa2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_ascii_value_parse</definition>
        <argsstring>(snd_ctl_t *handle, snd_ctl_elem_value_t *dst, snd_ctl_elem_info_t *info, const char *value)</argsstring>
        <name>snd_ctl_ascii_value_parse</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>parse ASCII string as CTL element value </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination CTL element value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element info structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>source ASCII string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success, otherwise a negative error code</para></simplesect>
Note: For toggle command, the dst must contain previous (current) state (do the <ref refid="group___control_1ga6577ee280d090136288fc5dd734867b9" kindref="member">snd_ctl_elem_read</ref> call to obtain it). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="298" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/ctlparse.c" bodystart="309" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaf7047bf3d0336f2ed1bc876e512bfef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_ctl_elem_id_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_ctl_elem_id_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="303" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1640" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa261f3721050a0ad4a43f28bcd6b082d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_id_malloc</definition>
        <argsstring>(snd_ctl_elem_id_t **ptr)</argsstring>
        <name>snd_ctl_elem_id_malloc</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="309" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1650" bodyend="1657"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga0bb98b09bc352074219a7866d20f5816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_id_free</definition>
        <argsstring>(snd_ctl_elem_id_t *obj)</argsstring>
        <name>snd_ctl_elem_id_free</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="310" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1663" bodyend="1666"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gad21c1d92e9f82b41330dba1146c88734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_id_clear</definition>
        <argsstring>(snd_ctl_elem_id_t *obj)</argsstring>
        <name>snd_ctl_elem_id_clear</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>clear given <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="311" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1672" bodyend="1675"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga411575334b5f4d6602206df72c6ac01a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_id_copy</definition>
        <argsstring>(snd_ctl_elem_id_t *dst, const snd_ctl_elem_id_t *src)</argsstring>
        <name>snd_ctl_elem_id_copy</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="312" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1682" bodyend="1686"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga543f3de35c42f53f2ec2d24217fd4a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_id_get_numid</definition>
        <argsstring>(const snd_ctl_elem_id_t *obj)</argsstring>
        <name>snd_ctl_elem_id_get_numid</name>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get numeric identifier from a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element numeric identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="313" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1693" bodyend="1697"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6932a5e3485140cd120dd8a9be8e6770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" kindref="member">snd_ctl_elem_iface_t</ref></type>
        <definition>snd_ctl_elem_iface_t snd_ctl_elem_id_get_interface</definition>
        <argsstring>(const snd_ctl_elem_id_t *obj)</argsstring>
        <name>snd_ctl_elem_id_get_interface</name>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get interface part of a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element related interface </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="314" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1704" bodyend="1708"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga54c863a0cdc7c501b3e1d520137cfc69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_id_get_device</definition>
        <argsstring>(const snd_ctl_elem_id_t *obj)</argsstring>
        <name>snd_ctl_elem_id_get_device</name>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get device part of a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element related device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="315" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1715" bodyend="1719"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga5f3bb5a80842261a07c4ed99b05921b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_id_get_subdevice</definition>
        <argsstring>(const snd_ctl_elem_id_t *obj)</argsstring>
        <name>snd_ctl_elem_id_get_subdevice</name>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get subdevice part of a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element related subdevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="316" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1726" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa6cfea3ac963bfdaeb8189e03e927a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_elem_id_get_name</definition>
        <argsstring>(const snd_ctl_elem_id_t *obj)</argsstring>
        <name>snd_ctl_elem_id_get_name</name>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get name part of a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="317" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1737" bodyend="1741"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaebca4d84c661a50504b01b847f89289e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_id_get_index</definition>
        <argsstring>(const snd_ctl_elem_id_t *obj)</argsstring>
        <name>snd_ctl_elem_id_get_index</name>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get index part of a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="318" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1748" bodyend="1752"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga212d5ffe15e223dee2ebc58e3d57a7cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_id_set_numid</definition>
        <argsstring>(snd_ctl_elem_id_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_id_set_numid</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set numeric identifier for a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element numeric identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="319" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1759" bodyend="1763"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga33855eaf0261c321cbf0a88baf290418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_id_set_interface</definition>
        <argsstring>(snd_ctl_elem_id_t *obj, snd_ctl_elem_iface_t val)</argsstring>
        <name>snd_ctl_elem_id_set_interface</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" kindref="member">snd_ctl_elem_iface_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set interface part for a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element related interface </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="320" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1770" bodyend="1774"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga2c893cc444dbc0e4293e3a6fec7b27a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_id_set_device</definition>
        <argsstring>(snd_ctl_elem_id_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_id_set_device</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set device part for a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element related device </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="321" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1781" bodyend="1785"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga8eb060cb64d7cce2c82d04560bf675eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_id_set_subdevice</definition>
        <argsstring>(snd_ctl_elem_id_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_id_set_subdevice</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set subdevice part for a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element related subdevice </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="322" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1792" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga813d02a44a9d01a4a2fe81eda7a8670a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_id_set_name</definition>
        <argsstring>(snd_ctl_elem_id_t *obj, const char *val)</argsstring>
        <name>snd_ctl_elem_id_set_name</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set name part for a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="323" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1803" bodyend="1807"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga65af30a51becd092f6da1e357fc46094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_id_set_index</definition>
        <argsstring>(snd_ctl_elem_id_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_id_set_index</name>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set index part for a CTL element identifier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element index </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="324" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1814" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga5cfad24c04eb3576a1945757ff420944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_ctl_card_info_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_ctl_card_info_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="326" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1824" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga518166f64f41361629ee7bfe0caca9fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_card_info_malloc</definition>
        <argsstring>(snd_ctl_card_info_t **ptr)</argsstring>
        <name>snd_ctl_card_info_malloc</name>
        <param>
          <type><ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="332" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1834" bodyend="1841"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga62360e5fdd3c5644ca7e260099fba67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_card_info_free</definition>
        <argsstring>(snd_ctl_card_info_t *obj)</argsstring>
        <name>snd_ctl_card_info_free</name>
        <param>
          <type><ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="333" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1847" bodyend="1850"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga3a4851500ca8a98927b16b772cda8787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_card_info_clear</definition>
        <argsstring>(snd_ctl_card_info_t *obj)</argsstring>
        <name>snd_ctl_card_info_clear</name>
        <param>
          <type><ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>clear given <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="334" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1856" bodyend="1859"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gac2afd00836fb59d31cf759a8e48a622e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_card_info_copy</definition>
        <argsstring>(snd_ctl_card_info_t *dst, const snd_ctl_card_info_t *src)</argsstring>
        <name>snd_ctl_card_info_copy</name>
        <param>
          <type><ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="335" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1866" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga14863e13659cd0a02d3716923512dd85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_card_info_get_card</definition>
        <argsstring>(const snd_ctl_card_info_t *obj)</argsstring>
        <name>snd_ctl_card_info_get_card</name>
        <param>
          <type>const <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get card number from a CTL card info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL card info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>card number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="336" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1877" bodyend="1881"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaadadbd2d4aef000a30ec4c1c949326cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_card_info_get_id</definition>
        <argsstring>(const snd_ctl_card_info_t *obj)</argsstring>
        <name>snd_ctl_card_info_get_id</name>
        <param>
          <type>const <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get card identifier from a CTL card info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL card info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>card identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="337" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1888" bodyend="1892"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga4abf685f77a8fa8dd14232397cab6f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_card_info_get_driver</definition>
        <argsstring>(const snd_ctl_card_info_t *obj)</argsstring>
        <name>snd_ctl_card_info_get_driver</name>
        <param>
          <type>const <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get card driver name from a CTL card info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL card info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>card driver name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="338" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1899" bodyend="1903"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gae71617c9deadee635b0ad38ca9aaf746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_card_info_get_name</definition>
        <argsstring>(const snd_ctl_card_info_t *obj)</argsstring>
        <name>snd_ctl_card_info_get_name</name>
        <param>
          <type>const <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get card name from a CTL card info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL card info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>card name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="339" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1910" bodyend="1914"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga54a54f4b1cc3740eafba54b1cc1b8111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_card_info_get_longname</definition>
        <argsstring>(const snd_ctl_card_info_t *obj)</argsstring>
        <name>snd_ctl_card_info_get_longname</name>
        <param>
          <type>const <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get card long name from a CTL card info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL card info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>card long name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="340" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1921" bodyend="1925"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gae2a4719572de955480043dd34840579b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_card_info_get_mixername</definition>
        <argsstring>(const snd_ctl_card_info_t *obj)</argsstring>
        <name>snd_ctl_card_info_get_mixername</name>
        <param>
          <type>const <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get card mixer name from a CTL card info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL card info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>card mixer name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="341" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1932" bodyend="1936"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga2181aa6bf919fd1342b259d2f3af755b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_card_info_get_components</definition>
        <argsstring>(const snd_ctl_card_info_t *obj)</argsstring>
        <name>snd_ctl_card_info_get_components</name>
        <param>
          <type>const <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get card component list from a CTL card info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL card info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>card mixer identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="342" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1943" bodyend="1947"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga56f526a146d913e36802b6c4a0daf86b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_ctl_event_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_ctl_event_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="344" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1953" bodyend="1956"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga2b38df9f5233dd8290a80682011f7907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_event_malloc</definition>
        <argsstring>(snd_ctl_event_t **ptr)</argsstring>
        <name>snd_ctl_event_malloc</name>
        <param>
          <type><ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="350" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1963" bodyend="1970"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga63ff10dda4a7e6b4055a0f3438c7781f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_event_free</definition>
        <argsstring>(snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_free</name>
        <param>
          <type><ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="351" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1976" bodyend="1979"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga784c560c92df4179019bb3a29e1a4791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_event_clear</definition>
        <argsstring>(snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_clear</name>
        <param>
          <type><ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>clear given <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="352" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1985" bodyend="1988"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6d8375f54af11001b829f1e3054eccef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_event_copy</definition>
        <argsstring>(snd_ctl_event_t *dst, const snd_ctl_event_t *src)</argsstring>
        <name>snd_ctl_event_copy</name>
        <param>
          <type><ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="353" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="1995" bodyend="1999"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga2a7d413bb515e07dc4f933aa187324d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___control_1ga76f2458eb5cde785a8fcdb555ed7fd57" kindref="member">snd_ctl_event_type_t</ref></type>
        <definition>snd_ctl_event_type_t snd_ctl_event_get_type</definition>
        <argsstring>(const snd_ctl_event_t *obj)</argsstring>
        <name>snd_ctl_event_get_type</name>
        <param>
          <type>const <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get type of a CTL event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL event type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="354" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2006" bodyend="2010"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6a2a5b5258da9959ddbcacf94a0619f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_ctl_elem_list_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_ctl_elem_list_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="356" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2016" bodyend="2019"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gab57f2acf2e5abdc9c46c19fe2bad9397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_list_malloc</definition>
        <argsstring>(snd_ctl_elem_list_t **ptr)</argsstring>
        <name>snd_ctl_elem_list_malloc</name>
        <param>
          <type><ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="362" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2026" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga9141e579ac00e56fa01af4cd710acef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_list_free</definition>
        <argsstring>(snd_ctl_elem_list_t *obj)</argsstring>
        <name>snd_ctl_elem_list_free</name>
        <param>
          <type><ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="363" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2039" bodyend="2042"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga0aac385223908ae12a8d2f68d6105990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_list_clear</definition>
        <argsstring>(snd_ctl_elem_list_t *obj)</argsstring>
        <name>snd_ctl_elem_list_clear</name>
        <param>
          <type><ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>clear given <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="364" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2048" bodyend="2051"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gab945b6a9107a41d5cca414098711511e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_list_copy</definition>
        <argsstring>(snd_ctl_elem_list_t *dst, const snd_ctl_elem_list_t *src)</argsstring>
        <name>snd_ctl_elem_list_copy</name>
        <param>
          <type><ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="365" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2058" bodyend="2062"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gadc7b2d590c27c684ad2a076f11a8b31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_list_set_offset</definition>
        <argsstring>(snd_ctl_elem_list_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_list_set_offset</name>
        <param>
          <type><ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set index of first wanted CTL element identifier in a CTL element identifiers list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifiers list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>index of CTL element to put at position 0 of list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="366" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2069" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga2462c05a56bab424686f3d442ba8820f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_list_get_used</definition>
        <argsstring>(const snd_ctl_elem_list_t *obj)</argsstring>
        <name>snd_ctl_elem_list_get_used</name>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get number of used entries in CTL element identifiers list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of used entries </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="367" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2080" bodyend="2084"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga0a1206d8f19aa67a32577f523ee92c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_list_get_count</definition>
        <argsstring>(const snd_ctl_elem_list_t *obj)</argsstring>
        <name>snd_ctl_elem_list_get_count</name>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get total count of elements present in CTL device (information present in every filled CTL element identifiers list) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>total number of elements </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="368" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2091" bodyend="2095"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga73fe33f4f45b80d36137dd1371e34ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_list_get_id</definition>
        <argsstring>(const snd_ctl_elem_list_t *obj, unsigned int idx, snd_ctl_elem_id_t *ptr)</argsstring>
        <name>snd_ctl_elem_list_get_id</name>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get CTL element identifier for an entry of a CTL element identifiers list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of entry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="369" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2103" bodyend="2108"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6ee1e4b5b790f08bdcc78f3a2685aa5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_list_get_numid</definition>
        <argsstring>(const snd_ctl_elem_list_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_list_get_numid</name>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get CTL element numeric identifier for an entry of a CTL element identifiers list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of entry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element numeric identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="370" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2116" bodyend="2121"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga72a7235ee8e366a4b8e7c63b0189f512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" kindref="member">snd_ctl_elem_iface_t</ref></type>
        <definition>snd_ctl_elem_iface_t snd_ctl_elem_list_get_interface</definition>
        <argsstring>(const snd_ctl_elem_list_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_list_get_interface</name>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get interface part of CTL element identifier for an entry of a CTL element identifiers list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of entry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element related interface </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="371" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2129" bodyend="2134"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gae906aa0c657dd15300ab451436a318b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_list_get_device</definition>
        <argsstring>(const snd_ctl_elem_list_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_list_get_device</name>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get device part of CTL element identifier for an entry of a CTL element identifiers list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of entry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element related device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="372" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2142" bodyend="2147"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga809aec8df62a6cc5a289829e4171f5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_list_get_subdevice</definition>
        <argsstring>(const snd_ctl_elem_list_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_list_get_subdevice</name>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get subdevice part of CTL element identifier for an entry of a CTL element identifiers list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of entry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element related subdevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="373" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2155" bodyend="2160"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga819a69351b60fd868a09ae41323deb22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_elem_list_get_name</definition>
        <argsstring>(const snd_ctl_elem_list_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_list_get_name</name>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get name part of CTL element identifier for an entry of a CTL element identifiers list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of entry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="374" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2168" bodyend="2173"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga1d2c5fea3dcdc132d40dce39e9ca9f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_list_get_index</definition>
        <argsstring>(const snd_ctl_elem_list_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_list_get_index</name>
        <param>
          <type>const <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get index part of CTL element identifier for an entry of a CTL element identifiers list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of entry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="375" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2181" bodyend="2186"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga0758621321c3b86a5bcb542b8b931236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_ctl_elem_info_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_ctl_elem_info_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="377" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2192" bodyend="2195"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga54387df99f25dc01635568fbc6bf6ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_malloc</definition>
        <argsstring>(snd_ctl_elem_info_t **ptr)</argsstring>
        <name>snd_ctl_elem_info_malloc</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="383" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2202" bodyend="2209"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga8c55080b76401a03eede7d92e4e1cc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_free</definition>
        <argsstring>(snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_free</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="384" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2215" bodyend="2218"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga4b7173cf1df342a66dbc44dc9ebd07ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_clear</definition>
        <argsstring>(snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_clear</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>clear given <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="385" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2224" bodyend="2227"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga763d0832ab8b9096e96f5a15021f73d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_copy</definition>
        <argsstring>(snd_ctl_elem_info_t *dst, const snd_ctl_elem_info_t *src)</argsstring>
        <name>snd_ctl_elem_info_copy</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="386" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2234" bodyend="2238"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga0fec5d22ee58d04f14b59f405adc595e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___control_1gac42e0ed6713b62711af5e80b4b3bcfec" kindref="member">snd_ctl_elem_type_t</ref></type>
        <definition>snd_ctl_elem_type_t snd_ctl_elem_info_get_type</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_type</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get type from a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTL element content type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="387" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2245" bodyend="2249"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gabe355f33a84b3c3d18b3c72f5981dc6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_readable</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_readable</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info about readability from a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if element is not readable, 1 if element is readable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="388" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2256" bodyend="2260"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga3289cc7acb4fc4de184cd67c295f1866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_writable</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_writable</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info about writability from a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if element is not writable, 1 if element is not writable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="389" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2267" bodyend="2271"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga7d191b706824318c943a6b172a7531fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_volatile</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_volatile</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info about notification feasibility from a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if all element value changes are notified to subscribed applications, 1 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="390" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2278" bodyend="2282"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga387a4cb6a4d80b3ca2b4d734368eb219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_inactive</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_inactive</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info about status from a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if element value is not active, 1 if is active </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="391" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2289" bodyend="2293"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga1d37f2ff9ff7b1b367b7d804f7b2b7ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_locked</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_locked</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info whether an element is locked. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if element value is currently changeable, 1 if it&apos;s locked by another application </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="392" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2300" bodyend="2304"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaac6bb412e5a9fffb5509e98a10de45b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_tlv_readable</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_tlv_readable</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info about TLV readability from a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if element&apos;s TLV is not readable, 1 if element&apos;s TLV is readable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="393" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2333" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gacfbaae80d710b6feac682f8ba10a0341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_tlv_writable</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_tlv_writable</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info about TLV writeability from a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if element&apos;s TLV is not writable, 1 if element&apos;s TLV is writable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="394" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2344" bodyend="2348"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga7625ff65bed60802f15bf143de4860a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_tlv_commandable</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_tlv_commandable</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info about TLV command possibility from a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if element&apos;s TLV command is not possible, 1 if element&apos;s TLV command is supported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="395" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2355" bodyend="2359"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga7d40439e43a49e1ac6c694b7b617329c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_owner</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_owner</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info if I own an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if element value is currently changeable, 1 if it&apos;s locked by another application </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="396" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2311" bodyend="2315"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga34dc2e7013fe367a5acac79a1a13a814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_is_user</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_is_user</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get info if it&apos;s a user element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if element value is a system element, 1 if it&apos;s a user-created element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="397" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2322" bodyend="2326"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga934e489d5d48a24575a425d64e0f2db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pid_t</type>
        <definition>pid_t snd_ctl_elem_info_get_owner</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_owner</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get owner of a locked element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value entries count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="398" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2378" bodyend="2382"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa75a20d4190d324bcda5fd6659a4b377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_info_get_count</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_count</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get number of value entries from a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value entries count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="399" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2389" bodyend="2393"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gac8bcc954ddaae99174f97adc6116a6a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long snd_ctl_elem_info_get_min</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_min</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get minimum value from a <ref refid="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca4248a1a1ea07ebfaf61f3b6675868519" kindref="member">SND_CTL_ELEM_TYPE_INTEGER</ref> CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Minimum value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="400" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2400" bodyend="2405"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6d9da5653ce5d149e1b9ed0b26eaae22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long snd_ctl_elem_info_get_max</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_max</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get maximum value from a <ref refid="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca4248a1a1ea07ebfaf61f3b6675868519" kindref="member">SND_CTL_ELEM_TYPE_INTEGER</ref> CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="401" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2412" bodyend="2417"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga871c7c81aae5c41c2368a85c1ca1f407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long snd_ctl_elem_info_get_step</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_step</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get value step from a <ref refid="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca4248a1a1ea07ebfaf61f3b6675868519" kindref="member">SND_CTL_ELEM_TYPE_INTEGER</ref> CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Step </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="402" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2424" bodyend="2429"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga5e6bb136caa4d8c9a43e8d8f8e310893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long snd_ctl_elem_info_get_min64</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_min64</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get minimum value from a <ref refid="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca49b30ff41d10d784a98b9bb8636dce81" kindref="member">SND_CTL_ELEM_TYPE_INTEGER64</ref> CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Minimum value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="403" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2436" bodyend="2441"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga7e74e6ecf31560bd4c4b85464f7ba54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long snd_ctl_elem_info_get_max64</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_max64</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get maximum value from a <ref refid="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca49b30ff41d10d784a98b9bb8636dce81" kindref="member">SND_CTL_ELEM_TYPE_INTEGER64</ref> CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="404" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2448" bodyend="2453"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga35177e37f86eeb8c9fe31c3a8438c9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long snd_ctl_elem_info_get_step64</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_step64</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get value step from a <ref refid="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfeca49b30ff41d10d784a98b9bb8636dce81" kindref="member">SND_CTL_ELEM_TYPE_INTEGER64</ref> CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Step </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="405" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2460" bodyend="2465"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gabe5a218f256ac95ec295a175ec544453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_info_get_items</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_items</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get number of items available from a <ref refid="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfecabfb38dcb8ca021f3f3a09261b3b8cb43" kindref="member">SND_CTL_ELEM_TYPE_ENUMERATED</ref> CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>items count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="406" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2472" bodyend="2477"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga3cc2ead5a5628661976507fed4c38182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_set_item</definition>
        <argsstring>(snd_ctl_elem_info_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_info_set_item</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Select item in a <ref refid="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfecabfb38dcb8ca021f3f3a09261b3b8cb43" kindref="member">SND_CTL_ELEM_TYPE_ENUMERATED</ref> CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>item number </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="407" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2484" bodyend="2488"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaf54afbedeb76d572bd6c6d064ce4b51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_elem_info_get_item_name</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_item_name</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get name for selected item in a <ref refid="group___control_1ggac42e0ed6713b62711af5e80b4b3bcfecabfb38dcb8ca021f3f3a09261b3b8cb43" kindref="member">SND_CTL_ELEM_TYPE_ENUMERATED</ref> CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>name of chosen item </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="408" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2495" bodyend="2500"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga163546600efa29d822a4567706a8443a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_get_dimensions</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_dimensions</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get count of dimensions for given element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero value if no dimensions are defined, otherwise positive value with count of dimensions </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="409" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2510" bodyend="2520"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga221900fb2b2c68e8cefda697874b83ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_get_dimension</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_info_get_dimension</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get specified of dimension width for given element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero value if no dimension width is defined, otherwise positive value with with of specified dimension </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="410" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2532" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaf2af53f06728255d07a1456fe51303c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_info_set_dimension</definition>
        <argsstring>(snd_ctl_elem_info_t *info, const int dimension[4])</argsstring>
        <name>snd_ctl_elem_info_set_dimension</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dimension</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Set width to a specified dimension level of given element information. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension width for each level by member unit. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise a negative error code.</para></simplesect>
<simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL </term></varlistentry>
<listitem><para>Invalid arguments are given as parameters. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Compatibility:</title><para>This function is added in version 1.1.2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="411" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2557" bodyend="2573"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga4bf366ee3700fdc6073dae01724c2119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_get_id</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj, snd_ctl_elem_id_t *ptr)</argsstring>
        <name>snd_ctl_elem_info_get_id</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="413" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2580" bodyend="2584"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gac0875375abf0477b84b6022faaa683f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_info_get_numid</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_numid</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get element numeric identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>element numeric identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="414" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2591" bodyend="2595"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gac0de27f217d38543ce1b2d5902766a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" kindref="member">snd_ctl_elem_iface_t</ref></type>
        <definition>snd_ctl_elem_iface_t snd_ctl_elem_info_get_interface</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_interface</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get interface part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>interface part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="415" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2602" bodyend="2606"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga344f683cf6fac46e0ce8fbdf45ada99a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_info_get_device</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_device</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get device part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>device part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="416" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2613" bodyend="2617"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gae53373c67b013e3473caad0258c3bdc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_info_get_subdevice</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_subdevice</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get subdevice part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>subdevice part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="417" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2624" bodyend="2628"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga3af223c6ba6185a7326f852390697914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_elem_info_get_name</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_name</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get name part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>name part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="418" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2635" bodyend="2639"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga49d0d01aca3e2c61ca7cd7baa295d0ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_info_get_index</definition>
        <argsstring>(const snd_ctl_elem_info_t *obj)</argsstring>
        <name>snd_ctl_elem_info_get_index</name>
        <param>
          <type>const <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get index part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index part of element identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="419" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2646" bodyend="2650"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga8aa6f699266b217b21c75b04dbdbe2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_set_id</definition>
        <argsstring>(snd_ctl_elem_info_t *obj, const snd_ctl_elem_id_t *ptr)</argsstring>
        <name>snd_ctl_elem_info_set_id</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Set CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="420" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2657" bodyend="2661"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga13dcca5b02535c50c3f5efa2bc03c736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_set_numid</definition>
        <argsstring>(snd_ctl_elem_info_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_info_set_numid</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set element numeric identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>element numeric identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="421" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2668" bodyend="2672"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga49d7a2129b74609a8865e835e154d454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_set_interface</definition>
        <argsstring>(snd_ctl_elem_info_t *obj, snd_ctl_elem_iface_t val)</argsstring>
        <name>snd_ctl_elem_info_set_interface</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" kindref="member">snd_ctl_elem_iface_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set interface part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>interface part of element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="422" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2679" bodyend="2683"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga87d5d9c4fe092f02267e0b36397fac88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_set_device</definition>
        <argsstring>(snd_ctl_elem_info_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_info_set_device</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set device part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>device part of element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="423" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2690" bodyend="2694"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gab22e8223972fb7aa8a6e6abe49306b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_set_subdevice</definition>
        <argsstring>(snd_ctl_elem_info_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_info_set_subdevice</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set subdevice part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>subdevice part of element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="424" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2701" bodyend="2705"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga40fffad33e859d27314dde76d9dffebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_set_name</definition>
        <argsstring>(snd_ctl_elem_info_t *obj, const char *val)</argsstring>
        <name>snd_ctl_elem_info_set_name</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set name part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>name part of element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="425" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2712" bodyend="2716"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gacc80a95a945e31f3125a3ab4d908a464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_info_set_index</definition>
        <argsstring>(snd_ctl_elem_info_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_info_set_index</name>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set index part of CTL element identifier of a CTL element id/info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element id/info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>index part of element identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="426" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2723" bodyend="2727"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gacc94fec73b3b56f87872e8fec0c3e9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_add_integer_elem_set</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_info_t *info, unsigned int element_count, unsigned int member_count, long min, long max, long step)</argsstring>
        <name>snd_ctl_add_integer_elem_set</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>element_count</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>member_count</declname>
        </param>
        <param>
          <type>long</type>
          <declname>min</declname>
        </param>
        <param>
          <type>long</type>
          <declname>max</declname>
        </param>
        <param>
          <type>long</type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>Create and add some user-defined control elements of integer type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle of backend module for control interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Common iformation for a new element set, with ID of the first new element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements added by this operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of members which a element has to represent its states. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value for each member of the elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value for each member of the elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>The step of value for each member in the elements. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise a negative error code.</para></simplesect>
This function creates some user elements with integer type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.</para><para>The name field of <emphasis>id</emphasis> must be set with unique value to identify new control elements. After returning, all fields of <emphasis>id</emphasis> are filled. A element can be identified by the combination of name and index, or by numid.</para><para>All of members in the new elements are locked. The value of each member is initialized with the minimum value.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EBUSY </term></varlistentry>
<listitem><para>A element with ID <emphasis>id</emphasis> already exists. </para></listitem>
<varlistentry><term>-EINVAL </term></varlistentry>
<listitem><para>Some arguments include invalid value; i.e. ID field in <emphasis>info</emphasis> has no name, or the number of members is not between 1 to 127. </para></listitem>
<varlistentry><term>-ENOMEM </term></varlistentry>
<listitem><para>Out of memory, or there are too many user elements. </para></listitem>
<varlistentry><term>-ENXIO </term></varlistentry>
<listitem><para>This backend module does not support user elements of integer type. </para></listitem>
<varlistentry><term>-ENODEV </term></varlistentry>
<listitem><para>Device unplugged. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Compatibility:</title><para>This function is added in version 1.1.2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="428" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="374" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga2ab4992e6c9506bc8b8c0581808c2324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_add_integer64_elem_set</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_info_t *info, unsigned int element_count, unsigned int member_count, long long min, long long max, long long step)</argsstring>
        <name>snd_ctl_add_integer64_elem_set</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>element_count</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>member_count</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>min</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>max</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>Create and add some user-defined control elements of integer64 type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle of backend module for control interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Common iformation for a new element set, with ID of the first new element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements added by this operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of members which a element has to represent its states. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value for each member of the elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value for each member of the elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>The step of value for each member in the elements. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise a negative error code.</para></simplesect>
This function creates some user elements with integer64 type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.</para><para>The name field of <emphasis>id</emphasis> must be set with unique value to identify new control elements. After returning, all fields of <emphasis>id</emphasis> are filled. A element can be identified by the combination of name and index, or by numid.</para><para>All of members in the new elements are locked. The value of each member is initialized with the minimum value.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EBUSY </term></varlistentry>
<listitem><para>A element with ID <emphasis>id</emphasis> already exists. </para></listitem>
<varlistentry><term>-EINVAL </term></varlistentry>
<listitem><para>Some arguments include invalid value; i.e. ID has no name, or the number of members is not between 1 to 127. </para></listitem>
<varlistentry><term>-ENOMEM </term></varlistentry>
<listitem><para>Out of memory, or there are too many user elements. </para></listitem>
<varlistentry><term>-ENXIO </term></varlistentry>
<listitem><para>This backend module does not support user elements of integer64 type. </para></listitem>
<varlistentry><term>-ENODEV </term></varlistentry>
<listitem><para>Device unplugged. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Compatibility:</title><para>This function is added in version 1.1.2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="432" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="464" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaff7e95b329528fac338d13f428bec02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_add_boolean_elem_set</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_info_t *info, unsigned int element_count, unsigned int member_count)</argsstring>
        <name>snd_ctl_add_boolean_elem_set</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>element_count</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>member_count</declname>
        </param>
        <briefdescription>
<para>Create and add some user-defined control elements of boolean type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle of backend module for control interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Common iformation for a new element set, with ID of the first new element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements added by this operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of members which a element has to represent its states.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function creates some user elements with boolean type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.</para><para>The name field of <emphasis>id</emphasis> must be set with unique value to identify new control elements. After returning, all fields of <emphasis>id</emphasis> are filled. A element can be identified by the combination of name and index, or by numid.</para><para>All of members in the new elements are locked. The value of each member is initialized with false.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EBUSY </term></varlistentry>
<listitem><para>A element with ID <emphasis>id</emphasis> already exists. </para></listitem>
<varlistentry><term>-EINVAL </term></varlistentry>
<listitem><para>Some parameters include invalid value; i.e. ID has no name, or the number of members is not between 1 to 127. </para></listitem>
<varlistentry><term>-ENOMEM </term></varlistentry>
<listitem><para>Out of memory, or there are too many user elements. </para></listitem>
<varlistentry><term>-ENXIO </term></varlistentry>
<listitem><para>This backend module does not support user elements of boolean type. </para></listitem>
<varlistentry><term>-ENODEV </term></varlistentry>
<listitem><para>Device unplugged. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Compatibility:</title><para>This function is added in version 1.1.2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="437" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="550" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga9e9bf31020e6c2e7185612785eca6098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_add_enumerated_elem_set</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_info_t *info, unsigned int element_count, unsigned int member_count, unsigned int items, const char *const labels[])</argsstring>
        <name>snd_ctl_add_enumerated_elem_set</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>element_count</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>member_count</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>items</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>labels</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Create and add some user-defined control elements of enumerated type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle of backend module for control interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Common iformation for a new element set, with ID of the first new element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements added by this operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of members which a element has to represent its states. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>Range of possible values (0 ... <emphasis>items</emphasis> - 1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>An array containing <emphasis>items</emphasis> strings. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise a negative error code.</para></simplesect>
This function creates some user elements with enumerated type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.</para><para>The name field of <emphasis>id</emphasis> must be set with unique value to identify new control elements. After returning, all fields of <emphasis>id</emphasis> are filled. A element can be identified by the combination of name and index, or by numid.</para><para>All of members in the new elements are locked. The value of each member is initialized with the first entry of labels.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EBUSY </term></varlistentry>
<listitem><para>A control element with ID <emphasis>id</emphasis> already exists. </para></listitem>
<varlistentry><term>-EINVAL </term></varlistentry>
<listitem><para>Some arguments include invalid value; i.e. <emphasis>element_count</emphasis> is not between 1 to 127, or <emphasis>items</emphasis> is not at least one, or a string in <emphasis>labels</emphasis> is empty, or longer than 63 bytes, or total length of the labels requires more than 64 KiB storage. </para></listitem>
<varlistentry><term>-ENOMEM </term></varlistentry>
<listitem><para>Out of memory, or there are too many user control elements. </para></listitem>
<varlistentry><term>-ENXIO </term></varlistentry>
<listitem><para>This driver does not support (enumerated) user controls. </para></listitem>
<varlistentry><term>-ENODEV </term></varlistentry>
<listitem><para>Device unplugged. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Compatibility:</title><para>This function is added in version 1.1.2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="440" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="615" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaf725d3e3411b236e5434150268c80294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_add_bytes_elem_set</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_info_t *info, unsigned int element_count, unsigned int member_count)</argsstring>
        <name>snd_ctl_add_bytes_elem_set</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>element_count</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>member_count</declname>
        </param>
        <briefdescription>
<para>Create and add some user-defined control elements of bytes type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle of backend module for control interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Common iformation for a new element set, with ID of the first new element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements added by this operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of members which a element has to represent its states. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise a negative error code.</para></simplesect>
This function creates some user elements with bytes type. These elements are not controlled by device drivers in kernel. They can be operated by the same way as usual elements added by the device drivers.</para><para>The name field of <emphasis>id</emphasis> must be set with unique value to identify new control elements. After returning, all fields of <emphasis>id</emphasis> are filled. A element can be identified by the combination of name and index, or by numid.</para><para>All of members in the new elements are locked. The value of each member is initialized with the minimum value.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EBUSY </term></varlistentry>
<listitem><para>A element with ID <emphasis>id</emphasis> already exists. </para></listitem>
<varlistentry><term>-EINVAL </term></varlistentry>
<listitem><para>Some arguments include invalid value; i.e. ID has no name, or the number of members is not between 1 to 511. </para></listitem>
<varlistentry><term>-ENOMEM </term></varlistentry>
<listitem><para>Out of memory, or there are too many user elements. </para></listitem>
<varlistentry><term>-ENXIO </term></varlistentry>
<listitem><para>This backend module does not support user elements of bytes type. </para></listitem>
<varlistentry><term>-ENODEV </term></varlistentry>
<listitem><para>Device unplugged. </para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Compatibility:</title><para>This function is added in version 1.1.2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="445" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="702" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga9f6228c0d0bc751596cc04c6dcd00083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_add_integer</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, unsigned int count, long imin, long imax, long istep)</argsstring>
        <name>snd_ctl_elem_add_integer</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
          <defname>member_count</defname>
        </param>
        <param>
          <type>long</type>
          <declname>imin</declname>
          <defname>min</defname>
        </param>
        <param>
          <type>long</type>
          <declname>imax</declname>
          <defname>max</defname>
        </param>
        <param>
          <type>long</type>
          <declname>istep</declname>
          <defname>step</defname>
        </param>
        <briefdescription>
<para>Create and add an user-defined control element of integer type. </para>        </briefdescription>
        <detaileddescription>
<para>This is a wrapper function to <ref refid="group___control_1gacc94fec73b3b56f87872e8fec0c3e9f1" kindref="member">snd_ctl_add_integer_elem_set()</ref> for a control element. This doesn&apos;t fill the id data with full information, thus it&apos;s recommended to use <ref refid="group___control_1gacc94fec73b3b56f87872e8fec0c3e9f1" kindref="member">snd_ctl_add_integer_elem_set()</ref>, instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="449" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="729" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa9ff49156010b3931cd3d163e62cc43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_add_integer64</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, unsigned int count, long long imin, long long imax, long long istep)</argsstring>
        <name>snd_ctl_elem_add_integer64</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
          <defname>member_count</defname>
        </param>
        <param>
          <type>long long</type>
          <declname>imin</declname>
          <defname>min</defname>
        </param>
        <param>
          <type>long long</type>
          <declname>imax</declname>
          <defname>max</defname>
        </param>
        <param>
          <type>long long</type>
          <declname>istep</declname>
          <defname>step</defname>
        </param>
        <briefdescription>
<para>Create and add an user-defined control element of integer64 type. </para>        </briefdescription>
        <detaileddescription>
<para>This is a wrapper function to <ref refid="group___control_1ga2ab4992e6c9506bc8b8c0581808c2324" kindref="member">snd_ctl_add_integer64_elem_set()</ref> for a single control element. This doesn&apos;t fill the id data with full information, thus it&apos;s recommended to use <ref refid="group___control_1ga2ab4992e6c9506bc8b8c0581808c2324" kindref="member">snd_ctl_add_integer64_elem_set()</ref>, instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="450" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="750" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gad5f640f1d836b532b1c18d7604a90bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_add_boolean</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, unsigned int count)</argsstring>
        <name>snd_ctl_elem_add_boolean</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
          <defname>member_count</defname>
        </param>
        <briefdescription>
<para>Create and add an user-defined control element of boolean type. </para>        </briefdescription>
        <detaileddescription>
<para>This is a wrapper function to <ref refid="group___control_1gaff7e95b329528fac338d13f428bec02c" kindref="member">snd_ctl_add_boolean_elem_set()</ref> for a single control element. This doesn&apos;t fill the id data with full information, thus it&apos;s recommended to use <ref refid="group___control_1gaff7e95b329528fac338d13f428bec02c" kindref="member">snd_ctl_add_boolean_elem_set()</ref>, instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="451" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="771" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga273d2d5c44e97d045c48dbaa734ae23e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_add_enumerated</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, unsigned int count, unsigned int items, const char *const names[])</argsstring>
        <name>snd_ctl_elem_add_enumerated</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
          <defname>member_count</defname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>items</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>names</declname>
          <defname>labels</defname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Create and add a user-defined control element of enumerated type. </para>        </briefdescription>
        <detaileddescription>
<para>This is a wrapper function to <ref refid="group___control_1ga9e9bf31020e6c2e7185612785eca6098" kindref="member">snd_ctl_add_enumerated_elem_set()</ref> for a single control element. This doesn&apos;t fill the id data with full information, thus it&apos;s recommended to use <ref refid="group___control_1ga9e9bf31020e6c2e7185612785eca6098" kindref="member">snd_ctl_add_enumerated_elem_set()</ref>, instead.</para><para>This function is added in version 1.0.25. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="452" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="792" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga5511e7e65b773abf8eb8413ddb701f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_add_iec958</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id)</argsstring>
        <name>snd_ctl_elem_add_iec958</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Create and add a user-defined control element of IEC958 type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle of backend module for control interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the new control element.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function creates an user element with IEC958 type. This element is not controlled by device drivers in kernel. It can be operated by the same way as usual elements added by the device drivers.</para><para>The name field of <emphasis>id</emphasis> must be set with unique value to identify a new control element. After returning, all fields of <emphasis>id</emphasis> are filled. A element can be identified by the combination of name and index, or by numid.</para><para>A member in the new element is locked and filled with zero.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EBUSY </term></varlistentry>
<listitem><para>A control element with ID <emphasis>id</emphasis> already exists. </para></listitem>
<varlistentry><term>-EINVAL </term></varlistentry>
<listitem><para>ID has no name. </para></listitem>
<varlistentry><term>-ENOMEM </term></varlistentry>
<listitem><para>Out of memory, or there are too many user elements. </para></listitem>
<varlistentry><term>-ENXIO </term></varlistentry>
<listitem><para>This backend module does not support user elements of IEC958 type. </para></listitem>
<varlistentry><term>-ENODEV </term></varlistentry>
<listitem><para>Device unplugged. </para></listitem>
</variablelist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="453" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="835" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga715d20513768cf33f10a0f9340b7baab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_remove</definition>
        <argsstring>(snd_ctl_t *ctl, snd_ctl_elem_id_t *id)</argsstring>
        <name>snd_ctl_elem_remove</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Remove an user CTL element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>CTL element identification </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="454" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="854" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga0514e7dde0594c4bd909e2306acb4bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_ctl_elem_value_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_ctl_elem_value_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get size of data structure for an element. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size in bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="456" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2733" bodyend="2736"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga34126639664d2c2d91a4b4bc6494a536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_value_malloc</definition>
        <argsstring>(snd_ctl_elem_value_t **ptr)</argsstring>
        <name>snd_ctl_elem_value_malloc</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Allocate an invalid <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> using standard malloc(3). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned pointer for data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="462" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2743" bodyend="2750"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaab6bfeb2206c9de88778890fe527cd53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_free</definition>
        <argsstring>(snd_ctl_elem_value_t *obj)</argsstring>
        <name>snd_ctl_elem_value_free</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Frees a previously allocated data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="463" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2756" bodyend="2759"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga5dc3556ecf7f1b6b90a751f68e298aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_clear</definition>
        <argsstring>(snd_ctl_elem_value_t *obj)</argsstring>
        <name>snd_ctl_elem_value_clear</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Clear given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="464" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2765" bodyend="2768"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga5631893dd087d73c223b7787222b7f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_copy</definition>
        <argsstring>(snd_ctl_elem_value_t *dst, const snd_ctl_elem_value_t *src)</argsstring>
        <name>snd_ctl_elem_value_copy</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy two data of elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to destination. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to source. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="465" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2775" bodyend="2780"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gad5ee4dee86e48095a8eb74379c933350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_value_compare</definition>
        <argsstring>(snd_ctl_elem_value_t *left, const snd_ctl_elem_value_t *right)</argsstring>
        <name>snd_ctl_elem_value_compare</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compare one data of an element to the other. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to first data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to second data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on match, less than or greater than otherwise, see memcmp(3). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="466" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2788" bodyend="2793"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gad5c2ecc35d664aff974a244478496239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_get_id</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj, snd_ctl_elem_id_t *ptr)</argsstring>
        <name>snd_ctl_elem_value_get_id</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get element identifier from given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer for element identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="467" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2800" bodyend="2804"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga4506b9e0ca143a5e78e755ee4e285fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_value_get_numid</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj)</argsstring>
        <name>snd_ctl_elem_value_get_numid</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get element numeric identifier from given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Element numeric identifier. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="468" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2811" bodyend="2815"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa3c2abb83ed61f20350d056615bda48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" kindref="member">snd_ctl_elem_iface_t</ref></type>
        <definition>snd_ctl_elem_iface_t snd_ctl_elem_value_get_interface</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj)</argsstring>
        <name>snd_ctl_elem_value_get_interface</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get interface part of element identifier from given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface part of element identifier. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="469" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2823" bodyend="2827"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gac1ec603a65de11b4661c04e6327f7647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_value_get_device</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj)</argsstring>
        <name>snd_ctl_elem_value_get_device</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get device part of element identifier from given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device part of element identifier. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="470" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2834" bodyend="2838"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga81ad9e08fdd64b99dd6562b698ab7f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_value_get_subdevice</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj)</argsstring>
        <name>snd_ctl_elem_value_get_subdevice</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get subdevice part of element identifier from given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Subdevice part of element identifier. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="471" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2846" bodyend="2850"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga8c39c251d773d70ee8da07af4f5bdf0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_ctl_elem_value_get_name</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj)</argsstring>
        <name>snd_ctl_elem_value_get_name</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get name part of element identifier from given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name part of element identifier. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="472" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2857" bodyend="2861"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga7bae3a71028550515183e945040069df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_value_get_index</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj)</argsstring>
        <name>snd_ctl_elem_value_get_index</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get index part of element identifier from given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index part of element identifier. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="473" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2868" bodyend="2872"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gab009ec5ba8cd90b434beb4294bff5d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_id</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, const snd_ctl_elem_id_t *ptr)</argsstring>
        <name>snd_ctl_elem_value_set_id</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Set element identifier to given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an element identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="474" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2879" bodyend="2883"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga8ade8618025754cd6b0baebd54bd5773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_numid</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_value_set_numid</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set numeric identifier to given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for numeric identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="475" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2890" bodyend="2894"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga052fb24927d60936cabfb29303595790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_interface</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, snd_ctl_elem_iface_t val)</argsstring>
        <name>snd_ctl_elem_value_set_interface</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___control_1ga14baa0febb91cc4c5d72dcc825acf518" kindref="member">snd_ctl_elem_iface_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set interface part of element identifier to given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for interface part of element identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="476" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2901" bodyend="2905"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga2ff78ac05ab5efbe82f3eafe799e050d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_device</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_value_set_device</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set device part of element identifier to given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for device part of element identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="477" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2912" bodyend="2916"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa49c82aaf7052043c69594e3c81204c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_subdevice</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_value_set_subdevice</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set subdevice part of element identifier to given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for subdevice part of element identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="478" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2923" bodyend="2927"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga7cb4db71bdc890579aa8bddbc88be7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_name</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, const char *val)</argsstring>
        <name>snd_ctl_elem_value_set_name</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set name part of element identifier to given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for name part of element identifier, </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="479" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2934" bodyend="2938"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga3b95f6d57955c7648e12023d53ce3faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_index</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, unsigned int val)</argsstring>
        <name>snd_ctl_elem_value_set_index</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set index part of element identifier to given data of an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for index part of element identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="480" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2945" bodyend="2949"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa4409f368b375cb2ceb6d4108dcd2fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_elem_value_get_boolean</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_value_get_boolean</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get value of a specified member from given data as an element of boolean type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value for the member. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="481" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2958" bodyend="2963"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga88debd91f21f40b237d22d7255b4a5fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long snd_ctl_elem_value_get_integer</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_value_get_integer</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get value of a specified member from given data as an element of integer type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value for the member. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="482" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2972" bodyend="2977"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga3f1d6202c02a34e973b87a2c580abcef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long snd_ctl_elem_value_get_integer64</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_value_get_integer64</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get value of a specified member from given data as an element of integer64 type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value for the member. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="483" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="2986" bodyend="2991"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaf7a9a86cb477166bc3922bd722afb296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_ctl_elem_value_get_enumerated</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_value_get_enumerated</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get value of a specified member from given data as an element of enumerated type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value for the member. This is an index of name set in the element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="484" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3000" bodyend="3005"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga594a9762366355ec131e9fda92243305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char snd_ctl_elem_value_get_byte</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj, unsigned int idx)</argsstring>
        <name>snd_ctl_elem_value_get_byte</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get value of a specified member from given data as an element of bytes type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value for the member. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="485" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3014" bodyend="3019"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaa246c604f97c7a05d125314f0fa72946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_boolean</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, unsigned int idx, long val)</argsstring>
        <name>snd_ctl_elem_value_set_boolean</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set value of a specified member to given data as an element of boolean type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the member. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="486" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3028" bodyend="3033"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gac022b948fe93bc744eb8b24839091b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_integer</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, unsigned int idx, long val)</argsstring>
        <name>snd_ctl_elem_value_set_integer</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set value of a specified member to given data as an element of integer type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the member. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="487" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3042" bodyend="3047"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaef406a6ab97925a9df646022800e815b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_integer64</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, unsigned int idx, long long val)</argsstring>
        <name>snd_ctl_elem_value_set_integer64</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set value of a specified member to given data as an element of integer64 type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the member. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="488" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3056" bodyend="3061"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga89a5b646d118cd73e7ca7d861bb6de26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_enumerated</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, unsigned int idx, unsigned int val)</argsstring>
        <name>snd_ctl_elem_value_set_enumerated</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set value of a specified member to given data as an element of enumerated type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the member. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="489" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3070" bodyend="3075"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga0a0d53d2dd752fb1aa39c97376d02547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_byte</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, unsigned int idx, unsigned char val)</argsstring>
        <name>snd_ctl_elem_value_set_byte</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set value for a specified member to given data as an element of byte type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of member in the element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for the member. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="490" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3084" bodyend="3089"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga2b78601c4c56ecb4a6e3556137d61af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_set_bytes</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, void *data, size_t size)</argsstring>
        <name>snd_ctl_elem_set_bytes</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set values to given data as an element of bytes type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer for byte array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes included in the memory block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="491" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3097" bodyend="3102"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga11729138fcecfb37f9b7c744c4743fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* snd_ctl_elem_value_get_bytes</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj)</argsstring>
        <name>snd_ctl_elem_value_get_bytes</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get memory block from given data as an element of bytes type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer for byte array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="492" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3109" bodyend="3113"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga8970ed4dd76ece274e27f0b0429895c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_get_iec958</definition>
        <argsstring>(const snd_ctl_elem_value_t *obj, snd_aes_iec958_t *ptr)</argsstring>
        <name>snd_ctl_elem_value_get_iec958</name>
        <param>
          <type>const <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structsnd__aes__iec958__t" kindref="compound">snd_aes_iec958_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get value from given data to given pointer as an element of IEC958 type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IEC958 data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="493" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3121" bodyend="3125"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gaefa891d2ff7ceb075aecfa8bd89fb340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_ctl_elem_value_set_iec958</definition>
        <argsstring>(snd_ctl_elem_value_t *obj, const snd_aes_iec958_t *ptr)</argsstring>
        <name>snd_ctl_elem_value_set_iec958</name>
        <param>
          <type><ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__aes__iec958__t" kindref="compound">snd_aes_iec958_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Set value from given pointer to given data as an element of IEC958 type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of an element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IEC958 data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="494" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/control.c" bodystart="3133" bodyend="3137"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga4fa0bc99458acc08a2c59e6ed84bc94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_tlv_parse_dB_info</definition>
        <argsstring>(unsigned int *tlv, unsigned int tlv_size, unsigned int **db_tlvp)</argsstring>
        <name>snd_tlv_parse_dB_info</name>
        <param>
          <type>unsigned int *</type>
          <declname>tlv</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>tlv_size</declname>
        </param>
        <param>
          <type>unsigned int **</type>
          <declname>db_tlvp</declname>
        </param>
        <briefdescription>
<para>Parse TLV stream and retrieve dB information. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tlv</parametername>
</parameternamelist>
<parameterdescription>
<para>the TLV source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlv_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte size of TLV source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>db_tlvp</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer stored the dB TLV information </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the byte size of dB TLV information if found in the given TLV source, or a negative error code.</para></simplesect>
This function parses the given TLV source and stores the TLV start point if the TLV information regarding dB conversion is found. The stored TLV pointer can be passed to the convesion functions <ref refid="group___control_1ga625c16724bddbb21b18ae3b2cbaefcda" kindref="member">snd_tlv_convert_to_dB()</ref>, <ref refid="group___control_1ga0ef60f47c8c82dd84816ae66346359a6" kindref="member">snd_tlv_convert_from_dB()</ref> and <ref refid="group___control_1gad1feefed923fc08f309c4fec2b0973e2" kindref="member">snd_tlv_get_dB_range()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="496" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/tlv.c" bodystart="59" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gad1feefed923fc08f309c4fec2b0973e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_tlv_get_dB_range</definition>
        <argsstring>(unsigned int *tlv, long rangemin, long rangemax, long *min, long *max)</argsstring>
        <name>snd_tlv_get_dB_range</name>
        <param>
          <type>unsigned int *</type>
          <declname>tlv</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rangemin</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rangemax</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Get the dB min/max values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tlv</parametername>
</parameternamelist>
<parameterdescription>
<para>the TLV source returned by <ref refid="group___control_1ga4fa0bc99458acc08a2c59e6ed84bc94e" kindref="member">snd_tlv_parse_dB_info()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rangemin</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum value of the raw volume </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rangemax</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum value of the raw volume </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the minimum dB value (in 0.01dB unit) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the maximum dB value (in 0.01dB unit) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="498" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/tlv.c" bodystart="129" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga625c16724bddbb21b18ae3b2cbaefcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_tlv_convert_to_dB</definition>
        <argsstring>(unsigned int *tlv, long rangemin, long rangemax, long volume, long *db_gain)</argsstring>
        <name>snd_tlv_convert_to_dB</name>
        <param>
          <type>unsigned int *</type>
          <declname>tlv</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rangemin</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rangemax</declname>
        </param>
        <param>
          <type>long</type>
          <declname>volume</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>db_gain</declname>
        </param>
        <briefdescription>
<para>Convert the given raw volume value to a dB gain. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tlv</parametername>
</parameternamelist>
<parameterdescription>
<para>the TLV source returned by <ref refid="group___control_1ga4fa0bc99458acc08a2c59e6ed84bc94e" kindref="member">snd_tlv_parse_dB_info()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rangemin</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum value of the raw volume </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rangemax</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum value of the raw volume </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>volume</parametername>
</parameternamelist>
<parameterdescription>
<para>the raw volume value to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>db_gain</parametername>
</parameternamelist>
<parameterdescription>
<para>the dB gain (in 0.01dB unit) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="500" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/tlv.c" bodystart="200" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga0ef60f47c8c82dd84816ae66346359a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_tlv_convert_from_dB</definition>
        <argsstring>(unsigned int *tlv, long rangemin, long rangemax, long db_gain, long *value, int xdir)</argsstring>
        <name>snd_tlv_convert_from_dB</name>
        <param>
          <type>unsigned int *</type>
          <declname>tlv</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rangemin</declname>
        </param>
        <param>
          <type>long</type>
          <declname>rangemax</declname>
        </param>
        <param>
          <type>long</type>
          <declname>db_gain</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xdir</declname>
        </param>
        <briefdescription>
<para>Convert from dB gain to the corresponding raw value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tlv</parametername>
</parameternamelist>
<parameterdescription>
<para>the TLV source returned by <ref refid="group___control_1ga4fa0bc99458acc08a2c59e6ed84bc94e" kindref="member">snd_tlv_parse_dB_info()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rangemin</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum value of the raw volume </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rangemax</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum value of the raw volume </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>db_gain</parametername>
</parameternamelist>
<parameterdescription>
<para>the dB gain to convert (in 0.01dB unit) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the converted raw volume value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xdir</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction for round-up. The value is round up when this is positive. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="502" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/tlv.c" bodystart="289" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga6ebf9a5917cdc2fee40245cdbc83a0c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_get_dB_range</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, long *min, long *max)</argsstring>
        <name>snd_ctl_get_dB_range</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Get the dB min/max values on the given control element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>the control handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the element id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the minimum dB value (in 0.01dB unit) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the maximum dB value (in 0.01dB unit) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="504" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/tlv.c" bodystart="442" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1gab44202cf8247874df15212d684a2b6ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_convert_to_dB</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, long volume, long *db_gain)</argsstring>
        <name>snd_ctl_convert_to_dB</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>long</type>
          <declname>volume</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>db_gain</declname>
        </param>
        <briefdescription>
<para>Convert the volume value to dB on the given control element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>the control handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the element id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>volume</parametername>
</parameternamelist>
<parameterdescription>
<para>the raw volume value to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>db_gain</parametername>
</parameternamelist>
<parameterdescription>
<para>the dB gain (in 0.01dB unit) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="506" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/tlv.c" bodystart="463" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="group___control_1ga344c48d48be3f61d08ce911c462a3bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_ctl_convert_from_dB</definition>
        <argsstring>(snd_ctl_t *ctl, const snd_ctl_elem_id_t *id, long db_gain, long *value, int xdir)</argsstring>
        <name>snd_ctl_convert_from_dB</name>
        <param>
          <type><ref refid="group___control_1ga06628f38def84a0fe3da74041db9d51f" kindref="member">snd_ctl_t</ref> *</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>const <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>long</type>
          <declname>db_gain</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xdir</declname>
        </param>
        <briefdescription>
<para>Convert from dB gain to the raw volume value on the given control element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctl</parametername>
</parameternamelist>
<parameterdescription>
<para>the control handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the element id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>db_gain</parametername>
</parameternamelist>
<parameterdescription>
<para>the dB gain to convert (in 0.01dB unit) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to store the converted raw volume value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xdir</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction for round-up. The value is round up when this is positive. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="508" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/control/tlv.c" bodystart="486" bodyend="497"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___control_1ga2dc20c3f1d96252ba1f5563cfede392d" prot="public" static="no">
        <name>SND_CONTROL_DLSYM_VERSION</name>
        <initializer>_dlsym_control_001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>dlsym version for interface entry callback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="43" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga2648d4242f8d5be01ecc6e36bc2cf335" prot="public" static="no">
        <name>SND_CTL_EVENT_MASK_REMOVE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element has been removed (Warning: test this first and if set don&apos;t test the other masks) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="118" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gaf271a6ca621f746c45161f7106752e93" prot="public" static="no">
        <name>SND_CTL_EVENT_MASK_VALUE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element value has been changed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="120" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga3ece7e72b3f4260f9ddd97aca2e1647a" prot="public" static="no">
        <name>SND_CTL_EVENT_MASK_INFO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element info has been changed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="122" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga10e8cc806d014989e7b162f24714e19a" prot="public" static="no">
        <name>SND_CTL_EVENT_MASK_ADD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element has been added </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="124" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga68f2f8b90cf059427f9ee9864983e68f" prot="public" static="no">
        <name>SND_CTL_EVENT_MASK_TLV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element&apos;s TLV value has been changed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="126" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga172526f45150a21251b3421925641ad0" prot="public" static="no">
        <name>SND_CTL_NAME_NONE</name>
        <initializer>&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="129" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga7c81ecb5b075437d0612bc33e5ac3131" prot="public" static="no">
        <name>SND_CTL_NAME_PLAYBACK</name>
        <initializer>&quot;Playback &quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="131" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga7cfec74a12a6730bb37cd567ab66452e" prot="public" static="no">
        <name>SND_CTL_NAME_CAPTURE</name>
        <initializer>&quot;Capture &quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="133" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga72c88b2e8c9a136e34635dcc5fc65fd1" prot="public" static="no">
        <name>SND_CTL_NAME_IEC958_NONE</name>
        <initializer>&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="136" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gaa8afe0cd1e7e65507a3f19e3a3f3d293" prot="public" static="no">
        <name>SND_CTL_NAME_IEC958_SWITCH</name>
        <initializer>&quot;Switch&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="138" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga530cf8baa305078c23ff8fe1cc2f612e" prot="public" static="no">
        <name>SND_CTL_NAME_IEC958_VOLUME</name>
        <initializer>&quot;Volume&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="140" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga671b467ee6f577d9408dbbadfc90a404" prot="public" static="no">
        <name>SND_CTL_NAME_IEC958_DEFAULT</name>
        <initializer>&quot;Default&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="142" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga9665d8a918307b0b2387d253c7580abf" prot="public" static="no">
        <name>SND_CTL_NAME_IEC958_MASK</name>
        <initializer>&quot;Mask&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="144" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gabf837ecf1bc3539b6beb1b58ecc1e5ff" prot="public" static="no">
        <name>SND_CTL_NAME_IEC958_CON_MASK</name>
        <initializer>&quot;Con Mask&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="146" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga662f187cdfe6e85da2a5d820fac40d2a" prot="public" static="no">
        <name>SND_CTL_NAME_IEC958_PRO_MASK</name>
        <initializer>&quot;Pro Mask&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="148" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gae49d00de709820b4a6d8b9b343e2a407" prot="public" static="no">
        <name>SND_CTL_NAME_IEC958_PCM_STREAM</name>
        <initializer>&quot;PCM Stream&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CTL name helper </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="150" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga88837fca9c81a2ede579c78bd1354475" prot="public" static="no">
        <name>SND_CTL_NAME_IEC958</name>
        <param><defname>expl</defname></param>
        <param><defname>direction</defname></param>
        <param><defname>what</defname></param>
        <initializer>&quot;IEC958 &quot; expl SND_CTL_NAME_##direction SND_CTL_NAME_IEC958_##what</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element name for IEC958 (S/PDIF) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="152" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gad11798fdf0ca20181d793660a50938a4" prot="public" static="no">
        <name>SND_CTL_POWER_MASK</name>
        <initializer>0xff00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mask for the major Power State identifier </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="155" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gae4dc79ea76d20b9e84ca0564972db99f" prot="public" static="no">
        <name>SND_CTL_POWER_D0</name>
        <initializer>0x0000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ACPI/PCI Power State D0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="157" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga137b1c440315c12a17f938ba4c0bf38c" prot="public" static="no">
        <name>SND_CTL_POWER_D1</name>
        <initializer>0x0100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ACPI/PCI Power State D1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="159" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga01abf56e8703ef464bb271e8958962f8" prot="public" static="no">
        <name>SND_CTL_POWER_D2</name>
        <initializer>0x0200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ACPI/PCI Power State D2 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="161" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gac8cc37202adfe9a740580ac1036c482e" prot="public" static="no">
        <name>SND_CTL_POWER_D3</name>
        <initializer>0x0300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ACPI/PCI Power State D3 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="163" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gac6bf5540f88d153cb2b4d96cfa2e65bf" prot="public" static="no">
        <name>SND_CTL_POWER_D3hot</name>
        <initializer>(<ref refid="group___control_1gac8cc37202adfe9a740580ac1036c482e" kindref="member">SND_CTL_POWER_D3</ref>|0x0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ACPI/PCI Power State D3hot </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="165" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga029a112452f29d70c25391ea4e6723b2" prot="public" static="no">
        <name>SND_CTL_POWER_D3cold</name>
        <initializer>(<ref refid="group___control_1gac8cc37202adfe9a740580ac1036c482e" kindref="member">SND_CTL_POWER_D3</ref>|0x0001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ACPI/PCI Power State D3cold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="167" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gaf5319578d0088b10c67339c8b1f644e7" prot="public" static="no">
        <name>SND_CTL_TLVT_CONTAINER</name>
        <initializer>0x0000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV type - Container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="170" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga59b987c8f3cd26be848cec7171b7fb14" prot="public" static="no">
        <name>SND_CTL_TLVT_DB_SCALE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV type - basic dB scale </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="172" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga3e80cc7e80dd6c56e2d9267d6a6ff9fc" prot="public" static="no">
        <name>SND_CTL_TLVT_DB_LINEAR</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV type - linear volume </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="174" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga9eff63d56cfb81df6d25d297270d6b60" prot="public" static="no">
        <name>SND_CTL_TLVT_DB_RANGE</name>
        <initializer>0x0003</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV type - dB range container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="176" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga779ef3d3fd0b658cef588fdbf6fa52be" prot="public" static="no">
        <name>SND_CTL_TLVT_DB_MINMAX</name>
        <initializer>0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV type - dB scale specified by min/max values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="178" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga7a2bb21790739c2cfdf499d5c9748104" prot="public" static="no">
        <name>SND_CTL_TLVT_DB_MINMAX_MUTE</name>
        <initializer>0x0005</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV type - dB scale specified by min/max values (with mute) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="180" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga5c4958da9d46cc400b24a6c47a413cfe" prot="public" static="no">
        <name>SND_CTL_TLV_DB_GAIN_MUTE</name>
        <initializer>-9999999</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mute state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="183" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga59ee428ba00f0595d867a74fb304913e" prot="public" static="no">
        <name>SND_CTL_TLVT_CHMAP_FIXED</name>
        <initializer>0x00101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV type - fixed channel map positions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="186" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga4a7450784b51c2d5ab51edd65279d1af" prot="public" static="no">
        <name>SND_CTL_TLVT_CHMAP_VAR</name>
        <initializer>0x00102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV type - freely swappable channel map positions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="188" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga63c3b7754a51433fbe10d7ad15c7c264" prot="public" static="no">
        <name>SND_CTL_TLVT_CHMAP_PAIRED</name>
        <initializer>0x00103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLV type - pair-wise swappable channel map positions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="190" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gae8a46558414be5b5b3b7bed127ad4574" prot="public" static="no">
        <name>SND_CTL_NONBLOCK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non blocking mode (flag for open mode) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="205" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gadcbc5a476ffaf2b8d4dfd29a2cfaab3d" prot="public" static="no">
        <name>SND_CTL_ASYNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Async notification (flag for open mode) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="208" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gabd6e339ba7222d43f280abef3d3d47aa" prot="public" static="no">
        <name>SND_CTL_READONLY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read only (flag for open mode) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="211" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gab1b68b9d8582822395782038025cb0dd" prot="public" static="no">
        <name>SND_SCTL_NOFREE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Don&apos;t destroy the ctl handle when close </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="217" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga88b300eb8aa146d1eef29fbb6d8cb83a" prot="public" static="no">
        <name>snd_ctl_elem_id_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1gad6c3746f1925bfec6a4fd0e913430e55" kindref="member">snd_ctl_elem_id_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="308" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gafcb7ab1577c3963e0751365dc983a4cb" prot="public" static="no">
        <name>snd_ctl_card_info_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1ga61aa15d40e16100bbb980bd062f5f220" kindref="member">snd_ctl_card_info_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="331" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1gad7f958811a01272454badce1cf5bcbe7" prot="public" static="no">
        <name>snd_ctl_event_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1ga95f16cb694185b2ee106afc53d1e3a50" kindref="member">snd_ctl_event_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="349" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga7ec1d6cea34670d5e43a841af212962f" prot="public" static="no">
        <name>snd_ctl_elem_list_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1ga952c52ef86124847f9bf12ee3dbfa5a3" kindref="member">snd_ctl_elem_list_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="361" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga4003d15d8c84d2405e922ba834d234f7" prot="public" static="no">
        <name>snd_ctl_elem_info_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1ga2cae0bb76df919368e4ff9a7021dd3ab" kindref="member">snd_ctl_elem_info_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="382" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___control_1ga262a26fa78978597c0baa7eecc5cb5fd" prot="public" static="no">
        <name>snd_ctl_elem_value_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___control_1ga266b478eb64f1cdd75e337df4b4b995e" kindref="member">snd_ctl_elem_value_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" line="461" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/control.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The control interface. See <ref refid="control" kindref="compound">Control interface</ref> page for more details. </para>    </detaileddescription>
  </compounddef>
</doxygen>
