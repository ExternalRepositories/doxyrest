<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="seq__midi__event_8c" kind="file" language="C++">
    <compoundname>seq_midi_event.c</compoundname>
    <includes local="no">malloc.h</includes>
    <includes local="yes">local.h</includes>
    <incdepgraph>
      <node id="693">
        <label>malloc.h</label>
      </node>
      <node id="694">
        <label>local.h</label>
      </node>
      <node id="692">
        <label>/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c</label>
        <link refid="seq__midi__event_8c"/>
        <childnode refid="693" relation="include">
        </childnode>
        <childnode refid="694" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="seq__midi__event_8c_1a034367048300199519f7f5bf4fe579e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void note_event</definition>
        <argsstring>(snd_midi_event_t *dev, snd_seq_event_t *ev)</argsstring>
        <name>note_event</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="65" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="464" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1af31626a19a65dee42368b7265f0b4263" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void one_param_ctrl_event</definition>
        <argsstring>(snd_midi_event_t *dev, snd_seq_event_t *ev)</argsstring>
        <name>one_param_ctrl_event</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="66" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="472" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1a0bf9b9041d0e189c6f21b211b96da902" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void pitchbend_ctrl_event</definition>
        <argsstring>(snd_midi_event_t *dev, snd_seq_event_t *ev)</argsstring>
        <name>pitchbend_ctrl_event</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="67" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="479" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1a6a15f4f3e5cc76004ee2d2f9d685df31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void two_param_ctrl_event</definition>
        <argsstring>(snd_midi_event_t *dev, snd_seq_event_t *ev)</argsstring>
        <name>two_param_ctrl_event</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="68" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="486" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1a1ff8925454d9e5710fa6959412be2d2b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void one_param_event</definition>
        <argsstring>(snd_midi_event_t *dev, snd_seq_event_t *ev)</argsstring>
        <name>one_param_event</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="69" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="494" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1ab3fa564f3363af0a749f8b5d075b6585" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void songpos_event</definition>
        <argsstring>(snd_midi_event_t *dev, snd_seq_event_t *ev)</argsstring>
        <name>songpos_event</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="70" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="500" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1aea0bc009d9d15cf17e41412ca45aa04e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void note_decode</definition>
        <argsstring>(const snd_seq_event_t *ev, unsigned char *buf)</argsstring>
        <name>note_decode</name>
        <param>
          <type>const <ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="71" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="618" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1a3ba35ea4216d0456fef7573eafd1bb9d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void one_param_decode</definition>
        <argsstring>(const snd_seq_event_t *ev, unsigned char *buf)</argsstring>
        <name>one_param_decode</name>
        <param>
          <type>const <ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="72" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="625" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1a296406d31302c4b9b2ad31f5992f516c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void pitchbend_decode</definition>
        <argsstring>(const snd_seq_event_t *ev, unsigned char *buf)</argsstring>
        <name>pitchbend_decode</name>
        <param>
          <type>const <ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="73" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="631" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1aaa808f73ba2de7ac7b5f53310e221cd2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void two_param_decode</definition>
        <argsstring>(const snd_seq_event_t *ev, unsigned char *buf)</argsstring>
        <name>two_param_decode</name>
        <param>
          <type>const <ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="74" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="639" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1a159e8b4543d4c2d9bfb6ae5cf045de4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void songpos_decode</definition>
        <argsstring>(const snd_seq_event_t *ev, unsigned char *buf)</argsstring>
        <name>songpos_decode</name>
        <param>
          <type>const <ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="75" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="646" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1gaa3c1797128d84a182197f5dd853c53ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_midi_event_new</definition>
        <argsstring>(size_t bufsize, snd_midi_event_t **rdev)</argsstring>
        <name>snd_midi_event_new</name>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> **</type>
          <declname>rdev</declname>
        </param>
        <briefdescription>
<para>Creates a MIDI event parser. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer used for encoding; this should be large enough to hold the largest MIDI message to be encoded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rdev</parametername>
</parameternamelist>
<parameterdescription>
<para>The new MIDI event parser. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise a negative error code.</para></simplesect>
This function creates and initializes a MIDI parser object that can be used to convert a MIDI byte stream to sequencer events (encoding) and/or to convert sequencer events to a MIDI byte stream (decoding).</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory.</para><para></para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="150" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="150" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1ga84b9fdddfc1996d0abf759773593931f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_midi_event_free</definition>
        <argsstring>(snd_midi_event_t *dev)</argsstring>
        <name>snd_midi_event_free</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Frees a MIDI event parser. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI event parser.</para></parameterdescription>
</parameteritem>
</parameterlist>
Frees a MIDI event parser.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="181" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="181" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1ga4c32d90809d0c2d44fb41be0276100df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_midi_event_no_status</definition>
        <argsstring>(snd_midi_event_t *dev, int on)</argsstring>
        <name>snd_midi_event_no_status</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Enables/disables MIDI command merging. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI event parser. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>0 to enable MIDI command merging, 1 to always write the command byte.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function enables or disables MIDI command merging (running status).</para><para>When MIDI command merging is not disabled, <ref refid="group___m_i_d_i___event_1ga9ef018a85ec7f61d45d8b17083bf8cc3" kindref="member">snd_midi_event_decode</ref> is allowed to omit any status byte that is identical to the previous status byte. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="200" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1ac3f70292018b5a4ad84b0e90a7205405" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void reset_encode</definition>
        <argsstring>(snd_midi_event_t *dev)</argsstring>
        <name>reset_encode</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="208" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="208" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1ga54a3d6f03dc0f83ae32d7b12b1da7e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_midi_event_reset_encode</definition>
        <argsstring>(snd_midi_event_t *dev)</argsstring>
        <name>snd_midi_event_reset_encode</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Resets MIDI encode parser. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI event parser.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function resets the MIDI encoder of the parser <emphasis>dev</emphasis>. Any partially encoded MIDI message is dropped, and running status state is cleared.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="226" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1ga1d6bd40b70cdd77e500b25e6eec19484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_midi_event_reset_decode</definition>
        <argsstring>(snd_midi_event_t *dev)</argsstring>
        <name>snd_midi_event_reset_decode</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Resets MIDI decode parser. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI event parser.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function resets the MIDI decoder of the parser <emphasis>dev</emphasis>. The next decoded message does not use running status from before the call to <emphasis>snd_midi_event_reset_decode</emphasis>.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="242" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1ga670f51a0ce1402b7d03c2a3f5b2801ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_midi_event_init</definition>
        <argsstring>(snd_midi_event_t *dev)</argsstring>
        <name>snd_midi_event_init</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Resets MIDI encode/decode parsers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI event parser.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function resets both encoder and decoder of the MIDI event parser. <simplesect kind="see"><para><ref refid="group___m_i_d_i___event_1ga54a3d6f03dc0f83ae32d7b12b1da7e63" kindref="member">snd_midi_event_reset_encode</ref>, <ref refid="group___m_i_d_i___event_1ga1d6bd40b70cdd77e500b25e6eec19484" kindref="member">snd_midi_event_reset_decode</ref></para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="257" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1ga22cffc488269968de6cae6796f92ee12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_midi_event_resize_buffer</definition>
        <argsstring>(snd_midi_event_t *dev, size_t bufsize)</argsstring>
        <name>snd_midi_event_resize_buffer</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
<para>Resizes the MIDI message encoding buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI event parser. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The new buffer size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise a negative error code.</para></simplesect>
This function resizes the buffer that is used to hold partially encoded MIDI messages.</para><para>If there is a partially encoded message in the buffer, it is dropped.</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>Out of memory.</para><para></para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group___m_i_d_i___event_1gae44531e8091bdd6e97a5b70e7b81ea10" kindref="member">snd_midi_event_encode</ref>, <ref refid="group___m_i_d_i___event_1ga54a3d6f03dc0f83ae32d7b12b1da7e63" kindref="member">snd_midi_event_reset_encode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="280" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="280" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1gae44531e8091bdd6e97a5b70e7b81ea10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long snd_midi_event_encode</definition>
        <argsstring>(snd_midi_event_t *dev, const unsigned char *buf, long count, snd_seq_event_t *ev)</argsstring>
        <name>snd_midi_event_encode</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>long</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Encodes bytes to sequencer event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI event parser. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing bytes of a raw MIDI stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in <emphasis>buf</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequencer event. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes consumed, or a negative error code.</para></simplesect>
This function tries to use up to <emphasis>count</emphasis> bytes from the beginning of the buffer to encode a sequencer event. If a complete MIDI message has been encoded, the sequencer event is written to <emphasis>ev</emphasis>; otherwise, <emphasis>ev-&gt;type</emphasis> is set to <ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a78b0f3e8f6d674f01d3823481c0b90f6" kindref="member">SND_SEQ_EVENT_NONE</ref>, and further bytes are required to complete a message.</para><para>The buffer in <emphasis>dev</emphasis> is used to hold any bytes of a not-yet-complete MIDI message. If a System Exclusive message is larger than the buffer, the message is split into multiple parts, and a sequencer event is returned at the end of each part.</para><para>Any bytes that are not part of a valid MIDI message are silently ignored, i.e., they are consumed without signaling an error.</para><para>When this function returns a system exclusive sequencer event (<emphasis>ev-&gt;type</emphasis> is <ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a053842a32bef6aac4c8b21b2fc80fc74" kindref="member">SND_SEQ_EVENT_SYSEX</ref>), the data pointer (<emphasis>ev-&gt;data.ext.ptr</emphasis>) points into the MIDI event parser&apos;s buffer. Therefore, the sequencer event can only be used as long as that buffer remains valid, i.e., until the next call to <ref refid="group___m_i_d_i___event_1gae44531e8091bdd6e97a5b70e7b81ea10" kindref="member">snd_midi_event_encode</ref>, <ref refid="group___m_i_d_i___event_1gab758a60cfa82dfa28e08ba2e2cbe2149" kindref="member">snd_midi_event_encode_byte</ref>, <ref refid="group___m_i_d_i___event_1ga22cffc488269968de6cae6796f92ee12" kindref="member">snd_midi_event_resize_buffer</ref>, <ref refid="group___m_i_d_i___event_1ga670f51a0ce1402b7d03c2a3f5b2801ed" kindref="member">snd_midi_event_init</ref>, <ref refid="group___m_i_d_i___event_1ga54a3d6f03dc0f83ae32d7b12b1da7e63" kindref="member">snd_midi_event_reset_encode</ref>, or <ref refid="group___m_i_d_i___event_1ga84b9fdddfc1996d0abf759773593931f" kindref="member">snd_midi_event_free</ref> for that MIDI event parser.</para><para>This function can generate any sequencer event that corresponds to a MIDI message, i.e.:<itemizedlist>
<listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40aa7359bc2f050a79c5021cfa90d0705f8" kindref="member">SND_SEQ_EVENT_NOTEOFF</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40af35df63c334c5388ff349550e31460c2" kindref="member">SND_SEQ_EVENT_NOTEON</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a6d7adef3e4f2ed96cd7e2def9d541510" kindref="member">SND_SEQ_EVENT_KEYPRESS</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a926c84318eb653c739e1d21fa20a0d95" kindref="member">SND_SEQ_EVENT_CONTROLLER</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40ae8264fb5f3870a1e5f6c2724b916cefd" kindref="member">SND_SEQ_EVENT_PGMCHANGE</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a7eb97df129127eb771e9800da217f1fe" kindref="member">SND_SEQ_EVENT_CHANPRESS</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40ab1bb9ffa38e5247f993f9368a144336b" kindref="member">SND_SEQ_EVENT_PITCHBEND</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a053842a32bef6aac4c8b21b2fc80fc74" kindref="member">SND_SEQ_EVENT_SYSEX</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40ad2bcd713ea5fc228791eb95545cdf23f" kindref="member">SND_SEQ_EVENT_QFRAME</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a04f1e8a2a2201a7fbddf628b127dab39" kindref="member">SND_SEQ_EVENT_SONGPOS</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40afc621686c4f2ac288e24ff8d0aa448bd" kindref="member">SND_SEQ_EVENT_SONGSEL</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a60918a2617fd3435decbf96029994ac1" kindref="member">SND_SEQ_EVENT_TUNE_REQUEST</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a54f38f955c675d0e9624f67befe513b9" kindref="member">SND_SEQ_EVENT_CLOCK</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40aeca878e55b4482dc3d83bbc1c1411f0a" kindref="member">SND_SEQ_EVENT_START</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a85633da32af8af5efa596a7f68cff5c7" kindref="member">SND_SEQ_EVENT_CONTINUE</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a8bda57193eede5c6d45a34a135c8d95d" kindref="member">SND_SEQ_EVENT_STOP</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40af0cd5b4a2aa37ee9b34c6ecdde1b32b2" kindref="member">SND_SEQ_EVENT_SENSING</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40aefe6bb7adade51add7905856d70efc65" kindref="member">SND_SEQ_EVENT_RESET</ref></para></listitem></itemizedlist>
Some implementations may also be able to generate the following events for a sequence of controller change messages:<itemizedlist>
<listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a931edc93b65db5e11be1670166a6623b" kindref="member">SND_SEQ_EVENT_CONTROL14</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a83eb21e2fe5bf509d0d9c4a911f0cd36" kindref="member">SND_SEQ_EVENT_NONREGPARAM</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40ae85ad451b5012c5d4f37bec4cb39516c" kindref="member">SND_SEQ_EVENT_REGPARAM</ref></para></listitem></itemizedlist>
</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2</para></simplesect>
<simplesect kind="see"><para><ref refid="group___m_i_d_i___event_1gaa3c1797128d84a182197f5dd853c53ec" kindref="member">snd_midi_event_new</ref>, <ref refid="group___m_i_d_i___event_1ga54a3d6f03dc0f83ae32d7b12b1da7e63" kindref="member">snd_midi_event_reset_encode</ref>, <ref refid="group___m_i_d_i___event_1gab758a60cfa82dfa28e08ba2e2cbe2149" kindref="member">snd_midi_event_encode_byte</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="360" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="360" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1gab758a60cfa82dfa28e08ba2e2cbe2149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_midi_event_encode_byte</definition>
        <argsstring>(snd_midi_event_t *dev, int c, snd_seq_event_t *ev)</argsstring>
        <name>snd_midi_event_encode_byte</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Encodes byte to sequencer event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI event parser. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">c</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte of a raw MIDI stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequencer event. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a sequenver event has been completed, 0 if more bytes are required to complete an event, or a negative error code.</para></simplesect>
This function tries to use the byte <emphasis>c</emphasis> to encode a sequencer event. If a complete MIDI message has been encoded, the sequencer event is written to <emphasis>ev</emphasis>; otherwise, further bytes are required to complete a message.</para><para>See also the description of <ref refid="group___m_i_d_i___event_1gae44531e8091bdd6e97a5b70e7b81ea10" kindref="member">snd_midi_event_encode</ref>.</para><para><simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2</para></simplesect>
<simplesect kind="see"><para><ref refid="group___m_i_d_i___event_1gaa3c1797128d84a182197f5dd853c53ec" kindref="member">snd_midi_event_new</ref>, <ref refid="group___m_i_d_i___event_1ga54a3d6f03dc0f83ae32d7b12b1da7e63" kindref="member">snd_midi_event_reset_encode</ref>, <ref refid="group___m_i_d_i___event_1gae44531e8091bdd6e97a5b70e7b81ea10" kindref="member">snd_midi_event_encode</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="398" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="398" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="group___m_i_d_i___event_1ga9ef018a85ec7f61d45d8b17083bf8cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long snd_midi_event_decode</definition>
        <argsstring>(snd_midi_event_t *dev, unsigned char *buf, long count, const snd_seq_event_t *ev)</argsstring>
        <name>snd_midi_event_decode</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>long</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Decodes sequencer event to MIDI byte stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>MIDI event parser. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for the resulting MIDI byte stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in <emphasis>buf</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ev</parametername>
</parameternamelist>
<parameterdescription>
<para>The sequencer event to decode. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written to <emphasis>buf</emphasis>, or a negative error code.</para></simplesect>
This function tries to decode the sequencer event into one or more MIDI messages, and writes the raw MIDI byte(s) into <emphasis>buf</emphasis>.</para><para>The generated MIDI messages may use running status, unless disabled with <ref refid="group___m_i_d_i___event_1ga4c32d90809d0c2d44fb41be0276100df" kindref="member">snd_midi_event_no_status</ref>.</para><para>The required buffer size for a sequencer event it as most 12 bytes, except for System Exclusive events (<emphasis>ev-&gt;type</emphasis> == <ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a053842a32bef6aac4c8b21b2fc80fc74" kindref="member">SND_SEQ_EVENT_SYSEX</ref>) which can have any length (as specified by <emphasis>ev-&gt;data.ext.len</emphasis>).</para><para>The following sequencer events correspond to MIDI messages:<itemizedlist>
<listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40aa7359bc2f050a79c5021cfa90d0705f8" kindref="member">SND_SEQ_EVENT_NOTEOFF</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40af35df63c334c5388ff349550e31460c2" kindref="member">SND_SEQ_EVENT_NOTEON</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a6d7adef3e4f2ed96cd7e2def9d541510" kindref="member">SND_SEQ_EVENT_KEYPRESS</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a926c84318eb653c739e1d21fa20a0d95" kindref="member">SND_SEQ_EVENT_CONTROLLER</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40ae8264fb5f3870a1e5f6c2724b916cefd" kindref="member">SND_SEQ_EVENT_PGMCHANGE</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a7eb97df129127eb771e9800da217f1fe" kindref="member">SND_SEQ_EVENT_CHANPRESS</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40ab1bb9ffa38e5247f993f9368a144336b" kindref="member">SND_SEQ_EVENT_PITCHBEND</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a053842a32bef6aac4c8b21b2fc80fc74" kindref="member">SND_SEQ_EVENT_SYSEX</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40ad2bcd713ea5fc228791eb95545cdf23f" kindref="member">SND_SEQ_EVENT_QFRAME</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a04f1e8a2a2201a7fbddf628b127dab39" kindref="member">SND_SEQ_EVENT_SONGPOS</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40afc621686c4f2ac288e24ff8d0aa448bd" kindref="member">SND_SEQ_EVENT_SONGSEL</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a60918a2617fd3435decbf96029994ac1" kindref="member">SND_SEQ_EVENT_TUNE_REQUEST</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a54f38f955c675d0e9624f67befe513b9" kindref="member">SND_SEQ_EVENT_CLOCK</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40aeca878e55b4482dc3d83bbc1c1411f0a" kindref="member">SND_SEQ_EVENT_START</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a85633da32af8af5efa596a7f68cff5c7" kindref="member">SND_SEQ_EVENT_CONTINUE</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a8bda57193eede5c6d45a34a135c8d95d" kindref="member">SND_SEQ_EVENT_STOP</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40af0cd5b4a2aa37ee9b34c6ecdde1b32b2" kindref="member">SND_SEQ_EVENT_SENSING</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40aefe6bb7adade51add7905856d70efc65" kindref="member">SND_SEQ_EVENT_RESET</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a931edc93b65db5e11be1670166a6623b" kindref="member">SND_SEQ_EVENT_CONTROL14</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40a83eb21e2fe5bf509d0d9c4a911f0cd36" kindref="member">SND_SEQ_EVENT_NONREGPARAM</ref></para></listitem><listitem><para><ref refid="group___seq_events_1ggaef39e1f267006faf7abc91c3cb32ea40ae85ad451b5012c5d4f37bec4cb39516c" kindref="member">SND_SEQ_EVENT_REGPARAM</ref></para></listitem></itemizedlist>
</para><para><simplesect kind="par"><title>Errors:</title><para><variablelist>
<varlistentry><term>-EINVAL</term></varlistentry>
<listitem><para><emphasis>ev</emphasis> is not a valid sequencer event. </para></listitem>
<varlistentry><term>-ENOENT</term></varlistentry>
<listitem><para>The sequencer event does not correspond to one or more MIDI messages. </para></listitem>
<varlistentry><term>-ENOMEM</term></varlistentry>
<listitem><para>The MIDI message(s) would not fit into <emphasis>count</emphasis> bytes.</para><para></para></listitem>
</variablelist>
</para></simplesect>
<simplesect kind="par"><title>Conforming to:</title><para>LSB 3.2</para></simplesect>
<simplesect kind="see"><para><ref refid="group___m_i_d_i___event_1ga1d6bd40b70cdd77e500b25e6eec19484" kindref="member">snd_midi_event_reset_decode</ref>, <ref refid="group___m_i_d_i___event_1ga4c32d90809d0c2d44fb41be0276100df" kindref="member">snd_midi_event_no_status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="557" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="557" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1ada1b9db0e12dbbcbeebf32cfc2ade10b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int extra_decode_ctrl14</definition>
        <argsstring>(snd_midi_event_t *dev, unsigned char *buf, int count, const snd_seq_event_t *ev)</argsstring>
        <name>extra_decode_ctrl14</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="653" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="653" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="seq__midi__event_8c_1a991810992093d4d2a2e6e54ad1b075bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int extra_decode_xrpn</definition>
        <argsstring>(snd_midi_event_t *dev, unsigned char *buf, int count, const snd_seq_event_t *ev)</argsstring>
        <name>extra_decode_xrpn</name>
        <param>
          <type><ref refid="group___m_i_d_i___event_1gaf4d255a5c5228aa8d46a9c3e368a0e4b" kindref="member">snd_midi_event_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__seq__event__t" kindref="compound">snd_seq_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" line="690" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c" bodystart="690" bodyend="727"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>MIDI byte &lt;-&gt; sequencer event coder. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Takashi Iwai <ulink url="mailto:tiwai@suse.de">tiwai@suse.de</ulink> </para></simplesect>
<simplesect kind="author"><para>Jaroslav Kysela <ulink url="mailto:perex@perex.cz">perex@perex.cz</ulink> </para></simplesect>
<simplesect kind="date"><para>2000-2001 </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/seq/seq_midi_event.c"/>
  </compounddef>
</doxygen>
