<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pcm_8h" kind="file" language="C++">
    <compoundname>pcm.h</compoundname>
    <includedby refid="pcm__external_8h" local="yes">/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_external.h</includedby>
    <invincdepgraph>
      <node id="59">
        <label>/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h</label>
        <link refid="pcm_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm_external.h</label>
        <link refid="pcm__external_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structsnd__pcm__audio__tstamp__config__t" prot="public">snd_pcm_audio_tstamp_config_t</innerclass>
    <innerclass refid="structsnd__pcm__audio__tstamp__report__t" prot="public">snd_pcm_audio_tstamp_report_t</innerclass>
    <innerclass refid="structsnd__pcm__channel__area__t" prot="public">snd_pcm_channel_area_t</innerclass>
    <innerclass refid="unionsnd__pcm__sync__id__t" prot="public">snd_pcm_sync_id_t</innerclass>
    <innerclass refid="structsnd__pcm__chmap__t" prot="public">snd_pcm_chmap_t</innerclass>
    <innerclass refid="structsnd__pcm__chmap__query__t" prot="public">snd_pcm_chmap_query_t</innerclass>
    <innerclass refid="structsnd__pcm__scope__ops__t" prot="public">snd_pcm_scope_ops_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___p_c_m_1ga32ccf47736036e86b0d787dc43e64d4a" prot="public" static="no">
        <name>SND_PCM_DLSYM_VERSION</name>
        <initializer>_dlsym_pcm_001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>dlsym version for interface entry callback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="43" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga6bd90de1d1527b5804090dcce51079ad" prot="public" static="no">
        <name>SND_PCM_NONBLOCK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non blocking mode (flag for open mode) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="359" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga9b22351abf6c85ced128e2088f6f6a5c" prot="public" static="no">
        <name>SND_PCM_ASYNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Async notification (flag for open mode) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="361" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga06aa6da1ebeff70c83d9f6e18a91a3d7" prot="public" static="no">
        <name>SND_PCM_ABORT</name>
        <initializer>0x00008000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In an abort state (internal, not allowed for open) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="363" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gaba352dfac44ef1681f91d476ed781005" prot="public" static="no">
        <name>SND_PCM_NO_AUTO_RESAMPLE</name>
        <initializer>0x00010000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable automatic (but not forced!) rate resamplinig </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="365" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga64fa40b556374dabe40d4874242fee19" prot="public" static="no">
        <name>SND_PCM_NO_AUTO_CHANNELS</name>
        <initializer>0x00020000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable automatic (but not forced!) channel conversion </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="367" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gacb997a23fbba62232101f730e9ae1e96" prot="public" static="no">
        <name>SND_PCM_NO_AUTO_FORMAT</name>
        <initializer>0x00040000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable automatic (but not forced!) format conversion </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="369" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1ga1f67b4e05749f0d3dafe7c17e448518a" prot="public" static="no">
        <name>SND_PCM_NO_SOFTVOL</name>
        <initializer>0x00080000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable soft volume control </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="371" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gaf79d447b5f5c0936cfbc769eee03078b" prot="public" static="no">
        <name>SND_CHMAP_API_VERSION</name>
        <initializer>((1 &lt;&lt; 16) | (0 &lt;&lt; 8) | 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>channel mapping API version number </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="526" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gad6713109477a592274f92f85670fcc1a" prot="public" static="no">
        <name>SND_CHMAP_POSITION_MASK</name>
        <initializer>0xffff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>bitmask for channel position </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="580" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gad98b225c79dd92fc387b2e7884ef97da" prot="public" static="no">
        <name>SND_CHMAP_PHASE_INVERSE</name>
        <initializer>(0x01 &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>bit flag indicating the channel is phase inverted </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="583" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m_1gaf3d1c438269afa0206fb9f2151c4fc6a" prot="public" static="no">
        <name>SND_CHMAP_DRIVER_SPEC</name>
        <initializer>(0x02 &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>bit flag indicating the non-standard channel value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="585" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___info_1gac60fd444f9e73bd12bde83b783f9b4f8" prot="public" static="no">
        <name>snd_pcm_info_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="648" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___h_w___params_1ga06b83cb9a788f99b7b09b570b4355cee" prot="public" static="no">
        <name>snd_pcm_hw_params_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="730" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___s_w___params_1ga8e564553bdc89948c918729e3cc7beb0" prot="public" static="no">
        <name>snd_pcm_sw_params_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="871" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___access_1ga8097b3ae42fa4a2e5bece2ca95b515b7" prot="public" static="no">
        <name>snd_pcm_access_mask_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an empty <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="919" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___format_1gadee8697e8c4f7fc018603fbcbd0a4b31" prot="public" static="no">
        <name>snd_pcm_format_mask_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an empty <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="944" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="944" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___sub_format_1gaf450592f4db1a03f975a3c41011613a5" prot="public" static="no">
        <name>snd_pcm_subformat_mask_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an empty <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="969" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_m___status_1ga046c09e5d14b684d9fefd70a12cdde1a" prot="public" static="no">
        <name>snd_pcm_status_alloca</name>
        <param><defname>ptr</defname></param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> using standard alloca </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="994" column="9" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="994" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___p_c_m_1gad0e95dc8a590d8f9915fec237d7a28a5" prot="public" static="no">
        <name>snd_pcm_class_t</name>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a3899ef7b0fa4a9717abe5587e9110514" prot="public">
          <name>SND_PCM_CLASS_GENERIC</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>standard device </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a223f6ffeb72c72144f4f680998fbedb3" prot="public">
          <name>SND_PCM_CLASS_MULTI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multichannel device </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a79cdb236d774a3a5e17cf4929a16936b" prot="public">
          <name>SND_PCM_CLASS_MODEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>software modem device </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a69f4d2c8aa3195c6fc140b6d4c2f25ea" prot="public">
          <name>SND_PCM_CLASS_DIGITIZER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>digitizer device </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad0e95dc8a590d8f9915fec237d7a28a5a59360955ed5c52870d37476cc800f8de" prot="public">
          <name>SND_PCM_CLASS_LAST</name>
          <initializer>= SND_PCM_CLASS_DIGITIZER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM class </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="76" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="76" bodyend="87"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga6a164917c35e2216f6e76beff4e4d0cb" prot="public" static="no">
        <name>snd_pcm_subclass_t</name>
        <enumvalue id="group___p_c_m_1gga6a164917c35e2216f6e76beff4e4d0cba79a61939325a37b0fdfcf6e9ac0ce572" prot="public">
          <name>SND_PCM_SUBCLASS_GENERIC_MIX</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>subdevices are mixed together </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6a164917c35e2216f6e76beff4e4d0cbaafd17e33fac6f3c2b7e9bb48473b8c54" prot="public">
          <name>SND_PCM_SUBCLASS_MULTI_MIX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multichannel subdevices are mixed together </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6a164917c35e2216f6e76beff4e4d0cbac2020878b69934e7baf35333bf7c1460" prot="public">
          <name>SND_PCM_SUBCLASS_LAST</name>
          <initializer>= SND_PCM_SUBCLASS_MULTI_MIX</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM subclass </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="90" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" prot="public" static="no">
        <name>snd_pcm_stream_t</name>
        <enumvalue id="group___p_c_m_1ggac23b43ff55add78638e503b9cc892c24a57a2b920dbc34173479fc9036cfc78a1" prot="public">
          <name>SND_PCM_STREAM_PLAYBACK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Playback stream </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggac23b43ff55add78638e503b9cc892c24af07834f756b4f95cb61987f4811073c4" prot="public">
          <name>SND_PCM_STREAM_CAPTURE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture stream </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggac23b43ff55add78638e503b9cc892c24a0f3a6097ab0ecf17fb33304e713a3a44" prot="public">
          <name>SND_PCM_STREAM_LAST</name>
          <initializer>= SND_PCM_STREAM_CAPTURE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM stream (direction) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="99" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" prot="public" static="no">
        <name>snd_pcm_access_t</name>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aa90a5dea527c5ae9a53f1448beb2dee6f" prot="public">
          <name>SND_PCM_ACCESS_MMAP_INTERLEAVED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mmap access with simple interleaved channels </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aa7de225785e05dd1d538203c5ece9036e" prot="public">
          <name>SND_PCM_ACCESS_MMAP_NONINTERLEAVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mmap access with simple non interleaved channels </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aa26a4f161364cb539df4de5eeb9949121" prot="public">
          <name>SND_PCM_ACCESS_MMAP_COMPLEX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mmap access with complex placement </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aa72a970ed6e676ab0fd9f3c3d36737e0a" prot="public">
          <name>SND_PCM_ACCESS_RW_INTERLEAVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>snd_pcm_readi/snd_pcm_writei access </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aae7ab128d10c32667f396933190435071" prot="public">
          <name>SND_PCM_ACCESS_RW_NONINTERLEAVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>snd_pcm_readn/snd_pcm_writen access </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga661221ba5e8f1d6eaf4ab8e2da57cc1aad57e116e80d0e3362751e6e075961f2b" prot="public">
          <name>SND_PCM_ACCESS_LAST</name>
          <initializer>= SND_PCM_ACCESS_RW_NONINTERLEAVED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM access type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="108" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="108" bodyend="120"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" prot="public" static="no">
        <name>snd_pcm_format_t</name>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ab1e118ecdccf628639b5c85bc3a48999" prot="public">
          <name>SND_PCM_FORMAT_UNKNOWN</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unknown </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a5b78bf93eaed5f52cf16c582f04aa7f1" prot="public">
          <name>SND_PCM_FORMAT_S8</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 8 bit </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ad5856f97113926836a7c6651cb8864a3" prot="public">
          <name>SND_PCM_FORMAT_U8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 8 bit </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a8b66a29293c62df9d1678c609fab76c0" prot="public">
          <name>SND_PCM_FORMAT_S16_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 16 bit Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a9f6783e14d7cbb5023c86427263b0d50" prot="public">
          <name>SND_PCM_FORMAT_S16_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 16 bit Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ab2f9619da5d5062e612b2ee0929e8164" prot="public">
          <name>SND_PCM_FORMAT_U16_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 16 bit Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aecc04aa997503c030a47fe5798514180" prot="public">
          <name>SND_PCM_FORMAT_U16_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 16 bit Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a04b3c3b9ad0106c9619a28b753d8fd18" prot="public">
          <name>SND_PCM_FORMAT_S24_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24 bit Little Endian using low three bytes in 32-bit word </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a226d2f6a6bc53a6f75786ca8fad3fc65" prot="public">
          <name>SND_PCM_FORMAT_S24_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24 bit Big Endian using low three bytes in 32-bit word </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a33b2fb89235eebda4e6820d4a80a4c29" prot="public">
          <name>SND_PCM_FORMAT_U24_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24 bit Little Endian using low three bytes in 32-bit word </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a2c2effcf940fdee8eddf43a62360f7c4" prot="public">
          <name>SND_PCM_FORMAT_U24_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24 bit Big Endian using low three bytes in 32-bit word </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aa99dcea38d9cd8ea3b8a6e9ea85bcc52" prot="public">
          <name>SND_PCM_FORMAT_S32_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 32 bit Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ad30a0d4bc893eba11d08d72b3916ca2a" prot="public">
          <name>SND_PCM_FORMAT_S32_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 32 bit Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a4c9ee7d82e322009e85f7cd739bbb692" prot="public">
          <name>SND_PCM_FORMAT_U32_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 32 bit Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ac4d69a20b22df53a63ad8589bbdf6f93" prot="public">
          <name>SND_PCM_FORMAT_U32_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 32 bit Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a083f32474a84d344e0da496470085c8f" prot="public">
          <name>SND_PCM_FORMAT_FLOAT_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 32 bit Little Endian, Range -1.0 to 1.0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ab24eac408b0d2ae6b5f68ed3a7cd2d75" prot="public">
          <name>SND_PCM_FORMAT_FLOAT_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 32 bit Big Endian, Range -1.0 to 1.0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a8e6d82461abbb8be043f8addd23f76c0" prot="public">
          <name>SND_PCM_FORMAT_FLOAT64_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 64 bit Little Endian, Range -1.0 to 1.0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a9215cd0ab46e6db8668d8bfbb3cd76a6" prot="public">
          <name>SND_PCM_FORMAT_FLOAT64_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 64 bit Big Endian, Range -1.0 to 1.0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a4a51dcbdb981d0357447115d7ccf3b1f" prot="public">
          <name>SND_PCM_FORMAT_IEC958_SUBFRAME_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEC-958 Little Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a347bac4a7d9ac64e3019a2f3238e09fb" prot="public">
          <name>SND_PCM_FORMAT_IEC958_SUBFRAME_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEC-958 Big Endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a1f71fdf666f5dea8b84d627ba84a9ea5" prot="public">
          <name>SND_PCM_FORMAT_MU_LAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mu-Law </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a9d1017ad6b2f73e97f20cf933a5d8a7e" prot="public">
          <name>SND_PCM_FORMAT_A_LAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A-Law </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a984ec5c790504560bfc7564cfeaddc23" prot="public">
          <name>SND_PCM_FORMAT_IMA_ADPCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ima-ADPCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a3705d4bd3266f3a68c276da9e7a65660" prot="public">
          <name>SND_PCM_FORMAT_MPEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MPEG </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a32ec1ed1e6bc5eafff1547e1401f679c" prot="public">
          <name>SND_PCM_FORMAT_GSM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GSM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a770a94546bff2f0d07e32dd22c5f9a2c" prot="public">
          <name>SND_PCM_FORMAT_SPECIAL</name>
          <initializer>= 31</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Special </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a1fd8c22f3dd45fc1b8e41b0b5e6107ce" prot="public">
          <name>SND_PCM_FORMAT_S24_3LE</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a531ede921f12bd96e02499f962fdb7ea" prot="public">
          <name>SND_PCM_FORMAT_S24_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a76ef58eb516389000bdc678ca69515c3" prot="public">
          <name>SND_PCM_FORMAT_U24_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a26318cc44ae67775ccedc1f5ba07d925" prot="public">
          <name>SND_PCM_FORMAT_U24_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a8f23da6a6564831a09f079f4d0e7fd6c" prot="public">
          <name>SND_PCM_FORMAT_S20_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 20bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a178dd8e9b92a0dbe80ae837979720fa7" prot="public">
          <name>SND_PCM_FORMAT_S20_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 20bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a15eb6dc96e7940b06b2b40fd483073a3" prot="public">
          <name>SND_PCM_FORMAT_U20_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 20bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a8d4e75049c83e0b26493d4d149de5b22" prot="public">
          <name>SND_PCM_FORMAT_U20_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 20bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a89ba6879c39fec5ee33f2b760ebd7053" prot="public">
          <name>SND_PCM_FORMAT_S18_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 18bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ad49193efd29a9f7085ddcd08e3b33eba" prot="public">
          <name>SND_PCM_FORMAT_S18_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 18bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a3ab354cc702a7b9d651aec726bb8a68c" prot="public">
          <name>SND_PCM_FORMAT_U18_3LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 18bit Little Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a0bab067dee022bd684b1015762a44663" prot="public">
          <name>SND_PCM_FORMAT_U18_3BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 18bit Big Endian in 3bytes format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aad44c7d69d3f1c0f6031a41b8b74597b" prot="public">
          <name>SND_PCM_FORMAT_G723_24</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aebf3d46180931d31df789a70a49a342d" prot="public">
          <name>SND_PCM_FORMAT_G723_24_1B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ada75abbb2f69dabb8dd9051d3514de09" prot="public">
          <name>SND_PCM_FORMAT_G723_40</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a325c1f94052bfdcaf556c74157928ca6" prot="public">
          <name>SND_PCM_FORMAT_G723_40_1B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a4d1cfd6fcfd493bc6fe7bf6acd9168a0" prot="public">
          <name>SND_PCM_FORMAT_DSD_U8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a85bf2f1d7578f6e5395b2773e58d0d28" prot="public">
          <name>SND_PCM_FORMAT_DSD_U16_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a56ad301fcb8cf5b44fda3818e078b91b" prot="public">
          <name>SND_PCM_FORMAT_DSD_U32_LE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a350b70a24e88f75d27e57343779fc386" prot="public">
          <name>SND_PCM_FORMAT_DSD_U16_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a2fdbe11656020f7ab8c78fafcf85d23a" prot="public">
          <name>SND_PCM_FORMAT_DSD_U32_BE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ac6bb71e1f2d74ac0ddfbfde91fccbbed" prot="public">
          <name>SND_PCM_FORMAT_LAST</name>
          <initializer>= SND_PCM_FORMAT_DSD_U32_BE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8aac4470b6be81c22af0cfe528bee4a474" prot="public">
          <name>SND_PCM_FORMAT_S16</name>
          <initializer>= SND_PCM_FORMAT_S16_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 16 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a032b33ad0fe643a3177be26148f026f1" prot="public">
          <name>SND_PCM_FORMAT_U16</name>
          <initializer>= SND_PCM_FORMAT_U16_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 16 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ad2eb0073f6d7ba800695c088b32956a5" prot="public">
          <name>SND_PCM_FORMAT_S24</name>
          <initializer>= SND_PCM_FORMAT_S24_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 24 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a036c86abc5151b9a1f19476d34120994" prot="public">
          <name>SND_PCM_FORMAT_U24</name>
          <initializer>= SND_PCM_FORMAT_U24_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 24 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8abccf973f2b6eba3481949a7b5b04f4ab" prot="public">
          <name>SND_PCM_FORMAT_S32</name>
          <initializer>= SND_PCM_FORMAT_S32_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signed 32 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8abbdd76fc846d3a68c19727a44bd38336" prot="public">
          <name>SND_PCM_FORMAT_U32</name>
          <initializer>= SND_PCM_FORMAT_U32_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unsigned 32 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a7d9fd83c6ff5be7a9cde4b0673b64bf0" prot="public">
          <name>SND_PCM_FORMAT_FLOAT</name>
          <initializer>= SND_PCM_FORMAT_FLOAT_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 32 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a0ecea6572fd04ef25ae24cde617eaa9a" prot="public">
          <name>SND_PCM_FORMAT_FLOAT64</name>
          <initializer>= SND_PCM_FORMAT_FLOAT64_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Float 64 bit CPU endian </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8a7ecefcb13f1fbb3ffb24f9b6582d53cc" prot="public">
          <name>SND_PCM_FORMAT_IEC958_SUBFRAME</name>
          <initializer>= SND_PCM_FORMAT_IEC958_SUBFRAME_LE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEC-958 CPU Endian </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM sample format </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="123" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="123" bodyend="263"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" prot="public" static="no">
        <name>snd_pcm_subformat_t</name>
        <enumvalue id="group___p_c_m_1gga1e5fe73a6bdf881e2f91921d5e5327c7a09a538c9147dae5bb19df88198f0ebb8" prot="public">
          <name>SND_PCM_SUBFORMAT_STD</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Standard </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga1e5fe73a6bdf881e2f91921d5e5327c7acfd8b7903cb1073399a86b6d85ea7aef" prot="public">
          <name>SND_PCM_SUBFORMAT_LAST</name>
          <initializer>= SND_PCM_SUBFORMAT_STD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM sample subformat </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="266" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" prot="public" static="no">
        <name>snd_pcm_state_t</name>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a56cf8033b50561b57437232e243f3007" prot="public">
          <name>SND_PCM_STATE_OPEN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Open </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a58d9a0501aa1b2bd2607e1084c335672" prot="public">
          <name>SND_PCM_STATE_SETUP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Setup installed </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" prot="public">
          <name>SND_PCM_STATE_PREPARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ready to start </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" prot="public">
          <name>SND_PCM_STATE_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Running </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860ab63b5b90201110cd586b686355fd5d83" prot="public">
          <name>SND_PCM_STATE_XRUN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stopped: underrun (playback) or overrun (capture) detected </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f88c2a4c8eedb5c91f3b6cb4879cfe" prot="public">
          <name>SND_PCM_STATE_DRAINING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Draining: running (playback) or stopped (capture) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a9fa0c5b43e5c924f87b50e22878a8952" prot="public">
          <name>SND_PCM_STATE_PAUSED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Paused </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a79a05b6b619f88e153d50d9daf2e84bf" prot="public">
          <name>SND_PCM_STATE_SUSPENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hardware is suspended </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860aa0cbad634a40383eed6059d1b49c215a" prot="public">
          <name>SND_PCM_STATE_DISCONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hardware is disconnected </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a4ddd9705bc92c46869d2af8b0335688e" prot="public">
          <name>SND_PCM_STATE_LAST</name>
          <initializer>= SND_PCM_STATE_DISCONNECTED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="273" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="273" bodyend="293"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga0eae9150f4f207ed05cb629cc3a3673f" prot="public" static="no">
        <name>snd_pcm_start_t</name>
        <enumvalue id="group___p_c_m_1gga0eae9150f4f207ed05cb629cc3a3673fa1784d28a1a0b6d0dc9726e8093fef095" prot="public">
          <name>SND_PCM_START_DATA</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Automatic start on data read/write </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga0eae9150f4f207ed05cb629cc3a3673fa3f7514d50731fbec3bf3963f8f50e377" prot="public">
          <name>SND_PCM_START_EXPLICIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Explicit start </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga0eae9150f4f207ed05cb629cc3a3673fa78da8ffe8eae323c6e05f1fdaa8b1496" prot="public">
          <name>SND_PCM_START_LAST</name>
          <initializer>= SND_PCM_START_EXPLICIT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM start mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="296" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="296" bodyend="302"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga67c10983b5cadd8b3eb3163489655784" prot="public" static="no">
        <name>snd_pcm_xrun_t</name>
        <enumvalue id="group___p_c_m_1gga67c10983b5cadd8b3eb3163489655784a2041251f57b2d807a87dbb33de4a0299" prot="public">
          <name>SND_PCM_XRUN_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Xrun detection disabled </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga67c10983b5cadd8b3eb3163489655784a79be5aacb29e5eb3cea538eb7a24c57c" prot="public">
          <name>SND_PCM_XRUN_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop on xrun detection </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga67c10983b5cadd8b3eb3163489655784a9db770a846a51d1ee5e7743eb2375547" prot="public">
          <name>SND_PCM_XRUN_LAST</name>
          <initializer>= SND_PCM_XRUN_STOP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM xrun mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="305" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="305" bodyend="311"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga695a9755880cf886c13d07938f92ea77" prot="public" static="no">
        <name>snd_pcm_tstamp_t</name>
        <enumvalue id="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77af49a1c378583854b22ed6f6490f3b1ee" prot="public">
          <name>SND_PCM_TSTAMP_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No timestamp </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77ac62f4ba2b203d59b8f11074fb12788ae" prot="public">
          <name>SND_PCM_TSTAMP_ENABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Update timestamp at every hardware position update </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77ab09196ab367636c4d365b5b6bcd391d8" prot="public">
          <name>SND_PCM_TSTAMP_MMAP</name>
          <initializer>= SND_PCM_TSTAMP_ENABLE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Equivalent with <ref refid="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77ac62f4ba2b203d59b8f11074fb12788ae" kindref="member">SND_PCM_TSTAMP_ENABLE</ref>, just for compatibility with older versions </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga695a9755880cf886c13d07938f92ea77a0cfbb1f2b6cbd10d81beccdf6be8ae9c" prot="public">
          <name>SND_PCM_TSTAMP_LAST</name>
          <initializer>= SND_PCM_TSTAMP_ENABLE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM timestamp mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="314" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="314" bodyend="324"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c" prot="public" static="no">
        <name>snd_pcm_tstamp_type_t</name>
        <enumvalue id="group___p_c_m_1gga6e7869809e23ed1a3595e94fbd9a275ca363906e727cdee56da82cab964ac3ad9" prot="public">
          <name>SND_PCM_TSTAMP_TYPE_GETTIMEOFDAY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>gettimeofday equivalent </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6e7869809e23ed1a3595e94fbd9a275ca649eaa23a8ba59ef31b7cb1582a9d2b2" prot="public">
          <name>SND_PCM_TSTAMP_TYPE_MONOTONIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>posix_clock_monotonic equivalent </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6e7869809e23ed1a3595e94fbd9a275caaf1a88d034848bf2154be94ace1f8cef" prot="public">
          <name>SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>monotonic_raw (no NTP) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga6e7869809e23ed1a3595e94fbd9a275ca339d5d7a1338cc436f4d0cb55ee366bc" prot="public">
          <name>SND_PCM_TSTAMP_TYPE_LAST</name>
          <initializer>= SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="326" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="326" bodyend="331"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga060d5b81f2fc8efcc35ff3e1de6e9fa4" prot="public" static="no">
        <name>_snd_pcm_type</name>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a09891cdb0b9282c37c41941b922b12c4" prot="public">
          <name>SND_PCM_TYPE_HW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Kernel level PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a2e332e4a85ab27030c8504a2becc02ee" prot="public">
          <name>SND_PCM_TYPE_HOOKS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hooked PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a568ddf1cfbafe64782e3073b235ff5f3" prot="public">
          <name>SND_PCM_TYPE_MULTI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>One or more linked PCM with exclusive access to selected channels </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a583a91928c037820337cd8915cd85e02" prot="public">
          <name>SND_PCM_TYPE_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>File writing plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a1fd5236858488b6bb1c565ae83ba451d" prot="public">
          <name>SND_PCM_TYPE_NULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Null endpoint PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a7af39420542c41f72a62551b2ae8db6d" prot="public">
          <name>SND_PCM_TYPE_SHM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shared memory client PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a3b07a18a1c2cadfc4e2eec2d62aef57e" prot="public">
          <name>SND_PCM_TYPE_INET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>INET client PCM (not yet implemented) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af09844304be19ee3a81ba5e2165e00bc" prot="public">
          <name>SND_PCM_TYPE_COPY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Copying plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a3a89f56e7151dba7ba93e392fe709222" prot="public">
          <name>SND_PCM_TYPE_LINEAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Linear format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4aaefed6aee6ad9570fa3fdd5943702e43" prot="public">
          <name>SND_PCM_TYPE_ALAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A-Law format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a225a22f28b83348c81b9962b53f68419" prot="public">
          <name>SND_PCM_TYPE_MULAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mu-Law format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a8b358976321af44871bfd4f5743eb7f0" prot="public">
          <name>SND_PCM_TYPE_ADPCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IMA-ADPCM format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4ac551ab5a7b8c32d4a79a9f605287c4b0" prot="public">
          <name>SND_PCM_TYPE_RATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Rate conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a25b8c982e260c67fdf3da22a7d68bbb0" prot="public">
          <name>SND_PCM_TYPE_ROUTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Attenuated static route PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af03892219cb4ca4f07025b7a67d3890e" prot="public">
          <name>SND_PCM_TYPE_PLUG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Format adjusted PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a5f90c13d40f32cdbaa24304f1f4aa260" prot="public">
          <name>SND_PCM_TYPE_SHARE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sharing PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" prot="public">
          <name>SND_PCM_TYPE_METER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Meter plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a9d46de594d5885faa0fc4c3075eade76" prot="public">
          <name>SND_PCM_TYPE_MIX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mixing PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4ac48d9a315b2094989b303b62939f4d12" prot="public">
          <name>SND_PCM_TYPE_DROUTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Attenuated dynamic route PCM (not yet implemented) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a819e90fe76ad9b1f8615cdaa76d47606" prot="public">
          <name>SND_PCM_TYPE_LBSERVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Loopback server plugin (not yet implemented) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af99ee7d59e1195c15440b7688e36b4e2" prot="public">
          <name>SND_PCM_TYPE_LINEAR_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Linear Integer &lt;-&gt; Linear Float format conversion PCM </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af3096430cd38726e8dd3751c611af13e" prot="public">
          <name>SND_PCM_TYPE_LADSPA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LADSPA integration plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a1345bfdf8c4052ec4eaea99ddca5b25e" prot="public">
          <name>SND_PCM_TYPE_DMIX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct Mixing plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a3c059ea48c0ecb784421997aa302ff44" prot="public">
          <name>SND_PCM_TYPE_JACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Jack Audio Connection Kit plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a4fd7bc5c326b81d47841dc3133c6a154" prot="public">
          <name>SND_PCM_TYPE_DSNOOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct Snooping plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a02bca0b5efdbdfedb0983dacac599977" prot="public">
          <name>SND_PCM_TYPE_DSHARE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct Sharing plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4aa94a5d305b7803cf7ccda2ca0099a954" prot="public">
          <name>SND_PCM_TYPE_IEC958</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEC958 subframe plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a80dcbde2dd52a423f8c5b055aacaa17d" prot="public">
          <name>SND_PCM_TYPE_SOFTVOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Soft volume plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4ad4b0a23cef67fe330cce313c4f9e242a" prot="public">
          <name>SND_PCM_TYPE_IOPLUG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External I/O plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a876553cf6a0650a8adcb17c3e768a8da" prot="public">
          <name>SND_PCM_TYPE_EXTPLUG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External filter plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4aa426bf738261ee3cd1ca3a25d8cbed12" prot="public">
          <name>SND_PCM_TYPE_MMAP_EMUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mmap-emulation plugin </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4af7d38f0138e1ebfdf44e83a852b93c27" prot="public">
          <name>SND_PCM_TYPE_LAST</name>
          <initializer>= SND_PCM_TYPE_MMAP_EMUL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="377" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="377" bodyend="442"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1gad77f16d07431203bacc8694d28814506" prot="public" static="no">
        <name>snd_pcm_chmap_type</name>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a0d5c1dab935398488b798934515f1fba" prot="public">
          <name>SND_CHMAP_TYPE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>unspecified channel position </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a223cda2f0c432fc4706089304b550e31" prot="public">
          <name>SND_CHMAP_TYPE_FIXED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fixed channel position </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a4c6c131c3ec7eabf1073244c9765a3f7" prot="public">
          <name>SND_CHMAP_TYPE_VAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>freely swappable channel position </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a7f52f1c242f67d876d2bc920aba932b7" prot="public">
          <name>SND_CHMAP_TYPE_PAIRED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>pair-wise swappable channel position </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1ggad77f16d07431203bacc8694d28814506a19c6886e5e3b457e1a6f055f124f0fe3" prot="public">
          <name>SND_CHMAP_TYPE_LAST</name>
          <initializer>= SND_CHMAP_TYPE_PAIRED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>last entry </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>channel map list type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="529" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="529" bodyend="535"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m_1ga07f09c302588b9758946fedf97772975" prot="public" static="no">
        <name>snd_pcm_chmap_position</name>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a5013bd25392cde7881a00bdb4ab030ee" prot="public">
          <name>SND_CHMAP_UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>unspecified </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a757ea8c2af5fcce95adc50d1faf12956" prot="public">
          <name>SND_CHMAP_NA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>N/A, silent </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a57f7b8aa28a96384e75d6a75c7f2728c" prot="public">
          <name>SND_CHMAP_MONO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mono stream </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a583e5b3018a572266dff31ceb647173d" prot="public">
          <name>SND_CHMAP_FL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a1199db6603bfa8756b109720d6f47b88" prot="public">
          <name>SND_CHMAP_FR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975af55c7cf1772be450187b9c733e5a4601" prot="public">
          <name>SND_CHMAP_RL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a2de6b761ffe69645bdc84dcc154ca704" prot="public">
          <name>SND_CHMAP_RR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a1b986f167d0af5a2993688f0dc4f7ca7" prot="public">
          <name>SND_CHMAP_FC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a2e02fc34fc3156b9b651ddafe9430e76" prot="public">
          <name>SND_CHMAP_LFE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LFE </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975abef51a1484c1b62ba57abdbf4c319018" prot="public">
          <name>SND_CHMAP_SL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>side left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a99a126ad5674edde88e274247cdc77b0" prot="public">
          <name>SND_CHMAP_SR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>side right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975ab826e0b6dc51913bed17b9c9cd501b8b" prot="public">
          <name>SND_CHMAP_RC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a899724c4ba10d58f489aa95b1be85707" prot="public">
          <name>SND_CHMAP_FLC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front left center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a715eee05d56adb21c32f04a2dff32f41" prot="public">
          <name>SND_CHMAP_FRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front right center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a792ec89e7ed77e517fca9a042030cf91" prot="public">
          <name>SND_CHMAP_RLC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear left center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a01bb8ab068f1ad7ea82201fda13e7351" prot="public">
          <name>SND_CHMAP_RRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rear right center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a0aba5e9499f8c439d7af5aba4eea7013" prot="public">
          <name>SND_CHMAP_FLW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front left wide </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a866fd0a5bdacb87f672c06b19c95e3e6" prot="public">
          <name>SND_CHMAP_FRW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front right wide </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a0ebb60cbf70f6bdf44f23ca53f27a48e" prot="public">
          <name>SND_CHMAP_FLH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front left high </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975aa6fc16c41ed3c77d03d5338b71767dd5" prot="public">
          <name>SND_CHMAP_FCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front center high </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975aedc57856e5d15e089ca997bb2517e558" prot="public">
          <name>SND_CHMAP_FRH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>front right high </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975af92f549344923b13b3f988a8bd411248" prot="public">
          <name>SND_CHMAP_TC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975ab408982aed624e7895a88a70d3cad9ce" prot="public">
          <name>SND_CHMAP_TFL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975aac94c3e49e00cf6ddc8277be9211af8a" prot="public">
          <name>SND_CHMAP_TFR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a8afc5e5e7278cd11e275c353f7debb76" prot="public">
          <name>SND_CHMAP_TFC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a9801a726d1ef900db691fb3ee766c15c" prot="public">
          <name>SND_CHMAP_TRL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top rear left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a8f2b99c9f99b964305e7b20a24205845" prot="public">
          <name>SND_CHMAP_TRR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top rear right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975aa38f97720df84f0d0a729a2977a7e96f" prot="public">
          <name>SND_CHMAP_TRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top rear center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a056a6a819e4f86531c2f72f2cca30a2f" prot="public">
          <name>SND_CHMAP_TFLC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front left center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a1901ba205094fa4d78ae1b6ccba2a0b7" prot="public">
          <name>SND_CHMAP_TFRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top front right center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a37e4efa8f78e28245172e609b3e2edb1" prot="public">
          <name>SND_CHMAP_TSL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top side left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a002352cd72d1a7bb12a371c0a700368e" prot="public">
          <name>SND_CHMAP_TSR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>top side right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a98412e4b242d63dd0f6543d7979f65d2" prot="public">
          <name>SND_CHMAP_LLFE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>left LFE </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a5a90ba518606bd795133b7464e297037" prot="public">
          <name>SND_CHMAP_RLFE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>right LFE </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a6bdb9ff785f20a01942c51f5306f1b7a" prot="public">
          <name>SND_CHMAP_BC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>bottom center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a64d185c840a6c5a85b373c7b4c24a6ac" prot="public">
          <name>SND_CHMAP_BLC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>bottom left center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975ae8657844c743e6303622c8a5db01f9fc" prot="public">
          <name>SND_CHMAP_BRC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>bottom right center </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m_1gga07f09c302588b9758946fedf97772975a3754a57ceb4570b10f68d5ac8698a9f6" prot="public">
          <name>SND_CHMAP_LAST</name>
          <initializer>= SND_CHMAP_BRC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>channel positions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="538" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="538" bodyend="577"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m___hook_1ga57b6ba407d293017e116fa1b462a2411" prot="public" static="no">
        <name>snd_pcm_hook_type_t</name>
        <enumvalue id="group___p_c_m___hook_1gga57b6ba407d293017e116fa1b462a2411a3423cebaf5c4c207e1764bf771d39173" prot="public">
          <name>SND_PCM_HOOK_TYPE_HW_PARAMS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___hook_1gga57b6ba407d293017e116fa1b462a2411a1911e7b3a68fadf2f8486f4214e9034c" prot="public">
          <name>SND_PCM_HOOK_TYPE_HW_FREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___hook_1gga57b6ba407d293017e116fa1b462a2411a0e368fb6edd6f221af14c6043064abb4" prot="public">
          <name>SND_PCM_HOOK_TYPE_CLOSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___hook_1gga57b6ba407d293017e116fa1b462a2411af3887f3a9c71485c1b0444222cc1fc4b" prot="public">
          <name>SND_PCM_HOOK_TYPE_LAST</name>
          <initializer>= SND_PCM_HOOK_TYPE_CLOSE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>type of pcm hook </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1143" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1143" bodyend="1148"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m___simple_1ga0c8bcbf9cc83e8b0edaa501b15ff8ba9" prot="public" static="no">
        <name>snd_spcm_latency_t</name>
        <enumvalue id="group___p_c_m___simple_1gga0c8bcbf9cc83e8b0edaa501b15ff8ba9a51386f1133cba0e74aad6fbd8f6cf714" prot="public">
          <name>SND_SPCM_LATENCY_STANDARD</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>standard latency - for standard playback or capture (estimated latency in one direction 350ms) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___simple_1gga0c8bcbf9cc83e8b0edaa501b15ff8ba9ad392df38379992a4474f24fa2d0a7146" prot="public">
          <name>SND_SPCM_LATENCY_MEDIUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>medium latency - software phones etc. (estimated latency in one direction maximally 25ms </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___simple_1gga0c8bcbf9cc83e8b0edaa501b15ff8ba9aa29ff6c1b58c9b050df6ae575229cd9c" prot="public">
          <name>SND_SPCM_LATENCY_REALTIME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>realtime latency - realtime applications (effect processors etc.) (estimated latency in one direction 5ms and better) </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Simple PCM latency type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1232" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1232" bodyend="1242"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m___simple_1gaf89aba8106b8cc46e9f18d91268ec5ba" prot="public" static="no">
        <name>snd_spcm_xrun_type_t</name>
        <enumvalue id="group___p_c_m___simple_1ggaf89aba8106b8cc46e9f18d91268ec5baa7ef0dcc10a5e328bc78aa472d882f1f8" prot="public">
          <name>SND_SPCM_XRUN_IGNORE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>driver / library will ignore all xruns, the stream runs forever </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___simple_1ggaf89aba8106b8cc46e9f18d91268ec5baa716f9883b17fe11b35d162a6ff14a96a" prot="public">
          <name>SND_SPCM_XRUN_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>driver / library stops the stream when an xrun occurs </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Simple PCM xrun type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1245" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1245" bodyend="1250"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_c_m___simple_1ga6ed7a5a0762c198cb90ee48fb477b092" prot="public" static="no">
        <name>snd_spcm_duplex_type_t</name>
        <enumvalue id="group___p_c_m___simple_1gga6ed7a5a0762c198cb90ee48fb477b092a1baaaad19888ceeaf728364362274e0b" prot="public">
          <name>SND_SPCM_DUPLEX_LIBERAL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>liberal duplex - the buffer and period sizes might not match </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_c_m___simple_1gga6ed7a5a0762c198cb90ee48fb477b092a3efcb3f575fd6b86c0198dc87484f7c9" prot="public">
          <name>SND_SPCM_DUPLEX_PEDANTIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>pedantic duplex - the buffer and period sizes MUST match </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Simple PCM duplex type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1253" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1253" bodyend="1258"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" prot="public" static="no">
        <type>struct _snd_pcm_info</type>
        <definition>typedef struct _snd_pcm_info snd_pcm_info_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM generic info container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" prot="public" static="no">
        <type>struct _snd_pcm_hw_params</type>
        <definition>typedef struct _snd_pcm_hw_params snd_pcm_hw_params_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_hw_params_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM hardware configuration space container</para><para>snd_pcm_hw_params_t is an opaque structure which contains a set of possible PCM hardware configurations. For example, a given instance might include a range of buffer sizes, a range of period sizes, and a set of several sample formats. Some subset of all possible combinations these sets may be valid, but not necessarily any combination will be valid.</para><para>When a parameter is set or restricted using a snd_pcm_hw_params_set* function, all of the other ranges will be updated to exclude as many impossible configurations as possible. Attempting to set a parameter outside of its acceptable range will result in the function failing and an error code being returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" prot="public" static="no">
        <type>struct _snd_pcm_sw_params</type>
        <definition>typedef struct _snd_pcm_sw_params snd_pcm_sw_params_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_sw_params_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM software configuration container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" prot="public" static="no">
        <type>struct _snd_pcm_status</type>
        <definition>typedef struct _snd_pcm_status snd_pcm_status_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_status_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM status container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" prot="public" static="no">
        <type>struct _snd_pcm_access_mask</type>
        <definition>typedef struct _snd_pcm_access_mask snd_pcm_access_mask_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_access_mask_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM access types mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" prot="public" static="no">
        <type>struct _snd_pcm_format_mask</type>
        <definition>typedef struct _snd_pcm_format_mask snd_pcm_format_mask_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_format_mask_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM formats mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga891b054202089747199bc3348b9d9630" prot="public" static="no">
        <type>struct _snd_pcm_subformat_mask</type>
        <definition>typedef struct _snd_pcm_subformat_mask snd_pcm_subformat_mask_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_subformat_mask_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM subformats mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="50" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long snd_pcm_uframes_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_uframes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unsigned frames quantity </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="354" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" prot="public" static="no">
        <type>long</type>
        <definition>typedef long snd_pcm_sframes_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_sframes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signed frames quantity </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="356" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" prot="public" static="no">
        <type>struct _snd_pcm</type>
        <definition>typedef struct _snd_pcm snd_pcm_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="356" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1gaca6314f46f54a0b62536c403bbb62601" prot="public" static="no">
        <type>enum <ref refid="group___p_c_m_1ga060d5b81f2fc8efcc35ff3e1de6e9fa4" kindref="member">_snd_pcm_type</ref></type>
        <definition>typedef enum _snd_pcm_type snd_pcm_type_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="356" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" prot="public" static="no">
        <type>struct _snd_pcm_scope</type>
        <definition>typedef struct _snd_pcm_scope snd_pcm_scope_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_scope_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> scope handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="356" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m___hook_1gae6b33860eeaf4eca00bdbef9383c1911" prot="public" static="no">
        <type>struct _snd_pcm_hook</type>
        <definition>typedef struct _snd_pcm_hook snd_pcm_hook_t</definition>
        <argsstring></argsstring>
        <name>snd_pcm_hook_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM hook container </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1129" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___p_c_m___hook_1ga1f6104443e129a88c5ac82bf398464a5" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* snd_pcm_hook_func_t) (snd_pcm_hook_t *hook)</definition>
        <argsstring>)(snd_pcm_hook_t *hook)</argsstring>
        <name>snd_pcm_hook_func_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM hook callback function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1153" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_c_m_1ga8340c7dc0ac37f37afe5e7c21d6c528b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_open</definition>
        <argsstring>(snd_pcm_t **pcm, const char *name, snd_pcm_stream_t stream, int mode)</argsstring>
        <name>snd_pcm_open</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> **</type>
          <declname>pcm</declname>
          <defname>pcmp</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Opens a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII identifier of the PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Wanted stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Open mode (see <ref refid="group___p_c_m_1ga6bd90de1d1527b5804090dcce51079ad" kindref="member">SND_PCM_NONBLOCK</ref>, <ref refid="group___p_c_m_1ga9b22351abf6c85ced128e2088f6f6a5c" kindref="member">SND_PCM_ASYNC</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="470" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2517" bodyend="2530"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga88164d313d8ff9dc33c94815869cb677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_open_lconf</definition>
        <argsstring>(snd_pcm_t **pcm, const char *name, snd_pcm_stream_t stream, int mode, snd_config_t *lconf)</argsstring>
        <name>snd_pcm_open_lconf</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> **</type>
          <declname>pcm</declname>
          <defname>pcmp</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>lconf</declname>
        </param>
        <briefdescription>
<para>Opens a PCM using local configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII identifier of the PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Wanted stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Open mode (see <ref refid="group___p_c_m_1ga6bd90de1d1527b5804090dcce51079ad" kindref="member">SND_PCM_NONBLOCK</ref>, <ref refid="group___p_c_m_1ga9b22351abf6c85ced128e2088f6f6a5c" kindref="member">SND_PCM_ASYNC</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lconf</parametername>
</parameternamelist>
<parameterdescription>
<para>Local configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="472" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2541" bodyend="2547"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga189a69e31cec0aefa8c124764e99e0bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_open_fallback</definition>
        <argsstring>(snd_pcm_t **pcm, snd_config_t *root, const char *name, const char *orig_name, snd_pcm_stream_t stream, int mode)</argsstring>
        <name>snd_pcm_open_fallback</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> **</type>
          <declname>pcm</declname>
          <defname>pcmp</defname>
        </param>
        <param>
          <type><ref refid="group___config_1ga1c20905af775ae77d04d1a5696f67985" kindref="member">snd_config_t</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>orig_name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Opens a fallback PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration root </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>ASCII identifier of the PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orig_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The original ASCII name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Wanted stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Open mode (see <ref refid="group___p_c_m_1ga6bd90de1d1527b5804090dcce51079ad" kindref="member">SND_PCM_NONBLOCK</ref>, <ref refid="group___p_c_m_1ga9b22351abf6c85ced128e2088f6f6a5c" kindref="member">SND_PCM_ASYNC</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="475" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2559" bodyend="2571"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga042aba7262a4cbb4d444b6fc08cb7124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_close</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_close</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>close PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Closes the specified PCM handle and frees all associated resources. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="479" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="724" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga5031edc0422df8db1f70af056a12dd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_name</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_name</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>get identifier of PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii identifier of PCM handle</para></simplesect>
Returns the ASCII identifier of given PCM handle. It&apos;s the same identifier specified in <ref refid="group___p_c_m_1ga8340c7dc0ac37f37afe5e7c21d6c528b" kindref="member">snd_pcm_open()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="480" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="684" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gaa7cf89c3f83d83aaa0248055a783b632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gaca6314f46f54a0b62536c403bbb62601" kindref="member">snd_pcm_type_t</ref></type>
        <definition>snd_pcm_type_t snd_pcm_type</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_type</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>get type of PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>type of PCM handle</para></simplesect>
Returns the type <ref refid="group___p_c_m_1gaca6314f46f54a0b62536c403bbb62601" kindref="member">snd_pcm_type_t</ref> of given PCM handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="481" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="697" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga8eea4a021a114ecc3e8f6d80901faf46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
        <definition>snd_pcm_stream_t snd_pcm_stream</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_stream</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>get stream for a PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>stream of PCM handle</para></simplesect>
Returns the type <ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref> of given PCM handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="482" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="710" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gac7f4cdb1c930b8d343714f60afa02fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_poll_descriptors_count</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_poll_descriptors_count</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>get count of poll descriptors for PCM handle </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of poll descriptors</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="483" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1591" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga742e8705f6992fd0e36efc868e574f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_poll_descriptors</definition>
        <argsstring>(snd_pcm_t *pcm, struct pollfd *pfds, unsigned int space)</argsstring>
        <name>snd_pcm_poll_descriptors</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>struct pollfd *</type>
          <declname>pfds</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>get poll descriptors </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfds</parametername>
</parameternamelist>
<parameterdescription>
<para>array of poll descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>space</parametername>
</parameternamelist>
<parameterdescription>
<para>space in the poll descriptor array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of filled descriptors</para></simplesect>
This function fills the given poll descriptor structs for the specified PCM handle. The poll desctiptor array should have the size returned by <ref refid="group___p_c_m_1gac7f4cdb1c930b8d343714f60afa02fc4" kindref="member">::snd_pcm_poll_descriptors_count()</ref> function.</para><para>The result is intended for direct use with the poll() syscall.</para><para>For reading the returned events of poll descriptor after poll() system call, use <ref refid="group___p_c_m_1ga7e561f305702c6f52dab49b6c84f7df7" kindref="member">::snd_pcm_poll_descriptors_revents()</ref> function. The field values in pollfd structs may be bogus regarding the stream direction from the application perspective (POLLIN might not imply read direction and POLLOUT might not imply write), but the <ref refid="group___p_c_m_1ga7e561f305702c6f52dab49b6c84f7df7" kindref="member">::snd_pcm_poll_descriptors_revents()</ref> function does the right &quot;demangling&quot;.</para><para>You can use output from this function as arguments for the select() syscall, too. Do not forget to translate POLLIN and POLLOUT events to corresponding FD_SET arrays and demangle events using <ref refid="group___p_c_m_1ga7e561f305702c6f52dab49b6c84f7df7" kindref="member">::snd_pcm_poll_descriptors_revents()</ref> .</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="484" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1649" bodyend="1658"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga7e561f305702c6f52dab49b6c84f7df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_poll_descriptors_revents</definition>
        <argsstring>(snd_pcm_t *pcm, struct pollfd *pfds, unsigned int nfds, unsigned short *revents)</argsstring>
        <name>snd_pcm_poll_descriptors_revents</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>struct pollfd *</type>
          <declname>pfds</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nfds</declname>
        </param>
        <param>
          <type>unsigned short *</type>
          <declname>revents</declname>
        </param>
        <briefdescription>
<para>get returned events from poll descriptors </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfds</parametername>
</parameternamelist>
<parameterdescription>
<para>array of poll descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nfds</parametername>
</parameternamelist>
<parameterdescription>
<para>count of poll descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>revents</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the returned (single) event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if success, otherwise a negative error code</para></simplesect>
This function does &quot;demangling&quot; of the revents mask returned from the poll() syscall to correct semantics (POLLIN = read, POLLOUT = write).</para><para>Note: The null event also exists. Even if poll() or select() syscall returned that some events are waiting, this function might return empty set of events. In this case, application should do next event waiting using poll() or select().</para><para>Note: Even if multiple poll descriptors are used (i.e. pfds &gt; 1), this function returns only a single event.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="485" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1684" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga8d9ed4a62c17402de0389fd31fc7dc1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_nonblock</definition>
        <argsstring>(snd_pcm_t *pcm, int nonblock)</argsstring>
        <name>snd_pcm_nonblock</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonblock</declname>
        </param>
        <briefdescription>
<para>set nonblock mode </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonblock</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = block, 1 = nonblock mode, 2 = abort </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="486" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="757" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gacbee826525609f07c5245b1d7d9db9ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__inline__ int</type>
        <definition>static __inline__ int snd_pcm_abort</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_abort</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="487" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="487" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga5a0c0da6d0d35a3ac9f6a97567ac3b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_async_add_pcm_handler</definition>
        <argsstring>(snd_async_handler_t **handler, snd_pcm_t *pcm, snd_async_callback_t callback, void *private_data)</argsstring>
        <name>snd_async_add_pcm_handler</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> **</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___global_1gaf8937eadd968df14b64e54f49c29821c" kindref="member">snd_async_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>private_data</declname>
        </param>
        <briefdescription>
<para>Add an async handler for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned handler handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback private data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code on failure</para></simplesect>
The asynchronous callback is called when period boundary elapses. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="488" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2289" bodyend="2312"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gace4920d5943820c395dab8d9cd4fed0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
        <definition>snd_pcm_t* snd_async_handler_get_pcm</definition>
        <argsstring>(snd_async_handler_t *handler)</argsstring>
        <name>snd_async_handler_get_pcm</name>
        <param>
          <type><ref refid="group___global_1ga8cd9a1d441e9219ca5f2ff04094c7c6d" kindref="member">snd_async_handler_t</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Return PCM handle related to an async handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Async handler handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PCM handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="490" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2319" bodyend="2326"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gadd9467ca75884292234e4986b329a17f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_info</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_info_t *info)</argsstring>
        <name>snd_pcm_info</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Obtain general (static) information for PCM handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="491" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="809" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gaf8cd01c4c6b79c4a45a2c816fb8fbc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_current</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_current</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Retreive current PCM hardware configuration chosen with <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space definition container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="492" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="820" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Install one PCM hardware configuration chosen from a configuration space and <ref refid="group___p_c_m_1ga788d05de75f2d536f8443cb0306754d0" kindref="member">snd_pcm_prepare</ref> it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space definition container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The configuration is chosen fixing single parameters in this order: first access, first format, first subformat, min channels, min rate, min period time, max buffer size, min tick time. If no mutually compatible set of parameters can be chosen, a negative error code will be returned.</para><para>After this call, <ref refid="group___p_c_m_1ga788d05de75f2d536f8443cb0306754d0" kindref="member">snd_pcm_prepare()</ref> is called automatically and the stream is brought to <computeroutput><ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref></computeroutput> state.</para><para>The hardware parameters cannot be changed when the stream is running (active). The software parameters can be changed at any time.</para><para>The configuration space will be updated to reflect the chosen parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="493" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="871" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga242ad0a269c272830d30666220edbc2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_free</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_hw_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Remove PCM hardware configuration and free associated resources. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="494" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="886" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga61c5495ffb44c75aaa595e85512d28de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_current</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params)</argsstring>
        <name>snd_pcm_sw_params_current</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Return current software configuration for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="495" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5941" bodyend="5964"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga891ccaeea2c685a533b61b5fa0493974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params)</argsstring>
        <name>snd_pcm_sw_params</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Install PCM software configuration defined by params. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The software parameters can be changed at any time. The hardware parameters cannot be changed when the stream is running (active).</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="496" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="916" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga788d05de75f2d536f8443cb0306754d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_prepare</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_prepare</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Prepare PCM for use. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="497" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1132" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga390e084f13d24244196aca64262ce3fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_reset</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_reset</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Reset PCM position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Reduce PCM delay to 0.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="498" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1158" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga32891eaac37741728a9b23027012c892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_status</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_status_t *status)</argsstring>
        <name>snd_pcm_status</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Obtain status (runtime) information for PCM handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="499" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="966" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga6bdb88b68a9d9e66015d770f600c6aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_start</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_start</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Start a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="500" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1180" bodyend="1195"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga7000ca6010a1a2739daddff8e2fbb440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_drop</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_drop</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Stop a PCM dropping pending frames. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
This function stops the PCM <emphasis>immediately</emphasis>. The pending samples on the buffer are ignored.</para><para>For processing all pending samples, use <ref refid="group___p_c_m_1ga49afc5b8527f30c33fafa476533c9f86" kindref="member">::snd_pcm_drain()</ref> instead.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="501" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1210" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga49afc5b8527f30c33fafa476533c9f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_drain</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_drain</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Stop a PCM preserving pending frames. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred</para></parameterdescription>
</parameteritem>
</parameterlist>
For playback wait for all pending frames to be played and then stop the PCM. For capture stop PCM permitting to retrieve residual frames.</para><para>For stopping the PCM stream immediately, use <ref refid="group___p_c_m_1ga7000ca6010a1a2739daddff8e2fbb440" kindref="member">::snd_pcm_drop()</ref> instead.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="502" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1243" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gad711b582c7066bd4fffa1d08a04316b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_pause</definition>
        <argsstring>(snd_pcm_t *pcm, int enable)</argsstring>
        <name>snd_pcm_pause</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Pause/resume PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = resume, 1 = pause </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Note that this function works only on the hardware which supports pause feature. You can check it via <ref refid="group___p_c_m___h_w___params_1gaad4ba98b2f66baa5360b9a85f064a3e9" kindref="member">::snd_pcm_hw_params_can_pause()</ref> function.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="503" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1268" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga87896f6f17020fc19835790369e7ce75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" kindref="member">snd_pcm_state_t</ref></type>
        <definition>snd_pcm_state_t snd_pcm_state</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_state</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Return PCM state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PCM state <ref refid="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" kindref="member">snd_pcm_state_t</ref> of given PCM handle</para></simplesect>
This is a faster way to obtain only the PCM state without calling <ref refid="group___p_c_m_1ga32891eaac37741728a9b23027012c892" kindref="member">::snd_pcm_status()</ref>.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="504" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="988" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga3b71a41f6b300bf63ad374013f19d8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hwsync</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_hwsync</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Synchronize stream position with hardware </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Note this function does not update the actual r/w pointer for applications. The function <ref refid="group___p_c_m_1ga8bb836bd0c414b59789d51a5f5379c08" kindref="member">snd_pcm_avail_update()</ref> have to be called before any mmap begin+commit operation.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="505" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1010" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga012e8b999070e72ab23514f25e7d6482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_delay</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sframes_t *delayp)</argsstring>
        <name>snd_pcm_delay</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref> *</type>
          <declname>delayp</declname>
        </param>
        <briefdescription>
<para>Obtain delay for a running PCM handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned delay in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
For playback the delay is defined as the time that a frame that is written to the PCM stream shortly after this call will take to be actually audible. It is as such the overall latency from the write call to the final DAC.</para><para>For capture the delay is defined as the time that a frame that was digitized by the audio device takes until it can be read from the PCM stream shortly after this call returns. It is as such the overall latency from the initial ADC to the read call.</para><para>Please note that hence in case of a playback underrun this value will not necessarily got down to 0.</para><para>If the application is interested in the fill level of the playback buffer of the device, it should use <ref refid="group___p_c_m_1ga577b4d51e08d94930a05bbe73291ed2a" kindref="member">snd_pcm_avail</ref>*() functions. The value returned by that call is not directly related to the delay, since the latter might include some additional, fixed latencies the former does not.</para><para>Note this function does not update the actual r/w pointer for applications. The function <ref refid="group___p_c_m_1ga8bb836bd0c414b59789d51a5f5379c08" kindref="member">snd_pcm_avail_update()</ref> have to be called before any begin+commit operation.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="506" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1058" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga13083ce2209aab9ea73831610bc61ab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_resume</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_resume</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Resume from suspend, no samples are lost. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EAGAIN</parametername>
</parameternamelist>
<parameterdescription>
<para>resume can&apos;t be proceed immediately (audio hardware is probably still suspended) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ENOSYS</parametername>
</parameternamelist>
<parameterdescription>
<para>hardware doesn&apos;t support this feature</para></parameterdescription>
</parameteritem>
</parameterlist>
This function can be used when the stream is in the suspend state to do the fine resume from this state. Not all hardware supports this feature, when an -ENOSYS error is returned, use the <ref refid="group___p_c_m_1ga788d05de75f2d536f8443cb0306754d0" kindref="member">::snd_pcm_prepare()</ref> function to recovery.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="507" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1087" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga3946abd34178b3de60fd5329b71c189b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_htimestamp</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_uframes_t *avail, snd_htimestamp_t *tstamp)</argsstring>
        <name>snd_pcm_htimestamp</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>avail</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>tstamp</declname>
        </param>
        <briefdescription>
<para>Obtain last position update hi-res timestamp. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>avail</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of available frames when timestamp was grabbed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tstamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Hi-res timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Note this function does not update the actual r/w pointer for applications.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="508" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1110" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga577b4d51e08d94930a05bbe73291ed2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_avail</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_avail</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Return number of frames ready to be read (capture) / written (playback) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames ready otherwise a negative error code</para></simplesect>
On capture does all the actions needed to transport to application level all the ready frames across underlying layers.</para><para>The position is synced with hardware (driver) position in the sound ring buffer in this functions.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="509" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2803" bodyend="2821"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga8bb836bd0c414b59789d51a5f5379c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_avail_update</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_avail_update</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Return number of frames ready to be read (capture) / written (playback) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames ready otherwise a negative error code</para></simplesect>
On capture does all the actions needed to transport to application level all the ready frames across underlying layers.</para><para>The position is not synced with hardware (driver) position in the sound ring buffer in this function. This function is a light version of <ref refid="group___p_c_m_1ga577b4d51e08d94930a05bbe73291ed2a" kindref="member">snd_pcm_avail()</ref> .</para><para>Using this function is ideal after poll() or select() when audio file descriptor made the event and when application expects just period timing.</para><para>Also this function might be called after <ref refid="group___p_c_m_1ga012e8b999070e72ab23514f25e7d6482" kindref="member">snd_pcm_delay()</ref> or <ref refid="group___p_c_m_1ga3b71a41f6b300bf63ad374013f19d8d7" kindref="member">snd_pcm_hwsync()</ref> functions to move private ring buffer pointers in alsa-lib (the internal plugin chain).</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="510" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2779" bodyend="2787"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga170bc44da2607b5583cff5ab5a985d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_avail_delay</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sframes_t *availp, snd_pcm_sframes_t *delayp)</argsstring>
        <name>snd_pcm_avail_delay</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref> *</type>
          <declname>availp</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref> *</type>
          <declname>delayp</declname>
        </param>
        <briefdescription>
<para>Combine snd_pcm_avail and snd_pcm_delay functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availp</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of available frames in the ring buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayp</parametername>
</parameternamelist>
<parameterdescription>
<para>Total I/O latency in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success otherwise a negative error code</para></simplesect>
The avail and delay values retuned are in sync.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="511" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2834" bodyend="2863"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga0ea7a8aade4e6e76f2cdfd8c85f37bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_rewindable</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_rewindable</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get safe count of frames which can be rewinded. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames or negative error code</para></simplesect>
Note: The <ref refid="group___p_c_m_1ga6c66040dbe01797379436fdf36268fec" kindref="member">snd_pcm_rewind()</ref> can accept bigger value than returned by this function. But it is not guaranteed that output stream will be consistent with bigger value.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="512" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1296" bodyend="1311"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga6c66040dbe01797379436fdf36268fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_rewind</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_uframes_t frames)</argsstring>
        <name>snd_pcm_rewind</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Move application frame position backward. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>wanted displacement in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number for actual displacement otherwise a negative error code</para></simplesect>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="513" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1322" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gaa2f506e03630a074130443d7b9c1a27e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_forwardable</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_forwardable</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get safe count of frames which can be forwarded. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames or negative error code</para></simplesect>
Note: The <ref refid="group___p_c_m_1gad0774fa8991248c6f1c264aaeb0b4207" kindref="member">snd_pcm_forward()</ref> can accept bigger value than returned by this function. But it is not guaranteed that output stream will be consistent with bigger value.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="514" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1352" bodyend="1367"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gad0774fa8991248c6f1c264aaeb0b4207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_forward</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_uframes_t frames)</argsstring>
        <name>snd_pcm_forward</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Move application frame position forward. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>wanted skip in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number for actual skip otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>means no action</para></parameterdescription>
</parameteritem>
</parameterlist>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="515" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1381" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gabc748a500743713eafa960c7d104ca6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_writei</definition>
        <argsstring>(snd_pcm_t *pcm, const void *buffer, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_writei</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write interleaved frames to a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually written otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an underrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour is selected and it is running, then routine waits until all requested frames are played or put to the playback ring buffer. The returned number of frames can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="516" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1421" bodyend="1436"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga4c2c7bd26cf221268d59dc3bbeb9c048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_readi</definition>
        <argsstring>(snd_pcm_t *pcm, void *buffer, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_readi</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read interleaved frames from a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually read otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an overrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour was selected and it is running, then routine waits until all requested frames are filled. The returned number of frames can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="517" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1493" bodyend="1508"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gae599772ce3d0aa6a70de143abcf145e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_writen</definition>
        <argsstring>(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_writen</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>bufs</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write non interleaved frames to a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffers (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually written otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an underrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour is selected and it is running, then routine waits until all requested frames are played or put to the playback ring buffer. The returned number of frames can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="518" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1457" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gafea175455f1a405f633a43484ded3d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_readn</definition>
        <argsstring>(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_readn</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>bufs</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read non interleaved frames to a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffers (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually read otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an overrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour was selected and it is running, then routine waits until all requested frames are filled. The returned number of frames can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="519" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1529" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gad4d53d58b996a7cd9a5cbf1710b90375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_wait</definition>
        <argsstring>(snd_pcm_t *pcm, int timeout)</argsstring>
        <name>snd_pcm_wait</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for a PCM to become ready. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum time in milliseconds to wait, a negative value means infinity </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive value on success otherwise a negative error code (-EPIPE for the xrun and -ESTRPIPE for the suspended status, others for general errors) </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM stream is ready for I/O</para></parameterdescription>
</parameteritem>
</parameterlist>
The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="520" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2657" bodyend="2665"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gac6c33091b049985baa6466e8fe93917e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_link</definition>
        <argsstring>(snd_pcm_t *pcm1, snd_pcm_t *pcm2)</argsstring>
        <name>snd_pcm_link</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm1</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm2</declname>
        </param>
        <briefdescription>
<para>Link two PCMs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm1</parametername>
</parameternamelist>
<parameterdescription>
<para>first PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcm2</parametername>
</parameternamelist>
<parameterdescription>
<para>first PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
The two PCMs will start/stop/prepare in sync. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="522" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1554" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga0d3af5e30593dae857b4308aab5035cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_unlink</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_unlink</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Remove a PCM from a linked group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="523" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1568" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga675cb6a0fd5470345105574216a652c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsnd__pcm__chmap__query__t" kindref="compound">snd_pcm_chmap_query_t</ref> **</type>
        <definition>snd_pcm_chmap_query_t** snd_pcm_query_chmaps</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_query_chmaps</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Query the available channel maps <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle to query </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the NULL-terminated array of integer pointers, each of which contains the channel map. A channel map is represented by an integer array, beginning with the channel map type, followed by the number of channels, and the position of each channel.</para></simplesect>
Note: the caller is requested to release the returned value via <ref refid="group___p_c_m_1ga0a131c274594f6266b9a3f980e479e49" kindref="member">snd_pcm_free_chmaps()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="600" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7845" bodyend="7850"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gae766a086ec64ec1189a87da3e54b8441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsnd__pcm__chmap__query__t" kindref="compound">snd_pcm_chmap_query_t</ref> **</type>
        <definition>snd_pcm_chmap_query_t** snd_pcm_query_chmaps_from_hw</definition>
        <argsstring>(int card, int dev, int subdev, snd_pcm_stream_t stream)</argsstring>
        <name>snd_pcm_query_chmaps_from_hw</name>
        <param>
          <type>int</type>
          <declname>card</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>subdev</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Query the available channel maps <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>card</parametername>
</parameternamelist>
<parameterdescription>
<para>the card number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the PCM device number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subdev</parametername>
</parameternamelist>
<parameterdescription>
<para>the PCM substream index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction of PCM stream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the NULL-terminated array of integer pointers, or NULL at error.</para></simplesect>
This function works like <ref refid="group___p_c_m_1ga675cb6a0fd5470345105574216a652c2" kindref="member">snd_pcm_query_chmaps()</ref> but it takes the card, device, substream and stream numbers instead of the already opened snd_pcm_t instance, so that you can query available channel maps of a PCM before actually opening it.</para><para>As the parameters stand, the query is performed only to the hw PCM devices, not the abstracted PCM object in alsa-lib. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="601" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_hw.c" bodystart="1093" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga0a131c274594f6266b9a3f980e479e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_free_chmaps</definition>
        <argsstring>(snd_pcm_chmap_query_t **maps)</argsstring>
        <name>snd_pcm_free_chmaps</name>
        <param>
          <type><ref refid="structsnd__pcm__chmap__query__t" kindref="compound">snd_pcm_chmap_query_t</ref> **</type>
          <declname>maps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Release the channel map array allocated via <ref refid="group___p_c_m_1ga675cb6a0fd5470345105574216a652c2" kindref="member">snd_pcm_query_chmaps</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maps</parametername>
</parameternamelist>
<parameterdescription>
<para>the array pointer to release </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="604" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7856" bodyend="7864"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gac3150e89164f6cb1276abda84b399c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsnd__pcm__chmap__t" kindref="compound">snd_pcm_chmap_t</ref> *</type>
        <definition>snd_pcm_chmap_t* snd_pcm_get_chmap</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_get_chmap</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Get the current channel map <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM instance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current channel map, or NULL if error</para></simplesect>
Note: the caller is requested to release the returned value via free() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="605" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7873" bodyend="7878"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga60ee7d2c2555e21dbc844a1b73839085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_set_chmap</definition>
        <argsstring>(snd_pcm_t *pcm, const snd_pcm_chmap_t *map)</argsstring>
        <name>snd_pcm_set_chmap</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__pcm__chmap__t" kindref="compound">snd_pcm_chmap_t</ref> *</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Configure the current channel map <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM instance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel map to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if succeeded, or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="606" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7886" bodyend="7895"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga2c559ecbc8f79457c1d7be5d08365739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_chmap_type_name</definition>
        <argsstring>(enum snd_pcm_chmap_type val)</argsstring>
        <name>snd_pcm_chmap_type_name</name>
        <param>
          <type>enum <ref refid="group___p_c_m_1gad77f16d07431203bacc8694d28814506" kindref="member">snd_pcm_chmap_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Get a name string for a channel map type as query results <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel position </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the given type, or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="608" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7912" bodyend="7918"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gac13f471d76d025798a25f3b422a07b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_chmap_name</definition>
        <argsstring>(enum snd_pcm_chmap_position val)</argsstring>
        <name>snd_pcm_chmap_name</name>
        <param>
          <type>enum <ref refid="group___p_c_m_1ga07f09c302588b9758946fedf97772975" kindref="member">snd_pcm_chmap_position</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Get a name string for a standard channel map position <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel position </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the given position, or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="609" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7945" bodyend="7951"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga5dc94582c2356ad6f214761de888bf43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_chmap_long_name</definition>
        <argsstring>(enum snd_pcm_chmap_position val)</argsstring>
        <name>snd_pcm_chmap_long_name</name>
        <param>
          <type>enum <ref refid="group___p_c_m_1ga07f09c302588b9758946fedf97772975" kindref="member">snd_pcm_chmap_position</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Get a longer name string for a standard channel map position <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel position </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the given position, or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="610" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7998" bodyend="8004"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga1e10b4d6db07a3ef3a1105e703a38629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_chmap_print</definition>
        <argsstring>(const snd_pcm_chmap_t *map, size_t maxlen, char *buf)</argsstring>
        <name>snd_pcm_chmap_print</name>
        <param>
          <type>const <ref refid="structsnd__pcm__chmap__t" kindref="compound">snd_pcm_chmap_t</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxlen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Print the channels in chmap on the buffer <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel map to print </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximal length to write (including NUL letter) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The actual string length or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="611" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8013" bodyend="8044"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1gad3e0c4157e5f491ba448bfd4d4dc0177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_chmap_from_string</definition>
        <argsstring>(const char *str)</argsstring>
        <name>snd_pcm_chmap_from_string</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Convert from string to channel position <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to parse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The channel position value or -1 as an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="612" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8091" bodyend="8094"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga77973afbe7ab02bfde38d574d4879355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsnd__pcm__chmap__t" kindref="compound">snd_pcm_chmap_t</ref> *</type>
        <definition>snd_pcm_chmap_t* snd_pcm_chmap_parse_string</definition>
        <argsstring>(const char *str)</argsstring>
        <name>snd_pcm_chmap_parse_string</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>!brief Convert from string to channel map <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to parse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The channel map</para></simplesect>
Note: the caller is requested to release the returned value via free() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="613" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8103" bodyend="8144"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga2157aaeb6fc14da3f040d76591f9d3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_recover</definition>
        <argsstring>(snd_pcm_t *pcm, int err, int silent)</argsstring>
        <name>snd_pcm_recover</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <param>
          <type>int</type>
          <declname>silent</declname>
        </param>
        <briefdescription>
<para>Recover the stream state from an error or suspend. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>error number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>silent</parametername>
</parameternamelist>
<parameterdescription>
<para>do not print error reason </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 when error code was handled successfuly, otherwise a negative error code</para></simplesect>
This a high-level helper function building on other functions.</para><para>This functions handles -EINTR (interrupted system call), -EPIPE (overrun or underrun) and -ESTRPIPE (stream is suspended) error codes trying to prepare given stream for next I/O.</para><para>Note that this function returs the original error code when it is not handled inside this function (for example -EAGAIN is returned back). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="622" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8293" bodyend="8328"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga45d50841b307f2156fce1857bfac228c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_set_params</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_format_t format, snd_pcm_access_t access, unsigned int channels, unsigned int rate, int soft_resample, unsigned int latency)</argsstring>
        <name>snd_pcm_set_params</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>access</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>rate</declname>
        </param>
        <param>
          <type>int</type>
          <declname>soft_resample</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>latency</declname>
        </param>
        <briefdescription>
<para>Set the hardware and software parameters in a simple way. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>required PCM format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>required PCM access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>required PCM channels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>required sample rate in Hz </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>soft_resample</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disallow alsa-lib resample stream, 1 = allow resampling </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latency</parametername>
</parameternamelist>
<parameterdescription>
<para>required overall latency in us </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="623" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8341" bodyend="8521"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m_1ga2827b8fa77ca05717df9b0447b99d1cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_get_params</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_uframes_t *buffer_size, snd_pcm_uframes_t *period_size)</argsstring>
        <name>snd_pcm_get_params</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>period_size</declname>
        </param>
        <briefdescription>
<para>Get the transfer size parameters in a simple way. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM ring buffer size in frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period_size</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM period size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="630" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="8530" bodyend="8546"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga782831adf8ee2ee52892479ea0222e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_pcm_info_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_pcm_info_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="643" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6753" bodyend="6756"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga2386bb8f334424c1ff2b8854ff29ac0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_info_malloc</definition>
        <argsstring>(snd_pcm_info_t **ptr)</argsstring>
        <name>snd_pcm_info_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="649" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6763" bodyend="6770"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1gaa919792762d0bf606f9fe45872231f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_info_free</definition>
        <argsstring>(snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="650" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6776" bodyend="6779"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga139884ae6fb3cb5621591f2d6e044a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_info_copy</definition>
        <argsstring>(snd_pcm_info_t *dst, const snd_pcm_info_t *src)</argsstring>
        <name>snd_pcm_info_copy</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="651" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6786" bodyend="6790"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga137b0bb60ad14009b9da04fe53849553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_info_get_device</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_device</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get device from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>device number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="652" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6797" bodyend="6801"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1gaf0e6c1ec0443820d5c14c48ecd1b698e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_info_get_subdevice</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_subdevice</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get subdevice from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>subdevice number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="653" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6808" bodyend="6812"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1gacf9b5a69f2b0ed9aef5b9b0d2ed61aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
        <definition>snd_pcm_stream_t snd_pcm_info_get_stream</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_stream</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get stream (direction) from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>stream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="654" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6819" bodyend="6823"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga3a632a14559c1ea0d07b27b0596c4e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_info_get_card</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_card</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get card from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>card number otherwise a negative error code if not associable to a card </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="655" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6830" bodyend="6834"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga4ce080eae74ed95baa79ffb80a91df81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_info_get_id</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_id</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get id from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>short id of PCM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="656" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6841" bodyend="6845"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1gad48dd79e45631811c297ee7080681bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_info_get_name</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_name</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get name from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>name of PCM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="657" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6852" bodyend="6856"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1gae2ce3c55d4439ae423b854358ff08aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_info_get_subdevice_name</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_subdevice_name</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get subdevice name from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>name of used PCM subdevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="658" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6863" bodyend="6867"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1gada845e969b0b9c959134f42b98d73c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gad0e95dc8a590d8f9915fec237d7a28a5" kindref="member">snd_pcm_class_t</ref></type>
        <definition>snd_pcm_class_t snd_pcm_info_get_class</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_class</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get class from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>class of PCM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="659" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6874" bodyend="6878"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga30670ad0d94f4358c3f16cc80ff3ba85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga6a164917c35e2216f6e76beff4e4d0cb" kindref="member">snd_pcm_subclass_t</ref></type>
        <definition>snd_pcm_subclass_t snd_pcm_info_get_subclass</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_subclass</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get subclass from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>subclass of PCM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="660" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6885" bodyend="6889"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1gaeccf5d684a23455aa9fc31f8756eb222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_info_get_subdevices_count</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_subdevices_count</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get subdevices count from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>subdevices total count of PCM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="661" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6896" bodyend="6900"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1gad78bccdeadd378461073b4e6bfa5272a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_info_get_subdevices_avail</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_subdevices_avail</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get available subdevices count from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>available subdevices count of PCM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="662" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6907" bodyend="6911"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga4a46693c8a81912de84f814c3eecd06e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="unionsnd__pcm__sync__id__t" kindref="compound">snd_pcm_sync_id_t</ref></type>
        <definition>snd_pcm_sync_id_t snd_pcm_info_get_sync</definition>
        <argsstring>(const snd_pcm_info_t *obj)</argsstring>
        <name>snd_pcm_info_get_sync</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get hardware synchronization ID from a PCM info container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hardware synchronization ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="663" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6918" bodyend="6924"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1gab9fe6f542c830c516f78ee9124606430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_info_set_device</definition>
        <argsstring>(snd_pcm_info_t *obj, unsigned int val)</argsstring>
        <name>snd_pcm_info_set_device</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set wanted device inside a PCM info container (see <ref refid="control_8c_1ac5a9750f9ba7749efddb0d92747255c8" kindref="member">snd_ctl_pcm_info</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Device number </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="664" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6931" bodyend="6935"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga2a1aea3ed02b14de6535f59d2cc80148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_info_set_subdevice</definition>
        <argsstring>(snd_pcm_info_t *obj, unsigned int val)</argsstring>
        <name>snd_pcm_info_set_subdevice</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set wanted subdevice inside a PCM info container (see <ref refid="control_8c_1ac5a9750f9ba7749efddb0d92747255c8" kindref="member">snd_ctl_pcm_info</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Subdevice number </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="665" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6942" bodyend="6946"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___info_1ga6bd83454c365f212e47f42ee84db06ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_info_set_stream</definition>
        <argsstring>(snd_pcm_info_t *obj, snd_pcm_stream_t val)</argsstring>
        <name>snd_pcm_info_set_stream</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7dae86a468480ce8eb1c485446c51664" kindref="member">snd_pcm_info_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set wanted stream inside a PCM info container (see <ref refid="control_8c_1ac5a9750f9ba7749efddb0d92747255c8" kindref="member">snd_ctl_pcm_info</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM info container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="666" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6953" bodyend="6957"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga6e2dd8efbb7a4084bd05e6cc458d84f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_any</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_any</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Fill params with a full configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space</para></parameterdescription>
</parameteritem>
</parameterlist>
The configuration space will be filled with all possible ranges for the PCM device. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="677" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3596" bodyend="3600"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga53b3b351bc5db48da18d5f36b98f79a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_can_mmap_sample_resolution</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_can_mmap_sample_resolution</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware supports sample-resolution mmap for given configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t support sample-resolution mmap </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware supports sample-resolution mmap</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="679" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3247" bodyend="3255"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga3bfe71142e72dffb274f8ba9ef7edeee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_is_double</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_is_double</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware does double buffering for start/stop for given configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t do double buffering for start/stop </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware does double buffering for start/stop</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="680" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3267" bodyend="3275"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga366395c87f811d8ab8df83dc8a8a8124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_is_batch</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_is_batch</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware does double buffering for data transfers for given configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t do double buffering for data transfers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware does double buffering for data transfers</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="681" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3287" bodyend="3295"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gac511eb0d4db6f1e8303161486061fe14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_is_block_transfer</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_is_block_transfer</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware does block transfers for samples for given configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t block transfers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware does block transfers</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="682" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3307" bodyend="3315"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga7a129f7671fee8c0ced42d64a6c2379d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_is_monotonic</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_is_monotonic</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if timestamps are monotonic for given configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Device doesn&apos;t do monotomic timestamps </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Device does monotonic timestamps</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="683" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3327" bodyend="3335"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gacb214bcb2af7462195da73b060206800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_can_overrange</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_can_overrange</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware supports overrange detection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t support overrange detection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware supports overrange detection</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="684" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3347" bodyend="3355"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaad4ba98b2f66baa5360b9a85f064a3e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_can_pause</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_can_pause</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware supports pause. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t support pause </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware supports pause</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="685" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3367" bodyend="3375"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga6b79539a34e6f51972f4c32b3296585a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_can_resume</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_can_resume</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware supports resume. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t support resume </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware supports resume</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="686" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3387" bodyend="3395"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gabaf7b36cfb700973fe8d89971f0f967b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_is_half_duplex</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_is_half_duplex</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware does half-duplex only. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t do half-duplex </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware does half-duplex</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="687" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3407" bodyend="3415"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gae8768da025e34e3c3c6b5a5dfdcd2ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_is_joint_duplex</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_is_joint_duplex</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware does joint-duplex (playback and capture are somewhat correlated) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t do joint-duplex </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware does joint-duplex</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="688" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3427" bodyend="3435"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gafcea258e7d9b6094350699367f2ef9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_can_sync_start</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_can_sync_start</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware supports synchronized start with sample resolution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t support synchronized start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware supports synchronized start</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="689" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3447" bodyend="3455"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gad0f8922537619c70e41bf07eb740e54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_can_disable_period_wakeup</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_can_disable_period_wakeup</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware can disable period wakeups. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware cannot disable period wakeups </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware can disable period wakeups </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="690" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3463" bodyend="3471"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gafd935dde74ea0da6824b204eb78eb620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_supports_audio_wallclock_ts</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_supports_audio_wallclock_ts</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Check if hardware supports audio wallclock timestamps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t support audio wallclock timestamps </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware supports audio wallclock timestamps</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="691" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3483" bodyend="3488"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaa2071d14dbb09232ecddf2e236bdfdf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_supports_audio_ts_type</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, int type)</argsstring>
        <name>snd_pcm_hw_params_supports_audio_ts_type</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Check if hardware supports type of audio timestamps. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Audio timestamp type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware doesn&apos;t support type of audio timestamps </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware supports type of audio timestamps</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="692" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3501" bodyend="3524"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga556ddf9731e184cb635994f739a6efe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_rate_numden</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *rate_num, unsigned int *rate_den)</argsstring>
        <name>snd_pcm_hw_params_get_rate_numden</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>rate_num</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>rate_den</declname>
        </param>
        <briefdescription>
<para>Get rate exact info from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned rate numerator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_den</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned rate denominator </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the info is not available</para></simplesect>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="693" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3537" bodyend="3548"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga8bb1180b62a4225f0e094b95ac5d3674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_sbits</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_get_sbits</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Get sample resolution info from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>signification bits in sample otherwise a negative error code if the info is not available</para></simplesect>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="696" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3559" bodyend="3567"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga12fe3e1ca110fd61cff685890366c743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_fifo_size</definition>
        <argsstring>(const snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_get_fifo_size</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Get hardware FIFO size info from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FIFO size in frames otherwise a negative error code if the info is not available</para></simplesect>
This function should only be called when the configuration space contains a single configuration. Call <ref refid="group___p_c_m_1ga1ca0dc120a484965e26cabf966502330" kindref="member">snd_pcm_hw_params</ref> to choose a single configuration from the configuration space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="697" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3578" bodyend="3586"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga092e6c110ad7b4e52855b9522e437ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_pcm_hw_params_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_pcm_hw_params_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="725" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3914" bodyend="3917"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga6e53d09a9c7cc3f2a692c0af99886237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_malloc</definition>
        <argsstring>(snd_pcm_hw_params_t **ptr)</argsstring>
        <name>snd_pcm_hw_params_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="731" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3924" bodyend="3931"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga8c094063e7a13be0b9a043be8616a181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_hw_params_free</definition>
        <argsstring>(snd_pcm_hw_params_t *obj)</argsstring>
        <name>snd_pcm_hw_params_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="732" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3937" bodyend="3940"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga9bcedf4bb4b21527a584846a5986a1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_hw_params_copy</definition>
        <argsstring>(snd_pcm_hw_params_t *dst, const snd_pcm_hw_params_t *src)</argsstring>
        <name>snd_pcm_hw_params_copy</name>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="733" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3947" bodyend="3951"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga752e62bb419c7ebe151f8023f5eed1f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_access</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_access_t *_access)</argsstring>
        <name>snd_pcm_hw_params_get_access</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref> *</type>
          <declname>_access</declname>
          <defname>access</defname>
        </param>
        <briefdescription>
<para>Extract access type from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>access type otherwise a negative error code if the configuration space does not contain a single value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="737" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3963" bodyend="3971"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gab56553ff541e6e9ddae397f6faba840f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_access</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_t _access)</argsstring>
        <name>snd_pcm_hw_params_test_access</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>_access</declname>
          <defname>access</defname>
        </param>
        <briefdescription>
<para>Verify if an access type is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>access type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="738" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3980" bodyend="3983"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga4c8f1c632931923531ca68ee048a8de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_access</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_t _access)</argsstring>
        <name>snd_pcm_hw_params_set_access</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>_access</declname>
          <defname>access</defname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one access type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>access type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="739" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3992" bodyend="3995"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga2fd545bdf469d54cff6a038e31ce56ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_access_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_t *_access)</argsstring>
        <name>snd_pcm_hw_params_set_access_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref> *</type>
          <declname>_access</declname>
          <defname>access</defname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its first access type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned first access type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="740" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4007" bodyend="4011"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga172b949e37f28da5a102e56b04f69be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_access_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_t *_access)</argsstring>
        <name>snd_pcm_hw_params_set_access_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref> *</type>
          <declname>_access</declname>
          <defname>access</defname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its last access type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned last access type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="741" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4023" bodyend="4027"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gad54808a277db646cbc21be07efc31000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_access_mask</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_access_mask_t *mask)</argsstring>
        <name>snd_pcm_hw_params_set_access_mask</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only a set of access types. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Access mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="742" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4036" bodyend="4039"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga20079e218c9307e4e683f0743f3af38c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_access_mask</definition>
        <argsstring>(snd_pcm_hw_params_t *params, snd_pcm_access_mask_t *mask)</argsstring>
        <name>snd_pcm_hw_params_get_access_mask</name>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Get access mask from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned Access mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="743" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4046" bodyend="4052"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga66b28dd4f26d603e923a3577d1a2e98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_format</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_format_t *val)</argsstring>
        <name>snd_pcm_hw_params_get_format</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref> *</type>
          <declname>val</declname>
          <defname>format</defname>
        </param>
        <briefdescription>
<para>Extract format from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>returned format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>format otherwise a negative error code if the configuration space does not contain a single value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="745" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4064" bodyend="4068"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga64e1a5143bbd72c8f5cffca828d506ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_format</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_t val)</argsstring>
        <name>snd_pcm_hw_params_test_format</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>val</declname>
          <defname>format</defname>
        </param>
        <briefdescription>
<para>Verify if a format is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="746" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4077" bodyend="4080"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga6014e0e1ec7934f8c745290e83e59199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_format</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_t val)</argsstring>
        <name>snd_pcm_hw_params_set_format</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>val</declname>
          <defname>format</defname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="747" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4089" bodyend="4092"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga762ee356cc687c81c206df3c18245e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_format_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_t *format)</argsstring>
        <name>snd_pcm_hw_params_set_format_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref> *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its first format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned first format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="748" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4104" bodyend="4108"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga4a643db96742a3da0287eda6cc3eafa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_format_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_t *format)</argsstring>
        <name>snd_pcm_hw_params_set_format_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref> *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its last format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned last format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="749" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4120" bodyend="4124"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga33261bd41636eb28fd42493e4ea4efba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_format_mask</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_format_mask_t *mask)</argsstring>
        <name>snd_pcm_hw_params_set_format_mask</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only a set of formats. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Format mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="750" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4133" bodyend="4136"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga43bdf7596f8722fb6b8edbeaf1aebd90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_hw_params_get_format_mask</definition>
        <argsstring>(snd_pcm_hw_params_t *params, snd_pcm_format_mask_t *mask)</argsstring>
        <name>snd_pcm_hw_params_get_format_mask</name>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Get format mask from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned Format mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="751" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4143" bodyend="4146"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga77a934515c24e17cfb0af21a8b2e0690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_subformat</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_subformat_t *subformat)</argsstring>
        <name>snd_pcm_hw_params_get_subformat</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref> *</type>
          <declname>subformat</declname>
        </param>
        <briefdescription>
<para>Extract subformat from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subformat</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned subformat value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>subformat otherwise a negative error code if the configuration space does not contain a single value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="753" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4158" bodyend="4162"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaf5062e723956551092db201f34c99495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_subformat</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_t subformat)</argsstring>
        <name>snd_pcm_hw_params_test_subformat</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref></type>
          <declname>subformat</declname>
        </param>
        <briefdescription>
<para>Verify if a subformat is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subformat</parametername>
</parameternamelist>
<parameterdescription>
<para>subformat value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="754" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4171" bodyend="4174"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga08dfde7d1fc6a0a56609f3ec40ed26e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_subformat</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_t subformat)</argsstring>
        <name>snd_pcm_hw_params_set_subformat</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref></type>
          <declname>subformat</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one subformat. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subformat</parametername>
</parameternamelist>
<parameterdescription>
<para>subformat value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="755" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4183" bodyend="4186"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga12b745bdf119127f2216d61a2bd28688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_subformat_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_t *subformat)</argsstring>
        <name>snd_pcm_hw_params_set_subformat_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref> *</type>
          <declname>subformat</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its first subformat. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subformat</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned subformat </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="756" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4198" bodyend="4202"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gab1a02fff3ef394da274d2b2652df856d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_subformat_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_t *subformat)</argsstring>
        <name>snd_pcm_hw_params_set_subformat_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref> *</type>
          <declname>subformat</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its last subformat. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subformat</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned subformat </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="757" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4214" bodyend="4218"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga3ebc4625b258df82164dc9220a9f9117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_subformat_mask</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_subformat_mask_t *mask)</argsstring>
        <name>snd_pcm_hw_params_set_subformat_mask</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only a set of subformats. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Subformat mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="758" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4227" bodyend="4230"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaafee81722f5bcba41e16e4c7a77059c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_hw_params_get_subformat_mask</definition>
        <argsstring>(snd_pcm_hw_params_t *params, snd_pcm_subformat_mask_t *mask)</argsstring>
        <name>snd_pcm_hw_params_get_subformat_mask</name>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Get subformat mask from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned Subformat mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="759" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4237" bodyend="4240"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gae27e04757272070197e00c0dfec5dc97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_channels</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_get_channels</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Extract channels from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned channels count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the configuration space does not contain a single value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="761" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4252" bodyend="4256"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga93326349bbb91840a3e0bafef0390cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_channels_min</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_get_channels_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Extract minimum channels count from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum channels count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="762" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4267" bodyend="4271"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gac6c37a5da7dc8cb19fdd8e9cf1bd673d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_channels_max</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_get_channels_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Extract maximum channels count from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum channels count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="763" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4282" bodyend="4286"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga8fabc38d770ad922e5b4e0338e7fb242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_channels</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val)</argsstring>
        <name>snd_pcm_hw_params_test_channels</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Verify if a channels count is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>channels count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="764" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4295" bodyend="4298"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga3a5b2a05c5d9869cc743dac71c0d270a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_channels</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val)</argsstring>
        <name>snd_pcm_hw_params_set_channels</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one channels count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>channels count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="765" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4307" bodyend="4310"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga155b8ac646b90560cd00f195086ff464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_channels_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_set_channels_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a minimum channels count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum channels count (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="766" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4319" bodyend="4322"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga739d51d0822f182a6583a5436f410b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_channels_max</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_set_channels_max</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a maximum channels count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum channels count (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="767" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4331" bodyend="4334"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga24e507c965aff4984aa4969cc896e830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_channels_minmax</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, unsigned int *max)</argsstring>
        <name>snd_pcm_hw_params_set_channels_minmax</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have channels counts in a given range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum channels count (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum channels count (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="768" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4344" bodyend="4347"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga59aa9e1a02f4ce616fe92c605a833f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_channels_near</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_set_channels_near</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have channels count nearest to a target. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>target channels count, returned chosen channels count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="769" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4359" bodyend="4363"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gae08e3371d3d2e8e512537630a59f9a55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_channels_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_set_channels_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its minimum channels count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum channels count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="770" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4375" bodyend="4379"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga54846380c1dc99ee9124d45232931ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_channels_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_set_channels_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its maximum channels count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum channels count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="771" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4391" bodyend="4395"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga4279c4b45a15f7e282e436e75d6ba13a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_rate</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_rate</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract rate from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the configuration space does not contain a single value</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="773" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4410" bodyend="4414"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaf7801fdf88fa51ca96fe97d3211db3f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_rate_min</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_rate_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract minimum rate from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate minimum rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="774" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4428" bodyend="4432"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga6770c2b988c8dc91eb51893cc145aa2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_rate_max</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_rate_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract maximum rate from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate maximum rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="775" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4446" bodyend="4450"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga5f09b37dd6f4c213029f8f39e00137a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_rate</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir)</argsstring>
        <name>snd_pcm_hw_params_test_rate</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Verify if a rate is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="776" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4462" bodyend="4465"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga29cd2571738847813af1489043d1af5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_rate</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir)</argsstring>
        <name>snd_pcm_hw_params_set_rate</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one rate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="777" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4477" bodyend="4480"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga89374ae29dd924915ada6f26cd9a3292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_rate_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_rate_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a minimum rate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum rate (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact minimum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="778" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4492" bodyend="4495"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga8701776750b18b2dad19a4115791c2f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_rate_max</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_rate_max</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a maximum rate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum rate (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact maximum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="779" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4507" bodyend="4510"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga03795a2ee03be25a30185b26a1bc3e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_rate_minmax</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir)</argsstring>
        <name>snd_pcm_hw_params_set_rate_minmax</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mindir</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>maxdir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have rates in a given range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum rate (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mindir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for minimum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum rate (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxdir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for maximum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact min/max is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="780" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4524" bodyend="4527"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga39124280d06ce63092a77e3f25ddd6ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_rate_near</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_rate_near</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have rate nearest to a target. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate target rate / returned approximate set rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space is empty</para></simplesect>
target/chosen exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="781" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4542" bodyend="4546"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gac0ded856c76459608fdd5ea0f254349e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_rate_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_rate_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its minimum rate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned minimum approximate rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="782" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4561" bodyend="4565"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga5d90a5204061482be45ac4e0d2b10e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_rate_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_rate_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its maximum rate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned maximum approximate rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="783" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4580" bodyend="4584"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga82eecc0e27a94ce0caa195cc3765536c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_rate_resample</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val)</argsstring>
        <name>snd_pcm_hw_params_set_rate_resample</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only real hardware rates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disable, 1 = enable (default) rate resampling </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="784" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4593" bodyend="4602"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gacaa53b05cd5e4f55eeb4d5ea64129c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_rate_resample</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_get_rate_resample</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Extract resample state from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disable, 1 = enable rate resampling </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="785" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4611" bodyend="4616"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga2c0b6b22bbeed5da06293608f3be844d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_export_buffer</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val)</argsstring>
        <name>snd_pcm_hw_params_set_export_buffer</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to allow the buffer to be accessible from outside. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disable, 1 = enable (default) exporting buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="786" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4625" bodyend="4634"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gafec078cf053a87339ba91c0f605dca54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_export_buffer</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_get_export_buffer</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Extract buffer accessibility from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disable, 1 = enable exporting buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="787" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4643" bodyend="4648"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gac2761ded0a51cabc953beac44f65972b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_wakeup</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val)</argsstring>
        <name>snd_pcm_hw_params_set_period_wakeup</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to settings without period wakeups. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disable, 1 = enable (default) period wakeup </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise a negative error code.</para></simplesect>
This function must be called only on devices where non-blocking mode is enabled.</para><para>To check whether the hardware does support disabling period wakeups, call <ref refid="group___p_c_m___h_w___params_1gad0f8922537619c70e41bf07eb740e54f" kindref="member">snd_pcm_hw_params_can_disable_period_wakeup()</ref>. If the hardware does not support this mode, standard period wakeups will be generated.</para><para>Even with disabled period wakeups, the period size/time/count parameters are valid; it is suggested to use <ref refid="group___p_c_m___h_w___params_1gad0bce0ad23b3b708858bb20df81e09a2" kindref="member">snd_pcm_hw_params_set_period_size_last()</ref>.</para><para>When period wakeups are disabled, the application must not use any functions that could block on this device. The use of poll should be limited to error cases. The application needs to use an external event or a timer to check the state of the ring buffer and refill it apropriately. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="788" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4672" bodyend="4685"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga426a657640410a4c6a652ab15eb57acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_period_wakeup</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val)</argsstring>
        <name>snd_pcm_hw_params_get_period_wakeup</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Extract period wakeup flag from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disabled, 1 = enabled period wakeups </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="789" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4694" bodyend="4699"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga71f5d43bf63dc7292b8b58f17acccf89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_period_time</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_period_time</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract period time from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate period duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the configuration space does not contain a single value</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="791" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4713" bodyend="4717"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gae68d4b168ef5d40f644a1a4ed854689f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_period_time_min</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_period_time_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract minimum period time from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum period duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="792" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4731" bodyend="4735"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga74b510f4958e90a83a631a1eeedf13e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_period_time_max</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_period_time_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract maximum period time from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum period duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="793" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4749" bodyend="4753"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaf1f6452ad189be5c4e1ab3bd86f2f6d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_period_time</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir)</argsstring>
        <name>snd_pcm_hw_params_test_period_time</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Verify if a period time is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate period duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="794" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4765" bodyend="4768"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaa2bc2a32d3971521064741a30e10c92f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_time</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_time</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one period time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate period duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="795" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4780" bodyend="4783"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga2dc9fcdb1b30126a20d96a65c7826d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_time_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_time_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a minimum period time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum period duration in us (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact minimum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="796" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4796" bodyend="4799"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaad53e3af1f1fe522c3d902f5403954d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_time_max</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_time_max</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a maximum period time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum period duration in us (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact maximum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="797" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4811" bodyend="4814"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga993e05e43a31a6151427ba1f793c0b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_time_minmax</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir)</argsstring>
        <name>snd_pcm_hw_params_set_period_time_minmax</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mindir</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>maxdir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have period times in a given range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum period duration in us (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mindir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for minimum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum period duration in us (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxdir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for maximum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact min/max is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="798" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4828" bodyend="4831"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaa22d4f917c300b0c1f47b348c23705a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_time_near</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_time_near</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have period time nearest to a target. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate target period duration in us / returned chosen approximate target period duration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space is empty</para></simplesect>
target/chosen exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="799" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4846" bodyend="4850"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga478e50e1fa7395af70100b906c31cb67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_time_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_time_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its minimum period time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate period duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="800" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4865" bodyend="4869"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga2d48b4bee369912b0fc9b245d6c7a52d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_time_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_time_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its maximum period time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned maximum approximate period time </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>approximate period duration in us </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="801" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4882" bodyend="4886"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaba48ea189171536f9793e0d99e6db5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_period_size</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *frames, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_period_size</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>frames</declname>
          <defname>val</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract period size from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate period size in frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the configuration space does not contain a single value</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="803" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4901" bodyend="4909"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga3f6fe37605b54d0a25e8bf1d10f71ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_period_size_min</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *frames, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_period_size_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>frames</declname>
          <defname>val</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract minimum period size from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum period size in frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="804" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4923" bodyend="4931"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gab5c16621ae697e5ee6f442ec7b7062c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_period_size_max</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *frames, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_period_size_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>frames</declname>
          <defname>val</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract maximum period size from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum period size in frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="805" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4945" bodyend="4953"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gabc8712dab6cb135176de77f374d7ee17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_period_size</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t val, int dir)</argsstring>
        <name>snd_pcm_hw_params_test_period_size</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Verify if a period size is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate period size in frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="806" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4965" bodyend="4968"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga874c977dd9aac275c87a7b1c33a0dec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_size</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t val, int dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_size</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one period size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate period size in frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="807" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4980" bodyend="4983"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga58e0468994d935f08080d9654f1b48b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_size_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_size_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a minimum period size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum period size in frames (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact minimum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="808" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="4995" bodyend="5002"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga909f442c3d8c20b79de2edf6cc5ded41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_size_max</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_size_max</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a maximum period size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum period size in frames (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact minimum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="809" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5014" bodyend="5021"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga33c901f8364cb2533d6cdeba732e0e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_size_minmax</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *min, int *mindir, snd_pcm_uframes_t *max, int *maxdir)</argsstring>
        <name>snd_pcm_hw_params_set_period_size_minmax</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mindir</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>maxdir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have period sizes in a given range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum period size in frames (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mindir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for minimum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum period size in frames (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxdir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for maximum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact min/max is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="810" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5035" bodyend="5043"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga9162045265f283c532634506456cab09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_size_near</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_size_near</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have period size nearest to a target. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate target period size in frames / returned chosen approximate target period size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space is empty</para></simplesect>
target/chosen exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="811" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5058" bodyend="5066"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaf74bbb66a71ece8260be20502822335b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_size_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_size_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its minimum period size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned maximum approximate period size in frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="812" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5081" bodyend="5089"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gad0bce0ad23b3b708858bb20df81e09a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_size_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_period_size_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its maximum period size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned maximum approximate period size in frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="813" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5104" bodyend="5112"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga13bc85ca5fe34b19112579a7e27cf41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_period_size_integer</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_set_period_size_integer</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only integer period sizes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="814" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5120" bodyend="5123"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga7242d7045ae23a9ae736c191030c25e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_periods</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_periods</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract periods from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate periods per buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the configuration space does not contain a single value</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="816" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5138" bodyend="5142"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga17f3826360b0fe1f47c696388d25ac93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_periods_min</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_periods_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract minimum periods count from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum periods per buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="817" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5156" bodyend="5160"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga60417687267cd6ddc56a9c15179fe275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_periods_max</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_periods_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract maximum periods count from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum periods per buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="818" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5174" bodyend="5178"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga0de7350f433935a995d439fe38f55088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_periods</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir)</argsstring>
        <name>snd_pcm_hw_params_test_periods</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Verify if a periods count is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate periods per buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="819" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5190" bodyend="5193"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga472aa3f2d8ce4040caa874fe60aba961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_periods</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir)</argsstring>
        <name>snd_pcm_hw_params_set_periods</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one periods count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate periods per buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="820" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5205" bodyend="5208"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaa2642b54ed1c2e26e595ecf3d5b29edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_periods_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_periods_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a minimum periods count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum periods per buffer (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact minimum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="821" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5220" bodyend="5223"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga636d1d9a6333fb2acc8a6e84391ea0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_periods_max</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_periods_max</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a maximum periods count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum periods per buffer (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact maximum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="822" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5235" bodyend="5238"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaf638d94e53872415d3bb6d9169104891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_periods_minmax</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir)</argsstring>
        <name>snd_pcm_hw_params_set_periods_minmax</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mindir</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>maxdir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have periods counts in a given range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum periods per buffer (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mindir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for minimum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum periods per buffer (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxdir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for maximum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact min/max is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="823" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5252" bodyend="5255"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga2fadb73803f58b900ac34846c14894ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_periods_near</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_periods_near</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have periods count nearest to a target. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate target periods per buffer / returned chosen approximate target periods per buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space is empty</para></simplesect>
target/chosen exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="824" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5270" bodyend="5274"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaa8fbd81ce54fac30f60768fb36210a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_periods_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_periods_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its minimum periods count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate minimum periods per buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="825" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5289" bodyend="5293"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga1366dd00b920ef459d2dbf8a64408725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_periods_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_periods_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its maximum periods count. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate maximum periods per buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="826" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5308" bodyend="5312"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gab7356d30758dfcf11ff5874fd033913b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_periods_integer</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params)</argsstring>
        <name>snd_pcm_hw_params_set_periods_integer</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only integer periods counts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="827" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5320" bodyend="5323"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gabdea994550dbf7ab176e3c90baa3a30b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_buffer_time</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_buffer_time</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract buffer time from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned buffer time in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the configuration space does not contain a single value</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="829" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5338" bodyend="5342"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaa18c9999c27632f6c47e163b6af17fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_buffer_time_min</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_buffer_time_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract minimum buffer time from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum buffer duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="830" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5356" bodyend="5360"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga67a33176f4f05231863b37b09527c0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_buffer_time_max</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_get_buffer_time_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Extract maximum buffer time from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum buffer duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="831" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5374" bodyend="5378"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga9b6bf73e2a0b7f887f3d7d85a988eb7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_buffer_time</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir)</argsstring>
        <name>snd_pcm_hw_params_test_buffer_time</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Verify if a buffer time is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate buffer duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="832" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5390" bodyend="5393"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gacad42b93e31bca4c9b4074d6ec236d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_time</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_time</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one buffer time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate buffer duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="833" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5405" bodyend="5408"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga2a7cb8c29b2fb75b615366dd40a7dc13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_time_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_time_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a minimum buffer time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum buffer duration in us (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact minimum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="834" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5420" bodyend="5423"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gab80680ff70b72435addde58e88fc1d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_time_max</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_time_max</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a maximum buffer time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum buffer duration in us (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact maximum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="835" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5435" bodyend="5438"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga84964e55717a7db70b55f320b56f343f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_time_minmax</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_time_minmax</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mindir</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>maxdir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have buffer times in a given range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum buffer duration in us (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mindir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for minimum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum buffer duration in us (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxdir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for maximum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact min/max is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="836" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5452" bodyend="5455"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga3bc1b188576d6d2daae9c56024813d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_time_near</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_time_near</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have buffer time nearest to a target. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate target buffer duration in us / returned chosen approximate target buffer duration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space is empty</para></simplesect>
target/chosen exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="837" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5470" bodyend="5474"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga6a29e5f80671ca89d0c185416b5a6c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_time_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_time_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its minimum buffer time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate minimum buffer duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="838" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5489" bodyend="5493"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaec8788f14a0c5452dada23a49cdd4b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_time_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_time_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its maximum buffered time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate maximum buffer duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="839" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5508" bodyend="5512"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gab6556fcaaf926360d2064044a6f6cfb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_buffer_size</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_hw_params_get_buffer_size</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Extract buffer size from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned buffer size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the configuration space does not contain a single value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="841" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5524" bodyend="5532"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga182adecca0ad204a34b27cdaa9d4f672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_buffer_size_min</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_hw_params_get_buffer_size_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Extract minimum buffer size from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate minimum buffer size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="842" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5543" bodyend="5551"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga3caf61ab086028067b602d48182df708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_buffer_size_max</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_hw_params_get_buffer_size_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Extract maximum buffer size from a configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate maximum buffer size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="843" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5564" bodyend="5572"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga3ce81a7fe9f677849881f1cfd3b5cb7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_buffer_size</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_hw_params_test_buffer_size</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Verify if a buffer size is available inside a configuration space for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="844" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5583" bodyend="5586"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga828cf9e11fe84137c2c8d4938a6fca7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_size</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_size</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only one buffer size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="845" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5597" bodyend="5600"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gacc0d26a23389470eae502a3c9f4a2980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_size_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_size_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a minimum buffer size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum buffer size in frames (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="846" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5609" bodyend="5616"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gac36099175c6a85db4a1e51053d5708af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_size_max</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_size_max</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space with a maximum buffer size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum buffer size in frames (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="847" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5625" bodyend="5632"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaec830be678524b0a6a173896bc9d2c67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_size_minmax</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *min, snd_pcm_uframes_t *max)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_size_minmax</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have buffer sizes in a given range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum buffer size in frames (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum buffer size in frames (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="848" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5642" bodyend="5650"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga2c00cb635d374030595dbc27b7a983a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_size_near</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_size_near</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to have buffer size nearest to a target. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate target buffer size in frames / returned chosen approximate target buffer size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="849" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5662" bodyend="5670"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gaca09ba489988fe957fde43cb9dca56a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_size_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_size_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its minimum buffer size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned minimum buffer size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>buffer size in frames </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="850" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5682" bodyend="5690"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1gade5604a3fe1de55c76942ee4f4e41219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_buffer_size_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_hw_params_set_buffer_size_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Restrict a configuration space to contain only its maximum buffer size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned maximum buffer size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="851" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5702" bodyend="5710"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___h_w___params_1ga254712953cb8abe8b1d8478233863217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_min_align</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_hw_params_get_min_align</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get the minimum transfer align value in samples. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned minimum align value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the configuration space does not contain a single value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="855" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5910" bodyend="5931"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga7886ee5b3a48fb58ef8f70886472029a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_pcm_sw_params_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_pcm_sw_params_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="866" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5990" bodyend="5993"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga23382b62e7fc0de94b279c9f5dd08e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_malloc</definition>
        <argsstring>(snd_pcm_sw_params_t **ptr)</argsstring>
        <name>snd_pcm_sw_params_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="872" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6000" bodyend="6007"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga35af2df23ec46619a82cb52e3733d47a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_sw_params_free</definition>
        <argsstring>(snd_pcm_sw_params_t *obj)</argsstring>
        <name>snd_pcm_sw_params_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="873" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6013" bodyend="6016"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1gafe9ebe9ea669012af58b728d55fc295b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_sw_params_copy</definition>
        <argsstring>(snd_pcm_sw_params_t *dst, const snd_pcm_sw_params_t *src)</argsstring>
        <name>snd_pcm_sw_params_copy</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="874" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6023" bodyend="6027"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga8bdb67600cf3c0705518b6c0a79c56fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_boundary</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_boundary</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get boundary for ring pointers from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned boundary in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="875" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6035" bodyend="6040"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1gac2fba23ba6ac1636785e27f0f5381a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_tstamp_mode</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_tstamp_t val)</argsstring>
        <name>snd_pcm_sw_params_set_tstamp_mode</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga695a9755880cf886c13d07938f92ea77" kindref="member">snd_pcm_tstamp_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set timestamp mode inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="879" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6144" bodyend="6154"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga4caef7435210cd7f4878d55dadeed0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_tstamp_mode</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_tstamp_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_tstamp_mode</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga695a9755880cf886c13d07938f92ea77" kindref="member">snd_pcm_tstamp_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get timestamp mode from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="880" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6165" bodyend="6171"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga912bad749f6317000eede607bb0bc935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_tstamp_type</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_tstamp_type_t val)</argsstring>
        <name>snd_pcm_sw_params_set_tstamp_type</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c" kindref="member">snd_pcm_tstamp_type_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set timestamp type inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="881" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6180" bodyend="6189"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga1cd956ea3dc0e32e32abc99af50f0819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_tstamp_type</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_tstamp_type_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_tstamp_type</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga6e7869809e23ed1a3595e94fbd9a275c" kindref="member">snd_pcm_tstamp_type_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get timestamp type from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned timestamp type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="882" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6197" bodyend="6202"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga79b12cbbd309750156261e7f5a39167b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_avail_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_avail_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set avail min inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum avail frames to consider PCM ready </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Note: This is similar to setting an OSS wakeup point. The valid values for &apos;val&apos; are determined by the specific hardware. Most PC sound cards can only accept power of 2 frame counts (i.e. 512, 1024, 2048). You cannot use this as a high resolution timer - it is limited to how often the sound card hardware raises an interrupt. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="883" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6253" bodyend="6265"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga587ccbb0b025dc97d2af5db9516163d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_avail_min</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_avail_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get avail min from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>returned minimum available frames to consider PCM ready </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="884" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6276" bodyend="6282"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1gaf62ce50d6242b4f4dc9d6534a97e5c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_period_event</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, int val)</argsstring>
        <name>snd_pcm_sw_params_set_period_event</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set period event inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>0 = disable period event, 1 = enable period event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
An poll (select) wakeup event is raised if enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="885" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6293" bodyend="6298"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga0458a8fe480a7887726748052bd77211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_period_event</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, int *val)</argsstring>
        <name>snd_pcm_sw_params_get_period_event</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get period event from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>returned period event state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="886" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6306" bodyend="6311"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga1d338f1f7e33b7a6d0f9a8f61f87f057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_start_threshold</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_start_threshold</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set start threshold inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Start threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
PCM is automatically started when playback frames available to PCM are &gt;= threshold or when requested capture frames are &gt;= threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="887" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6358" bodyend="6364"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga1ee7116c68bdea12606aab57db86a1d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_start_threshold</definition>
        <argsstring>(const snd_pcm_sw_params_t *paramsm, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_start_threshold</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>paramsm</declname>
          <defname>params</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get start threshold from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned start threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
PCM is automatically started when playback frames available to PCM are &gt;= threshold or when requested capture frames are &gt;= threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="888" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6378" bodyend="6384"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga6a41bf533207d56fdb1ff10aeeac28e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_stop_threshold</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_stop_threshold</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set stop threshold inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Stop threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
PCM is automatically stopped in <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860ab63b5b90201110cd586b686355fd5d83" kindref="member">SND_PCM_STATE_XRUN</ref> state when available frames is &gt;= threshold. If the stop threshold is equal to boundary (also software parameter - sw_param) then automatic stop will be disabled (thus device will do the endless loop in the ring buffer). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="889" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6402" bodyend="6408"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga8a55577d7f3d8e4ce63a710921199c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_stop_threshold</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_stop_threshold</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get stop threshold from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned stop threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
PCM is automatically stopped in <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860ab63b5b90201110cd586b686355fd5d83" kindref="member">SND_PCM_STATE_XRUN</ref> state when available frames is &gt;= threshold. If the stop threshold is equal to boundary (also software parameter - sw_param) then automatic stop will be disabled (thus device will do the endless loop in the ring buffer). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="890" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6424" bodyend="6430"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_silence_threshold</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_silence_threshold</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set silence threshold inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Silence threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
A portion of playback buffer is overwritten with silence (see <ref refid="group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3" kindref="member">snd_pcm_sw_params_set_silence_size</ref>) when playback underrun is nearer than silence threshold. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="891" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6447" bodyend="6458"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga896ece8b418f6d6e92d2df5a4b59c3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_silence_threshold</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_silence_threshold</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get silence threshold from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned silence threshold in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error value</para></simplesect>
A portion of playback buffer is overwritten with silence (see <ref refid="group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3" kindref="member">snd_pcm_sw_params_set_silence_size</ref>) when playback underrun is nearer than silence threshold. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="892" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6473" bodyend="6479"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1gaeb4a335a16981b5ea3fa671946fbdca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_silence_size</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val)</argsstring>
        <name>snd_pcm_sw_params_set_silence_size</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set silence size inside a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Silence size in frames (0 for disabled) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
A portion of playback buffer is overwritten with silence when playback underrun is nearer than silence threshold (see <ref refid="group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b" kindref="member">snd_pcm_sw_params_set_silence_threshold</ref>)</para><para>The special case is when silence size value is equal or greater than boundary. The unused portion of the ring buffer (initial written samples are untouched) is filled with silence at start. Later, only just processed sample area is filled with silence. Note: silence_threshold must be set to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="893" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6501" bodyend="6512"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___s_w___params_1ga6a197020c09c8a20e697d12e9fac3e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_silence_size</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val)</argsstring>
        <name>snd_pcm_sw_params_get_silence_size</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get silence size from a software configuration container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned silence size in frames (0 for disabled) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
A portion of playback buffer is overwritten with silence when playback underrun is nearer than silence threshold (see <ref refid="group___p_c_m___s_w___params_1ga5a0158bf962f20bd9fd5ed2c52dd682b" kindref="member">snd_pcm_sw_params_set_silence_threshold</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="894" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6527" bodyend="6533"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1ga963ead3f1169f4b5e03a2968adc9cb0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_pcm_access_mask_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_pcm_access_mask_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="914" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3606" bodyend="3609"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1gafedd1f9c96aa8a93ab7f2c0135de3780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_access_mask_malloc</definition>
        <argsstring>(snd_pcm_access_mask_t **ptr)</argsstring>
        <name>snd_pcm_access_mask_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an empty <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="920" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3616" bodyend="3623"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1ga965129493161fae3ab534209b7e6b2bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_access_mask_free</definition>
        <argsstring>(snd_pcm_access_mask_t *obj)</argsstring>
        <name>snd_pcm_access_mask_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="921" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3629" bodyend="3632"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1ga4fc7338c7c0cd715ea384d4e308d5925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_access_mask_copy</definition>
        <argsstring>(snd_pcm_access_mask_t *dst, const snd_pcm_access_mask_t *src)</argsstring>
        <name>snd_pcm_access_mask_copy</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="922" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3639" bodyend="3643"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1gaa8202ce90275d6dfe2623cbacbc93708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_access_mask_none</definition>
        <argsstring>(snd_pcm_access_mask_t *mask)</argsstring>
        <name>snd_pcm_access_mask_none</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>reset all bits in a <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="923" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3649" bodyend="3652"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1ga76b2575826977951a862c5e78e81993c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_access_mask_any</definition>
        <argsstring>(snd_pcm_access_mask_t *mask)</argsstring>
        <name>snd_pcm_access_mask_any</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>set all bits in a <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="924" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3658" bodyend="3661"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1ga381ade7f78d8614b38dde36ba0393f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_access_mask_test</definition>
        <argsstring>(const snd_pcm_access_mask_t *mask, snd_pcm_access_t val)</argsstring>
        <name>snd_pcm_access_mask_test</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>test the presence of an access type in a <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>access type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="925" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3668" bodyend="3671"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1ga224e84b7b1362aea503b0595512bac77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_access_mask_empty</definition>
        <argsstring>(const snd_pcm_access_mask_t *mask)</argsstring>
        <name>snd_pcm_access_mask_empty</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>test, if given a <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> is empty </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not empty </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>empty </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="926" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3679" bodyend="3682"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1gadc0a0f989a9faca8b25b2c35d4b14e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_access_mask_set</definition>
        <argsstring>(snd_pcm_access_mask_t *mask, snd_pcm_access_t val)</argsstring>
        <name>snd_pcm_access_mask_set</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>make an access type present in a <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>access type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="927" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3689" bodyend="3692"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___access_1ga35c6aaf5b55ef8dd1c4939467869db86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_access_mask_reset</definition>
        <argsstring>(snd_pcm_access_mask_t *mask, snd_pcm_access_t val)</argsstring>
        <name>snd_pcm_access_mask_reset</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>make an access type missing from a <ref refid="group___p_c_m_1ga7f9575bcc94c7c2cf5d688a45c16ffba" kindref="member">snd_pcm_access_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>access type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="928" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3699" bodyend="3702"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1gaf260158e21491d2dfff62aa2b2ff06d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_pcm_format_mask_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_pcm_format_mask_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="939" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3708" bodyend="3711"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1gace20f58f4a93c39b006fd13bfd642da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_mask_malloc</definition>
        <argsstring>(snd_pcm_format_mask_t **ptr)</argsstring>
        <name>snd_pcm_format_mask_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an empty <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="945" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3718" bodyend="3725"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1ga3a8b2f75bcf9e2b33602297123a6f3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_format_mask_free</definition>
        <argsstring>(snd_pcm_format_mask_t *obj)</argsstring>
        <name>snd_pcm_format_mask_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="946" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3731" bodyend="3734"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1ga5fa45349fe88454faac051f476629174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_format_mask_copy</definition>
        <argsstring>(snd_pcm_format_mask_t *dst, const snd_pcm_format_mask_t *src)</argsstring>
        <name>snd_pcm_format_mask_copy</name>
        <param>
          <type><ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="947" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3741" bodyend="3745"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1ga42342f7e5dd7c1c8401482d8db9c1013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_format_mask_none</definition>
        <argsstring>(snd_pcm_format_mask_t *mask)</argsstring>
        <name>snd_pcm_format_mask_none</name>
        <param>
          <type><ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>reset all bits in a <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="948" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3751" bodyend="3754"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1ga56f394e000ea4aadf73d1fb97fd994cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_format_mask_any</definition>
        <argsstring>(snd_pcm_format_mask_t *mask)</argsstring>
        <name>snd_pcm_format_mask_any</name>
        <param>
          <type><ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>set all bits in a <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="949" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3760" bodyend="3763"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1gaecb1d19be63a1b18456300eb4d07a8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_mask_test</definition>
        <argsstring>(const snd_pcm_format_mask_t *mask, snd_pcm_format_t val)</argsstring>
        <name>snd_pcm_format_mask_test</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>test the presence of a format in a <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="950" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3770" bodyend="3773"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1gaa942122189c757a1178749cebeb73d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_mask_empty</definition>
        <argsstring>(const snd_pcm_format_mask_t *mask)</argsstring>
        <name>snd_pcm_format_mask_empty</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>test, if given a <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> is empty </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not empty </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>empty </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="951" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3781" bodyend="3784"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1ga03fa8dcc8da3dbecc164143b43d40056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_format_mask_set</definition>
        <argsstring>(snd_pcm_format_mask_t *mask, snd_pcm_format_t val)</argsstring>
        <name>snd_pcm_format_mask_set</name>
        <param>
          <type><ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>make a format present in a <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="952" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3791" bodyend="3794"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___format_1ga60cdd13f69735c11cfaa0856b0f25a3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_format_mask_reset</definition>
        <argsstring>(snd_pcm_format_mask_t *mask, snd_pcm_format_t val)</argsstring>
        <name>snd_pcm_format_mask_reset</name>
        <param>
          <type><ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>make a format missing from a <ref refid="group___p_c_m_1ga0936aa9ac0051a3611583a2740915545" kindref="member">snd_pcm_format_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="953" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3801" bodyend="3804"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1gaab4db5767975e4c4e7a54fe11450085e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_pcm_subformat_mask_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_pcm_subformat_mask_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="964" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3811" bodyend="3814"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1ga4a9eb9095b23b4e338aa390e515d5eb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_subformat_mask_malloc</definition>
        <argsstring>(snd_pcm_subformat_mask_t **ptr)</argsstring>
        <name>snd_pcm_subformat_mask_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an empty <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="970" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3821" bodyend="3828"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1ga1e0e09005efe4c7b34819defdb4d1308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_subformat_mask_free</definition>
        <argsstring>(snd_pcm_subformat_mask_t *obj)</argsstring>
        <name>snd_pcm_subformat_mask_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="971" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3834" bodyend="3837"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1gad5f8e09819ff0d6d4175d794670703af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_subformat_mask_copy</definition>
        <argsstring>(snd_pcm_subformat_mask_t *dst, const snd_pcm_subformat_mask_t *src)</argsstring>
        <name>snd_pcm_subformat_mask_copy</name>
        <param>
          <type><ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="972" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3844" bodyend="3848"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1ga3b87315e56fed79bbf265790ff5f6e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_subformat_mask_none</definition>
        <argsstring>(snd_pcm_subformat_mask_t *mask)</argsstring>
        <name>snd_pcm_subformat_mask_none</name>
        <param>
          <type><ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>reset all bits in a <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="973" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3854" bodyend="3857"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1gad065ae392b7bdeb4b32708cc9909dac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_subformat_mask_any</definition>
        <argsstring>(snd_pcm_subformat_mask_t *mask)</argsstring>
        <name>snd_pcm_subformat_mask_any</name>
        <param>
          <type><ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>set all bits in a <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="974" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3863" bodyend="3866"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1ga2070ce06de13f676eb925c28db92c8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_subformat_mask_test</definition>
        <argsstring>(const snd_pcm_subformat_mask_t *mask, snd_pcm_subformat_t val)</argsstring>
        <name>snd_pcm_subformat_mask_test</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>test the presence of a subformat in a <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>subformat </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="975" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3873" bodyend="3876"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1ga642323afb10ecd348ebf4eacb1cc0ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_subformat_mask_empty</definition>
        <argsstring>(const snd_pcm_subformat_mask_t *mask)</argsstring>
        <name>snd_pcm_subformat_mask_empty</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>test, if given a <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> is empty </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not empty </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>empty </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="976" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3884" bodyend="3887"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1gab5a57e4ba0d3747ebc5b959460c0037f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_subformat_mask_set</definition>
        <argsstring>(snd_pcm_subformat_mask_t *mask, snd_pcm_subformat_t val)</argsstring>
        <name>snd_pcm_subformat_mask_set</name>
        <param>
          <type><ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>make a subformat present in a <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>subformat </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="977" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3894" bodyend="3897"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___sub_format_1gad1033cc4c9d843e516833c222f2a570a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_subformat_mask_reset</definition>
        <argsstring>(snd_pcm_subformat_mask_t *mask, snd_pcm_subformat_t val)</argsstring>
        <name>snd_pcm_subformat_mask_reset</name>
        <param>
          <type><ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>make a subformat missing from a <ref refid="group___p_c_m_1ga891b054202089747199bc3348b9d9630" kindref="member">snd_pcm_subformat_mask_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>subformat </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="978" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3904" bodyend="3907"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga6a8ae2a4786419af7853687a99436d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_pcm_status_sizeof</definition>
        <argsstring>(void)</argsstring>
        <name>snd_pcm_status_sizeof</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get size of <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="989" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6540" bodyend="6543"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gaa97cf9bdc31e686fe491985486194a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_status_malloc</definition>
        <argsstring>(snd_pcm_status_t **ptr)</argsstring>
        <name>snd_pcm_status_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="995" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6550" bodyend="6557"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gaeb0a7ff880647e7255cb58904270106b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_free</definition>
        <argsstring>(snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_free</name>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>frees a previously allocated <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="996" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6563" bodyend="6566"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga307827ec2057b969520c7508fe41dd63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_copy</definition>
        <argsstring>(snd_pcm_status_t *dst, const snd_pcm_status_t *src)</argsstring>
        <name>snd_pcm_status_copy</name>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy one <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> to another </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="997" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6573" bodyend="6577"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gabaae998f0d374c50195b3206d1e43659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" kindref="member">snd_pcm_state_t</ref></type>
        <definition>snd_pcm_state_t snd_pcm_status_get_state</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_state</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get state from a PCM status container (see <ref refid="group___p_c_m_1ga87896f6f17020fc19835790369e7ce75" kindref="member">snd_pcm_state</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PCM state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="998" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6584" bodyend="6588"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga5eaeff98814e96c2ffd5f04c95b22c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_trigger_tstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_timestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_trigger_tstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1gadd377862d568809fb0e32c9faddf99a4" kindref="member">snd_timestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get trigger timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp</para></parameterdescription>
</parameteritem>
</parameterlist>
Trigger means a PCM state transition (from stopped to running or versa vice). It applies also to pause and suspend. In other words, timestamp contains time when stream started or when it was stopped. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="999" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6599" bodyend="6604"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gab1c832aedb25670d010c53d9081a4b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_trigger_htstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_trigger_htstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get trigger hi-res timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp</para></parameterdescription>
</parameteritem>
</parameterlist>
Trigger means a PCM state transition (from stopped to running or versa vice). It applies also to pause and suspend. In other words, timestamp contains time when stream started or when it was stopped. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1000" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6618" bodyend="6623"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gaea54e0a110afa01dd42071a1ca43902e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_tstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_timestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_tstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1gadd377862d568809fb0e32c9faddf99a4" kindref="member">snd_timestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get &quot;now&quot; timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1001" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6631" bodyend="6636"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gafa66bda27a6b914e66e053bb76571013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_htstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_htstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get &quot;now&quot; hi-res timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1002" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6646" bodyend="6651"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga15d17e74f3352e189df5ccd4cc4c116d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_audio_htstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_audio_htstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get &quot;now&quot; hi-res audio timestamp from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1003" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6659" bodyend="6663"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga6ee47c7a98005629ec691eae4b7f1b0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_driver_htstamp</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_htimestamp_t *ptr)</argsstring>
        <name>snd_pcm_status_get_driver_htstamp</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="group___global_1ga3a3f5b65c40f498cdbc26944bd9855cf" kindref="member">snd_htimestamp_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get &quot;now&quot; hi-res driver timestamp from a PCM status container. Defines when the status was generated by driver, may differ from normal timestamp. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned timestamp </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1004" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6671" bodyend="6675"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga79a7e633c36d79aab76c3b4ee39e1588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_get_audio_htstamp_report</definition>
        <argsstring>(const snd_pcm_status_t *obj, snd_pcm_audio_tstamp_report_t *audio_tstamp_report)</argsstring>
        <name>snd_pcm_status_get_audio_htstamp_report</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structsnd__pcm__audio__tstamp__report__t" kindref="compound">snd_pcm_audio_tstamp_report_t</ref> *</type>
          <declname>audio_tstamp_report</declname>
        </param>
        <briefdescription>
<para>Get audio_tstamp_report from a PCM status container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to returned report (valid fields are accuracy and type) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1005" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6682" bodyend="6689"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gad0dba60f0f312167755500cb49e24eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_status_set_audio_htstamp_config</definition>
        <argsstring>(snd_pcm_status_t *obj, snd_pcm_audio_tstamp_config_t *audio_tstamp_config)</argsstring>
        <name>snd_pcm_status_set_audio_htstamp_config</name>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structsnd__pcm__audio__tstamp__config__t" kindref="compound">snd_pcm_audio_tstamp_config_t</ref> *</type>
          <declname>audio_tstamp_config</declname>
        </param>
        <briefdescription>
<para>set audio_tstamp_config from a PCM status container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to config (valid fields are type and report_analog_delay) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1007" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6696" bodyend="6701"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga24c8a320ba5c66f9b6a605735d33a2ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void snd_pcm_pack_audio_tstamp_config</definition>
        <argsstring>(unsigned int *data, snd_pcm_audio_tstamp_config_t *config)</argsstring>
        <name>snd_pcm_pack_audio_tstamp_config</name>
        <param>
          <type>unsigned int *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structsnd__pcm__audio__tstamp__config__t" kindref="compound">snd_pcm_audio_tstamp_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1010" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1010" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gaf753b32cb55ee05440800d1095f4bdb1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void snd_pcm_unpack_audio_tstamp_report</definition>
        <argsstring>(unsigned int data, unsigned int accuracy, snd_pcm_audio_tstamp_report_t *report)</argsstring>
        <name>snd_pcm_unpack_audio_tstamp_report</name>
        <param>
          <type>unsigned int</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>accuracy</declname>
        </param>
        <param>
          <type><ref refid="structsnd__pcm__audio__tstamp__report__t" kindref="compound">snd_pcm_audio_tstamp_report_t</ref> *</type>
          <declname>report</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1018" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" bodystart="1018" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga1fdce3985e64f66385a5805da1110f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_status_get_delay</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_delay</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get delay from a PCM status container (see <ref refid="group___p_c_m_1ga012e8b999070e72ab23514f25e7d6482" kindref="member">snd_pcm_delay</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Delay in frames</para></simplesect>
Delay is distance between current application frame position and sound frame position. It&apos;s positive and less than buffer size in normal situation, negative on playback underrun and greater than buffer size on capture overrun. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1028" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6713" bodyend="6717"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga91c110525060b925ad4f0c21c205b757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_status_get_avail</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_avail</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get number of frames available from a PCM status container (see <ref refid="group___p_c_m_1ga8bb836bd0c414b59789d51a5f5379c08" kindref="member">snd_pcm_avail_update</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of frames ready to be read/written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1029" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6723" bodyend="6727"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1gac58d13e4d03c9420c57428ddffd94964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_status_get_avail_max</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_avail_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get maximum number of frames available from a PCM status container after last <ref refid="group___p_c_m_1ga32891eaac37741728a9b23027012c892" kindref="member">snd_pcm_status</ref> call. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum number of frames ready to be read/written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1030" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6733" bodyend="6737"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___status_1ga3f4bfd0a0327529abaa621b248b6b1aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_status_get_overrange</definition>
        <argsstring>(const snd_pcm_status_t *obj)</argsstring>
        <name>snd_pcm_status_get_overrange</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get count of ADC overrange detections since last call. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Count of ADC overrange detections </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1031" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6743" bodyend="6747"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1ga1089d73f52de6e7b724f7453d6f48f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_type_name</definition>
        <argsstring>(snd_pcm_type_t type)</argsstring>
        <name>snd_pcm_type_name</name>
        <param>
          <type><ref refid="group___p_c_m_1gaca6314f46f54a0b62536c403bbb62601" kindref="member">snd_pcm_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>get name of PCM type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of PCM type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1042" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2102" bodyend="2108"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1gafea7e7c65133faec1da1ef8b2d079578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_stream_name</definition>
        <argsstring>(const snd_pcm_stream_t stream)</argsstring>
        <name>snd_pcm_stream_name</name>
        <param>
          <type>const <ref refid="group___p_c_m_1gac23b43ff55add78638e503b9cc892c24" kindref="member">snd_pcm_stream_t</ref></type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>get name of PCM stream type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM stream type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of PCM stream type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1043" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1932" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1ga1406fe8388a612b8e44e5f3682d00e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_access_name</definition>
        <argsstring>(const snd_pcm_access_t _access)</argsstring>
        <name>snd_pcm_access_name</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>_access</declname>
          <defname>acc</defname>
        </param>
        <briefdescription>
<para>get name of PCM access type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>acc</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM access type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of PCM access type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1044" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1944" bodyend="1949"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1ga2ca258b8ac569ca35f283e48d2181e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_format_name</definition>
        <argsstring>(const snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_name</name>
        <param>
          <type>const <ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>get name of PCM sample format </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of PCM sample format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1045" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1956" bodyend="1961"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1gae201c92e3053c778bd7f2a4f5cc4d0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_format_description</definition>
        <argsstring>(const snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_description</name>
        <param>
          <type>const <ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>get description of PCM sample format </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii description of PCM sample format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1046" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1968" bodyend="1973"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1ga81beb8c430d897208269bd67bb3309b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_subformat_name</definition>
        <argsstring>(const snd_pcm_subformat_t subformat)</argsstring>
        <name>snd_pcm_subformat_name</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref></type>
          <declname>subformat</declname>
        </param>
        <briefdescription>
<para>get name of PCM sample subformat </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>subformat</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample subformat </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of PCM sample subformat </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1047" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2007" bodyend="2012"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1gaf4e162f7a059cbbf8c388cb9ed5e23fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_subformat_description</definition>
        <argsstring>(const snd_pcm_subformat_t subformat)</argsstring>
        <name>snd_pcm_subformat_description</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref></type>
          <declname>subformat</declname>
        </param>
        <briefdescription>
<para>get description of PCM sample subformat </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>subformat</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample subformat </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii description of PCM sample subformat </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1048" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2019" bodyend="2024"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1ga59f99dd9647315a7312d1f2b6204b7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
        <definition>snd_pcm_format_t snd_pcm_format_value</definition>
        <argsstring>(const char *name)</argsstring>
        <name>snd_pcm_format_value</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>get PCM sample format from name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format name (case insensitive) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PCM sample format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1049" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="1980" bodyend="2000"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1ga9a27f18595344de572cce51c4e52ec4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_tstamp_mode_name</definition>
        <argsstring>(const snd_pcm_tstamp_t mode)</argsstring>
        <name>snd_pcm_tstamp_mode_name</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga695a9755880cf886c13d07938f92ea77" kindref="member">snd_pcm_tstamp_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>get name of PCM tstamp mode setting </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM tstamp mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of PCM tstamp mode setting </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1050" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2063" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___description_1ga16ea2b82b7ea8f8c7b21e81aa6d28f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_state_name</definition>
        <argsstring>(const snd_pcm_state_t state)</argsstring>
        <name>snd_pcm_state_name</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga61ac499cb3701ce536d4d83725908860" kindref="member">snd_pcm_state_t</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>get name of PCM state </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of PCM state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1051" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2087" bodyend="2092"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___dump_1ga9c5c879409c504e155e234905d031d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_dump</definition>
        <argsstring>(snd_pcm_t *pcm, snd_output_t *out)</argsstring>
        <name>snd_pcm_dump</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Dump PCM info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1062" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2207" bodyend="2213"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___dump_1ga46dca88304617a198814f6cfc6ceafae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_dump_hw_setup</definition>
        <argsstring>(snd_pcm_t *pcm, snd_output_t *out)</argsstring>
        <name>snd_pcm_dump_hw_setup</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Dump current hardware setup for PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1063" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2117" bodyend="2139"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___dump_1ga97b72a21c2bb1ae553fa909c3d42c294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_dump_sw_setup</definition>
        <argsstring>(snd_pcm_t *pcm, snd_output_t *out)</argsstring>
        <name>snd_pcm_dump_sw_setup</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Dump current software setup for PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1064" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2147" bodyend="2166"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___dump_1ga3ac87790f8cb642e7afe4430e510572b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_dump_setup</definition>
        <argsstring>(snd_pcm_t *pcm, snd_output_t *out)</argsstring>
        <name>snd_pcm_dump_setup</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Dump current setup (hardware and software) for PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1065" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2174" bodyend="2179"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___dump_1ga10c221dcb86bcecd0d6fce4b1231cb49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_dump</definition>
        <argsstring>(snd_pcm_hw_params_t *params, snd_output_t *out)</argsstring>
        <name>snd_pcm_hw_params_dump</name>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Dump a PCM hardware configuration space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1066" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3227" bodyend="3235"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___dump_1gad6f510a9b1be8d88115a1192f9a52693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_dump</definition>
        <argsstring>(snd_pcm_sw_params_t *params, snd_output_t *out)</argsstring>
        <name>snd_pcm_sw_params_dump</name>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Dump a software configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1067" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5972" bodyend="5984"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___dump_1gaf2427b186609ad502666273342467a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_status_dump</definition>
        <argsstring>(snd_pcm_status_t *status, snd_output_t *out)</argsstring>
        <name>snd_pcm_status_dump</name>
        <param>
          <type><ref refid="group___p_c_m_1ga902b87281c46910b469d5f7aaafc1890" kindref="member">snd_pcm_status_t</ref> *</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Dump status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1068" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2187" bodyend="2199"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___direct_1ga6d4acf42de554d4d1177fb035d484ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_mmap_begin</definition>
        <argsstring>(snd_pcm_t *pcm, const snd_pcm_channel_area_t **areas, snd_pcm_uframes_t *offset, snd_pcm_uframes_t *frames)</argsstring>
        <name>snd_pcm_mmap_begin</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> **</type>
          <declname>areas</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Application request to access a portion of direct (mmap) area. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areas</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned mmap channel areas </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned mmap area offset in area steps (== frames) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>mmap area portion size in frames (wanted on entry, contiguous available on exit) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
It is necessary to call the <ref refid="group___p_c_m_1ga8bb836bd0c414b59789d51a5f5379c08" kindref="member">snd_pcm_avail_update()</ref> function directly before this call. Otherwise, this function can return a wrong count of available frames.</para><para>The function should be called before a sample-direct area can be accessed. The resulting size parameter is always less or equal to the input count of frames and can be zero, if no frames can be processed (the ring buffer is full).</para><para>See the <ref refid="group___p_c_m___direct_1gac306bd13c305825aa39dd9180a3ad520" kindref="member">snd_pcm_mmap_commit()</ref> function to finish the frame processing in the direct areas.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1079" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6979" bodyend="6992"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___direct_1gac306bd13c305825aa39dd9180a3ad520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_mmap_commit</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_uframes_t offset, snd_pcm_uframes_t frames)</argsstring>
        <name>snd_pcm_mmap_commit</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Application has completed the access to area requested with <ref refid="group___p_c_m___direct_1ga6d4acf42de554d4d1177fb035d484ea4" kindref="member">snd_pcm_mmap_begin</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>area offset in area steps (== frames) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>area portion size in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>count of transferred frames otherwise a negative error code</para></simplesect>
You should pass this function the offset value that <ref refid="group___p_c_m___direct_1ga6d4acf42de554d4d1177fb035d484ea4" kindref="member">snd_pcm_mmap_begin()</ref> returned. The frames parameter should hold the number of frames you have written or read to/from the audio buffer. The frames parameter must never exceed the contiguous frames count that <ref refid="group___p_c_m___direct_1ga6d4acf42de554d4d1177fb035d484ea4" kindref="member">snd_pcm_mmap_begin()</ref> returned. Each call to <ref refid="group___p_c_m___direct_1ga6d4acf42de554d4d1177fb035d484ea4" kindref="member">snd_pcm_mmap_begin()</ref> must be followed by a call to <ref refid="group___p_c_m___direct_1gac306bd13c305825aa39dd9180a3ad520" kindref="member">snd_pcm_mmap_commit()</ref>.</para><para>Example: <programlisting><codeline><highlight class="normal"><sp/>double<sp/>phase<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/>const<sp/>snd_pcm_area_t<sp/>*areas;</highlight></codeline>
<codeline><highlight class="normal"><sp/>snd_pcm_sframes_t<sp/>avail,<sp/>size,<sp/>commitres;</highlight></codeline>
<codeline><highlight class="normal"><sp/>snd_pcm_uframes_t<sp/>offset,<sp/>frames;</highlight></codeline>
<codeline><highlight class="normal"><sp/>int<sp/>err;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>avail<sp/>=<sp/>snd_pcm_avail_update(pcm);</highlight></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(avail<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>error(avail);</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>at<sp/>this<sp/>point,<sp/>we<sp/>can<sp/>transfer<sp/>at<sp/>least<sp/>&apos;avail&apos;<sp/>frames</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>we<sp/>want<sp/>to<sp/>process<sp/>frames<sp/>in<sp/>chunks<sp/>(period_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(avail<sp/>&lt;<sp/>period_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>goto<sp/>_skip;</highlight></codeline>
<codeline><highlight class="normal"><sp/>size<sp/>=<sp/>period_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>it<sp/>is<sp/>possible<sp/>that<sp/>contiguous<sp/>areas<sp/>are<sp/>smaller,<sp/>thus<sp/>we<sp/>use<sp/>a<sp/>loop</highlight></codeline>
<codeline><highlight class="normal"><sp/>while<sp/>(size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>frames<sp/>=<sp/>size;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>err<sp/>=<sp/>snd_pcm_mmap_begin(pcm_handle,<sp/>&amp;areas,<sp/>&amp;offset,<sp/>&amp;frames);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>if<sp/>(err<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>error(err);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>this<sp/>function<sp/>fills<sp/>the<sp/>areas<sp/>from<sp/>offset<sp/>with<sp/>count<sp/>of<sp/>frames</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>generate_sine(areas,<sp/>offset,<sp/>frames,<sp/>&amp;phase);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>commitres<sp/>=<sp/>snd_pcm_mmap_commit(pcm_handle,<sp/>offset,<sp/>frames);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>if<sp/>(commitres<sp/>&lt;<sp/>0<sp/>||<sp/>commitres<sp/>!=<sp/>frames)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>error(commitres<sp/>&gt;=<sp/>0<sp/>?<sp/>-EPIPE<sp/>:<sp/>commitres);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>size<sp/>-=<sp/>frames;</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">_skip:</highlight></codeline>
</programlisting></para><para>Look to the <ref refid="pcm_1example_test_pcm" kindref="member">Sine-wave generator</ref> example for more details about the generate_sine function.</para><para>The function is thread-safe when built with the proper option. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1083" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="7077" bodyend="7089"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___direct_1ga5a9ee8e1e764b12da6d54dfa195f7c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_mmap_writei</definition>
        <argsstring>(snd_pcm_t *pcm, const void *buffer, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_mmap_writei</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write interleaved frames to a PCM using direct buffer (mmap) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually written otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an underrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour is selected, then routine waits until all requested bytes are played or put to the playback ring buffer. The count of bytes can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1086" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_mmap.c" bodystart="149" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___direct_1ga24b6c538c8d7ddd0776ee65f8fb909eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_mmap_readi</definition>
        <argsstring>(snd_pcm_t *pcm, void *buffer, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_mmap_readi</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read interleaved frames from a PCM using direct buffer (mmap) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually read otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an overrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour was selected, then routine waits until all requested bytes are filled. The count of bytes can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1087" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_mmap.c" bodystart="199" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___direct_1ga092b1a7f387e9fc2977649bfd43b0958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_mmap_writen</definition>
        <argsstring>(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_mmap_writen</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>bufs</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write non interleaved frames to a PCM using direct buffer (mmap) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffers (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually written otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an underrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour is selected, then routine waits until all requested bytes are played or put to the playback ring buffer. The count of bytes can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1088" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_mmap.c" bodystart="174" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___direct_1ga29ce9af60eafb67f0303418a176bf3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_mmap_readn</definition>
        <argsstring>(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size)</argsstring>
        <name>snd_pcm_mmap_readn</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>bufs</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read non interleaved frames to a PCM using direct buffer (mmap) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>frames containing buffers (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a positive number of frames actually read otherwise a negative error code </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EBADFD</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM is not in the right state (<ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a3eb4a3b75c7d2adb22f1829f3f738b27" kindref="member">SND_PCM_STATE_PREPARED</ref> or <ref refid="group___p_c_m_1gga61ac499cb3701ce536d4d83725908860a86f6fbc796881f19fde0e1957f878147" kindref="member">SND_PCM_STATE_RUNNING</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-EPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>an overrun occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-ESTRPIPE</parametername>
</parameternamelist>
<parameterdescription>
<para>a suspend event occurred (stream is suspended and waiting for an application recovery)</para></parameterdescription>
</parameteritem>
</parameterlist>
If the blocking behaviour was selected, then routine waits until all requested bytes are filled. The count of bytes can be less only if a signal or underrun occurred.</para><para>If the non-blocking behaviour is selected, then routine doesn&apos;t wait at all. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1089" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_mmap.c" bodystart="224" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga8b88181b11a026da55897a926d56034a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_signed</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_signed</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return sign info for a PCM sample linear format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 unsigned, 1 signed, a negative error code if format is not linear </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1100" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="35" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga8cd4e3ecc963942457e3b1b6f7661a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_unsigned</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_unsigned</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return sign info for a PCM sample linear format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 signed, 1 unsigned, a negative error code if format is not linear </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1101" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga5a52bb63323f463198dea3f3c6aca571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_linear</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_linear</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return linear info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 non linear, 1 linear </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1102" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga36ae70bef5bfd5e7ecc743f6a4d46cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_float</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_float</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return float info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 non float, 1 float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1103" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga89537d0a972fa124051f6ba1a78c4bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_little_endian</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_little_endian</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return endian info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 big endian, 1 little endian, a negative error code if endian independent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1104" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="124" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga3c0c224b8f67e73cf2447bee0110f760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_big_endian</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_big_endian</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return endian info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 little endian, 1 big endian, a negative error code if endian independent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1105" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="173" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaf950358cdbb26bab53f63f28443bd2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_cpu_endian</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_cpu_endian</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return endian info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 swapped, 1 CPU endian, a negative error code if endian independent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1106" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="188" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga8d4e07f2d68cc16f607857ed8a222a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_width</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_width</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return nominal bits per a PCM sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bits per sample, a negative error code if not applicable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1107" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="202" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaa3e0ff7560342e5af2b5c7bd2d63a307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_physical_width</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_physical_width</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return bits needed to store a PCM sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bits per sample, a negative error code if not applicable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1108" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="265" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga5f5ab1ac13de9598cf05877e4894e0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
        <definition>snd_pcm_format_t snd_pcm_build_linear_format</definition>
        <argsstring>(int width, int pwidth, int unsignd, int big_endian)</argsstring>
        <name>snd_pcm_build_linear_format</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>unsignd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>big_endian</declname>
        </param>
        <briefdescription>
<para>Compose a PCM sample linear format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal bits per sample </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical bit width of the format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unsignd</parametername>
</parameternamelist>
<parameterdescription>
<para>Sign: 0 signed, 1 unsigned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>big_endian</parametername>
</parameternamelist>
<parameterdescription>
<para>Endian: 0 little endian, 1 big endian </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The matching format type, or <ref refid="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ab1e118ecdccf628639b5c85bc3a48999" kindref="member">SND_PCM_FORMAT_UNKNOWN</ref> if no match </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1109" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="684" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga5953a58f024f8cf762a9e4dae6b09502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t snd_pcm_format_size</definition>
        <argsstring>(snd_pcm_format_t format, size_t samples)</argsstring>
        <name>snd_pcm_format_size</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>Return bytes needed to store a quantity of PCM sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>Samples count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bytes needed, a negative error code if not integer or unknown </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1110" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="326" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga812a6458ab7759b750d6954050c75bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int8_t</type>
        <definition>u_int8_t snd_pcm_format_silence</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 8 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 8 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1111" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="564" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga6602d717534a0b6857f461fef1d8b37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int16_t</type>
        <definition>u_int16_t snd_pcm_format_silence_16</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence_16</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 16 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 16 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1112" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="553" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gafbf8a883e8b7c38b94df561e0169aef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int32_t</type>
        <definition>u_int32_t snd_pcm_format_silence_32</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence_32</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 32 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 32 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1113" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="542" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga79524557a85d7bbee12d315925e702b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int64_t</type>
        <definition>u_int64_t snd_pcm_format_silence_64</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence_64</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 64 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 64 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1114" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="390" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga82631361cf1c1d13af207beb59cf97ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_set_silence</definition>
        <argsstring>(snd_pcm_format_t format, void *buf, unsigned int samples)</argsstring>
        <name>snd_pcm_format_set_silence</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
          <defname>data</defname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>Silence a PCM samples buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>Samples count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1115" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="577" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaf42fb6af35d3d85006c1dea2e11b3e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_bytes_to_frames</definition>
        <argsstring>(snd_pcm_t *pcm, ssize_t bytes)</argsstring>
        <name>snd_pcm_bytes_to_frames</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Convert bytes in frames for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>quantity in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quantity expressed in frames </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1117" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2221" bodyend="2229"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gac05ac2b7c6e25986a71792392ff90b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t snd_pcm_frames_to_bytes</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sframes_t frames)</argsstring>
        <name>snd_pcm_frames_to_bytes</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Convert frames in bytes for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>quantity in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quantity expressed in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1118" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2237" bodyend="2245"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaeed610ddb01120b01b5a2e5cc59aa35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long snd_pcm_bytes_to_samples</definition>
        <argsstring>(snd_pcm_t *pcm, ssize_t bytes)</argsstring>
        <name>snd_pcm_bytes_to_samples</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Convert bytes in samples for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>quantity in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quantity expressed in samples </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1119" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2253" bodyend="2261"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gae3669a4326ce185f4261d7bf96900f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t snd_pcm_samples_to_bytes</definition>
        <argsstring>(snd_pcm_t *pcm, long samples)</argsstring>
        <name>snd_pcm_samples_to_bytes</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>long</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>Convert samples in bytes for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>quantity in samples </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quantity expressed in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1120" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2269" bodyend="2277"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga23e03a8b127764fff669240986b96b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_area_silence</definition>
        <argsstring>(const snd_pcm_channel_area_t *dst_channel, snd_pcm_uframes_t dst_offset, unsigned int samples, snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_area_silence</name>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>dst_channel</declname>
          <defname>dst_area</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>samples</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Silence an area. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst_area</parametername>
</parameternamelist>
<parameterdescription>
<para>area specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>samples to silence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1122" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2873" bodyend="2966"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga1c0aab2a2bb341f1b1d154dae2b7e482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_areas_silence</definition>
        <argsstring>(const snd_pcm_channel_area_t *dst_channels, snd_pcm_uframes_t dst_offset, unsigned int channels, snd_pcm_uframes_t frames, snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_areas_silence</name>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>dst_channels</declname>
          <defname>dst_areas</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Silence one or more areas. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst_areas</parametername>
</parameternamelist>
<parameterdescription>
<para>areas specification (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>channels count </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to silence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1124" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2977" bodyend="3015"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga93d2f045575afb161abff126c3750049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_area_copy</definition>
        <argsstring>(const snd_pcm_channel_area_t *dst_channel, snd_pcm_uframes_t dst_offset, const snd_pcm_channel_area_t *src_channel, snd_pcm_uframes_t src_offset, unsigned int samples, snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_area_copy</name>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>dst_channel</declname>
          <defname>dst_area</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>src_channel</declname>
          <defname>src_area</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>src_offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>samples</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Copy an area. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst_area</parametername>
</parameternamelist>
<parameterdescription>
<para>destination area specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside destination area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_area</parametername>
</parameternamelist>
<parameterdescription>
<para>source area specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside source area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>samples to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1126" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3028" bodyend="3136"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gad57f8921f52ea2ffd870cafb2d076f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_areas_copy</definition>
        <argsstring>(const snd_pcm_channel_area_t *dst_channels, snd_pcm_uframes_t dst_offset, const snd_pcm_channel_area_t *src_channels, snd_pcm_uframes_t src_offset, unsigned int channels, snd_pcm_uframes_t frames, snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_areas_copy</name>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>dst_channels</declname>
          <defname>dst_areas</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>src_channels</declname>
          <defname>src_areas</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>src_offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Copy one or more areas. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst_areas</parametername>
</parameternamelist>
<parameterdescription>
<para>destination areas specification (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside destination area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_areas</parametername>
</parameternamelist>
<parameterdescription>
<para>source areas specification (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside source area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>channels count </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1129" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3149" bodyend="3212"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___hook_1gacaec88e4b6cc2a45e7a805487acd64ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
        <definition>snd_pcm_t* snd_pcm_hook_get_pcm</definition>
        <argsstring>(snd_pcm_hook_t *hook)</argsstring>
        <name>snd_pcm_hook_get_pcm</name>
        <param>
          <type><ref refid="group___p_c_m___hook_1gae6b33860eeaf4eca00bdbef9383c1911" kindref="member">snd_pcm_hook_t</ref> *</type>
          <declname>hook</declname>
        </param>
        <briefdescription>
<para>Get PCM handle for a PCM hook. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hook</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM hook handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PCM handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1154" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_hooks.c" bodystart="560" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___hook_1ga1eb467cd5ab11817edc2ed7df3608019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* snd_pcm_hook_get_private</definition>
        <argsstring>(snd_pcm_hook_t *hook)</argsstring>
        <name>snd_pcm_hook_get_private</name>
        <param>
          <type><ref refid="group___p_c_m___hook_1gae6b33860eeaf4eca00bdbef9383c1911" kindref="member">snd_pcm_hook_t</ref> *</type>
          <declname>hook</declname>
        </param>
        <briefdescription>
<para>Get callback function private data for a PCM hook. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hook</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM hook handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>callback function private data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1155" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_hooks.c" bodystart="571" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___hook_1ga6930df3b750b3f62dee6846fb3f6a576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_hook_set_private</definition>
        <argsstring>(snd_pcm_hook_t *hook, void *private_data)</argsstring>
        <name>snd_pcm_hook_set_private</name>
        <param>
          <type><ref refid="group___p_c_m___hook_1gae6b33860eeaf4eca00bdbef9383c1911" kindref="member">snd_pcm_hook_t</ref> *</type>
          <declname>hook</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>private_data</declname>
        </param>
        <briefdescription>
<para>Set callback function private data for a PCM hook. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hook</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM hook handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The private data value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1156" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_hooks.c" bodystart="582" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___hook_1ga89eed2fdcda68c1efae9180a3794d5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hook_add</definition>
        <argsstring>(snd_pcm_hook_t **hookp, snd_pcm_t *pcm, snd_pcm_hook_type_t type, snd_pcm_hook_func_t func, void *private_data)</argsstring>
        <name>snd_pcm_hook_add</name>
        <param>
          <type><ref refid="group___p_c_m___hook_1gae6b33860eeaf4eca00bdbef9383c1911" kindref="member">snd_pcm_hook_t</ref> **</type>
          <declname>hookp</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m___hook_1ga57b6ba407d293017e116fa1b462a2411" kindref="member">snd_pcm_hook_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m___hook_1ga1f6104443e129a88c5ac82bf398464a5" kindref="member">snd_pcm_hook_func_t</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>private_data</declname>
        </param>
        <briefdescription>
<para>Add a PCM hook at end of hooks chain. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hookp</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned PCM hook handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM hook type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM hook callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_data</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM hook private data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Warning: an hook callback function cannot remove an hook of the same type different from itself </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1157" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_hooks.c" bodystart="600" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___hook_1ga4c59ad440d2479f957b477b26b90e4b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hook_remove</definition>
        <argsstring>(snd_pcm_hook_t *hook)</argsstring>
        <name>snd_pcm_hook_remove</name>
        <param>
          <type><ref refid="group___p_c_m___hook_1gae6b33860eeaf4eca00bdbef9383c1911" kindref="member">snd_pcm_hook_t</ref> *</type>
          <declname>hook</declname>
        </param>
        <briefdescription>
<para>Remove a PCM hook. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hook</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM hook handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
Warning: an hook callback cannot remove an hook of the same type different from itself </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1160" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_hooks.c" bodystart="628" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga39a4a1f88cd8b5e474d3d1d6f8e3a8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_meter_get_bufsize</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_bufsize</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get meter buffer size from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>meter buffer size in frames </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1203" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="879" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gaeb0f82c12f8a1e57f4b6b09ad324f3ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_meter_get_channels</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_channels</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get meter channels from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>meter channels count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1204" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="893" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga8c95279cba00918b29671205e38f3e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_meter_get_rate</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_rate</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get meter rate from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>approximate rate </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1205" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="907" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gaa4929399573ca0e24b71a22b51d7f108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_meter_get_now</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_now</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get meter &quot;now&quot; frame pointer from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&quot;now&quot; frame pointer in frames (0 ... boundary - 1) see <ref refid="group___p_c_m___scope_1ga543fd7565c138f1a408ec55186725908" kindref="member">snd_pcm_meter_get_boundary</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1206" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="921" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga543fd7565c138f1a408ec55186725908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_meter_get_boundary</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_boundary</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get boundary for frame pointers from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boundary in frames </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1207" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="935" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gae37aa1c3ce01063b9047e0bd437ef749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_meter_add_scope</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_scope_t *scope)</argsstring>
        <name>snd_pcm_meter_add_scope</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>Add a scope to a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>Scope handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1208" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="844" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gabb6cacf50cf10cb6e95853dadd19234f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
        <definition>snd_pcm_scope_t* snd_pcm_meter_search_scope</definition>
        <argsstring>(snd_pcm_t *pcm, const char *name)</argsstring>
        <name>snd_pcm_meter_search_scope</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Search an installed scope inside a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>scope name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to found scope or NULL if none is found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1209" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="859" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga360da60e074bffc146ffee93f8e79aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_scope_malloc</definition>
        <argsstring>(snd_pcm_scope_t **ptr)</argsstring>
        <name>snd_pcm_scope_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1210" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="1226" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gabaf2af40ecc689cee2e81b9250823fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_scope_set_ops</definition>
        <argsstring>(snd_pcm_scope_t *scope, const snd_pcm_scope_ops_t *val)</argsstring>
        <name>snd_pcm_scope_set_ops</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__pcm__scope__ops__t" kindref="compound">snd_pcm_scope_ops_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set callbacks for a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>callbacks </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1211" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="969" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gaae1d6cce40b244180c54b72aee0e00d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_scope_set_name</definition>
        <argsstring>(snd_pcm_scope_t *scope, const char *val)</argsstring>
        <name>snd_pcm_scope_set_name</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set name of a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>scope name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1213" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="949" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gaff680f85a1f30c83b4b544ead5ff5a2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_scope_get_name</definition>
        <argsstring>(snd_pcm_scope_t *scope)</argsstring>
        <name>snd_pcm_scope_get_name</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>Get name of a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>scope name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1214" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="959" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gada4e9d2bfe2f7dc2b638c6406b9a4b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* snd_pcm_scope_get_callback_private</definition>
        <argsstring>(snd_pcm_scope_t *scope)</argsstring>
        <name>snd_pcm_scope_get_callback_private</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>Get callbacks private value for a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Private data value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1215" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="979" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga683ced3c9344b8f6f8aab4997f74f72d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_scope_set_callback_private</definition>
        <argsstring>(snd_pcm_scope_t *scope, void *val)</argsstring>
        <name>snd_pcm_scope_set_callback_private</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get callbacks private value for a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Private data value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1216" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="989" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga3c1e3e9c3a5a99915de23bbd2635ae26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_scope_s16_open</definition>
        <argsstring>(snd_pcm_t *pcm, const char *name, snd_pcm_scope_t **scopep)</argsstring>
        <name>snd_pcm_scope_s16_open</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> **</type>
          <declname>scopep</declname>
        </param>
        <briefdescription>
<para>Add a s16 pseudo scope to a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>The pcm handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Scope name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scopep</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to newly created and added scope </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
s16 pseudo scope convert <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM frames in CPU endian 16 bit frames for use with other scopes. Don&apos;t forget to insert it before and to not insert it more time (see <ref refid="group___p_c_m___scope_1gabb6cacf50cf10cb6e95853dadd19234f" kindref="member">snd_pcm_meter_search_scope</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1217" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="1175" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gac4297c74f130a89992459cbbc5ab029b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t *</type>
        <definition>int16_t* snd_pcm_scope_s16_get_channel_buffer</definition>
        <argsstring>(snd_pcm_scope_t *scope, unsigned int channel)</argsstring>
        <name>snd_pcm_scope_s16_get_channel_buffer</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get s16 pseudo scope frames buffer for a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>s16 pseudo scope handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to channel buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1219" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="1207" bodyend="1219"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___simple_1ga5c55688bfe990821798936c20cd11ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_spcm_init</definition>
        <argsstring>(snd_pcm_t *pcm, unsigned int rate, unsigned int channels, snd_pcm_format_t format, snd_pcm_subformat_t subformat, snd_spcm_latency_t latency, snd_pcm_access_t _access, snd_spcm_xrun_type_t xrun_type)</argsstring>
        <name>snd_spcm_init</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>rate</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref></type>
          <declname>subformat</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m___simple_1ga0c8bcbf9cc83e8b0edaa501b15ff8ba9" kindref="member">snd_spcm_latency_t</ref></type>
          <declname>latency</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>_access</declname>
          <defname>access</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m___simple_1gaf89aba8106b8cc46e9f18d91268ec5ba" kindref="member">snd_spcm_xrun_type_t</ref></type>
          <declname>xrun_type</declname>
        </param>
        <briefdescription>
<para>Set up a simple PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subformat</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM subformat </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latency</parametername>
</parameternamelist>
<parameterdescription>
<para>Latency type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM acceess type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xrun_type</parametername>
</parameternamelist>
<parameterdescription>
<para>XRUN type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
<simplesect kind="warning"><para>The simple PCM API may be broken in the current release. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1260" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_simple.c" bodystart="157" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___simple_1ga148a05b14b083d9c6ded79dd6bfd7fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_spcm_init_duplex</definition>
        <argsstring>(snd_pcm_t *playback_pcm, snd_pcm_t *capture_pcm, unsigned int rate, unsigned int channels, snd_pcm_format_t format, snd_pcm_subformat_t subformat, snd_spcm_latency_t latency, snd_pcm_access_t _access, snd_spcm_xrun_type_t xrun_type, snd_spcm_duplex_type_t duplex_type)</argsstring>
        <name>snd_spcm_init_duplex</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>playback_pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>capture_pcm</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>rate</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga1e5fe73a6bdf881e2f91921d5e5327c7" kindref="member">snd_pcm_subformat_t</ref></type>
          <declname>subformat</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m___simple_1ga0c8bcbf9cc83e8b0edaa501b15ff8ba9" kindref="member">snd_spcm_latency_t</ref></type>
          <declname>latency</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga661221ba5e8f1d6eaf4ab8e2da57cc1a" kindref="member">snd_pcm_access_t</ref></type>
          <declname>_access</declname>
          <defname>access</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m___simple_1gaf89aba8106b8cc46e9f18d91268ec5ba" kindref="member">snd_spcm_xrun_type_t</ref></type>
          <declname>xrun_type</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m___simple_1ga6ed7a5a0762c198cb90ee48fb477b092" kindref="member">snd_spcm_duplex_type_t</ref></type>
          <declname>duplex_type</declname>
        </param>
        <briefdescription>
<para>Initialize simple PCMs in the duplex mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>playback_pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle for playback </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capture_pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle for capture </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subformat</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM subformat </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>latency</parametername>
</parameternamelist>
<parameterdescription>
<para>Latency type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM acceess type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xrun_type</parametername>
</parameternamelist>
<parameterdescription>
<para>XRUN type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplex_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Duplex mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
<simplesect kind="warning"><para>The simple PCM API may be broken in the current release. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1269" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_simple.c" bodystart="209" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___simple_1gab6ee6daf2b83bdebf6cf6355c0365885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_spcm_init_get_params</definition>
        <argsstring>(snd_pcm_t *pcm, unsigned int *rate, snd_pcm_uframes_t *buffer_size, snd_pcm_uframes_t *period_size)</argsstring>
        <name>snd_spcm_init_get_params</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>rate</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>period_size</declname>
        </param>
        <briefdescription>
<para>Get the set up of simple PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current sample rate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current buffer size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the current period size </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a negative error code</para></simplesect>
<simplesect kind="warning"><para>The simple PCM API may be broken in the current release. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1280" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_simple.c" bodystart="284" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga92ee6cf89b3ed71d47b7051f92699045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_start_mode_name</definition>
        <argsstring>(snd_pcm_start_t mode) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_start_mode_name</name>
        <param>
          <type><ref refid="group___p_c_m_1ga0eae9150f4f207ed05cb629cc3a3673f" kindref="member">snd_pcm_start_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) get name of PCM start mode setting </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM start mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of PCM start mode setting </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1295" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2031" bodyend="2036"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1gafd15306572f02e67354d65008e41dc8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_xrun_mode_name</definition>
        <argsstring>(snd_pcm_xrun_t mode) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_xrun_mode_name</name>
        <param>
          <type><ref refid="group___p_c_m_1ga67c10983b5cadd8b3eb3163489655784" kindref="member">snd_pcm_xrun_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) get name of PCM xrun mode setting </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM xrun mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ascii name of PCM xrun mode setting </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1296" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2047" bodyend="2052"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga77967d8bdd8f4baf08661443523065c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_start_mode</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_start_t val) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_sw_params_set_start_mode</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga0eae9150f4f207ed05cb629cc3a3673f" kindref="member">snd_pcm_start_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Set start mode inside a software configuration container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Start mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1297" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6049" bodyend="6064"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1gadd38871f4c64d9ecf8421b739228b19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga0eae9150f4f207ed05cb629cc3a3673f" kindref="member">snd_pcm_start_t</ref></type>
        <definition>snd_pcm_start_t snd_pcm_sw_params_get_start_mode</definition>
        <argsstring>(const snd_pcm_sw_params_t *params) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_sw_params_get_start_mode</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Get start mode from a software configuration container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>start mode </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1298" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6075" bodyend="6080"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga7f0da15ce674e09167688d3e98ec20ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_xrun_mode</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_xrun_t val) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_sw_params_set_xrun_mode</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga67c10983b5cadd8b3eb3163489655784" kindref="member">snd_pcm_xrun_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Set xrun mode inside a software configuration container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Xrun mode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1299" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6096" bodyend="6112"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga92a1742ca544aaa41de93d3d3661cb5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga67c10983b5cadd8b3eb3163489655784" kindref="member">snd_pcm_xrun_t</ref></type>
        <definition>snd_pcm_xrun_t snd_pcm_sw_params_get_xrun_mode</definition>
        <argsstring>(const snd_pcm_sw_params_t *params) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_sw_params_get_xrun_mode</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Get xrun mode from a software configuration container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>xrun mode </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1300" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6123" bodyend="6128"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga5e16b325ad44596db299468ccc4531b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_xfer_align</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, snd_pcm_uframes_t val) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_sw_params_set_xfer_align</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Set xfer align inside a software configuration container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Chunk size (frames are attempted to be transferred in chunks) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1302" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6323" bodyend="6327"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1gabb62c5df350f6ceb266f9ff02a3a6ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_xfer_align</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, snd_pcm_uframes_t *val) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_sw_params_get_xfer_align</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Get xfer align from a software configuration container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>returned chunk size (frames are attempted to be transferred in chunks) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1303" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6338" bodyend="6343"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga5e098517809fd447df0ea1a4df371e08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_set_sleep_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sw_params_t *params, unsigned int val) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_sw_params_set_sleep_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Set minimum number of ticks to sleep inside a software configuration container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum ticks to sleep or 0 to disable the use of tick timer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1304" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6214" bodyend="6218"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga82e216007e0093240ae9a96560434f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_sw_params_get_sleep_min</definition>
        <argsstring>(const snd_pcm_sw_params_t *params, unsigned int *val) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_sw_params_get_sleep_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga7e082d9ea701709270b0674a0be23b09" kindref="member">snd_pcm_sw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Get minimum numbers of ticks to sleep from a software configuration container </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Software configuration container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>returned minimum number of ticks to sleep or 0 if tick timer is disabled </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1305" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="6229" bodyend="6234"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga55342da81dd6611ab2239c650dc73b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_tick_time</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_get_tick_time</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Extract tick time from a configuration space </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate tick duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if the configuration space does not contain a single value</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1308" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5725" bodyend="5730"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1gab74b4c9b873754e189b1f96468fa38f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_tick_time_min</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_get_tick_time_min</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Extract minimum tick time from a configuration space </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate minimum tick duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1309" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5744" bodyend="5749"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1gada829ffd7b5b93a8d5e47a35322599e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_get_tick_time_max</definition>
        <argsstring>(const snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_get_tick_time_max</name>
        <param>
          <type>const <ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Extract maximum tick time from a configuration space </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate maximum tick duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Exact value is &lt;,=,&gt; the returned one following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1310" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5763" bodyend="5768"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1gae8f2e422b5e6ec5328d003c75cd978ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_test_tick_time</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_test_tick_time</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Verify if a tick time is available inside a configuration space for a PCM </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate tick duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if available a negative error code otherwise</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1311" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5780" bodyend="5783"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga4e968294e94f56d3ffcb20945d8a8543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_tick_time</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int val, int dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_set_tick_time</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Restrict a configuration space to contain only one tick time </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate tick duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1312" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5795" bodyend="5798"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga458ef7a2e8aa9445446e4e5ddba9c654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_tick_time_min</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_set_tick_time_min</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Restrict a configuration space with a minimum tick time </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum tick duration in us (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact minimum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1313" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5810" bodyend="5813"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga44f6dcae8ee774254d964ba41f2f8ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_tick_time_max</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_set_tick_time_max</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Restrict a configuration space with a maximum tick time </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum tick duration in us (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact maximum is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1314" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5825" bodyend="5828"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga7b30d734fd89678f77563e655f7c06ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_tick_time_minmax</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *min, int *mindir, unsigned int *max, int *maxdir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_set_tick_time_minmax</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mindir</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>maxdir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Restrict a configuration space to have tick times in a given range </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate minimum tick duration in us (on return filled with actual minimum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mindir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for minimum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate maximum tick duration in us (on return filled with actual maximum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxdir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction for maximum (on return filled with actual direction) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space would become empty</para></simplesect>
Wanted/actual exact min/max is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1315" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5842" bodyend="5845"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga9e871038328399ad5112747457256c53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_tick_time_near</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_set_tick_time_near</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Restrict a configuration space to have tick time nearest to a target </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>approximate target tick duration in us / returned chosen approximate target tick duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code if configuration space is empty</para></simplesect>
target/chosen exact value is &lt;,=,&gt; val following dir (-1,0,1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1316" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5860" bodyend="5864"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga257cc818f91ac4b4ae39710256a245dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_tick_time_first</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_set_tick_time_first</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Restrict a configuration space to contain only its minimum tick time </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate minimum tick duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1317" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5879" bodyend="5883"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___deprecated_1ga1daa74f876820685cb4e3e384728f004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_hw_params_set_tick_time_last</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_hw_params_t *params, unsigned int *val, int *dir) __attribute__((deprecated))</argsstring>
        <name>snd_pcm_hw_params_set_tick_time_last</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga65c737127994f0a980edad744e36dc40" kindref="member">snd_pcm_hw_params_t</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>(DEPRECATED) Restrict a configuration space to contain only its maximum tick time </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Returned approximate maximum tick duration in us </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub unit direction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 otherwise a negative error code</para></simplesect>
Actual exact value is &lt;,=,&gt; the approximate one following dir (-1, 0, 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1318" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="5898" bodyend="5902"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Application interface library for the ALSA driver. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jaroslav Kysela <ulink url="mailto:perex@perex.cz">perex@perex.cz</ulink> </para></simplesect>
<simplesect kind="author"><para>Abramo Bagnara <ulink url="mailto:abramo@alsa-project.org">abramo@alsa-project.org</ulink> </para></simplesect>
<simplesect kind="author"><para>Takashi Iwai <ulink url="mailto:tiwai@suse.de">tiwai@suse.de</ulink> </para></simplesect>
<simplesect kind="date"><para>1998-2001</para></simplesect>
Application interface library for the ALSA driver. See the <ref refid="pcm" kindref="compound">PCM (digital audio) interface</ref> page for more details. </para>    </detaileddescription>
    <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h"/>
  </compounddef>
</doxygen>
