<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___p_c_m___scope" kind="group">
    <compoundname>PCM_Scope</compoundname>
    <title>Scope Plugin Extension</title>
    <innerclass refid="structsnd__pcm__scope__ops__t" prot="public">snd_pcm_scope_ops_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_c_m___scope_1ga39a4a1f88cd8b5e474d3d1d6f8e3a8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_meter_get_bufsize</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_bufsize</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get meter buffer size from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>meter buffer size in frames </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1203" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="879" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gaeb0f82c12f8a1e57f4b6b09ad324f3ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_meter_get_channels</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_channels</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get meter channels from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>meter channels count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1204" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="893" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga8c95279cba00918b29671205e38f3e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int snd_pcm_meter_get_rate</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_rate</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get meter rate from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>approximate rate </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1205" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="907" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gaa4929399573ca0e24b71a22b51d7f108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_meter_get_now</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_now</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get meter &quot;now&quot; frame pointer from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&quot;now&quot; frame pointer in frames (0 ... boundary - 1) see <ref refid="group___p_c_m___scope_1ga543fd7565c138f1a408ec55186725908" kindref="member">snd_pcm_meter_get_boundary</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1206" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="921" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga543fd7565c138f1a408ec55186725908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
        <definition>snd_pcm_uframes_t snd_pcm_meter_get_boundary</definition>
        <argsstring>(snd_pcm_t *pcm)</argsstring>
        <name>snd_pcm_meter_get_boundary</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <briefdescription>
<para>Get boundary for frame pointers from a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boundary in frames </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1207" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="935" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gae37aa1c3ce01063b9047e0bd437ef749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_meter_add_scope</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_scope_t *scope)</argsstring>
        <name>snd_pcm_meter_add_scope</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>Add a scope to a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>Scope handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1208" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="844" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gabb6cacf50cf10cb6e95853dadd19234f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
        <definition>snd_pcm_scope_t* snd_pcm_meter_search_scope</definition>
        <argsstring>(snd_pcm_t *pcm, const char *name)</argsstring>
        <name>snd_pcm_meter_search_scope</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Search an installed scope inside a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>scope name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to found scope or NULL if none is found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1209" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="859" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga360da60e074bffc146ffee93f8e79aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_scope_malloc</definition>
        <argsstring>(snd_pcm_scope_t **ptr)</argsstring>
        <name>snd_pcm_scope_malloc</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>allocate an invalid <ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> using standard malloc </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1210" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="1226" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gabaf2af40ecc689cee2e81b9250823fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_scope_set_ops</definition>
        <argsstring>(snd_pcm_scope_t *scope, const snd_pcm_scope_ops_t *val)</argsstring>
        <name>snd_pcm_scope_set_ops</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__pcm__scope__ops__t" kindref="compound">snd_pcm_scope_ops_t</ref> *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set callbacks for a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>callbacks </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1211" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="969" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gaae1d6cce40b244180c54b72aee0e00d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_scope_set_name</definition>
        <argsstring>(snd_pcm_scope_t *scope, const char *val)</argsstring>
        <name>snd_pcm_scope_set_name</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set name of a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>scope name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1213" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="949" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gaff680f85a1f30c83b4b544ead5ff5a2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* snd_pcm_scope_get_name</definition>
        <argsstring>(snd_pcm_scope_t *scope)</argsstring>
        <name>snd_pcm_scope_get_name</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>Get name of a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>scope name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1214" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="959" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gada4e9d2bfe2f7dc2b638c6406b9a4b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* snd_pcm_scope_get_callback_private</definition>
        <argsstring>(snd_pcm_scope_t *scope)</argsstring>
        <name>snd_pcm_scope_get_callback_private</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>Get callbacks private value for a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Private data value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1215" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="979" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga683ced3c9344b8f6f8aab4997f74f72d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void snd_pcm_scope_set_callback_private</definition>
        <argsstring>(snd_pcm_scope_t *scope, void *val)</argsstring>
        <name>snd_pcm_scope_set_callback_private</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get callbacks private value for a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM meter scope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Private data value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1216" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="989" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1ga3c1e3e9c3a5a99915de23bbd2635ae26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_scope_s16_open</definition>
        <argsstring>(snd_pcm_t *pcm, const char *name, snd_pcm_scope_t **scopep)</argsstring>
        <name>snd_pcm_scope_s16_open</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> **</type>
          <declname>scopep</declname>
        </param>
        <briefdescription>
<para>Add a s16 pseudo scope to a <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>The pcm handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Scope name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scopep</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to newly created and added scope </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code</para></simplesect>
s16 pseudo scope convert <ref refid="group___p_c_m_1gga060d5b81f2fc8efcc35ff3e1de6e9fa4a415afb5482d35b38837035a6dd82b39d" kindref="member">SND_PCM_TYPE_METER</ref> PCM frames in CPU endian 16 bit frames for use with other scopes. Don&apos;t forget to insert it before and to not insert it more time (see <ref refid="group___p_c_m___scope_1gabb6cacf50cf10cb6e95853dadd19234f" kindref="member">snd_pcm_meter_search_scope</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1217" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="1175" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___scope_1gac4297c74f130a89992459cbbc5ab029b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t *</type>
        <definition>int16_t* snd_pcm_scope_s16_get_channel_buffer</definition>
        <argsstring>(snd_pcm_scope_t *scope, unsigned int channel)</argsstring>
        <name>snd_pcm_scope_s16_get_channel_buffer</name>
        <param>
          <type><ref refid="group___p_c_m_1ga3cd150b8aa57e634e1e1dd914940c765" kindref="member">snd_pcm_scope_t</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get s16 pseudo scope frames buffer for a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>s16 pseudo scope handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to channel buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1219" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_meter.c" bodystart="1207" bodyend="1219"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>See the <ref refid="pcm" kindref="compound">PCM (digital audio) interface</ref> page for more details. </para>    </detaileddescription>
  </compounddef>
</doxygen>
