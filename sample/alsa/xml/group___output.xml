<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___output" kind="group">
    <compoundname>Output</compoundname>
    <title>Output Interface</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___output_1ga7217dd8d10e2491388e866d3354a4b29" prot="public" static="no">
        <name>snd_output_type_t</name>
        <enumvalue id="group___output_1gga7217dd8d10e2491388e866d3354a4b29ad8291a0da96f6bf0cc0352e256fe8c50" prot="public">
          <name>SND_OUTPUT_STDIO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Output to a stdio stream. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___output_1gga7217dd8d10e2491388e866d3354a4b29a5630f21823bbe05e6547b8cc27af4e37" prot="public">
          <name>SND_OUTPUT_BUFFER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Output to a memory buffer. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="57" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" bodystart="57" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___output_1ga49729cc6454539495c1f5b6e95cd474a" prot="public" static="no">
        <type>struct _snd_output</type>
        <definition>typedef struct _snd_output snd_output_t</definition>
        <argsstring></argsstring>
        <name>snd_output_t</name>
        <briefdescription>
<para>Internal structure for an output object. </para>        </briefdescription>
        <detaileddescription>
<para>The ALSA library uses a pointer to this structure as a handle to an output object. Applications don&apos;t access its contents directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="75" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___output_1gae7b87e8cfcc2d46b124b2ad221ed6435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_output_stdio_open</definition>
        <argsstring>(snd_output_t **outputp, const char *file, const char *mode)</argsstring>
        <name>snd_output_stdio_open</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> **</type>
          <declname>outputp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Creates a new output object writing to a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outputp</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the pointer to the new output object at the address specified by <computeroutput>outputp</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The open mode, like <computeroutput>fopen(3)</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="64" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="218" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group___output_1gaca78d01bf6d081274650794861373c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_output_stdio_attach</definition>
        <argsstring>(snd_output_t **outputp, FILE *fp, int _close)</argsstring>
        <name>snd_output_stdio_attach</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> **</type>
          <declname>outputp</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_close</declname>
        </param>
        <briefdescription>
<para>Creates a new output object using an existing stdio <computeroutput>FILE</computeroutput> pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outputp</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the pointer to the new output object at the address specified by <computeroutput>outputp</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>FILE</computeroutput> pointer to write to. Characters are written to the file starting at the current file position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_close</parametername>
</parameternamelist>
<parameterdescription>
<para>Close flag. Set this to 1 if <ref refid="group___output_1gab4be4e572d2a0d0f2f46faf8d45aa35d" kindref="member">snd_output_close</ref> should close <computeroutput>fp</computeroutput> by calling <computeroutput>fclose</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="65" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="188" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="group___output_1gafb4d1ae52ed7148b0abab0de3257fae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_output_buffer_open</definition>
        <argsstring>(snd_output_t **outputp)</argsstring>
        <name>snd_output_buffer_open</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> **</type>
          <declname>outputp</declname>
        </param>
        <briefdescription>
<para>Creates a new output object with an auto-extending memory buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outputp</parametername>
</parameternamelist>
<parameterdescription>
<para>The function puts the pointer to the new output object at the address specified by <computeroutput>outputp</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="66" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="358" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="group___output_1gaae66e163bd719593b6787d922546a055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t snd_output_buffer_string</definition>
        <argsstring>(snd_output_t *output, char **buf)</argsstring>
        <name>snd_output_buffer_string</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Returns the address of the buffer of a <ref refid="group___output_1gga7217dd8d10e2491388e866d3354a4b29a5630f21823bbe05e6547b8cc27af4e37" kindref="member">SND_OUTPUT_BUFFER</ref> output handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The functions puts the current address of the buffer at the address specified by <computeroutput>buf</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current size of valid data in the buffer.</para></simplesect>
The address of the buffer may become invalid when output functions or <ref refid="group___output_1gab4be4e572d2a0d0f2f46faf8d45aa35d" kindref="member">snd_output_close</ref> are called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="67" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="345" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="group___output_1gab4be4e572d2a0d0f2f46faf8d45aa35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_output_close</definition>
        <argsstring>(snd_output_t *output)</argsstring>
        <name>snd_output_close</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Closes an output handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output handle to be closed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="68" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="group___output_1ga5dd8e7d3089a82d8449a9dff221caf1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_output_printf</definition>
        <argsstring>(snd_output_t *output, const char *format,...)</argsstring>
        <name>snd_output_printf</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Writes formatted output (like <computeroutput>fprintf(3)</computeroutput>) to an output handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string in <computeroutput>fprintf</computeroutput> format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Other <computeroutput>fprintf</computeroutput> arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters written, or a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="69" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="71" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="group___output_1gae01572ae47fd3ead25ffd6856118780f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_output_vprintf</definition>
        <argsstring>(snd_output_t *output, const char *format, va_list args)</argsstring>
        <name>snd_output_vprintf</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Writes formatted output (like <computeroutput>fprintf(3)</computeroutput>) to an output handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string in <computeroutput>fprintf</computeroutput> format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Other <computeroutput>fprintf</computeroutput> arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters written, or a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="74" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group___output_1gaa370cff392c8fdaf03e08c667561d4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_output_puts</definition>
        <argsstring>(snd_output_t *output, const char *str)</argsstring>
        <name>snd_output_puts</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Writes a string to an output handle (like <computeroutput>fputs(3)</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code or <computeroutput>EOF</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="75" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group___output_1ga7b2b8c27042964a5b57acabe0af6e30b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_output_putc</definition>
        <argsstring>(snd_output_t *output, int c)</argsstring>
        <name>snd_output_putc</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Writes a character to an output handle (like <computeroutput>putc(3)</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative error code or <computeroutput>EOF</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="76" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="group___output_1ga9d188a05400c944bc1f70d757c179226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_output_flush</definition>
        <argsstring>(snd_output_t *output)</argsstring>
        <name>snd_output_flush</name>
        <param>
          <type><ref refid="group___output_1ga49729cc6454539495c1f5b6e95cd474a" kindref="member">snd_output_t</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Flushes an output handle (like fflush(3)). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output handle. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise <computeroutput>EOF</computeroutput>.</para></simplesect>
If the underlying destination is a stdio stream, this function calls <computeroutput>fflush</computeroutput>. If the underlying destination is a memory buffer, the write position is reset to the beginning of the buffer. <computeroutput>=</computeroutput>:-o </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/output.h" line="77" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/output.c" bodystart="124" bodyend="127"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The output functions present an interface similar to the stdio functions on top of different underlying output destinations.</para><para>Many PCM debugging functions (<computeroutput>snd_pcm_xxx_dump_xxx</computeroutput>) use such an output handle to be able to write not only to the screen but also to other destinations, e.g. to files or to memory buffers. </para>    </detaileddescription>
  </compounddef>
</doxygen>
