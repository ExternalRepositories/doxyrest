<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___p_c_m___helpers" kind="group">
    <compoundname>PCM_Helpers</compoundname>
    <title>Helper Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_c_m___helpers_1ga8b88181b11a026da55897a926d56034a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_signed</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_signed</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return sign info for a PCM sample linear format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 unsigned, 1 signed, a negative error code if format is not linear </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1100" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="35" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga8cd4e3ecc963942457e3b1b6f7661a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_unsigned</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_unsigned</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return sign info for a PCM sample linear format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 signed, 1 unsigned, a negative error code if format is not linear </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1101" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga5a52bb63323f463198dea3f3c6aca571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_linear</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_linear</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return linear info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 non linear, 1 linear </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1102" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga36ae70bef5bfd5e7ecc743f6a4d46cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_float</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_float</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return float info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 non float, 1 float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1103" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga89537d0a972fa124051f6ba1a78c4bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_little_endian</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_little_endian</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return endian info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 big endian, 1 little endian, a negative error code if endian independent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1104" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="124" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga3c0c224b8f67e73cf2447bee0110f760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_big_endian</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_big_endian</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return endian info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 little endian, 1 big endian, a negative error code if endian independent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1105" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="173" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaf950358cdbb26bab53f63f28443bd2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_cpu_endian</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_cpu_endian</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return endian info for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 swapped, 1 CPU endian, a negative error code if endian independent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1106" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="188" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga8d4e07f2d68cc16f607857ed8a222a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_width</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_width</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return nominal bits per a PCM sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bits per sample, a negative error code if not applicable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1107" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="202" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaa3e0ff7560342e5af2b5c7bd2d63a307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_physical_width</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_physical_width</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return bits needed to store a PCM sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bits per sample, a negative error code if not applicable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1108" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="265" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga5f5ab1ac13de9598cf05877e4894e0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
        <definition>snd_pcm_format_t snd_pcm_build_linear_format</definition>
        <argsstring>(int width, int pwidth, int unsignd, int big_endian)</argsstring>
        <name>snd_pcm_build_linear_format</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>unsignd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>big_endian</declname>
        </param>
        <briefdescription>
<para>Compose a PCM sample linear format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Nominal bits per sample </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical bit width of the format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unsignd</parametername>
</parameternamelist>
<parameterdescription>
<para>Sign: 0 signed, 1 unsigned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>big_endian</parametername>
</parameternamelist>
<parameterdescription>
<para>Endian: 0 little endian, 1 big endian </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The matching format type, or <ref refid="group___p_c_m_1ggaa14b7f26877a812acbb39811364177f8ab1e118ecdccf628639b5c85bc3a48999" kindref="member">SND_PCM_FORMAT_UNKNOWN</ref> if no match </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1109" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="684" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga5953a58f024f8cf762a9e4dae6b09502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t snd_pcm_format_size</definition>
        <argsstring>(snd_pcm_format_t format, size_t samples)</argsstring>
        <name>snd_pcm_format_size</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>Return bytes needed to store a quantity of PCM sample. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>Samples count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bytes needed, a negative error code if not integer or unknown </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1110" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="326" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga812a6458ab7759b750d6954050c75bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int8_t</type>
        <definition>u_int8_t snd_pcm_format_silence</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 8 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 8 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1111" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="564" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga6602d717534a0b6857f461fef1d8b37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int16_t</type>
        <definition>u_int16_t snd_pcm_format_silence_16</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence_16</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 16 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 16 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1112" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="553" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gafbf8a883e8b7c38b94df561e0169aef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int32_t</type>
        <definition>u_int32_t snd_pcm_format_silence_32</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence_32</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 32 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 32 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1113" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="542" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga79524557a85d7bbee12d315925e702b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u_int64_t</type>
        <definition>u_int64_t snd_pcm_format_silence_64</definition>
        <argsstring>(snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_format_silence_64</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Return 64 bit expressing silence for a PCM sample format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>silence 64 bit word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1114" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="390" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga82631361cf1c1d13af207beb59cf97ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_format_set_silence</definition>
        <argsstring>(snd_pcm_format_t format, void *buf, unsigned int samples)</argsstring>
        <name>snd_pcm_format_set_silence</name>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
          <defname>data</defname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>Silence a PCM samples buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>Samples count </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1115" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm_misc.c" bodystart="577" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaf42fb6af35d3d85006c1dea2e11b3e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
        <definition>snd_pcm_sframes_t snd_pcm_bytes_to_frames</definition>
        <argsstring>(snd_pcm_t *pcm, ssize_t bytes)</argsstring>
        <name>snd_pcm_bytes_to_frames</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Convert bytes in frames for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>quantity in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quantity expressed in frames </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1117" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2221" bodyend="2229"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gac05ac2b7c6e25986a71792392ff90b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t snd_pcm_frames_to_bytes</definition>
        <argsstring>(snd_pcm_t *pcm, snd_pcm_sframes_t frames)</argsstring>
        <name>snd_pcm_frames_to_bytes</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1ga71cdfa37e258d2210b8bd0216bf0c36c" kindref="member">snd_pcm_sframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Convert frames in bytes for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>quantity in frames </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quantity expressed in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1118" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2237" bodyend="2245"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gaeed610ddb01120b01b5a2e5cc59aa35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long snd_pcm_bytes_to_samples</definition>
        <argsstring>(snd_pcm_t *pcm, ssize_t bytes)</argsstring>
        <name>snd_pcm_bytes_to_samples</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Convert bytes in samples for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>quantity in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quantity expressed in samples </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1119" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2253" bodyend="2261"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gae3669a4326ce185f4261d7bf96900f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t snd_pcm_samples_to_bytes</definition>
        <argsstring>(snd_pcm_t *pcm, long samples)</argsstring>
        <name>snd_pcm_samples_to_bytes</name>
        <param>
          <type><ref refid="group___p_c_m_1ga919e634deecd855b6e2e15174e70d3ea" kindref="member">snd_pcm_t</ref> *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>long</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>Convert samples in bytes for a PCM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>quantity in samples </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>quantity expressed in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1120" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2269" bodyend="2277"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga23e03a8b127764fff669240986b96b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_area_silence</definition>
        <argsstring>(const snd_pcm_channel_area_t *dst_channel, snd_pcm_uframes_t dst_offset, unsigned int samples, snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_area_silence</name>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>dst_channel</declname>
          <defname>dst_area</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>samples</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Silence an area. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst_area</parametername>
</parameternamelist>
<parameterdescription>
<para>area specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>samples to silence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1122" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2873" bodyend="2966"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga1c0aab2a2bb341f1b1d154dae2b7e482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_areas_silence</definition>
        <argsstring>(const snd_pcm_channel_area_t *dst_channels, snd_pcm_uframes_t dst_offset, unsigned int channels, snd_pcm_uframes_t frames, snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_areas_silence</name>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>dst_channels</declname>
          <defname>dst_areas</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Silence one or more areas. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst_areas</parametername>
</parameternamelist>
<parameterdescription>
<para>areas specification (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>channels count </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to silence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1124" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="2977" bodyend="3015"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1ga93d2f045575afb161abff126c3750049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_area_copy</definition>
        <argsstring>(const snd_pcm_channel_area_t *dst_channel, snd_pcm_uframes_t dst_offset, const snd_pcm_channel_area_t *src_channel, snd_pcm_uframes_t src_offset, unsigned int samples, snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_area_copy</name>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>dst_channel</declname>
          <defname>dst_area</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>src_channel</declname>
          <defname>src_area</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>src_offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>samples</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Copy an area. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst_area</parametername>
</parameternamelist>
<parameterdescription>
<para>destination area specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside destination area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_area</parametername>
</parameternamelist>
<parameterdescription>
<para>source area specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside source area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>samples to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1126" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3028" bodyend="3136"/>
      </memberdef>
      <memberdef kind="function" id="group___p_c_m___helpers_1gad57f8921f52ea2ffd870cafb2d076f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int snd_pcm_areas_copy</definition>
        <argsstring>(const snd_pcm_channel_area_t *dst_channels, snd_pcm_uframes_t dst_offset, const snd_pcm_channel_area_t *src_channels, snd_pcm_uframes_t src_offset, unsigned int channels, snd_pcm_uframes_t frames, snd_pcm_format_t format)</argsstring>
        <name>snd_pcm_areas_copy</name>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>dst_channels</declname>
          <defname>dst_areas</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>const <ref refid="structsnd__pcm__channel__area__t" kindref="compound">snd_pcm_channel_area_t</ref> *</type>
          <declname>src_channels</declname>
          <defname>src_areas</defname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>src_offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gab01fcfe9b97382a8d3f2027c664b8b8a" kindref="member">snd_pcm_uframes_t</ref></type>
          <declname>frames</declname>
        </param>
        <param>
          <type><ref refid="group___p_c_m_1gaa14b7f26877a812acbb39811364177f8" kindref="member">snd_pcm_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Copy one or more areas. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst_areas</parametername>
</parameternamelist>
<parameterdescription>
<para>destination areas specification (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside destination area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_areas</parametername>
</parameternamelist>
<parameterdescription>
<para>source areas specification (one for each channel) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in frames inside source area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>channels count </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frames</parametername>
</parameternamelist>
<parameterdescription>
<para>frames to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>PCM sample format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/include/pcm.h" line="1129" column="1" bodyfile="/home/vladimir/Develop/alsa-lib/alsa-lib-1.1.3/src/pcm/pcm.c" bodystart="3149" bodyend="3212"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>See the <ref refid="pcm" kindref="compound">PCM (digital audio) interface</ref> page for more details. </para>    </detaileddescription>
  </compounddef>
</doxygen>
