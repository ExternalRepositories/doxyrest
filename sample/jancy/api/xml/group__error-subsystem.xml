<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__error-subsystem" kind="group">
    <compoundname>error-subsystem</compoundname>
    <title>Error Subsystem</title>
    <innerclass refid="structjnc___error" prot="public">jnc_Error</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__error-subsystem_1gaee88847c0012d586d8ac9bfe8bd83a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structjnc___error" kindref="compound">jnc_Error</ref> *</type>
        <definition>const jnc_Error* jnc_getLastError</definition>
        <argsstring>()</argsstring>
        <name>jnc_getLastError</name>
        <briefdescription>
<para>Returns a pointer to the last error set in the context of the current thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Projects/ioninja/jancy/include/jnc_Error.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__error-subsystem_1gafb765872a1b877f1163397d46455e5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jnc_setError</definition>
        <argsstring>(const jnc_Error *error)</argsstring>
        <name>jnc_setError</name>
        <param>
          <type>const <ref refid="structjnc___error" kindref="compound">jnc_Error</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>:subgroup:</para></internal>
<para><verbatim>These functions set the last error to the TLS buffer of the current thread.

* ``jnc_setError`` sets Jancy `jnc_Error` pointed to by ``error``;
* ``jnc_setErrno`` sets POSIX *errno* identifed by ``code``;
* ``jnc_setStringError`` sets string error described by a null-terminated string pointed to by ``string``.</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Projects/ioninja/jancy/include/jnc_Error.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__error-subsystem_1ga784c57a790ba4248434303543247a6f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jnc_setErrno</definition>
        <argsstring>(int code)</argsstring>
        <name>jnc_setErrno</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Projects/ioninja/jancy/include/jnc_Error.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__error-subsystem_1ga8d7d3b6538abc2d983207b8f421c3f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jnc_setStringError</definition>
        <argsstring>(const char *string)</argsstring>
        <name>jnc_setStringError</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Projects/ioninja/jancy/include/jnc_Error.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__error-subsystem_1ga74a4649db168284286601efd8ffacbc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* jnc_getErrorDescription_v</definition>
        <argsstring>(const jnc_Error *error)</argsstring>
        <name>jnc_getErrorDescription_v</name>
        <param>
          <type>const <ref refid="structjnc___error" kindref="compound">jnc_Error</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>:subgroup:</para></internal>
<para><verbatim>Creates and returns a human-readable description of the error.

Suffix ``_v`` is used to denote the **volatile** nature of the returned pointer. The buffer will be overwritten by the very next call to any ``_v`` function invoked in the same thread. *Do NOT* save it to be re-used later; copy it to some buffer if it&apos;s necessary.

``jnc_getLastErrorDescription_v`` is equivalent to:

.. code-block:: c

    jnc_getErrorDescription_v (jnc_getLastError ())

.. rubric:: Sample:

.. code-block:: c

    // try to compile some Jancy code, and it fails...

    printf (&quot;error: %s\n&quot;, jnc_getLastErrorDescription_v ());</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Projects/ioninja/jancy/include/jnc_Error.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__error-subsystem_1gac5cd36d6f55330d04cbabc2be4ea3e49" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* jnc_getLastErrorDescription_v</definition>
        <argsstring>()</argsstring>
        <name>jnc_getLastErrorDescription_v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Projects/ioninja/jancy/include/jnc_Error.h" line="103" column="1" bodyfile="/home/vladimir/Projects/ioninja/jancy/include/jnc_Error.h" bodystart="103" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<internal><para>:import:<ref refid="jnc___error_8h_source" kindref="compound">jnc_Error.h</ref></para></internal>
<para><verbatim>This section describes types and facilities for setting and retrieving error information.</verbatim> </para>    </detaileddescription>
  </compounddef>
</doxygen>
