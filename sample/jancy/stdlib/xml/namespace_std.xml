<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen>
<compounddef kind='namespace' id='namespace_std' language='Jancy'>
<compoundname>std</compoundname>
<innerclass refid='type_std_mapentry'/>
<innerclass refid='type_std_hashtable'/>
<innerclass refid='type_std_stringhashtable'/>
<innerclass refid='type_std_stringhashtableignorecase'/>
<innerclass refid='type_std_stringbuilder'/>
<innerclass refid='type_std_rbtree'/>
<innerclass refid='type_std_array'/>
<innerclass refid='type_std_buffer'/>
<innerclass refid='type_std_error'/>
<innerclass refid='type_std_guid'/>
<innerclass refid='type_std_listentry'/>
<innerclass refid='type_std_list'/>
<sectiondef>
<memberdef kind='typedef' id='typedef_std_hashfunc'>
<name>HashFunc</name>
<type><ref refid="typedef_size_t">size_t</ref></type>
<argsstring>(variant key)</argsstring>
<param>
<declname>key</declname>
<type>variant</type>
<array></array>
</param>
<location file='std_HashTable.jnc' line='25' col='16'/>
</memberdef>

<memberdef kind='typedef' id='typedef_std_isequalfunc'>
<name>IsEqualFunc</name>
<type>bool</type>
<argsstring>(variant key1, variant key2)</argsstring>
<param>
<declname>key1</declname>
<type>variant</type>
<array></array>
</param>
<param>
<declname>key2</declname>
<type>variant</type>
<array></array>
</param>
<location file='std_HashTable.jnc' line='27' col='14'/>
</memberdef>

<memberdef kind='enum' id='type_std_bintreefindrelop'>
<name>BinTreeFindRelOp</name>
<enumvalue id='enum_member_std_bintreefindrelop_eq'>
<name>Eq</name>
</enumvalue>

<enumvalue id='enum_member_std_bintreefindrelop_lt'>
<name>Lt</name>
</enumvalue>

<enumvalue id='enum_member_std_bintreefindrelop_le'>
<name>Le</name>
</enumvalue>

<enumvalue id='enum_member_std_bintreefindrelop_gt'>
<name>Gt</name>
</enumvalue>

<enumvalue id='enum_member_std_bintreefindrelop_ge'>
<name>Ge</name>
</enumvalue>

<location file='std_RbTree.jnc' line='25' col='6'/>
</memberdef>

<memberdef kind='typedef' id='typedef_std_cmpfunc'>
<name>CmpFunc</name>
<type>int</type>
<argsstring>(variant key1, variant key2)</argsstring>
<param>
<declname>key1</declname>
<type>variant</type>
<array></array>
</param>
<param>
<declname>key2</declname>
<type>variant</type>
<array></array>
</param>
<location file='std_RbTree.jnc' line='36' col='13'/>
</memberdef>

<memberdef kind='function' id='function_std_format'>
<functionkind>named-function</functionkind>
<name>format</name>
<type>char const* cdecl</type>
<argsstring>(char const* fmtSpecifier, ...)</argsstring>
<param>
<declname>fmtSpecifier</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<type>...</type>
</param>
<detaileddescription>
<para>Composes a string with the same text that would be printed if ``fmtSpecifier`` was used in `printf` function, but instead of being printed, the content is stored in a memory buffered [#f3]_.

Returns a pointer to null-terminated string containing the newly formatted text.

For detailed description of format specifier ``fmtSpecifier`` please refer to: http://www.cplusplus.com/reference/cstdio/printf/</para>
</detaileddescription>
<location file='std_globals.jnc' line='400' col='29'/>
</memberdef>

<memberdef kind='function' id='function_std_getlasterror'>
<functionkind>named-function</functionkind>
<name>getLastError</name>
<type><ref refid="type_std_error">std.Error</ref> const*</type>
<argsstring>()</argsstring>
<detaileddescription>
<para>Returns a pointer to the last error set in the context of the current thread.

Currently this function allocates a new error buffer on every call. In the future caching will be implemented (if ``AXL`` error has not changed since the last invokation of ``getLastError`` then previously allocated error buffer could be re-used).</para>
</detaileddescription>
<location file='std_Error.jnc' line='79' col='14'/>
</memberdef>

<memberdef kind='function' id='function_std_getlasterrordescription'>
<functionkind>named-function</functionkind>
<name>getLastErrorDescription</name>
<type>char const*</type>
<argsstring>()</argsstring>
<detaileddescription>
<para><![CDATA[Returns a human readable description of the the last error set in the context of the current thread.

Equivalent to:

.. ref-code-block::

	std.getLastError ().:ref:`m_description<cid-std.error.m_description>`]]></para>
</detaileddescription>
<location file='std_Error.jnc' line='91' col='13'/>
</memberdef>

<memberdef kind='function' id='function_std_seterrno'>
<functionkind>named-function</functionkind>
<name>setErrno</name>
<type>void</type>
<argsstring>(int errno)</argsstring>
<param>
<declname>errno</declname>
<type>int</type>
<array></array>
</param>
<detaileddescription>
<para>Sets ``errno`` error as the last error of the current thread.</para>
</detaileddescription>
<location file='std_Error.jnc' line='100' col='1'/>
</memberdef>

<memberdef kind='function' id='function_std_seterror'>
<functionkind>named-function</functionkind>
<name>setError</name>
<type>void</type>
<argsstring>(char const* string)</argsstring>
<param>
<declname>string</declname>
<type>char const*</type>
<array></array>
</param>
<detaileddescription>
<para>Sets string error described by a null-terminated string pointed to by ``string`` as the last error of the current thread.

Calling `std.Error.m_description` on a string error will yield a null-terminated string identical to ``string``.</para>
</detaileddescription>
<location file='std_Error.jnc' line='108' col='1'/>
</memberdef>

</sectiondef>
<location file='std_MapEntry.jnc' line='16' col='11'/>
</compounddef>
</doxygen>
