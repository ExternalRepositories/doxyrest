<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen>
<compounddef kind='struct' id='type_std_error' language='Jancy'>
<compoundname>Error</compoundname>

<sectiondef>
<memberdef kind='variable' id='struct_member_std_error_m_size' readonly='yes'>
<name>m_size</name>
<type><ref refid="typedef_uint32_t">uint32_t</ref></type>
<modifiers>readonly</modifiers>
<detaileddescription>
<para><![CDATA[The full size of error-describing buffer. Should always be ``>= sizeof (std.Error)``.]]></para>
</detaileddescription>
<location file='std_Error.jnc' line='37' col='20'/>
</memberdef>

<memberdef kind='variable' id='struct_member_std_error_m_guid' readonly='yes'>
<name>m_guid</name>
<type><ref refid="type_std_guid">std.Guid</ref></type>
<modifiers>readonly</modifiers>
<detaileddescription>
<para>The ``GUID`` of the error. It tells Jancy runtime how to interpret ``m_code`` and the extra bytes of data following ``std.Error`` header.</para>
</detaileddescription>
<location file='std_Error.jnc' line='43' col='16'/>
</memberdef>

<memberdef kind='variable' id='struct_member_std_error_m_code' readonly='yes'>
<name>m_code</name>
<type><ref refid="typedef_uint32_t">uint32_t</ref></type>
<modifiers>readonly</modifiers>
<detaileddescription>
<para>The numerical code of the error. The actual meaning of this code depends on ``m_guid`` field. It may be ``errno``, or ``NTSTATUS``, or some user-defined code.</para>
</detaileddescription>
<location file='std_Error.jnc' line='49' col='20'/>
</memberdef>

<memberdef kind='property' id='property_std_error_m_description'>
<name>m_description</name>
<type>char const* const property</type>
<argsstring>(std.Error safe const* this)</argsstring>
<detaileddescription>
<para>Creates and returns human-readable description of the error.

Jancy also supports a special formatter ``$!`` which if used inside formatting literal expands into description of the last error:

.. ref-code-block::

	printf ($"cannot open file: $!\n");

The code above is equivalent to:

.. ref-code-block::

	char const* s = `std.getLastError` ().m_description;
	printf ($"cannot open file: $s\n");</para>
</detaileddescription>
<location file='std_Error.jnc' line='68' col='29'/>
</memberdef>

</sectiondef>
<briefdescription><para>This struct is used as a header to an error-describing buffer.</para></briefdescription>
<detaileddescription>
<para>Often times error is completely described by ``std.Error`` struct -- for example, ``errno``, ``NTSTATUS`` or ``WinError``. However, you can store as much information as necessary to fully describe your error. If extra bytes of information are required, they should follow the ``std.Error`` header.</para>
</detaileddescription>
<location file='std_Error.jnc' line='31' col='8'/>
</compounddef>
</doxygen>
