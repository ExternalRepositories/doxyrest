<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen>
<compounddef kind='class' id='type_io_file' language='Jancy'>
<compoundname>File</compoundname>

<sectiondef>
<memberdef kind='function' id='function_io_file_construct'>
<functionkind>construct</functionkind>
<name>construct</name>
<type>void</type>
<argsstring>(io.File safe* this)</argsstring>
<location file='io_File.jnc' line='146' col='2'/>
</memberdef>
<memberdef kind='function' id='function_io_file_destruct'>
<functionkind>destruct</functionkind>
<name>destruct</name>
<type>void</type>
<argsstring>(io.File safe* this)</argsstring>
<location file='io_File.jnc' line='147' col='2'/>
</memberdef>
</sectiondef>

<sectiondef>
<memberdef kind='variable' id='struct_member_io_file_iface_m_isopen' readonly='yes'>
<name>m_isOpen</name>
<type>bool</type>
<modifiers>readonly</modifiers>
<detaileddescription>
<para>Holds the open status for the file, i.e. ``true`` if opened; ``false`` otherwise.</para>
</detaileddescription>
<location file='io_File.jnc' line='128' col='16'/>
</memberdef>

<memberdef kind='property' id='property_io_file_m_size'>
<name>m_size</name>
<type><ref refid="typedef_uint64_t">uint64_t</ref> property</type>
<argsstring>(io.File safe const* this)</argsstring>
<detaileddescription>
<para>This property is used for getting and setting file size.

Reading from this property returns current size of the file; writing to it sets new size [#f3]_.</para>
</detaileddescription>
<location file='io_File.jnc' line='136' col='20'/>
</memberdef>

<memberdef kind='property' id='property_io_file_m_position'>
<name>m_position</name>
<type><ref refid="typedef_uint64_t">uint64_t</ref> property</type>
<argsstring>(io.File safe const* this)</argsstring>
<detaileddescription>
<para>This property is used for getting and setting [#f3]_ current file position, i.e. the offset at which file contents will be accessed by ``read`` and ``write`` methods.

Accessing this property for sequential devices (which do not support access at random-offset) likely results in exception being thrown (unless the underlying OS silently ignores position read/write and does not return any IO error).</para>
</detaileddescription>
<location file='io_File.jnc' line='144' col='20'/>
</memberdef>

<memberdef kind='function' id='function_io_file_open'>
<functionkind>named-function</functionkind>
<name>open</name>
<type>bool errorcode</type>
<argsstring>(io.File safe* this, char const* name, io.FileOpenFlags flags 0)</argsstring>
<param>
<declname>name</declname>
<type>char const*</type>
<array></array>
</param>
<param>
<declname>flags</declname>
<type><ref refid="type_io_fileopenflags">io.FileOpenFlags</ref></type>
<array></array>
<defval>0</defval>
</param>
<detaileddescription>
<para>Opens or creates a file or device.

The function accepts two arguments. The first one, ``name`` specifies the name of the file/device. The second one, ``flags``, can be used to specify open options. Check `io.FileOpenFlags` for the complete list of options.

Returns ``true`` on success. If file or device could not be opened, IO error supplied by operating system is set and then the function returns ``false`` [#f1]_.</para>
</detaileddescription>
<location file='io_File.jnc' line='157' col='17'/>
</memberdef>

<memberdef kind='function' id='function_io_file_close'>
<functionkind>named-function</functionkind>
<name>close</name>
<type>void</type>
<argsstring>(io.File safe* this)</argsstring>
<detaileddescription>
<para>Closes a previously opened file, does nothing if the file is not opened. This function always succeeds.

Sometimes it may be convenient to use *disposable* pattern to ensure timely invokation of ``close`` [#f2]_.</para>
</detaileddescription>
<location file='io_File.jnc' line='168' col='7'/>
</memberdef>

<memberdef kind='alias' id='alias_io_file_dispose'>
<name>dispose</name>
<initializer>= close</initializer>
<detaileddescription>
<para>Effectively makes ``io.File`` a *disposable* class [#f2]_.</para>
</detaileddescription>
<location file='io_File.jnc' line='174' col='8'/>
</memberdef>

<memberdef kind='function' id='function_io_file_read'>
<functionkind>named-function</functionkind>
<name>read</name>
<type><ref refid="typedef_size_t">size_t</ref> errorcode</type>
<argsstring>(io.File safe* this, void* p, size_t size)</argsstring>
<param>
<declname>p</declname>
<type>void*</type>
<array></array>
</param>
<param>
<declname>size</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Attempts to read up to ``size`` bytes from file into the buffer pointed to by ``p``.

Returns the actual amount of bytes read or ``-1`` if error occurs.

If read operation is unsuccessful, IO error supplied by the operating system is set and then the function returns ``-1`` [#f1]_.

If this function is called when there is no incoming data on the opened device, it blocks until either the data arrives, or the file is closed.</para>
</detaileddescription>
<location file='io_File.jnc' line='186' col='19'/>
</memberdef>

<memberdef kind='function' id='function_io_file_write'>
<functionkind>named-function</functionkind>
<name>write</name>
<type><ref refid="typedef_size_t">size_t</ref> errorcode</type>
<argsstring>(io.File safe* this, void const* p, size_t size)</argsstring>
<param>
<declname>p</declname>
<type>void const*</type>
<array></array>
</param>
<param>
<declname>size</declname>
<type><ref refid="typedef_size_t">size_t</ref></type>
<array></array>
</param>
<detaileddescription>
<para>Attempts to write ``size`` bytes from the buffer pointed to by ``p`` into the file.

Returns the actual amount of bytes written on success. If write operation is unsuccessful, IO error supplied by the operating system is set and then the function returns ``-1`` [#f1]_.</para>
</detaileddescription>
<location file='io_File.jnc' line='197' col='19'/>
</memberdef>

</sectiondef>
<sectiondef>
<memberdef kind='footnote'>
<name>f3</name>
<detaileddescription>
<para>|footnote-set-property-fail|</para>
</detaileddescription>
</memberdef>
<memberdef kind='footnote'>
<name>f1</name>
<detaileddescription>
<para>|footnote-errorcode|</para>
</detaileddescription>
</memberdef>
<memberdef kind='footnote'>
<name>f2</name>
<detaileddescription>
<para>|footnote-disposable|</para>
</detaileddescription>
</memberdef>
</sectiondef>
<includes>io_base.jncx</includes>
<includes>io_File.jnc</includes>
<briefdescription><para>This class provides a standard synchronous interface for reading from and writing to files or devices.</para></briefdescription>
<detaileddescription>
<para>All the methods of this class are mapped directly to underlying Operating System API (not to the C-runtime library). A typical sequence of steps when working with a file usually looks like this:

* Open a file with ``open`` method;
* Read from the file using ``read`` method;
* Write to the file using ``write`` method;
* Close the file with ``close`` method.

It's recommended to use disposable pattern when working with local file variables. Whether or not to use exception semantics or a traditional error code depends on what deems to be more convenient in each particular case.

.. rubric:: Sample code:

.. ref-code-block::

	foo (void const* data)
	{
		disposable io.File file;
		file.open ("data.txt");
		file.write (data, dynamic sizeof (data));
		// ...

	catch:
		// handle the error
	} // file will be closed no matter how we leave the function</para>
<para><simplesect kind='see'><para>`io.FileStream`, `io.MappedFile`</para></simplesect></para>
</detaileddescription>
<location file='io_File.jnc' line='122' col='14'/>
</compounddef>
</doxygen>
