<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen>
<compounddef kind='class' id='type_sys_thread' language='Jancy'>
<compoundname>Thread</compoundname>

<sectiondef>
<memberdef kind='function' id='function_sys_thread_construct'>
<functionkind>construct</functionkind>
<name>construct</name>
<type>void</type>
<argsstring>(sys.Thread safe* this)</argsstring>
<location file='sys_Thread.jnc' line='74' col='2'/>
</memberdef>
<memberdef kind='function' id='function_sys_thread_destruct'>
<functionkind>destruct</functionkind>
<name>destruct</name>
<type>void</type>
<argsstring>(sys.Thread safe* this)</argsstring>
<location file='sys_Thread.jnc' line='75' col='2'/>
</memberdef>
</sectiondef>

<sectiondef>
<memberdef kind='variable' id='struct_member_sys_thread_iface_m_threadfunc' prot='protected'>
<name>m_threadFunc</name>
<type>void function*</type>
<argsstring>()</argsstring>
<location file='sys_Thread.jnc' line='66' col='22'/>
</memberdef>

<memberdef kind='variable' id='struct_member_sys_thread_iface_m_threadid' readonly='yes'>
<name>m_threadId</name>
<type><ref refid="typedef_uintptr_t">uintptr_t</ref></type>
<modifiers>readonly</modifiers>
<detaileddescription>
<para>Holds native TID (thread identifier) of the thread controlled by ``sys.Thread`` object. The field is updated in ``start`` method; accessing it when the thread has not been started yet or *closed* yields ``0``.</para>
</detaileddescription>
<location file='sys_Thread.jnc' line='72' col='21'/>
</memberdef>

<memberdef kind='function' id='function_sys_thread_start'>
<functionkind>named-function</functionkind>
<name>start</name>
<type>bool errorcode</type>
<argsstring>(sys.Thread safe* this, void function* func ())</argsstring>
<param>
<declname>func</declname>
<type>void function*</type>
<array>()</array>
</param>
<detaileddescription>
<para>Attempt to start a new thread with a thread function pointed to by ``func`` argument. Pass additional arguments to the thread function using *partial application*.

Returns ``true`` on success. If a new thread could not be started, system error supplied by operating system is set and then the function returns ``false`` [#f1]_.

Calling this method on a non-closed thread fails immediatly.</para>
</detaileddescription>
<location file='sys_Thread.jnc' line='85' col='17'/>
</memberdef>

<memberdef kind='function' id='function_sys_thread_wait'>
<functionkind>named-function</functionkind>
<name>wait</name>
<type>bool</type>
<argsstring>(sys.Thread safe* this, uint_t timeout - 1)</argsstring>
<param>
<declname>timeout</declname>
<type><ref refid="typedef_uint_t">uint_t</ref></type>
<array></array>
<defval>- 1</defval>
</param>
<detaileddescription>
<para>Waits until thread finishes. When it happens, ``wait`` returns ``true``, but the thread remains open, so its TID is not released and can still be accessed using ``m_threadId`` field.

If ``timeout`` parameter is not ``-1`` then it's a wait with a *time limit*. If the thread does not terminate until timeout expires, ``wait`` return ``false``. Timeout is expressed in *milliseconds*.</para>
</detaileddescription>
<location file='sys_Thread.jnc' line='93' col='7'/>
</memberdef>

<memberdef kind='function' id='function_sys_thread_waitandclose'>
<functionkind>named-function</functionkind>
<name>waitAndClose</name>
<type>void</type>
<argsstring>(sys.Thread safe* this, uint_t timeout - 1)</argsstring>
<param>
<declname>timeout</declname>
<type><ref refid="typedef_uint_t">uint_t</ref></type>
<array></array>
<defval>- 1</defval>
</param>
<detaileddescription>
<para>Waits until event thread finishes. When it happens, ``waitAndClose`` closes TID and returns ``true``. Accessing ``m_threadId`` after that will yield ``0``.

If ``timeout`` parameter is not ``-1`` then it's a wait with a *time limit*. If the thread does not terminate until timeout expires, ``wait`` return ``false``. Timeout is expressed in *milliseconds*.</para>
</detaileddescription>
<location file='sys_Thread.jnc' line='101' col='7'/>
</memberdef>

<memberdef kind='function' id='function_sys_thread_terminate'>
<functionkind>named-function</functionkind>
<name>terminate</name>
<type>bool</type>
<argsstring>(sys.Thread safe* this)</argsstring>
<detaileddescription>
<para>Forcefully terminates thread.

Returns ``true`` on success. If the thread could not be terminated, system error supplied by operating system is set and then the function returns ``false`` [#f1]_.

Note that it's not recommended to ever call this function under normal circumstances. The preferred approach should be setting up a normal thread termination infrastructure using `sys.Event` (or `sys.NotificationEvent`).</para>
</detaileddescription>
<location file='sys_Thread.jnc' line='111' col='7'/>
</memberdef>

</sectiondef>
<sectiondef>
<memberdef kind='footnote'>
<name>f1</name>
<detaileddescription>
<para>|footnote-errorcode|</para>
</detaileddescription>
</memberdef>
</sectiondef>
<includes>sys_Thread.jnc</includes>
<briefdescription><para>This class provides standard facilities for creating and managing threads.</para></briefdescription>
<detaileddescription>
<para>Each instance of ``sys.Thread`` class manages a single thread within the program. Unlike the usual approach taken in most implementations of threading frameworks, in Jancy you don't need to subclass ``sys.Thread`` and then override some kind of ``run`` method.

Instead, you just start a new thread directly by passing a *thread function* to ``start`` method. You can pass arbitrary number of parameters to the newly created thread using Jancy feature of *partial application* for function pointers.

After a thread is created, you can wait for its completion with ``wait`` and ``waitAndClose`` methods or forcefully terminate it with ``terminate`` method.

Code sample::

	import "sys_Thread.jnc"

	workerThread (
		int param1,
		int param2
		)
	{
		// ...
	}

	int main ()
	{
		// ...

		sys.Thread thread1;
		sys.Thread thread2;

		thread1.start (workerThread ~(1, 2));
		thread2.start (workerThread ~(3, 4));
	}</para>
<para><simplesect kind='see'><para>`sys.Event`, `sys.NotificationEvent`, `sys.Lock`</para></simplesect></para>
</detaileddescription>
<location file='sys_Thread.jnc' line='64' col='14'/>
</compounddef>
</doxygen>
