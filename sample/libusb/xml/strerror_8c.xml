<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="strerror_8c" kind="file" language="C++">
    <compoundname>strerror.c</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">locale.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">libusbi.h</includes>
    <incdepgraph>
      <node id="54">
        <label>stdlib.h</label>
      </node>
      <node id="55">
        <label>string.h</label>
      </node>
      <node id="51">
        <label>strerror.c</label>
        <link refid="strerror_8c"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>config.h</label>
      </node>
      <node id="53">
        <label>locale.h</label>
      </node>
      <node id="56">
        <label>libusbi.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="strerror_8c_1a7a9e59f095bc99efbfdbff3bd2aa76a1" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t usbi_locale</definition>
        <argsstring></argsstring>
        <name>usbi_locale</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" line="35" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__libusb__misc_1ga611b1f878eda4efa11cf722970380994" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* usbi_locale_supported[]</definition>
        <argsstring>[]</argsstring>
        <name>usbi_locale_supported</name>
        <initializer>= { &quot;en&quot;, &quot;nl&quot;, &quot;fr&quot;, &quot;ru&quot; }</initializer>
        <briefdescription>
<para>How to add a new <ref refid="group__libusb__misc_1gab977153d03d867a8b228a5921edaf457" kindref="member">libusb_strerror()</ref> translation: </para>        </briefdescription>
        <detaileddescription>
<para><orderedlist>
<listitem>
<para>Download the latest <computeroutput>strerror.c</computeroutput> from:<linebreak/>
 <ulink url="https://raw.github.com/libusb/libusb/master/libusb/sterror.c">https://raw.github.com/libusb/libusb/master/libusb/sterror.c</ulink>  </para></listitem>
<listitem>
<para>Open the file in an UTF-8 capable editor  </para></listitem>
<listitem>
<para>Add the 2 letter <ulink url="http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</ulink> code for your locale at the end of <computeroutput>usbi_locale_supported</computeroutput>[]<linebreak/>
 Eg. for Chinese, you would add &quot;zh&quot; so that: <programlisting><codeline><highlight class="normal">...<sp/>usbi_locale_supported[]<sp/>=<sp/>{<sp/>&quot;en&quot;,<sp/>&quot;nl&quot;,<sp/>&quot;fr&quot;<sp/>};</highlight></codeline>
</programlisting> becomes: <programlisting><codeline><highlight class="normal">...<sp/>usbi_locale_supported[]<sp/>=<sp/>{<sp/>&quot;en&quot;,<sp/>&quot;nl&quot;,<sp/>&quot;fr&quot;,<sp/>&quot;zh&quot;<sp/>};</highlight></codeline>
</programlisting>  </para></listitem>
<listitem>
<para>Copy the <computeroutput>{ / * English (en) * / ... }</computeroutput> section and add it at the end of <computeroutput>usbi_localized_errors</computeroutput> <linebreak/>
 Eg. for Chinese, the last section of <computeroutput>usbi_localized_errors</computeroutput> could look like: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>{<sp/>/<sp/>*<sp/>Chinese<sp/>(zh)<sp/>*<sp/>/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Success&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Other<sp/>error&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting>  </para></listitem>
<listitem>
<para>Translate each of the English messages from the section you copied into your language  </para></listitem>
<listitem>
<para>Save the file (in UTF-8 format) and send it to <computeroutput>libusb-devel@lists.sourceforge.net</computeroutput>  </para></listitem>
</orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" line="63" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="strerror_8c_1a1a9cba8cd543c359220d5bd98cd91cd8" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* usbi_localized_errors[ARRAYSIZE(usbi_locale_supported)][LIBUSB_ERROR_COUNT]</definition>
        <argsstring>[ARRAYSIZE(usbi_locale_supported)][LIBUSB_ERROR_COUNT]</argsstring>
        <name>usbi_localized_errors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" line="64" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__libusb__misc_1ga0badebde406e5f1874fb72ec6d1b60f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_setlocale</definition>
        <argsstring>(const char *locale)</argsstring>
        <name>libusb_setlocale</name>
        <param>
          <type>const char *</type>
          <declname>locale</declname>
        </param>
        <briefdescription>
<para>Set the language, and only the language, not the encoding! used for translatable libusb messages. </para>        </briefdescription>
        <detaileddescription>
<para>This takes a locale string in the default setlocale format: lang[-region] or lang[_country_region][.codeset]. Only the lang part of the string is used, and only 2 letter ISO 639-1 codes are accepted for it, such as &quot;de&quot;. The optional region, country_region or codeset parts are ignored. This means that functions which return translatable strings will NOT honor the specified encoding. All strings returned are encoded as UTF-8 strings.</para><para>If <ref refid="group__libusb__misc_1ga0badebde406e5f1874fb72ec6d1b60f4" kindref="member">libusb_setlocale()</ref> is not called, all messages will be in English.</para><para>The following functions return translatable strings: <ref refid="group__libusb__misc_1gab977153d03d867a8b228a5921edaf457" kindref="member">libusb_strerror()</ref>. Note that the libusb log messages controlled through <ref refid="group__libusb__lib_1ga5f8376b7a863a5a8d5b8824feb8a427a" kindref="member">libusb_set_debug()</ref> are not translated, they are always in English.</para><para>For POSIX UTF-8 environments if you want libusb to follow the standard locale settings, call libusb_setlocale(setlocale(LC_MESSAGES, NULL)), after your app has done its locale setup.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>locale</parametername>
</parameternamelist>
<parameterdescription>
<para>locale-string in the form of lang[_country_region][.codeset] or lang[-region], where lang is a 2 letter ISO 639-1 code </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LIBUSB_SUCCESS on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_INVALID_PARAM if the locale doesn&apos;t meet the requirements </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the requested language is not supported </para></simplesect>
<simplesect kind="return"><para>a LIBUSB_ERROR code on other errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" line="158" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" bodystart="158" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__misc_1gab977153d03d867a8b228a5921edaf457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* libusb_strerror</definition>
        <argsstring>(enum libusb_error errcode)</argsstring>
        <name>libusb_strerror</name>
        <param>
          <type>enum <ref refid="group__libusb__misc_1gab2323aa0f04bc22038e7e1740b2f29ef" kindref="member">libusb_error</ref></type>
          <declname>errcode</declname>
        </param>
        <briefdescription>
<para>Returns a constant string with a short description of the given error code, this description is intended for displaying to the end user and will be in the language set by <ref refid="group__libusb__misc_1ga0badebde406e5f1874fb72ec6d1b60f4" kindref="member">libusb_setlocale()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned string is encoded in UTF-8.</para><para>The messages always start with a capital letter and end without any dot. The caller must not free() the returned string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errcode</parametername>
</parameternamelist>
<parameterdescription>
<para>the error code whose description is desired </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a short description of the error code in UTF-8 encoding </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" line="192" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c" bodystart="192" bodyend="202"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/strerror.c"/>
  </compounddef>
</doxygen>
