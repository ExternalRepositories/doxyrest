<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="libusb_caveats" kind="page">
    <compoundname>libusb_caveats</compoundname>
    <title>Caveats</title>
    <detaileddescription>
<sect1 id="libusb_caveats_1devresets">
<title>Device resets</title>
<para>The <ref refid="group__libusb__dev_1gafee9c4638f1713ca5faa867948878111" kindref="member">libusb_reset_device()</ref> function allows you to reset a device. If your program has to call such a function, it should obviously be aware that the reset will cause device state to change (e.g. register values may be reset).</para><para>The problem is that any other program could reset the device your program is working with, at any time. libusb does not offer a mechanism to inform you when this has happened, so if someone else resets your device it will not be clear to your own program why the device state has changed.</para><para>Ultimately, this is a limitation of writing drivers in userspace. Separation from the USB stack in the underlying kernel makes it difficult for the operating system to deliver such notifications to your program. The Linux kernel USB stack allows such reset notifications to be delivered to in-kernel USB drivers, but it is not clear how such notifications could be delivered to second-class drivers that live in userspace.</para></sect1>
<sect1 id="libusb_caveats_1blockonly">
<title>Blocking-only functionality</title>
<para>The functionality listed below is only available through synchronous, blocking functions. There are no asynchronous/non-blocking alternatives, and no clear ways of implementing these.</para><para><itemizedlist>
<listitem><para>Configuration activation (<ref refid="group__libusb__dev_1ga785ddea63a2b9bcb879a614ca4867bed" kindref="member">libusb_set_configuration()</ref>)</para></listitem><listitem><para>Interface/alternate setting activation (<ref refid="group__libusb__dev_1ga4858ad4f0f58fd1dc0afaead1fe6479a" kindref="member">libusb_set_interface_alt_setting()</ref>)</para></listitem><listitem><para>Releasing of interfaces (<ref refid="group__libusb__dev_1ga49b5cb0d894f6807cd1693ef29aecbfa" kindref="member">libusb_release_interface()</ref>)</para></listitem><listitem><para>Clearing of halt/stall condition (<ref refid="group__libusb__dev_1gab794bbc0b055d140f186f5a4d39c0891" kindref="member">libusb_clear_halt()</ref>)</para></listitem><listitem><para>Device resets (<ref refid="group__libusb__dev_1gafee9c4638f1713ca5faa867948878111" kindref="member">libusb_reset_device()</ref>)</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="libusb_caveats_1configsel">
<title>Configuration selection and handling</title>
<para>When libusb presents a device handle to an application, there is a chance that the corresponding device may be in unconfigured state. For devices with multiple configurations, there is also a chance that the configuration currently selected is not the one that the application wants to use.</para><para>The obvious solution is to add a call to <ref refid="group__libusb__dev_1ga785ddea63a2b9bcb879a614ca4867bed" kindref="member">libusb_set_configuration()</ref> early on during your device initialization routines, but there are caveats to be aware of:<orderedlist>
<listitem><para>If the device is already in the desired configuration, calling <ref refid="group__libusb__dev_1ga785ddea63a2b9bcb879a614ca4867bed" kindref="member">libusb_set_configuration()</ref> using the same configuration value will cause a lightweight device reset. This may not be desirable behaviour.</para></listitem><listitem><para>In the case where the desired configuration is already active, libusb may not even be able to perform a lightweight device reset. For example, take my USB keyboard with fingerprint reader: I&apos;m interested in driving the fingerprint reader interface through libusb, but the kernel&apos;s USB-HID driver will almost always have claimed the keyboard interface. Because the kernel has claimed an interface, it is not even possible to perform the lightweight device reset, so <ref refid="group__libusb__dev_1ga785ddea63a2b9bcb879a614ca4867bed" kindref="member">libusb_set_configuration()</ref> will fail. (Luckily the device in question only has a single configuration.)</para></listitem><listitem><para>libusb will be unable to set a configuration if other programs or drivers have claimed interfaces. In particular, this means that kernel drivers must be detached from all the interfaces before <ref refid="group__libusb__dev_1ga785ddea63a2b9bcb879a614ca4867bed" kindref="member">libusb_set_configuration()</ref> may succeed.</para></listitem></orderedlist>
</para><para>One solution to some of the above problems is to consider the currently active configuration. If the configuration we want is already active, then we don&apos;t have to select any configuration: <programlisting><codeline><highlight class="normal">cfg<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">libusb_get_configuration(dev,<sp/>&amp;cfg);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(cfg<sp/>!=<sp/>desired)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>libusb_set_configuration(dev,<sp/>desired);</highlight></codeline>
</programlisting></para><para>This is probably suitable for most scenarios, but is inherently racy: another application or driver may change the selected configuration <emphasis>after</emphasis> the <ref refid="group__libusb__dev_1gae921014b888b105471a31d54c77c1c4d" kindref="member">libusb_get_configuration()</ref> call.</para><para>Even in cases where <ref refid="group__libusb__dev_1ga785ddea63a2b9bcb879a614ca4867bed" kindref="member">libusb_set_configuration()</ref> succeeds, consider that other applications or drivers may change configuration after your application calls <ref refid="group__libusb__dev_1ga785ddea63a2b9bcb879a614ca4867bed" kindref="member">libusb_set_configuration()</ref>.</para><para>One possible way to lock your device into a specific configuration is as follows:<orderedlist>
<listitem><para>Set the desired configuration (or use the logic above to realise that it is already in the desired configuration)</para></listitem><listitem><para>Claim the interface that you wish to use</para></listitem><listitem><para>Check that the currently active configuration is the one that you want to use.</para></listitem></orderedlist>
</para><para>The above method works because once an interface is claimed, no application or driver is able to select another configuration.</para></sect1>
<sect1 id="libusb_caveats_1earlycomp">
<title>Early transfer completion</title>
<para>NOTE: This section is currently Linux-centric. I am not sure if any of these considerations apply to Darwin or other platforms.</para><para>When a transfer completes early (i.e. when less data is received/sent in any one packet than the transfer buffer allows for) then libusb is designed to terminate the transfer immediately, not transferring or receiving any more data unless other transfers have been queued by the user.</para><para>On legacy platforms, libusb is unable to do this in all situations. After the incomplete packet occurs, &quot;surplus&quot; data may be transferred. For recent versions of libusb, this information is kept (the data length of the transfer is updated) and, for device-to-host transfers, any surplus data was added to the buffer. Still, this is not a nice solution because it loses the information about the end of the short packet, and the user probably wanted that surplus data to arrive in the next logical transfer.</para></sect1>
<sect1 id="libusb_caveats_1zlp">
<title>Zero length packets</title>
<para><itemizedlist>
<listitem><para>libusb is able to send a packet of zero length to an endpoint simply by submitting a transfer of zero length.</para></listitem><listitem><para>The <ref refid="group__libusb__asyncio_1gga1fb47dd0f7c209b60a3609ff0c03d56da26b66334b6ec0537c49841ca623d901f" kindref="member">LIBUSB_TRANSFER_ADD_ZERO_PACKET</ref> flag is currently only supported on Linux. </para></listitem></itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
