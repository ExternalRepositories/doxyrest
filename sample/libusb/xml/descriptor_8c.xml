<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="descriptor_8c" kind="file" language="C++">
    <compoundname>descriptor.c</compoundname>
    <includes local="no">config.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">libusbi.h</includes>
    <incdepgraph>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="20">
        <label>stdlib.h</label>
      </node>
      <node id="18">
        <label>errno.h</label>
      </node>
      <node id="16">
        <label>descriptor.c</label>
        <link refid="descriptor_8c"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>string.h</label>
      </node>
      <node id="17">
        <label>config.h</label>
      </node>
      <node id="22">
        <label>libusbi.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="descriptor_8c_1a07de4c6095d369d49f2f7ac7f4c96d22" prot="public" static="no">
        <name>DESC_HEADER_LENGTH</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="31" column="9" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="descriptor_8c_1ac48c092b1871b782d506bfc49c6cf4d3" prot="public" static="no">
        <name>DEVICE_DESC_LENGTH</name>
        <initializer>18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="32" column="9" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="descriptor_8c_1a91021420fa3c641f60a0626861d2aa67" prot="public" static="no">
        <name>CONFIG_DESC_LENGTH</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="33" column="9" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="descriptor_8c_1a719e37a64a66b56374523232519167a9" prot="public" static="no">
        <name>INTERFACE_DESC_LENGTH</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="34" column="9" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="descriptor_8c_1adcbb0a44b5d78b23e0e568e418239567" prot="public" static="no">
        <name>ENDPOINT_DESC_LENGTH</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="35" column="9" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="descriptor_8c_1ab68611bcb4dd92e42ee2b6e0499e68dd" prot="public" static="no">
        <name>ENDPOINT_AUDIO_DESC_LENGTH</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="36" column="9" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="descriptor_8c_1addfd13fdbbf2a3b8f92104cf8a10b3aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usbi_parse_descriptor</definition>
        <argsstring>(const unsigned char *source, const char *descriptor, void *dest, int host_endian)</argsstring>
        <name>usbi_parse_descriptor</name>
        <param>
          <type>const unsigned char *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>descriptor</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>host_endian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="45" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="45" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1ab982790cd1929657582f9f0256cf99b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void clear_endpoint</definition>
        <argsstring>(struct libusb_endpoint_descriptor *endpoint)</argsstring>
        <name>clear_endpoint</name>
        <param>
          <type>struct <ref refid="structlibusb__endpoint__descriptor" kindref="compound">libusb_endpoint_descriptor</ref> *</type>
          <declname>endpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="95" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1ae52b39275ef52f2ea312578d533da437" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_endpoint</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_endpoint_descriptor *endpoint, unsigned char *buffer, int size, int host_endian)</argsstring>
        <name>parse_endpoint</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__endpoint__descriptor" kindref="compound">libusb_endpoint_descriptor</ref> *</type>
          <declname>endpoint</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>host_endian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="100" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="100" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1a952c7da49f522d7d04a0fbc66f280401" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void clear_interface</definition>
        <argsstring>(struct libusb_interface *usb_interface)</argsstring>
        <name>clear_interface</name>
        <param>
          <type>struct <ref refid="structlibusb__interface" kindref="compound">libusb_interface</ref> *</type>
          <declname>usb_interface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="190" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="190" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1aacfcebd958665e6f9499d28c6e494769" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_interface</definition>
        <argsstring>(libusb_context *ctx, struct libusb_interface *usb_interface, unsigned char *buffer, int size, int host_endian)</argsstring>
        <name>parse_interface</name>
        <param>
          <type><ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__interface" kindref="compound">libusb_interface</ref> *</type>
          <declname>usb_interface</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>host_endian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="213" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="213" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1af06aa2dfb0526ee7c552c50ff8462bed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void clear_configuration</definition>
        <argsstring>(struct libusb_config_descriptor *config)</argsstring>
        <name>clear_configuration</name>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="359" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="359" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1a250abb003555f86891442da94aaa0608" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_configuration</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_config_descriptor *config, unsigned char *buffer, int size, int host_endian)</argsstring>
        <name>parse_configuration</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>host_endian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="371" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="371" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1adf7a521ffc059754dbd1caeb470428f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int raw_desc_to_config</definition>
        <argsstring>(struct libusb_context *ctx, unsigned char *buf, int size, int host_endian, struct libusb_config_descriptor **config)</argsstring>
        <name>raw_desc_to_config</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>host_endian</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> **</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="489" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="489" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1a9f876f2216f607a09fb19122dece15a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usbi_device_cache_descriptor</definition>
        <argsstring>(libusb_device *dev)</argsstring>
        <name>usbi_device_cache_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="512" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="512" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga5e9ab08d490a7704cf3a9b0439f16f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_device_descriptor</definition>
        <argsstring>(libusb_device *dev, struct libusb_device_descriptor *desc)</argsstring>
        <name>libusb_get_device_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__device__descriptor" kindref="compound">libusb_device_descriptor</ref> *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Get the USB device descriptor for a given device. </para>        </briefdescription>
        <detaileddescription>
<para>This is a non-blocking function; the device descriptor is cached in memory.</para><para>Note since libusb-1.0.16, <ref refid="group__libusb__misc_1gaabe4bc36a83358685d36a6c853cbb4de" kindref="member">LIBUSB_API_VERSION</ref> &gt;= 0x01000102, this function always succeeds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the descriptor data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or a LIBUSB_ERROR code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="543" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="543" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga425885149172b53b3975a07629c8dab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_active_config_descriptor</definition>
        <argsstring>(libusb_device *dev, struct libusb_config_descriptor **config)</argsstring>
        <name>libusb_get_active_config_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> **</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get the USB configuration descriptor for the currently active configuration. </para>        </briefdescription>
        <detaileddescription>
<para>This is a non-blocking function which does not involve any requests being sent to the device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the USB configuration descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc" kindref="member">libusb_free_config_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the device is in unconfigured state </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532" kindref="member">libusb_get_config_descriptor</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="566" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="566" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_config_descriptor</definition>
        <argsstring>(libusb_device *dev, uint8_t config_index, struct libusb_config_descriptor **config)</argsstring>
        <name>libusb_get_config_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>config_index</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> **</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get a USB configuration descriptor based on its index. </para>        </briefdescription>
        <detaileddescription>
<para>This is a non-blocking function which does not involve any requests being sent to the device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the configuration you wish to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the USB configuration descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc" kindref="member">libusb_free_config_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the configuration does not exist </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1ga425885149172b53b3975a07629c8dab3" kindref="member">libusb_get_active_config_descriptor()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1ga3e7bffc5d08404c4d6491e73b967bf67" kindref="member">libusb_get_config_descriptor_by_value()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="615" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="615" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1ab4e71eafb1ed274e8009764d19bd5a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int usbi_get_config_index_by_value</definition>
        <argsstring>(struct libusb_device *dev, uint8_t bConfigurationValue, int *idx)</argsstring>
        <name>usbi_get_config_index_by_value</name>
        <param>
          <type>struct <ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bConfigurationValue</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="657" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="657" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga3e7bffc5d08404c4d6491e73b967bf67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_config_descriptor_by_value</definition>
        <argsstring>(libusb_device *dev, uint8_t bConfigurationValue, struct libusb_config_descriptor **config)</argsstring>
        <name>libusb_get_config_descriptor_by_value</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga77eedd00d01eb7569b880e861a971c2b" kindref="member">libusb_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bConfigurationValue</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> **</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get a USB configuration descriptor with a specific bConfigurationValue. </para>        </briefdescription>
        <detaileddescription>
<para>This is a non-blocking function which does not involve any requests being sent to the device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>a device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bConfigurationValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the bConfigurationValue of the configuration you wish to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the USB configuration descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc" kindref="member">libusb_free_config_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the configuration does not exist </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1ga425885149172b53b3975a07629c8dab3" kindref="member">libusb_get_active_config_descriptor()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532" kindref="member">libusb_get_config_descriptor()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="699" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="699" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga18d2b08a065857ff7ae4f3f719c115cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_config_descriptor</definition>
        <argsstring>(struct libusb_config_descriptor *config)</argsstring>
        <name>libusb_free_config_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__config__descriptor" kindref="compound">libusb_config_descriptor</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Free a configuration descriptor obtained from <ref refid="group__libusb__desc_1ga425885149172b53b3975a07629c8dab3" kindref="member">libusb_get_active_config_descriptor()</ref> or <ref refid="group__libusb__desc_1gaa635d9aec77de4895dd0896ccf001532" kindref="member">libusb_get_config_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL config parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="730" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="730" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gade95f9708956c3d45d9969e860fc7241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_ss_endpoint_companion_descriptor</definition>
        <argsstring>(struct libusb_context *ctx, const struct libusb_endpoint_descriptor *endpoint, struct libusb_ss_endpoint_companion_descriptor **ep_comp)</argsstring>
        <name>libusb_get_ss_endpoint_companion_descriptor</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const struct <ref refid="structlibusb__endpoint__descriptor" kindref="compound">libusb_endpoint_descriptor</ref> *</type>
          <declname>endpoint</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__ss__endpoint__companion__descriptor" kindref="compound">libusb_ss_endpoint_companion_descriptor</ref> **</type>
          <declname>ep_comp</declname>
        </param>
        <briefdescription>
<para>Get an endpoints superspeed endpoint companion descriptor (if any) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>endpoint descriptor from which to get the superspeed endpoint companion descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ep_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the superspeed endpoint companion descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga52738e36d2c0e6a0607405d783a2c894" kindref="member">libusb_free_ss_endpoint_companion_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the configuration does not exist </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="753" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="753" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga52738e36d2c0e6a0607405d783a2c894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_ss_endpoint_companion_descriptor</definition>
        <argsstring>(struct libusb_ss_endpoint_companion_descriptor *ep_comp)</argsstring>
        <name>libusb_free_ss_endpoint_companion_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__ss__endpoint__companion__descriptor" kindref="compound">libusb_ss_endpoint_companion_descriptor</ref> *</type>
          <declname>ep_comp</declname>
        </param>
        <briefdescription>
<para>Free a superspeed endpoint companion descriptor obtained from <ref refid="group__libusb__desc_1gade95f9708956c3d45d9969e860fc7241" kindref="member">libusb_get_ss_endpoint_companion_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL ep_comp parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the superspeed endpoint companion descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="798" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="798" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="descriptor_8c_1a5bd99eaa15714dfc14bc940e2d2ca613" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_bos</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_bos_descriptor **bos, unsigned char *buffer, int size, int host_endian)</argsstring>
        <name>parse_bos</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__bos__descriptor" kindref="compound">libusb_bos_descriptor</ref> **</type>
          <declname>bos</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>host_endian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="804" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="804" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga68fd9576677c12aa397192916dc49a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_bos_descriptor</definition>
        <argsstring>(libusb_device_handle *dev_handle, struct libusb_bos_descriptor **bos)</argsstring>
        <name>libusb_get_bos_descriptor</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__bos__descriptor" kindref="compound">libusb_bos_descriptor</ref> **</type>
          <declname>bos</declname>
        </param>
        <briefdescription>
<para>Get a Binary Object Store (BOS) descriptor This is a BLOCKING function, which will send requests to the device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle of an open libusb device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bos</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the BOS descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1gac9bff9809a7b8663190dda0455998767" kindref="member">libusb_free_bos_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>LIBUSB_ERROR_NOT_FOUND if the device doesn&apos;t have a BOS descriptor </para></simplesect>
<simplesect kind="return"><para>another LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="894" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="894" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gac9bff9809a7b8663190dda0455998767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_bos_descriptor</definition>
        <argsstring>(struct libusb_bos_descriptor *bos)</argsstring>
        <name>libusb_free_bos_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__bos__descriptor" kindref="compound">libusb_bos_descriptor</ref> *</type>
          <declname>bos</declname>
        </param>
        <briefdescription>
<para>Free a BOS descriptor obtained from <ref refid="group__libusb__desc_1ga68fd9576677c12aa397192916dc49a0b" kindref="member">libusb_get_bos_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL bos parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bos</parametername>
</parameternamelist>
<parameterdescription>
<para>the BOS descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="943" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="943" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gac76954b54b97d90c760716fc048b6555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_usb_2_0_extension_descriptor</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_bos_dev_capability_descriptor *dev_cap, struct libusb_usb_2_0_extension_descriptor **usb_2_0_extension)</argsstring>
        <name>libusb_get_usb_2_0_extension_descriptor</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__bos__dev__capability__descriptor" kindref="compound">libusb_bos_dev_capability_descriptor</ref> *</type>
          <declname>dev_cap</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__usb__2__0__extension__descriptor" kindref="compound">libusb_usb_2_0_extension_descriptor</ref> **</type>
          <declname>usb_2_0_extension</declname>
        </param>
        <briefdescription>
<para>Get an USB 2.0 Extension descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Device Capability descriptor with a bDevCapabilityType of <ref refid="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64ca243b090db95a0fdf7104fbf581724b86" kindref="member">libusb_capability_type::LIBUSB_BT_USB_2_0_EXTENSION</ref> LIBUSB_BT_USB_2_0_EXTENSION </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usb_2_0_extension</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the USB 2.0 Extension descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga5efd69bf490c4359356f5e5bea8dd48c" kindref="member">libusb_free_usb_2_0_extension_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>a LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="968" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="968" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga5efd69bf490c4359356f5e5bea8dd48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_usb_2_0_extension_descriptor</definition>
        <argsstring>(struct libusb_usb_2_0_extension_descriptor *usb_2_0_extension)</argsstring>
        <name>libusb_free_usb_2_0_extension_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__usb__2__0__extension__descriptor" kindref="compound">libusb_usb_2_0_extension_descriptor</ref> *</type>
          <declname>usb_2_0_extension</declname>
        </param>
        <briefdescription>
<para>Free a USB 2.0 Extension descriptor obtained from <ref refid="group__libusb__desc_1gac76954b54b97d90c760716fc048b6555" kindref="member">libusb_get_usb_2_0_extension_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL usb_2_0_extension parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usb_2_0_extension</parametername>
</parameternamelist>
<parameterdescription>
<para>the USB 2.0 Extension descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1007" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1007" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga6f9118c2c4c5a42f9e4040e78af63f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_ss_usb_device_capability_descriptor</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_bos_dev_capability_descriptor *dev_cap, struct libusb_ss_usb_device_capability_descriptor **ss_usb_device_cap)</argsstring>
        <name>libusb_get_ss_usb_device_capability_descriptor</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__bos__dev__capability__descriptor" kindref="compound">libusb_bos_dev_capability_descriptor</ref> *</type>
          <declname>dev_cap</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__ss__usb__device__capability__descriptor" kindref="compound">libusb_ss_usb_device_capability_descriptor</ref> **</type>
          <declname>ss_usb_device_cap</declname>
        </param>
        <briefdescription>
<para>Get a SuperSpeed USB Device Capability descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Device Capability descriptor with a bDevCapabilityType of <ref refid="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64ca2f1ab0d2d1e14d4942c079749b1b6c85" kindref="member">libusb_capability_type::LIBUSB_BT_SS_USB_DEVICE_CAPABILITY</ref> LIBUSB_BT_SS_USB_DEVICE_CAPABILITY </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ss_usb_device_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the SuperSpeed USB Device Capability descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1ga8fbf4e49c3ae0c6b7bc2d540ad9a75fb" kindref="member">libusb_free_ss_usb_device_capability_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>a LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1026" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1026" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga8fbf4e49c3ae0c6b7bc2d540ad9a75fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_ss_usb_device_capability_descriptor</definition>
        <argsstring>(struct libusb_ss_usb_device_capability_descriptor *ss_usb_device_cap)</argsstring>
        <name>libusb_free_ss_usb_device_capability_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__ss__usb__device__capability__descriptor" kindref="compound">libusb_ss_usb_device_capability_descriptor</ref> *</type>
          <declname>ss_usb_device_cap</declname>
        </param>
        <briefdescription>
<para>Free a SuperSpeed USB Device Capability descriptor obtained from <ref refid="group__libusb__desc_1ga6f9118c2c4c5a42f9e4040e78af63f78" kindref="member">libusb_get_ss_usb_device_capability_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL ss_usb_device_cap parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ss_usb_device_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>the USB 2.0 Extension descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1065" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1065" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gabe419223add0c8190a940cc4fae19c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_container_id_descriptor</definition>
        <argsstring>(struct libusb_context *ctx, struct libusb_bos_dev_capability_descriptor *dev_cap, struct libusb_container_id_descriptor **container_id)</argsstring>
        <name>libusb_get_container_id_descriptor</name>
        <param>
          <type>struct <ref refid="group__libusb__lib_1ga4ec088aa7b79c4a9599e39bf36a72833" kindref="member">libusb_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__bos__dev__capability__descriptor" kindref="compound">libusb_bos_dev_capability_descriptor</ref> *</type>
          <declname>dev_cap</declname>
        </param>
        <param>
          <type>struct <ref refid="structlibusb__container__id__descriptor" kindref="compound">libusb_container_id_descriptor</ref> **</type>
          <declname>container_id</declname>
        </param>
        <briefdescription>
<para>Get a Container ID descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to operate on, or NULL for the default context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Device Capability descriptor with a bDevCapabilityType of <ref refid="group__libusb__dev_1gga6ccabbf3b3728ae69608ba83bba4e64cac3c00e8861b4b596ea1f53c505809e5e" kindref="member">libusb_capability_type::LIBUSB_BT_CONTAINER_ID</ref> LIBUSB_BT_CONTAINER_ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>container_id</parametername>
</parameternamelist>
<parameterdescription>
<para>output location for the Container ID descriptor. Only valid if 0 was returned. Must be freed with <ref refid="group__libusb__desc_1gafeb7c49aa9d3a9c4964f397220d8eab4" kindref="member">libusb_free_container_id_descriptor()</ref> after use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para></simplesect>
<simplesect kind="return"><para>a LIBUSB_ERROR code on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1084" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1084" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1gafeb7c49aa9d3a9c4964f397220d8eab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libusb_free_container_id_descriptor</definition>
        <argsstring>(struct libusb_container_id_descriptor *container_id)</argsstring>
        <name>libusb_free_container_id_descriptor</name>
        <param>
          <type>struct <ref refid="structlibusb__container__id__descriptor" kindref="compound">libusb_container_id_descriptor</ref> *</type>
          <declname>container_id</declname>
        </param>
        <briefdescription>
<para>Free a Container ID descriptor obtained from <ref refid="group__libusb__desc_1gabe419223add0c8190a940cc4fae19c7f" kindref="member">libusb_get_container_id_descriptor()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to call this function with a NULL container_id parameter, in which case the function simply returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the USB 2.0 Extension descriptor to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1122" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1122" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="group__libusb__desc_1ga240aac96d92cb9f51e3aea79a4adbf42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libusb_get_string_descriptor_ascii</definition>
        <argsstring>(libusb_device_handle *dev_handle, uint8_t desc_index, unsigned char *data, int length)</argsstring>
        <name>libusb_get_string_descriptor_ascii</name>
        <param>
          <type><ref refid="group__libusb__dev_1ga7df95821d20d27b5597f1d783749d6a4" kindref="member">libusb_device_handle</ref> *</type>
          <declname>dev_handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>desc_index</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Retrieve a string descriptor in C style ASCII. </para>        </briefdescription>
        <detaileddescription>
<para>Wrapper around <ref refid="group__libusb__desc_1ga09103309f98471387561bce0719d88ad" kindref="member">libusb_get_string_descriptor()</ref>. Uses the first language supported by the device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the descriptor to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for ASCII string descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes returned in data, or LIBUSB_ERROR code on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" line="1140" column="1" bodyfile="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c" bodystart="1140" bodyend="1191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/vladimir/Develop/libusb/libusb-1.0.21/libusb/descriptor.c"/>
  </compounddef>
</doxygen>
